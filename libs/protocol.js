var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Input = /** @class */ (function () {
    function Input(param1, reset) {
        if (param1 === void 0) { param1 = null; }
        if (reset === void 0) { reset = true; }
        this.chars = new egret_ByteArray.ByteArray();
        if (param1 != null) {
            this.buffer = param1;
            if (reset)
                this.buffer.position = 0;
        }
        return;
    }
    Object.defineProperty(Input.prototype, "bytesAvailable", {
        get: function () {
            return this.buffer.bytesAvailable;
        },
        enumerable: false,
        configurable: true
    });
    Input.prototype.setBytes = function (param1, reset) {
        if (reset === void 0) { reset = true; }
        this.buffer = param1;
        if (reset)
            this.buffer.position = 0;
    };
    Input.prototype.require = function (param1) {
        if (this.buffer.bytesAvailable >= param1) {
            return this.buffer.bytesAvailable;
        }
        throw new Error();
    };
    Input.prototype.read = function () {
        if (this.buffer.bytesAvailable < 1) {
            return -1;
        }
        return this.buffer.readUnsignedByte() & 255;
    };
    Input.prototype.skip = function (param1) {
        this.buffer.position = this.buffer.position + param1;
        return;
    };
    Input.prototype.readByte = function () {
        this.require(1);
        return this.buffer.readByte();
    };
    Input.prototype.readByteUnsigned = function () {
        this.require(1);
        return this.buffer.readUnsignedByte();
    };
    Input.prototype.readBytes = function (param1) {
        // let _loc_2 = new egret.ByteArray();
        // this._readBytes(_loc_2, 0, param1);
        // return _loc_2;
        throw new Error("readBytes");
    };
    Input.prototype._readBytes = function (param1, param2, param3) {
        this.buffer.readBytes(param1, param2, param3);
        return;
    };
    Input.prototype.readInt = function () {
        this.require(4);
        return (this.buffer.readUnsignedByte() & 255) << 24 | (this.buffer.readUnsignedByte() & 255) << 16 | (this.buffer.readUnsignedByte() & 255) << 8 | this.buffer.readUnsignedByte() & 255;
    };
    Input.prototype.readVarInt = function (param1) {
        if (this.require(1) < 5) {
            return this.readInt_slow(param1);
        }
        var _loc_2 = this.buffer.readUnsignedByte();
        var _loc_3 = _loc_2 & 127;
        if ((_loc_2 & 128) != 0) {
            _loc_2 = this.buffer.readUnsignedByte();
            _loc_3 = _loc_3 | (_loc_2 & 127) << 7;
            if ((_loc_2 & 128) != 0) {
                _loc_2 = this.buffer.readUnsignedByte();
                _loc_3 = _loc_3 | (_loc_2 & 127) << 14;
                if ((_loc_2 & 128) != 0) {
                    _loc_2 = this.buffer.readUnsignedByte();
                    _loc_3 = _loc_3 | (_loc_2 & 127) << 21;
                    if ((_loc_2 & 128) != 0) {
                        _loc_2 = this.buffer.readUnsignedByte();
                        _loc_3 = _loc_3 | (_loc_2 & 127) << 28;
                    }
                }
            }
        }
        return param1 ? (_loc_3) : (_loc_3 >>> 1 ^ -(_loc_3 & 1));
    };
    Input.prototype.readInt_slow = function (param1) {
        var _loc_2 = this.buffer.readUnsignedByte();
        var _loc_3 = _loc_2 & 127;
        if ((_loc_2 & 128) != 0) {
            this.require(1);
            _loc_2 = this.buffer.readUnsignedByte();
            _loc_3 = _loc_3 | (_loc_2 & 127) << 7;
            if ((_loc_2 & 128) != 0) {
                this.require(1);
                _loc_2 = this.buffer.readUnsignedByte();
                _loc_3 = _loc_3 | (_loc_2 & 127) << 14;
                if ((_loc_2 & 128) != 0) {
                    this.require(1);
                    _loc_2 = this.buffer.readUnsignedByte();
                    _loc_3 = _loc_3 | (_loc_2 & 127) << 21;
                    if ((_loc_2 & 128) != 0) {
                        this.require(1);
                        _loc_2 = this.buffer.readUnsignedByte();
                        _loc_3 = _loc_3 | (_loc_2 & 127) << 28;
                    }
                }
            }
        }
        return param1 ? (_loc_3) : (_loc_3 >>> 1 ^ -(_loc_3 & 1));
    };
    Input.prototype.readString = function () {
        var _loc_1 = this.require(1);
        var _loc_2 = this.buffer.readUnsignedByte();
        if ((_loc_2 & 128) == 0) {
            return this.readAscii();
        }
        var _loc_3 = _loc_1 >= 5 ? (this.readUtf8Length(_loc_2)) : (this.readUtf8Length_slow(_loc_2));
        switch (_loc_3) {
            case 0:
                {
                    return null;
                }
            case 1:
                {
                    return "";
                }
            default:
                {
                    break;
                }
        }
        _loc_3 = _loc_3 - 1;
        this.chars.clear();
        this.readUtf8(_loc_3);
        var _loc_4 = this.chars.position;
        this.chars.position = 0;
        return this.chars.readUTFBytes(_loc_4);
    };
    Input.prototype.readUtf8Length = function (param1) {
        var _loc_2 = param1 & 63;
        if ((param1 & 64) != 0) {
            param1 = this.buffer.readUnsignedByte();
            _loc_2 = _loc_2 | (param1 & 127) << 6;
            if ((param1 & 128) != 0) {
                param1 = this.buffer.readUnsignedByte();
                _loc_2 = _loc_2 | (param1 & 127) << 13;
                if ((param1 & 128) != 0) {
                    param1 = this.buffer.readUnsignedByte();
                    _loc_2 = _loc_2 | (param1 & 127) << 20;
                    if ((param1 & 128) != 0) {
                        param1 = this.buffer.readUnsignedByte();
                        _loc_2 = _loc_2 | (param1 & 127) << 27;
                    }
                }
            }
        }
        return _loc_2;
    };
    Input.prototype.readUtf8Length_slow = function (param1) {
        var _loc_2 = param1 & 63;
        if ((param1 & 64) != 0) {
            this.require(1);
            param1 = this.buffer.readUnsignedByte();
            _loc_2 = _loc_2 | (param1 & 127) << 6;
            if ((param1 & 128) != 0) {
                this.require(1);
                param1 = this.buffer.readUnsignedByte();
                _loc_2 = _loc_2 | (param1 & 127) << 13;
                if ((param1 & 128) != 0) {
                    this.require(1);
                    param1 = this.buffer.readUnsignedByte();
                    _loc_2 = _loc_2 | (param1 & 127) << 20;
                    if ((param1 & 128) != 0) {
                        this.require(1);
                        param1 = this.buffer.readUnsignedByte();
                        _loc_2 = _loc_2 | (param1 & 127) << 27;
                    }
                }
            }
        }
        return _loc_2;
    };
    Input.prototype.readUtf8 = function (param1) {
        var _loc_4 = 0;
        var _loc_2 = 0;
        var _loc_3 = Math.min(this.require(1), param1);
        while (_loc_2 < _loc_3) {
            _loc_4 = this.buffer.readByte();
            if (_loc_4 < 0) {
                var _loc_5 = this.buffer;
                var _loc_6 = this.buffer.position - 1;
                _loc_5.position = _loc_6;
                break;
            }
            _loc_2 = _loc_2 + 1;
            this.chars.writeByte(_loc_4);
        }
        if (_loc_2 < param1) {
            this.readUtf8_slow(param1, _loc_2);
        }
        return;
    };
    Input.prototype.readUtf8_slow = function (param1, param2) {
        var _loc_5 = 0;
        var _loc_3 = 0;
        var _loc_4 = this.buffer.position;
        while (param2 < param1) {
            _loc_5 = this.buffer.readByte() & 255;
            switch (_loc_5 >> 4) {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                    {
                        this.chars.writeByte(_loc_5);
                        break;
                    }
                case 12:
                case 13:
                    {
                        this.chars.writeByte(_loc_5);
                        this.chars.writeByte(this.buffer.readByte());
                        break;
                    }
                case 14:
                    {
                        this.chars.writeByte(_loc_5);
                        this.chars.writeByte(this.buffer.readByte());
                        this.chars.writeByte(this.buffer.readByte());
                        break;
                    }
                default:
                    {
                        break;
                    }
            }
            param2 = param2 + 1;
        }
        return;
    };
    Input.prototype.readAscii = function () {
        var _loc_5 = 0;
        var _loc_1 = this.buffer.position;
        var _loc_2 = this.buffer.position;
        var _loc_3 = _loc_2 - 1;
        var _loc_4 = this.buffer.length;
        do {
            if (_loc_2 == _loc_4) {
                this.buffer.position = _loc_1 - 1;
                return this.readAscii_slow();
            }
            _loc_5 = this.buffer.readUnsignedByte();
            _loc_2 = _loc_2 + 1;
        } while ((_loc_5 & 128) == 0);
        this.buffer.position = _loc_2 - 1;
        var temp = this.buffer.readByte() & 127;
        this.buffer.position = _loc_2 - 1;
        this.buffer.writeByte(temp);
        // this.buffer[(_loc_2 - 1)] = this.buffer[(_loc_2 - 1)] & 127;
        this.buffer.position = _loc_1 - 1;
        var _loc_6 = this.getStringFromDB(this.buffer, _loc_3, _loc_2 - _loc_3);
        var tempPosition = this.buffer.position;
        this.buffer.position = _loc_2 - 1;
        temp = this.buffer.readByte() | 128;
        this.buffer.position = _loc_2 - 1;
        this.buffer.writeByte(temp);
        this.buffer.position = tempPosition;
        // this.buffer[(_loc_2 - 1)] = this.buffer[(_loc_2 - 1)] | 128;
        return _loc_6;
    };
    Input.prototype.getStringFromDB = function (buffer, start, length) {
        var outstr = "";
        var result = [];
        for (var n = start; n < start + length; n++) {
            result.push(String.fromCharCode(buffer.readUnsignedByte()));
            // outstr += String.fromCharCode(buffer.readUnsignedByte());
        }
        return result.join("");
    };
    Input.prototype.readAscii_slow = function () {
        throw new Error("数据流中有不支持的字符串解析");
    };
    Input.prototype.readFloat = function () {
        return this.buffer.readFloat();
    };
    Input.prototype.readFloat2 = function (param1, param2) {
        return this.readInt_slow(param2) / param1;
    };
    Input.prototype.readShort = function () {
        return this.buffer.readShort();
    };
    Input.prototype.readShortUnsigned = function () {
        return this.buffer.readUnsignedShort();
    };
    Input.prototype.readLong = function () {
        var _loc_1 = this.buffer.readUnsignedByte() << 24;
        _loc_1 = _loc_1 | this.buffer.readUnsignedByte() << 16;
        _loc_1 = _loc_1 | this.buffer.readUnsignedByte() << 8;
        _loc_1 = _loc_1 | this.buffer.readUnsignedByte();
        var _loc_2 = this.buffer.readUnsignedByte() << 24;
        _loc_2 = _loc_2 | this.buffer.readUnsignedByte() << 16;
        _loc_2 = _loc_2 | this.buffer.readUnsignedByte() << 8;
        _loc_2 = _loc_2 | this.buffer.readUnsignedByte();
        return Long.create(_loc_1, _loc_2);
    };
    // public readVarLong(param1:boolean) : Long
    // {
    // 	var _loc_6:number = 0;
    // 	var _loc_2:number = this.buffer.readUnsignedByte();
    // 	var _loc_3:number = _loc_2 & 127;
    // 	var _loc_4:uint = 0;
    // 	if ((_loc_2 & 128) != 0)
    // 	{
    // 		_loc_2 = this.buffer.readUnsignedByte();
    // 		_loc_3 = _loc_3 | (_loc_2 & 127) << 7;
    // 		if ((_loc_2 & 128) != 0)
    // 		{
    // 			_loc_2 = this.buffer.readUnsignedByte();
    // 			_loc_3 = _loc_3 | (_loc_2 & 127) << 14;
    // 			if ((_loc_2 & 128) != 0)
    // 			{
    // 				_loc_2 = this.buffer.readUnsignedByte();
    // 				_loc_3 = _loc_3 | (_loc_2 & 127) << 21;
    // 				if ((_loc_2 & 128) != 0)
    // 				{
    // 					_loc_2 = this.buffer.readUnsignedByte();
    // 					_loc_6 = _loc_2 & 127;
    // 					_loc_4 = 0 << _loc_6 | _loc_6 >>> 4 | _loc_4;
    // 					_loc_3 = _loc_3 | _loc_6 << 28;
    // 					if ((_loc_2 & 128) != 0)
    // 					{
    // 						_loc_2 = this.buffer.readUnsignedByte();
    // 						_loc_4 = _loc_4 | (_loc_2 & 127) << 3;
    // 						if ((_loc_2 & 128) != 0)
    // 						{
    // 							_loc_2 = this.buffer.readUnsignedByte();
    // 							_loc_4 = _loc_4 | (_loc_2 & 127) << 10;
    // 							if ((_loc_2 & 128) != 0)
    // 							{
    // 								_loc_2 = this.buffer.readUnsignedByte();
    // 								_loc_4 = _loc_4 | (_loc_2 & 127) << 17;
    // 								if ((_loc_2 & 128) != 0)
    // 								{
    // 									_loc_2 = this.buffer.readByte();
    // 									_loc_4 = _loc_4 | _loc_2 << 24;
    // 								}
    // 							}
    // 						}
    // 					}
    // 				}
    // 			}
    // 		}
    // 	}
    // 	var _loc_5:number = LongUtils.create(_loc_4, _loc_3);
    // 	if (!param1)
    // 	{
    // 		_loc_5.optimizePositive();
    // 	}
    // 	return _loc_5;
    // }
    Input.prototype.readBoolean = function () {
        return this.buffer.readUnsignedByte() == 1;
    };
    Input.prototype.readChar = function () {
        return this.buffer.readUnsignedShort();
    };
    Input.prototype.readDouble = function () {
        return this.buffer.readDouble();
    };
    Input.prototype.readVarInts = function (param1, param2) {
        var _loc_3 = new Array();
        var _loc_4 = 0;
        while (_loc_4 < param1) {
            _loc_3[_loc_4] = this.readVarInt(param2);
            _loc_4 = _loc_4 + 1;
        }
        return _loc_3;
    };
    // public readVarLongs(param1:number, param2:boolean) : Array<Long>
    // {
    // 	var _loc_3:Array<Long> = new Array<Long>();
    // 	var _loc_4:number = 0;
    // 	while (_loc_4 < param1)
    // 	{
    // 		_loc_3[_loc_4] = this.readVarLong(param2);
    // 		_loc_4 = _loc_4 + 1;
    // 	}
    // 	return _loc_3;
    // }
    Input.prototype.readInts = function (param1) {
        var _loc_2 = new Array();
        var _loc_3 = 0;
        while (_loc_3 < param1) {
            _loc_2[_loc_3] = this.readInt();
            _loc_3 = _loc_3 + 1;
        }
        return _loc_2;
    };
    Input.prototype.readLongs = function (param1) {
        var _loc_2 = new Array();
        var _loc_3 = 0;
        while (_loc_3 < param1) {
            _loc_2[_loc_3] = this.readLong();
            _loc_3 = _loc_3 + 1;
        }
        return _loc_2;
    };
    Input.prototype.readFloats = function (param1) {
        var _loc_2 = new Array();
        var _loc_3 = 0;
        while (_loc_3 < param1) {
            _loc_2[_loc_3] = this.readFloat();
            _loc_3 = _loc_3 + 1;
        }
        return _loc_2;
    };
    Input.prototype.readShorts = function (param1) {
        var _loc_2 = new Array();
        var _loc_3 = 0;
        while (_loc_3 < param1) {
            _loc_2[_loc_3] = this.readShort();
            _loc_3 = _loc_3 + 1;
        }
        return _loc_2;
    };
    Input.prototype.readChars = function (param1) {
        var _loc_2 = new Array();
        var _loc_3 = 0;
        while (_loc_3 < param1) {
            _loc_2[_loc_3] = this.readChar();
            _loc_3 = _loc_3 + 1;
        }
        return _loc_2;
    };
    Input.prototype.readDoubles = function (param1) {
        var _loc_2 = new Array();
        var _loc_3 = 0;
        while (_loc_3 < param1) {
            _loc_2[_loc_3] = this.readDouble();
            _loc_3 = _loc_3 + 1;
        }
        return _loc_2;
    };
    return Input;
}());
var Long = /** @class */ (function () {
    function Long(high, low) {
        this._low = low;
        this._high = high;
    }
    Long.create = function (high, low) {
        return new Long(high, low);
    };
    Long.createFromStr = function (str) {
        var temp = str.split("_");
        var high = parseInt(temp[1]);
        var low = parseInt(temp[0]);
        return new Long(high, low);
    };
    Long.prototype.toString = function () {
        if (this._string == undefined)
            this._string = this._low + "_" + this._high;
        return this._string;
    };
    Long.prototype.setHigh = function (high) {
        this._high = high;
    };
    Long.prototype.getHigh = function () {
        return this._high;
    };
    Long.prototype.setLow = function (low) {
        this._low = low;
    };
    Long.prototype.getLow = function () {
        return this._low;
    };
    Long.prototype.equals = function (long) {
        if (long == null) {
            if (this.isZero())
                return true;
            else
                return false;
        }
        return this._low == long.getLow() && this._high == long.getHigh();
    };
    Long.prototype.isZero = function () {
        return this._high == 0 && this._low == 0;
    };
    Long.readLong = function (input) {
        var _loc_1 = input.readUnsignedByte() << 24;
        _loc_1 = _loc_1 | input.readUnsignedByte() << 16;
        _loc_1 = _loc_1 | input.readUnsignedByte() << 8;
        _loc_1 = _loc_1 | input.readUnsignedByte();
        var _loc_2 = input.readUnsignedByte() << 24;
        _loc_2 = _loc_2 | input.readUnsignedByte() << 16;
        _loc_2 = _loc_2 | input.readUnsignedByte() << 8;
        _loc_2 = _loc_2 | input.readUnsignedByte();
        return new Long(_loc_1, _loc_2);
    };
    Long.writeLong = function (value, output) {
        if (value == null)
            value = Long.Zero;
        output.writeByte(value.getHigh() >>> 24);
        output.writeByte(value.getHigh() >>> 16);
        output.writeByte(value.getHigh() >>> 8);
        output.writeByte(value.getHigh());
        output.writeByte(value.getLow() >>> 24);
        output.writeByte(value.getLow() >>> 16);
        output.writeByte(value.getLow() >>> 8);
        output.writeByte(value.getLow());
    };
    Long.prototype.toNumber = function () {
        // let low: number = this._low >= 0 ? this._low : 4294967296 + this._low;
        // let high: number = this._high >= 0 ? this._high : 4294967296 + this._high;
        // let _loc_1: number = high & 2147483648;
        // if (_loc_1 > 0)//负数
        // {
        // 	return ((-(4294967296 - high)) * 4294967296) - low;
        // }
        // return (high * 4294967296) + low;
        return this._high * (1 << 16) * (1 << 16) + (this._low >>> 0);
    };
    Long.createLongFromNumber = function (value) {
        var high = 0;
        var low = 0;
        // let input:egret.ByteArray = new egret.ByteArray();
        // let temp:number = value>>>56;
        // input.writeUnsignedInt(temp);
        // temp = temp>>>48;
        // input.writeUnsignedInt(temp);
        // temp = temp>>>40;
        // input.writeUnsignedInt(temp);
        // temp = temp>>>32;
        // input.writeUnsignedInt(temp);
        // temp = temp>>>24;
        // input.writeUnsignedInt(temp);
        // temp = temp>>>16;
        // input.writeUnsignedInt(temp);
        // temp = temp>>>8;
        // input.writeUnsignedInt(temp);
        // return Long.readLong(input); 
        if (value > 0) {
            high = (value - (value >>> 32)) / 4294967296;
            low = value >>> 32;
        }
        else if (value < 0) {
            low = (value >> 32) - 4294967296;
            high = (value + low) / 4294967296 + 4294967296;
        }
        // console.log(low+" "+high);
        return Long.create(high, low);
    };
    Long.prototype.toLongString = function () {
        var uint8Arr = new Uint8Array(8);
        var viewer = new DataView(uint8Arr.buffer);
        viewer.setInt32(0, this._high);
        viewer.setInt32(4, this._low);
        var binary = [];
        for (var i = 0; i < 8; i++) {
            binary.push(uint8Arr[i]);
        }
        // to decimal array
        var decimals = this.binaryTransfer(binary, 0x100, 10);
        // to string
        return decimals.join('');
    };
    /**
     * 进制转换
     * @param digits 指定进制【fromRadix】的数组，高位在前
     * @param fromRadix
     * @param toRadix
     */
    Long.prototype.binaryTransfer = function (digits, fromRadix, toRadix) {
        var length = digits.length;
        //唉！难以描述，自行理解
        for (var i = 0; i < length - 1; i++) {
            for (var j = 0; j < length - 1 - i; j++) {
                var curValue = digits[j];
                //预防结果超限[number,0xFFFFFFFFFFFFF]，不能让radix过大
                curValue *= fromRadix;
                var toNext = curValue % toRadix;
                curValue = ((curValue - toNext) / toRadix);
                digits[j] = curValue;
                digits[j + 1] += toNext;
            }
        }
        //翻转数组成从低到高
        digits = digits.reverse();
        //数组每个元素限制在范围内[0-toRadix)，从低位开始，超过限制的部分在相邻高位上加上
        this.toRadixArrStd(digits, toRadix);
        return digits.reverse();
    };
    /**
     * 进制数组标准化
     * @param digits {@初数组}
     * @param radix 进制
     */
    Long.prototype.toRadixArrStd = function (digits, radix) {
        var length = digits.length;
        //数组每个元素限制在范围内[0-radix)，从低位开始，超过限制的部分在相邻高位上加上
        var extraValue = 0;
        for (var i = 0; i < length; i++) {
            var curValue = digits[i] + extraValue;
            var valueStd = curValue % radix;
            extraValue = (curValue - valueStd) / radix;
            digits[i] = valueStd;
        }
        if (extraValue) {
            do {
                var putValue = extraValue % radix;
                extraValue = (extraValue - putValue) / radix;
                //额外+
                digits.push(putValue);
            } while (extraValue > 0);
        }
        else {
            this.removeBackZero(digits, 1);
        }
        return digits;
    };
    Long.prototype.removeBackZero = function (arr, preserve) {
        if (preserve === void 0) { preserve = 1; }
        var length = arr.length;
        while (length > preserve && arr[length - 1] == 0) {
            arr.pop();
            length--;
        }
    };
    Long.Zero = new Long(0, 0);
    return Long;
}());
var ModelBase = /** @class */ (function () {
    function ModelBase() {
        this.input = new Input(null);
        this._observers = [];
    }
    ModelBase.prototype.init = function (group) {
        this._group = group;
    };
    ModelBase.prototype.getO = function () {
        if (!this._outPut)
            this._outPut = new Output();
        else
            this._outPut.clear();
        return this._outPut;
    };
    ModelBase.prototype.send = function (cmd, output, system) {
        if (system === void 0) { system = false; }
        var ba = null;
        if (output) {
            ba = output.getBuffer();
        }
        this.sendMessage(cmd, ba, system);
    };
    ModelBase.prototype.sendMessage = function (cmd, output, system) {
        if (system === void 0) { system = false; }
        window['gamesocket'].sendData(cmd, output);
    };
    ModelBase.prototype.dealBufferMessage = function (cmd, content) {
        this.input.setBytes(content, false);
    };
    ModelBase.prototype.addObserver = function (observer) {
        if (this._observers.indexOf(observer) == -1) {
            this._observers.push(observer);
        }
    };
    ModelBase.prototype.removeObserver = function (observer) {
        var index = this._observers.indexOf(observer);
        if (index > -1) {
            this._observers.splice(index, 1);
        }
    };
    ModelBase.prototype.reg = function (cmd) {
        window['gamesocket'].handler.registerHandler(cmd, this);
    };
    ModelBase.prototype.sendNotif = function (cmd, data) {
        for (var _i = 0, _a = this._observers; _i < _a.length; _i++) {
            var ob = _a[_i];
            ob.update(cmd, data);
        }
    };
    return ModelBase;
}());
var Output = /** @class */ (function () {
    function Output() {
        this.buffer = new egret_ByteArray.ByteArray();
    }
    Output.prototype.clear = function () {
        this.buffer.clear();
    };
    Output.prototype.getBuffer = function () {
        return this.buffer;
    };
    Output.prototype.write = function (param1) {
        this.buffer.writeByte(param1);
        return;
    };
    Output.prototype.writeBytes = function (param1, param2, param3) {
        this.buffer.writeBytes(param1, param2, param3);
        return;
    };
    Output.prototype.writeByte = function (param1) {
        this.buffer.writeByte(param1);
        return;
    };
    Output.prototype.writeInt = function (param1) {
        this.buffer.writeInt(param1);
        return;
    };
    Output.prototype.writeVarInt = function (param1, param2) {
        if (!param2) {
            param1 = param1 << 1 ^ param1 >> 31;
        }
        if (param1 >>> 7 == 0) {
            this.buffer.writeByte(param1 & 255);
            return 1;
        }
        if (param1 >>> 14 == 0) {
            this.buffer.writeByte((param1 & 127 | 128) & 255);
            this.buffer.writeByte(param1 >>> 7 & 255);
            return 2;
        }
        if (param1 >>> 21 == 0) {
            this.buffer.writeByte((param1 & 127 | 128) & 255);
            this.buffer.writeByte((param1 >>> 7 | 128) & 255);
            this.buffer.writeByte(param1 >>> 14 & 255);
            return 3;
        }
        if (param1 >>> 28 == 0) {
            this.buffer.writeByte((param1 & 127 | 128) & 255);
            this.buffer.writeByte((param1 >>> 7 | 128) & 255);
            this.buffer.writeByte((param1 >>> 14 | 128) & 255);
            this.buffer.writeByte(param1 >>> 21 & 255);
            return 4;
        }
        this.buffer.writeByte((param1 & 127 | 128) & 255);
        this.buffer.writeByte((param1 >>> 7 | 128) & 255);
        this.buffer.writeByte((param1 >>> 14 | 128) & 255);
        this.buffer.writeByte((param1 >>> 21 | 128) & 255);
        this.buffer.writeByte(param1 >>> 28 & 255);
        return 5;
    };
    Output.prototype.writeLong = function (param1) {
        if (param1 == null)
            param1 = Long.Zero;
        this.buffer.writeByte(param1.getHigh() >>> 24);
        this.buffer.writeByte(param1.getHigh() >>> 16);
        this.buffer.writeByte(param1.getHigh() >>> 8);
        this.buffer.writeByte(param1.getHigh());
        this.buffer.writeByte(param1.getLow() >>> 24);
        this.buffer.writeByte(param1.getLow() >>> 16);
        this.buffer.writeByte(param1.getLow() >>> 8);
        this.buffer.writeByte(param1.getLow());
        return;
    };
    Output.prototype.writeString = function (param1) {
        var _loc_4 = 0;
        var _loc_5 = 0;
        var _loc_6 = 0;
        var _loc_7 = 0;
        if (param1 == null) {
            this.writeByte(128);
            return;
        }
        var _loc_2 = param1.length;
        if (_loc_2 == 0) {
            this.writeByte(1 | 128);
            return;
        }
        var _loc_3 = false;
        if (_loc_2 > 1 && _loc_2 < 64) {
            _loc_3 = true;
            _loc_4 = 0;
            while (_loc_4 < _loc_2) {
                _loc_5 = param1.charCodeAt(_loc_4);
                if (_loc_5 > 127) {
                    _loc_3 = false;
                    break;
                }
                _loc_4 = _loc_4 + 1;
            }
        }
        if (_loc_3) {
            this.buffer.writeUTFBytes(param1);
            this.buffer.position = this.buffer.position - 1;
            var temp = this.buffer.readByte() | 128;
            this.buffer.position = this.buffer.position - 1;
            this.buffer.writeByte(temp);
            // this.buffer[(this.buffer.position - 1)] = this.buffer[(this.buffer.position - 1)] | 128;
        }
        else {
            this.writeUtf8Length((_loc_2 + 1));
            _loc_6 = 0;
            _loc_7 = this.buffer.position;
            while (_loc_6 < _loc_2) {
                _loc_5 = param1.charCodeAt(_loc_6);
                if (_loc_5 > 127) {
                    break;
                }
                this.buffer.writeByte(_loc_5 & 255);
                _loc_7 = _loc_7 + 1;
                _loc_6 = _loc_6 + 1;
            }
            this.buffer.position = _loc_7;
            if (_loc_6 < _loc_2) {
                this.writestring_slow(param1, _loc_2, _loc_6);
            }
        }
        return;
    };
    Output.prototype.writeAscii = function (param1) {
        if (param1 == null) {
            this.writeByte(128);
            return;
        }
        var _loc_2 = param1.length;
        switch (_loc_2) {
            case 0:
                {
                    this.writeByte(1 | 128);
                    return;
                }
            case 1:
                {
                    this.writeByte(2 | 128);
                    this.writeByte(param1.charCodeAt(0));
                    return;
                }
            default:
                {
                    break;
                }
        }
        this.buffer.writeUTF(param1);
        this.buffer.position = this.buffer.position - 1;
        var temp = this.buffer.readByte() | 128;
        this.buffer.position = this.buffer.position - 1;
        this.buffer.writeByte(temp);
        // this.buffer[(this.buffer.position - 1)] = this.buffer[(this.buffer.position - 1)] | 128;
        return;
    };
    Output.prototype.writeUtf8Length = function (param1) {
        if (param1 >>> 6 == 0) {
            this.buffer.writeByte((param1 | 128) & 255);
        }
        else if (param1 >>> 13 == 0) {
            this.buffer.writeByte((param1 | 64 | 128) & 255);
            this.buffer.writeByte(param1 >>> 6 & 255);
        }
        else if (param1 >>> 20 == 0) {
            this.buffer.writeByte((param1 | 64 | 128) & 255);
            this.buffer.writeByte((param1 >>> 6 | 128) & 255);
            this.buffer.writeByte(param1 >>> 13 & 255);
        }
        else if (param1 >>> 27 == 0) {
            this.buffer.writeByte((param1 | 64 | 128) & 255);
            this.buffer.writeByte((param1 >>> 6 | 128) & 255);
            this.buffer.writeByte((param1 >>> 13 | 128) & 255);
            this.buffer.writeByte(param1 >>> 20 & 255);
        }
        else {
            this.buffer.writeByte((param1 | 64 | 128) & 255);
            this.buffer.writeByte((param1 >>> 6 | 128) & 255);
            this.buffer.writeByte((param1 >>> 13 | 128) & 255);
            this.buffer.writeByte((param1 >>> 20 | 128) & 255);
            this.buffer.writeByte(param1 >>> 27 & 255);
        }
        return;
    };
    Output.prototype.writestring_slow = function (param1, param2, param3) {
        var _loc_4 = 0;
        while (param3 < param2) {
            _loc_4 = param1.charCodeAt(param3);
            if (_loc_4 <= 127) {
                this.buffer.writeByte(_loc_4 & 255);
            }
            else if (_loc_4 > 2047) {
                this.buffer.writeByte((224 | _loc_4 >> 12 & 15) & 255);
                this.buffer.writeByte((128 | _loc_4 >> 6 & 63) & 255);
                this.buffer.writeByte((128 | _loc_4 & 63) & 255);
            }
            else {
                this.buffer.writeByte((192 | _loc_4 >> 6 & 31) & 255);
                this.buffer.writeByte((128 | _loc_4 & 63) & 255);
            }
            param3 = param3 + 1;
        }
        return;
    };
    Output.prototype.writeFloat = function (param1) {
        this.buffer.writeFloat(param1);
        return;
    };
    Output.prototype.writeFloat2 = function (param1, param2, param3) {
        this.writeVarInt(param1 * param2, param3);
        return;
    };
    Output.prototype.writeShort = function (param1) {
        this.buffer.writeShort(param1);
        return;
    };
    Output.prototype.writeBoolean = function (param1) {
        this.buffer.writeBoolean(param1);
        return;
    };
    Output.prototype.writeChar = function (param1) {
        this.buffer.writeShort(param1);
        return;
    };
    Output.prototype.writeDouble = function (param1) {
        this.buffer.writeDouble(param1);
        return;
    };
    Output.prototype.writeVarInts = function (param1, param2) {
        var _loc_3 = 0;
        var _loc_4 = param1.length;
        while (_loc_3 < _loc_4) {
            this.writeVarInt(param1[_loc_3], param2);
            _loc_3 = _loc_3 + 1;
        }
        return;
    };
    Output.prototype.writeInts = function (param1) {
        var _loc_2 = 0;
        var _loc_3 = param1.length;
        while (_loc_2 < _loc_3) {
            this.buffer.writeInt(param1[_loc_2]);
            _loc_2 = _loc_2 + 1;
        }
        return;
    };
    Output.prototype.writeFloats = function (param1) {
        var _loc_2 = 0;
        var _loc_3 = param1.length;
        while (_loc_2 < _loc_3) {
            this.writeFloat(param1[_loc_2]);
            _loc_2 = _loc_2 + 1;
        }
        return;
    };
    Output.prototype.writeShorts = function (param1) {
        var _loc_2 = 0;
        var _loc_3 = param1.length;
        while (_loc_2 < _loc_3) {
            this.writeShort(param1[_loc_2]);
            _loc_2 = _loc_2 + 1;
        }
        return;
    };
    Output.prototype.writeChars = function (param1) {
        var _loc_2 = 0;
        var _loc_3 = param1.length;
        while (_loc_2 < _loc_3) {
            this.writeChar(param1[_loc_2]);
            _loc_2 = _loc_2 + 1;
        }
        return;
    };
    Output.prototype.writeDoubles = function (param1) {
        var _loc_2 = 0;
        var _loc_3 = param1.length;
        while (_loc_2 < _loc_3) {
            this.writeDouble(param1[_loc_2]);
            _loc_2 = _loc_2 + 1;
        }
        return;
    };
    return Output;
}());
var egret_ByteArray;
(function (egret_ByteArray) {
    /**
     * The Endian class contains values that denote the byte order used to represent multibyte numbers.
     * The byte order is either bigEndian (most significant byte first) or littleEndian (least significant byte first).
     * @version Egret 2.4
     * @platform Web,Native
     * @language en_US
     */
    /**
     * Endian 类中包含一些值，它们表示用于表示多字节数字的字节顺序。
     * 字节顺序为 bigEndian（最高有效字节位于最前）或 littleEndian（最低有效字节位于最前）。
     * @version Egret 2.4
     * @platform Web,Native
     * @language zh_CN
     */
    var Endian = /** @class */ (function () {
        function Endian() {
        }
        /**
         * Indicates the least significant byte of the multibyte number appears first in the sequence of bytes.
         * The hexadecimal number 0x12345678 has 4 bytes (2 hexadecimal digits per byte). The most significant byte is 0x12. The least significant byte is 0x78. (For the equivalent decimal number, 305419896, the most significant digit is 3, and the least significant digit is 6).
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 表示多字节数字的最低有效字节位于字节序列的最前面。
         * 十六进制数字 0x12345678 包含 4 个字节（每个字节包含 2 个十六进制数字）。最高有效字节为 0x12。最低有效字节为 0x78。（对于等效的十进制数字 305419896，最高有效数字是 3，最低有效数字是 6）。
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Endian.LITTLE_ENDIAN = "littleEndian";
        /**
         * Indicates the most significant byte of the multibyte number appears first in the sequence of bytes.
         * The hexadecimal number 0x12345678 has 4 bytes (2 hexadecimal digits per byte).  The most significant byte is 0x12. The least significant byte is 0x78. (For the equivalent decimal number, 305419896, the most significant digit is 3, and the least significant digit is 6).
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 表示多字节数字的最高有效字节位于字节序列的最前面。
         * 十六进制数字 0x12345678 包含 4 个字节（每个字节包含 2 个十六进制数字）。最高有效字节为 0x12。最低有效字节为 0x78。（对于等效的十进制数字 305419896，最高有效数字是 3，最低有效数字是 6）。
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Endian.BIG_ENDIAN = "bigEndian";
        return Endian;
    }());
    egret_ByteArray.Endian = Endian;
    /**
     * The ByteArray class provides methods and attributes for optimized reading and writing as well as dealing with binary data.
     * Note: The ByteArray class is applied to the advanced developers who need to access data at the byte layer.
     * @version Egret 2.4
     * @platform Web,Native
     * @includeExample egret/utils/ByteArray.ts
     * @language en_US
     */
    /**
     * ByteArray 类提供用于优化读取、写入以及处理二进制数据的方法和属性。
     * 注意：ByteArray 类适用于需要在字节层访问数据的高级开发人员。
     * @version Egret 2.4
     * @platform Web,Native
     * @includeExample egret/utils/ByteArray.ts
     * @language zh_CN
     */
    var ByteArray = /** @class */ (function () {
        /**
         * @version Egret 2.4
         * @platform Web,Native
         */
        function ByteArray(buffer, bufferExtSize) {
            if (bufferExtSize === void 0) { bufferExtSize = 0; }
            /**
             * @private
             */
            this.bufferExtSize = 0; //Buffer expansion size
            /**
             * @private
             */
            this.EOF_byte = -1;
            /**
             * @private
             */
            this.EOF_code_point = -1;
            if (bufferExtSize < 0) {
                bufferExtSize = 0;
            }
            this.bufferExtSize = bufferExtSize;
            var bytes, wpos = 0;
            if (buffer) { //有数据，则可写字节数从字节尾开始
                var uint8 = void 0;
                if (buffer instanceof Uint8Array) {
                    uint8 = buffer;
                    wpos = buffer.length;
                }
                else {
                    wpos = buffer.byteLength;
                    uint8 = new Uint8Array(buffer);
                }
                if (bufferExtSize == 0) {
                    bytes = new Uint8Array(wpos);
                }
                else {
                    var multi = (wpos / bufferExtSize | 0) + 1;
                    bytes = new Uint8Array(multi * bufferExtSize);
                }
                bytes.set(uint8);
            }
            else {
                bytes = new Uint8Array(bufferExtSize);
            }
            this.write_position = wpos;
            this._position = 0;
            this._bytes = bytes;
            this.data = new DataView(bytes.buffer);
            this.endian = Endian.BIG_ENDIAN;
        }
        Object.defineProperty(ByteArray.prototype, "endian", {
            /**
             * Changes or reads the byte order; egret.EndianConst.BIG_ENDIAN or egret.EndianConst.LITTLE_EndianConst.
             * @default egret.EndianConst.BIG_ENDIAN
             * @version Egret 2.4
             * @platform Web,Native
             * @language en_US
             */
            /**
             * 更改或读取数据的字节顺序；egret.EndianConst.BIG_ENDIAN 或 egret.EndianConst.LITTLE_ENDIAN。
             * @default egret.EndianConst.BIG_ENDIAN
             * @version Egret 2.4
             * @platform Web,Native
             * @language zh_CN
             */
            get: function () {
                return this.$endian == 0 /* EndianConst.LITTLE_ENDIAN */ ? Endian.LITTLE_ENDIAN : Endian.BIG_ENDIAN;
            },
            set: function (value) {
                this.$endian = value == Endian.LITTLE_ENDIAN ? 0 /* EndianConst.LITTLE_ENDIAN */ : 1 /* EndianConst.BIG_ENDIAN */;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * @deprecated
         * @version Egret 2.4
         * @platform Web,Native
         */
        ByteArray.prototype.setArrayBuffer = function (buffer) {
        };
        Object.defineProperty(ByteArray.prototype, "readAvailable", {
            /**
             * 可读的剩余字节数
             *
             * @returns
             *
             * @memberOf ByteArray
             */
            get: function () {
                return this.write_position - this._position;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ByteArray.prototype, "buffer", {
            get: function () {
                return this.data.buffer.slice(0, this.write_position);
            },
            /**
             * @private
             */
            set: function (value) {
                var wpos = value.byteLength;
                var uint8 = new Uint8Array(value);
                var bufferExtSize = this.bufferExtSize;
                var bytes;
                if (bufferExtSize == 0) {
                    bytes = new Uint8Array(wpos);
                }
                else {
                    var multi = (wpos / bufferExtSize | 0) + 1;
                    bytes = new Uint8Array(multi * bufferExtSize);
                }
                bytes.set(uint8);
                this.write_position = wpos;
                this._bytes = bytes;
                this.data = new DataView(bytes.buffer);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ByteArray.prototype, "rawBuffer", {
            get: function () {
                return this.data.buffer;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ByteArray.prototype, "bytes", {
            get: function () {
                return this._bytes;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ByteArray.prototype, "dataView", {
            /**
             * @private
             * @version Egret 2.4
             * @platform Web,Native
             */
            get: function () {
                return this.data;
            },
            /**
             * @private
             */
            set: function (value) {
                this.buffer = value.buffer;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ByteArray.prototype, "bufferOffset", {
            /**
             * @private
             */
            get: function () {
                return this.data.byteOffset;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ByteArray.prototype, "position", {
            /**
             * The current position of the file pointer (in bytes) to move or return to the ByteArray object. The next time you start reading reading method call in this position, or will start writing in this position next time call a write method.
             * @version Egret 2.4
             * @platform Web,Native
             * @language en_US
             */
            /**
             * 将文件指针的当前位置（以字节为单位）移动或返回到 ByteArray 对象中。下一次调用读取方法时将在此位置开始读取，或者下一次调用写入方法时将在此位置开始写入。
             * @version Egret 2.4
             * @platform Web,Native
             * @language zh_CN
             */
            get: function () {
                return this._position;
            },
            set: function (value) {
                this._position = value;
                if (value > this.write_position) {
                    this.write_position = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ByteArray.prototype, "length", {
            /**
             * The length of the ByteArray object (in bytes).
                      * If the length is set to be larger than the current length, the right-side zero padding byte array.
                      * If the length is set smaller than the current length, the byte array is truncated.
             * @version Egret 2.4
             * @platform Web,Native
             * @language en_US
             */
            /**
             * ByteArray 对象的长度（以字节为单位）。
             * 如果将长度设置为大于当前长度的值，则用零填充字节数组的右侧。
             * 如果将长度设置为小于当前长度的值，将会截断该字节数组。
             * @version Egret 2.4
             * @platform Web,Native
             * @language zh_CN
             */
            get: function () {
                return this.write_position;
            },
            set: function (value) {
                this.write_position = value;
                if (this.data.byteLength > value) {
                    this._position = value;
                }
                this._validateBuffer(value);
            },
            enumerable: false,
            configurable: true
        });
        ByteArray.prototype._validateBuffer = function (value) {
            if (this.data.byteLength < value) {
                var be = this.bufferExtSize;
                var tmp = void 0;
                if (be == 0) {
                    tmp = new Uint8Array(value);
                }
                else {
                    var nLen = ((value / be >> 0) + 1) * be;
                    tmp = new Uint8Array(nLen);
                }
                tmp.set(this._bytes);
                this._bytes = tmp;
                this.data = new DataView(tmp.buffer);
            }
        };
        Object.defineProperty(ByteArray.prototype, "bytesAvailable", {
            /**
             * The number of bytes that can be read from the current position of the byte array to the end of the array data.
             * When you access a ByteArray object, the bytesAvailable property in conjunction with the read methods each use to make sure you are reading valid data.
             * @version Egret 2.4
             * @platform Web,Native
             * @language en_US
             */
            /**
             * 可从字节数组的当前位置到数组末尾读取的数据的字节数。
             * 每次访问 ByteArray 对象时，将 bytesAvailable 属性与读取方法结合使用，以确保读取有效的数据。
             * @version Egret 2.4
             * @platform Web,Native
             * @language zh_CN
             */
            get: function () {
                return this.data.byteLength - this._position;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Clears the contents of the byte array and resets the length and position properties to 0.
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 清除字节数组的内容，并将 length 和 position 属性重置为 0。
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.clear = function () {
            var buffer = new ArrayBuffer(this.bufferExtSize);
            this.data = new DataView(buffer);
            this._bytes = new Uint8Array(buffer);
            this._position = 0;
            this.write_position = 0;
        };
        /**
         * Read a Boolean value from the byte stream. Read a simple byte. If the byte is non-zero, it returns true; otherwise, it returns false.
         * @return If the byte is non-zero, it returns true; otherwise, it returns false.
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 从字节流中读取布尔值。读取单个字节，如果字节非零，则返回 true，否则返回 false
         * @return 如果字节不为零，则返回 true，否则返回 false
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.readBoolean = function () {
            if (this.validate(1 /* ByteArraySize.SIZE_OF_BOOLEAN */))
                return !!this._bytes[this.position++];
        };
        /**
         * Read signed bytes from the byte stream.
         * @return An integer ranging from -128 to 127
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 从字节流中读取带符号的字节
         * @return 介于 -128 和 127 之间的整数
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.readByte = function () {
            if (this.validate(1 /* ByteArraySize.SIZE_OF_INT8 */))
                return this.data.getInt8(this.position++);
        };
        /**
         * Read data byte number specified by the length parameter from the byte stream. Starting from the position specified by offset, read bytes into the ByteArray object specified by the bytes parameter, and write bytes into the target ByteArray
         * @param bytes ByteArray object that data is read into
         * @param offset Offset (position) in bytes. Read data should be written from this position
         * @param length Byte number to be read Default value 0 indicates reading all available data
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 从字节流中读取 length 参数指定的数据字节数。从 offset 指定的位置开始，将字节读入 bytes 参数指定的 ByteArray 对象中，并将字节写入目标 ByteArray 中
         * @param bytes 要将数据读入的 ByteArray 对象
         * @param offset bytes 中的偏移（位置），应从该位置写入读取的数据
         * @param length 要读取的字节数。默认值 0 导致读取所有可用的数据
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.readBytes = function (bytes, offset, length) {
            if (offset === void 0) { offset = 0; }
            if (length === void 0) { length = 0; }
            if (!bytes) { //由于bytes不返回，所以new新的无意义
                return;
            }
            var pos = this._position;
            var available = this.write_position - pos;
            if (available < 0) {
                egret$error(1025);
                return;
            }
            if (length == 0) {
                length = available;
            }
            else if (length > available) {
                egret$error(1025);
                return;
            }
            var position = bytes._position;
            bytes._position = 0;
            bytes.validateBuffer(offset + length);
            bytes._position = position;
            bytes._bytes.set(this._bytes.subarray(pos, pos + length), offset);
            this.position += length;
        };
        /**
         * Read an IEEE 754 double-precision (64 bit) floating point number from the byte stream
         * @return Double-precision (64 bit) floating point number
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 从字节流中读取一个 IEEE 754 双精度（64 位）浮点数
         * @return 双精度（64 位）浮点数
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.readDouble = function () {
            if (this.validate(8 /* ByteArraySize.SIZE_OF_FLOAT64 */)) {
                var value = this.data.getFloat64(this._position, this.$endian == 0 /* EndianConst.LITTLE_ENDIAN */);
                this.position += 8 /* ByteArraySize.SIZE_OF_FLOAT64 */;
                return value;
            }
        };
        /**
         * Read an IEEE 754 single-precision (32 bit) floating point number from the byte stream
         * @return Single-precision (32 bit) floating point number
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 从字节流中读取一个 IEEE 754 单精度（32 位）浮点数
         * @return 单精度（32 位）浮点数
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.readFloat = function () {
            if (this.validate(4 /* ByteArraySize.SIZE_OF_FLOAT32 */)) {
                var value = this.data.getFloat32(this._position, this.$endian == 0 /* EndianConst.LITTLE_ENDIAN */);
                this.position += 4 /* ByteArraySize.SIZE_OF_FLOAT32 */;
                return value;
            }
        };
        /**
         * Read a 32-bit signed integer from the byte stream.
         * @return A 32-bit signed integer ranging from -2147483648 to 2147483647
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 从字节流中读取一个带符号的 32 位整数
         * @return 介于 -2147483648 和 2147483647 之间的 32 位带符号整数
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.readInt = function () {
            if (this.validate(4 /* ByteArraySize.SIZE_OF_INT32 */)) {
                var value = this.data.getInt32(this._position, this.$endian == 0 /* EndianConst.LITTLE_ENDIAN */);
                this.position += 4 /* ByteArraySize.SIZE_OF_INT32 */;
                return value;
            }
        };
        /**
         * Read a 16-bit signed integer from the byte stream.
         * @return A 16-bit signed integer ranging from -32768 to 32767
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 从字节流中读取一个带符号的 16 位整数
         * @return 介于 -32768 和 32767 之间的 16 位带符号整数
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.readShort = function () {
            if (this.validate(2 /* ByteArraySize.SIZE_OF_INT16 */)) {
                var value = this.data.getInt16(this._position, this.$endian == 0 /* EndianConst.LITTLE_ENDIAN */);
                this.position += 2 /* ByteArraySize.SIZE_OF_INT16 */;
                return value;
            }
        };
        /**
         * Read unsigned bytes from the byte stream.
         * @return A unsigned integer ranging from 0 to 255
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 从字节流中读取无符号的字节
         * @return 介于 0 和 255 之间的无符号整数
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.readUnsignedByte = function () {
            if (this.validate(1 /* ByteArraySize.SIZE_OF_UINT8 */))
                return this._bytes[this.position++];
        };
        /**
         * Read a 32-bit unsigned integer from the byte stream.
         * @return A 32-bit unsigned integer ranging from 0 to 4294967295
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 从字节流中读取一个无符号的 32 位整数
         * @return 介于 0 和 4294967295 之间的 32 位无符号整数
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.readUnsignedInt = function () {
            if (this.validate(4 /* ByteArraySize.SIZE_OF_UINT32 */)) {
                var value = this.data.getUint32(this._position, this.$endian == 0 /* EndianConst.LITTLE_ENDIAN */);
                this.position += 4 /* ByteArraySize.SIZE_OF_UINT32 */;
                return value;
            }
        };
        /**
         * Read a 16-bit unsigned integer from the byte stream.
         * @return A 16-bit unsigned integer ranging from 0 to 65535
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 从字节流中读取一个无符号的 16 位整数
         * @return 介于 0 和 65535 之间的 16 位无符号整数
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.readUnsignedShort = function () {
            if (this.validate(2 /* ByteArraySize.SIZE_OF_UINT16 */)) {
                var value = this.data.getUint16(this._position, this.$endian == 0 /* EndianConst.LITTLE_ENDIAN */);
                this.position += 2 /* ByteArraySize.SIZE_OF_UINT16 */;
                return value;
            }
        };
        /**
         * Read a UTF-8 character string from the byte stream Assume that the prefix of the character string is a short unsigned integer (use byte to express length)
         * @return UTF-8 character string
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 从字节流中读取一个 UTF-8 字符串。假定字符串的前缀是无符号的短整型（以字节表示长度）
         * @return UTF-8 编码的字符串
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.readUTF = function () {
            var length = this.readUnsignedShort();
            if (length > 0) {
                return this.readUTFBytes(length);
            }
            else {
                return "";
            }
        };
        /**
         * Read a UTF-8 byte sequence specified by the length parameter from the byte stream, and then return a character string
         * @param Specify a short unsigned integer of the UTF-8 byte length
         * @return A character string consists of UTF-8 bytes of the specified length
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 从字节流中读取一个由 length 参数指定的 UTF-8 字节序列，并返回一个字符串
         * @param length 指明 UTF-8 字节长度的无符号短整型数
         * @return 由指定长度的 UTF-8 字节组成的字符串
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.readUTFBytes = function (length) {
            if (!this.validate(length)) {
                return;
            }
            var data = this.data;
            var bytes = new Uint8Array(data.buffer, data.byteOffset + this._position, length);
            this.position += length;
            return this.decodeUTF8(bytes);
        };
        /**
         * Write a Boolean value. A single byte is written according to the value parameter. If the value is true, write 1; if the value is false, write 0.
         * @param value A Boolean value determining which byte is written. If the value is true, write 1; if the value is false, write 0.
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 写入布尔值。根据 value 参数写入单个字节。如果为 true，则写入 1，如果为 false，则写入 0
         * @param value 确定写入哪个字节的布尔值。如果该参数为 true，则该方法写入 1；如果该参数为 false，则该方法写入 0
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.writeBoolean = function (value) {
            this.validateBuffer(1 /* ByteArraySize.SIZE_OF_BOOLEAN */);
            this._bytes[this.position++] = +value;
        };
        /**
         * Write a byte into the byte stream
         * The low 8 bits of the parameter are used. The high 24 bits are ignored.
         * @param value A 32-bit integer. The low 8 bits will be written into the byte stream
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 在字节流中写入一个字节
         * 使用参数的低 8 位。忽略高 24 位
         * @param value 一个 32 位整数。低 8 位将被写入字节流
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.writeByte = function (value) {
            this.validateBuffer(1 /* ByteArraySize.SIZE_OF_INT8 */);
            this._bytes[this.position++] = value & 0xff;
        };
        /**
         * Write the byte sequence that includes length bytes in the specified byte array, bytes, (starting at the byte specified by offset, using a zero-based index), into the byte stream
         * If the length parameter is omitted, the default length value 0 is used and the entire buffer starting at offset is written. If the offset parameter is also omitted, the entire buffer is written
         * If the offset or length parameter is out of range, they are clamped to the beginning and end of the bytes array.
         * @param bytes ByteArray Object
         * @param offset A zero-based index specifying the position into the array to begin writing
         * @param length An unsigned integer specifying how far into the buffer to write
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 将指定字节数组 bytes（起始偏移量为 offset，从零开始的索引）中包含 length 个字节的字节序列写入字节流
         * 如果省略 length 参数，则使用默认长度 0；该方法将从 offset 开始写入整个缓冲区。如果还省略了 offset 参数，则写入整个缓冲区
         * 如果 offset 或 length 超出范围，它们将被锁定到 bytes 数组的开头和结尾
         * @param bytes ByteArray 对象
         * @param offset 从 0 开始的索引，表示在数组中开始写入的位置
         * @param length 一个无符号整数，表示在缓冲区中的写入范围
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.writeBytes = function (bytes, offset, length) {
            if (offset === void 0) { offset = 0; }
            if (length === void 0) { length = 0; }
            var writeLength;
            if (offset < 0) {
                return;
            }
            if (length < 0) {
                return;
            }
            else if (length == 0) {
                writeLength = bytes.length - offset;
            }
            else {
                writeLength = Math.min(bytes.length - offset, length);
            }
            if (writeLength > 0) {
                this.validateBuffer(writeLength);
                this._bytes.set(bytes._bytes.subarray(offset, offset + writeLength), this._position);
                this.position = this._position + writeLength;
            }
        };
        /**
         * Write an IEEE 754 double-precision (64 bit) floating point number into the byte stream
         * @param value Double-precision (64 bit) floating point number
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 在字节流中写入一个 IEEE 754 双精度（64 位）浮点数
         * @param value 双精度（64 位）浮点数
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.writeDouble = function (value) {
            this.validateBuffer(8 /* ByteArraySize.SIZE_OF_FLOAT64 */);
            this.data.setFloat64(this._position, value, this.$endian == 0 /* EndianConst.LITTLE_ENDIAN */);
            this.position += 8 /* ByteArraySize.SIZE_OF_FLOAT64 */;
        };
        /**
         * Write an IEEE 754 single-precision (32 bit) floating point number into the byte stream
         * @param value Single-precision (32 bit) floating point number
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 在字节流中写入一个 IEEE 754 单精度（32 位）浮点数
         * @param value 单精度（32 位）浮点数
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.writeFloat = function (value) {
            this.validateBuffer(4 /* ByteArraySize.SIZE_OF_FLOAT32 */);
            this.data.setFloat32(this._position, value, this.$endian == 0 /* EndianConst.LITTLE_ENDIAN */);
            this.position += 4 /* ByteArraySize.SIZE_OF_FLOAT32 */;
        };
        /**
         * Write a 32-bit signed integer into the byte stream
         * @param value An integer to be written into the byte stream
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 在字节流中写入一个带符号的 32 位整数
         * @param value 要写入字节流的整数
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.writeInt = function (value) {
            this.validateBuffer(4 /* ByteArraySize.SIZE_OF_INT32 */);
            this.data.setInt32(this._position, value, this.$endian == 0 /* EndianConst.LITTLE_ENDIAN */);
            this.position += 4 /* ByteArraySize.SIZE_OF_INT32 */;
        };
        /**
         * Write a 16-bit integer into the byte stream. The low 16 bits of the parameter are used. The high 16 bits are ignored.
         * @param value A 32-bit integer. Its low 16 bits will be written into the byte stream
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 在字节流中写入一个 16 位整数。使用参数的低 16 位。忽略高 16 位
         * @param value 32 位整数，该整数的低 16 位将被写入字节流
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.writeShort = function (value) {
            this.validateBuffer(2 /* ByteArraySize.SIZE_OF_INT16 */);
            this.data.setInt16(this._position, value, this.$endian == 0 /* EndianConst.LITTLE_ENDIAN */);
            this.position += 2 /* ByteArraySize.SIZE_OF_INT16 */;
        };
        /**
         * Write a 32-bit unsigned integer into the byte stream
         * @param value An unsigned integer to be written into the byte stream
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 在字节流中写入一个无符号的 32 位整数
         * @param value 要写入字节流的无符号整数
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.writeUnsignedInt = function (value) {
            this.validateBuffer(4 /* ByteArraySize.SIZE_OF_UINT32 */);
            this.data.setUint32(this._position, value, this.$endian == 0 /* EndianConst.LITTLE_ENDIAN */);
            this.position += 4 /* ByteArraySize.SIZE_OF_UINT32 */;
        };
        /**
         * Write a 16-bit unsigned integer into the byte stream
         * @param value An unsigned integer to be written into the byte stream
         * @version Egret 2.5
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 在字节流中写入一个无符号的 16 位整数
         * @param value 要写入字节流的无符号整数
         * @version Egret 2.5
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.writeUnsignedShort = function (value) {
            this.validateBuffer(2 /* ByteArraySize.SIZE_OF_UINT16 */);
            this.data.setUint16(this._position, value, this.$endian == 0 /* EndianConst.LITTLE_ENDIAN */);
            this.position += 2 /* ByteArraySize.SIZE_OF_UINT16 */;
        };
        /**
         * Write a UTF-8 string into the byte stream. The length of the UTF-8 string in bytes is written first, as a 16-bit integer, followed by the bytes representing the characters of the string
         * @param value Character string value to be written
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 将 UTF-8 字符串写入字节流。先写入以字节表示的 UTF-8 字符串长度（作为 16 位整数），然后写入表示字符串字符的字节
         * @param value 要写入的字符串值
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.writeUTF = function (value) {
            var utf8bytes = this.encodeUTF8(value);
            var length = utf8bytes.length;
            this.validateBuffer(2 /* ByteArraySize.SIZE_OF_UINT16 */ + length);
            this.data.setUint16(this._position, length, this.$endian == 0 /* EndianConst.LITTLE_ENDIAN */);
            this.position += 2 /* ByteArraySize.SIZE_OF_UINT16 */;
            this._writeUint8Array(utf8bytes, false);
        };
        /**
         * Write a UTF-8 string into the byte stream. Similar to the writeUTF() method, but the writeUTFBytes() method does not prefix the string with a 16-bit length word
         * @param value Character string value to be written
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 将 UTF-8 字符串写入字节流。类似于 writeUTF() 方法，但 writeUTFBytes() 不使用 16 位长度的词为字符串添加前缀
         * @param value 要写入的字符串值
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ByteArray.prototype.writeUTFBytes = function (value) {
            this._writeUint8Array(this.encodeUTF8(value));
        };
        /**
         *
         * @returns
         * @version Egret 2.4
         * @platform Web,Native
         */
        ByteArray.prototype.toString = function () {
            return "[ByteArray] length:" + this.length + ", bytesAvailable:" + this.bytesAvailable;
        };
        /**
         * @private
         * 将 Uint8Array 写入字节流
         * @param bytes 要写入的Uint8Array
         * @param validateBuffer
         */
        ByteArray.prototype._writeUint8Array = function (bytes, validateBuffer) {
            if (validateBuffer === void 0) { validateBuffer = true; }
            var pos = this._position;
            var npos = pos + bytes.length;
            if (validateBuffer) {
                this.validateBuffer(npos);
            }
            this.bytes.set(bytes, pos);
            this.position = npos;
        };
        /**
         * @param len
         * @returns
         * @version Egret 2.4
         * @platform Web,Native
         * @private
         */
        ByteArray.prototype.validate = function (len) {
            var bl = this._bytes.length;
            if (bl > 0 && this._position + len <= bl) {
                return true;
            }
            else {
                egret$error(1025);
            }
        };
        /**********************/
        /*  PRIVATE METHODS   */
        /**********************/
        /**
         * @private
         * @param len
         * @param needReplace
         */
        ByteArray.prototype.validateBuffer = function (len) {
            this.write_position = len > this.write_position ? len : this.write_position;
            len += this._position;
            this._validateBuffer(len);
        };
        /**
         * @private
         * UTF-8 Encoding/Decoding
         */
        ByteArray.prototype.encodeUTF8 = function (str) {
            var pos = 0;
            var codePoints = this.stringToCodePoints(str);
            var outputBytes = [];
            while (codePoints.length > pos) {
                var code_point = codePoints[pos++];
                if (this.inRange(code_point, 0xD800, 0xDFFF)) {
                    this.encoderError(code_point);
                }
                else if (this.inRange(code_point, 0x0000, 0x007f)) {
                    outputBytes.push(code_point);
                }
                else {
                    var count = void 0, offset = void 0;
                    if (this.inRange(code_point, 0x0080, 0x07FF)) {
                        count = 1;
                        offset = 0xC0;
                    }
                    else if (this.inRange(code_point, 0x0800, 0xFFFF)) {
                        count = 2;
                        offset = 0xE0;
                    }
                    else if (this.inRange(code_point, 0x10000, 0x10FFFF)) {
                        count = 3;
                        offset = 0xF0;
                    }
                    outputBytes.push(this.div(code_point, Math.pow(64, count)) + offset);
                    while (count > 0) {
                        var temp = this.div(code_point, Math.pow(64, count - 1));
                        outputBytes.push(0x80 + (temp % 64));
                        count -= 1;
                    }
                }
            }
            return new Uint8Array(outputBytes);
        };
        /**
         * @private
         *
         * @param data
         * @returns
         */
        ByteArray.prototype.decodeUTF8 = function (data) {
            var fatal = false;
            var pos = 0;
            var result = "";
            var code_point;
            var utf8_code_point = 0;
            var utf8_bytes_needed = 0;
            var utf8_bytes_seen = 0;
            var utf8_lower_boundary = 0;
            while (data.length > pos) {
                var _byte = data[pos++];
                if (_byte == this.EOF_byte) {
                    if (utf8_bytes_needed != 0) {
                        code_point = this.decoderError(fatal);
                    }
                    else {
                        code_point = this.EOF_code_point;
                    }
                }
                else {
                    if (utf8_bytes_needed == 0) {
                        if (this.inRange(_byte, 0x00, 0x7F)) {
                            code_point = _byte;
                        }
                        else {
                            if (this.inRange(_byte, 0xC2, 0xDF)) {
                                utf8_bytes_needed = 1;
                                utf8_lower_boundary = 0x80;
                                utf8_code_point = _byte - 0xC0;
                            }
                            else if (this.inRange(_byte, 0xE0, 0xEF)) {
                                utf8_bytes_needed = 2;
                                utf8_lower_boundary = 0x800;
                                utf8_code_point = _byte - 0xE0;
                            }
                            else if (this.inRange(_byte, 0xF0, 0xF4)) {
                                utf8_bytes_needed = 3;
                                utf8_lower_boundary = 0x10000;
                                utf8_code_point = _byte - 0xF0;
                            }
                            else {
                                this.decoderError(fatal);
                            }
                            utf8_code_point = utf8_code_point * Math.pow(64, utf8_bytes_needed);
                            code_point = null;
                        }
                    }
                    else if (!this.inRange(_byte, 0x80, 0xBF)) {
                        utf8_code_point = 0;
                        utf8_bytes_needed = 0;
                        utf8_bytes_seen = 0;
                        utf8_lower_boundary = 0;
                        pos--;
                        code_point = this.decoderError(fatal, _byte);
                    }
                    else {
                        utf8_bytes_seen += 1;
                        utf8_code_point = utf8_code_point + (_byte - 0x80) * Math.pow(64, utf8_bytes_needed - utf8_bytes_seen);
                        if (utf8_bytes_seen !== utf8_bytes_needed) {
                            code_point = null;
                        }
                        else {
                            var cp = utf8_code_point;
                            var lower_boundary = utf8_lower_boundary;
                            utf8_code_point = 0;
                            utf8_bytes_needed = 0;
                            utf8_bytes_seen = 0;
                            utf8_lower_boundary = 0;
                            if (this.inRange(cp, lower_boundary, 0x10FFFF) && !this.inRange(cp, 0xD800, 0xDFFF)) {
                                code_point = cp;
                            }
                            else {
                                code_point = this.decoderError(fatal, _byte);
                            }
                        }
                    }
                }
                //Decode string
                if (code_point !== null && code_point !== this.EOF_code_point) {
                    if (code_point <= 0xFFFF) {
                        if (code_point > 0)
                            result += String.fromCharCode(code_point);
                    }
                    else {
                        code_point -= 0x10000;
                        result += String.fromCharCode(0xD800 + ((code_point >> 10) & 0x3ff));
                        result += String.fromCharCode(0xDC00 + (code_point & 0x3ff));
                    }
                }
            }
            return result;
        };
        /**
         * @private
         *
         * @param code_point
         */
        ByteArray.prototype.encoderError = function (code_point) {
            egret$error(1026, code_point);
        };
        /**
         * @private
         *
         * @param fatal
         * @param opt_code_point
         * @returns
         */
        ByteArray.prototype.decoderError = function (fatal, opt_code_point) {
            if (fatal) {
                egret$error(1027);
            }
            return opt_code_point || 0xFFFD;
        };
        /**
         * @private
         *
         * @param a
         * @param min
         * @param max
         */
        ByteArray.prototype.inRange = function (a, min, max) {
            return min <= a && a <= max;
        };
        /**
         * @private
         *
         * @param n
         * @param d
         */
        ByteArray.prototype.div = function (n, d) {
            return Math.floor(n / d);
        };
        /**
         * @private
         *
         * @param string
         */
        ByteArray.prototype.stringToCodePoints = function (string) {
            /** @type {Array.<number>} */
            var cps = [];
            // Based on http://www.w3.org/TR/WebIDL/#idl-DOMString
            var i = 0, n = string.length;
            while (i < string.length) {
                var c = string.charCodeAt(i);
                if (!this.inRange(c, 0xD800, 0xDFFF)) {
                    cps.push(c);
                }
                else if (this.inRange(c, 0xDC00, 0xDFFF)) {
                    cps.push(0xFFFD);
                }
                else { // (inRange(c, 0xD800, 0xDBFF))
                    if (i == n - 1) {
                        cps.push(0xFFFD);
                    }
                    else {
                        var d = string.charCodeAt(i + 1);
                        if (this.inRange(d, 0xDC00, 0xDFFF)) {
                            var a = c & 0x3FF;
                            var b = d & 0x3FF;
                            i += 1;
                            cps.push(0x10000 + (a << 10) + b);
                        }
                        else {
                            cps.push(0xFFFD);
                        }
                    }
                }
                i += 1;
            }
            return cps;
        };
        return ByteArray;
    }());
    egret_ByteArray.ByteArray = ByteArray;
})(egret_ByteArray || (egret_ByteArray = {}));
var egret_HashObject;
(function (egret_HashObject) {
    /**
     * @private
     * 哈希计数
     */
    egret_HashObject.$hashCount = 1;
    /**
     * The HashObject class is the base class for all objects in the Egret framework.The HashObject
     * class includes a hashCode property, which is a unique identification number of the instance.
     * @version Egret 2.4
     * @platform Web,Native
     * @language en_US
     */
    /**
     * Egret顶级对象。框架内所有对象的基类，为对象实例提供唯一的hashCode值。
     * @version Egret 2.4
     * @platform Web,Native
     * @language zh_CN
     */
    var HashObject = /** @class */ (function () {
        /**
         * Initializes a HashObject
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 创建一个 HashObject 对象
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        function HashObject() {
            this.$hashCode = egret_HashObject.$hashCount++;
        }
        Object.defineProperty(HashObject.prototype, "hashCode", {
            /**
             * a unique identification number assigned to this instance.
             * @version Egret 2.4
             * @platform Web,Native
             * @language en_US
             */
            /**
             * 返回此对象唯一的哈希值,用于唯一确定一个对象。hashCode为大于等于1的整数。
             * @version Egret 2.4
             * @platform Web,Native
             * @language zh_CN
             */
            get: function () {
                return this.$hashCode;
            },
            enumerable: false,
            configurable: true
        });
        return HashObject;
    }());
    egret_HashObject.HashObject = HashObject;
})(egret_HashObject || (egret_HashObject = {}));
/// <reference path="./HashObject.ts" />
var egret_Event;
(function (egret_Event) {
    var Event = /** @class */ (function (_super) {
        __extends(Event, _super);
        /**
         * Creates an Event object to pass as a parameter to event listeners.
         * @param type  The type of the event, accessible as Event.type.
         * @param bubbles  Determines whether the Event object participates in the bubbling stage of the event flow. The default value is false.
         * @param cancelable Determines whether the Event object can be canceled. The default values is false.
         * @param data the optional data associated with this event
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 创建一个作为参数传递给事件侦听器的 Event 对象。
         * @param type  事件的类型，可以作为 Event.type 访问。
         * @param bubbles  确定 Event 对象是否参与事件流的冒泡阶段。默认值为 false。
         * @param cancelable 确定是否可以取消 Event 对象。默认值为 false。
         * @param data 与此事件对象关联的可选数据。
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        function Event(type, bubbles, cancelable, data) {
            var _this = _super.call(this) || this;
            /**
             * @private
             */
            _this.$eventPhase = 2;
            /**
             * @private
             */
            _this.$currentTarget = null;
            /**
             * @private
             */
            _this.$target = null;
            /**
             * @private
             */
            _this.$isDefaultPrevented = false;
            /**
             * @private
             */
            _this.$isPropagationStopped = false;
            /**
             * @private
             */
            _this.$isPropagationImmediateStopped = false;
            _this.$type = type;
            _this.$bubbles = !!bubbles;
            _this.$cancelable = !!cancelable;
            _this.data = data;
            return _this;
        }
        Object.defineProperty(Event.prototype, "type", {
            /**
             * The type of event. The type is case-sensitive.
             * @version Egret 2.4
             * @platform Web,Native
             * @language en_US
             */
            /**
             * 事件的类型。类型区分大小写。
             * @version Egret 2.4
             * @platform Web,Native
             * @language zh_CN
             */
            get: function () {
                return this.$type;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Event.prototype, "bubbles", {
            /**
             * Indicates whether an event is a bubbling event.
             * @version Egret 2.4
             * @platform Web,Native
             * @language en_US
             */
            /**
             * 表示事件是否为冒泡事件。如果事件可以冒泡，则此值为 true；否则为 false。
             * @version Egret 2.4
             * @platform Web,Native
             * @language zh_CN
             */
            get: function () {
                return this.$bubbles;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Event.prototype, "cancelable", {
            /**
             * Indicates whether the behavior associated with the event can be prevented. If the behavior can be
             * canceled, this value is true; otherwise it is false.
             * @see #preventDefault()
             * @version Egret 2.4
             * @platform Web,Native
             * @language en_US
             */
            /**
             * 表示是否可以阻止与事件相关联的行为。如果可以取消该行为，则此值为 true；否则为 false。
             * @see #preventDefault()
             * @version Egret 2.4
             * @platform Web,Native
             * @language zh_CN
             */
            get: function () {
                return this.$cancelable;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Event.prototype, "eventPhase", {
            /**
             * The current phase in the event flow. This property can contain the following numeric values:
             * The capture phase (EventPhase.CAPTURING_PHASE).
             * The target phase (EventPhase.AT_TARGET)
             * The bubbling phase (EventPhase.BUBBLING_PHASE).
             * @see egret.EventPhase
             * @version Egret 2.4
             * @platform Web,Native
             * @language en_US
             */
            /**
             * 事件流中的当前阶段。此属性可以包含以下数值：
             * 捕获阶段 (EventPhase.CAPTURING_PHASE)。
             * 目标阶段 (EventPhase.AT_TARGET)。
             * 冒泡阶段 (EventPhase.BUBBLING_PHASE)。
             * @see egret.EventPhase
             * @version Egret 2.4
             * @platform Web,Native
             * @language zh_CN
             */
            get: function () {
                return this.$eventPhase;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Event.prototype, "currentTarget", {
            /**
             * The object that is actively processing the Event object with an event listener. For example, if a
             * user clicks an OK button, the current target could be the node containing that button or one of its ancestors
             * that has registered an event listener for that event.
             * @version Egret 2.4
             * @platform Web,Native
             * @language en_US
             */
            /**
             * 当前正在使用某个事件侦听器处理 Event 对象的对象。例如，如果用户单击“确定”按钮，
             * 则当前目标可以是包含该按钮的节点，也可以是它的已为该事件注册了事件侦听器的始祖之一。
             * @version Egret 2.4
             * @platform Web,Native
             * @language zh_CN
             */
            get: function () {
                return this.$currentTarget;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Event.prototype, "target", {
            /**
             * The event target. This property contains the target node. For example, if a user clicks an OK button,
             * the target node is the display list node containing that button.
             * @version Egret 2.4
             * @platform Web,Native
             * @language en_US
             */
            /**
             * 事件目标。此属性包含目标节点。例如，如果用户单击“确定”按钮，则目标节点就是包含该按钮的显示列表节点。
             * @version Egret 2.4
             * @platform Web,Native
             * @language zh_CN
             */
            get: function () {
                return this.$target;
            },
            enumerable: false,
            configurable: true
        });
        Event.prototype.$setTarget = function (target) {
            this.$target = target;
            return true;
        };
        /**
         * Checks whether the preventDefault() method has been called on the event. If the preventDefault() method has been
         * called, returns true; otherwise, returns false.
         * @returns If preventDefault() has been called, returns true; otherwise, returns false.
         * @see #preventDefault()
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 检查是否已对事件调用 preventDefault() 方法。
         * @returns 如果已调用 preventDefault() 方法，则返回 true；否则返回 false。
         * @see #preventDefault()
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Event.prototype.isDefaultPrevented = function () {
            return this.$isDefaultPrevented;
        };
        /**
         * Cancels an event's default behavior if that behavior can be canceled.Many events have associated behaviors that
         * are carried out by default. For example, if a user types a character into a text input, the default behavior
         * is that the character is displayed in the text input. Because the TextEvent.TEXT_INPUT event's default behavior
         * can be canceled, you can use the preventDefault() method to prevent the character from appearing.
         * You can use the Event.cancelable property to check whether you can prevent the default behavior associated with
         * a particular event. If the value of Event.cancelable is true, then preventDefault() can be used to cancel the event;
         * otherwise, preventDefault() has no effect.
         * @see #cancelable
         * @see #isDefaultPrevented
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 如果可以取消事件的默认行为，则取消该行为。
         * 许多事件都有默认执行的关联行为。例如，如果用户在文本字段中键入一个字符，则默认行为就是在文本字段中显示该字符。
         * 由于可以取消 TextEvent.TEXT_INPUT 事件的默认行为，因此您可以使用 preventDefault() 方法来防止显示该字符。
         * 您可以使用 Event.cancelable 属性来检查是否可以防止与特定事件关联的默认行为。如果 Event.cancelable 的值为 true，
         * 则可以使用 preventDefault() 来取消事件；否则，preventDefault() 无效。
         * @see #cancelable
         * @see #isDefaultPrevented
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Event.prototype.preventDefault = function () {
            if (this.$cancelable)
                this.$isDefaultPrevented = true;
        };
        /**
         * Prevents processing of any event listeners in nodes subsequent to the current node in the event flow. This method
         * does not affect any event listeners in the current node (currentTarget). In contrast, the stopImmediatePropagation()
         * method prevents processing of event listeners in both the current node and subsequent nodes. Additional calls to this
         * method have no effect. This method can be called in any phase of the event flow.<br/>
         * Note: This method does not cancel the behavior associated with this event; see preventDefault() for that functionality.
         * @see #stopImmediatePropagation()
         * @see #preventDefault()
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 防止对事件流中当前节点的后续节点中的所有事件侦听器进行处理。此方法不会影响当前节点 currentTarget 中的任何事件侦听器。
         * 相比之下，stopImmediatePropagation() 方法可以防止对当前节点中和后续节点中的事件侦听器进行处理。
         * 对此方法的其它调用没有任何效果。可以在事件流的任何阶段中调用此方法。<br/>
         * 注意：此方法不会取消与此事件相关联的行为；有关此功能的信息，请参阅 preventDefault()。
         * @see #stopImmediatePropagation()
         * @see #preventDefault()
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Event.prototype.stopPropagation = function () {
            if (this.$bubbles)
                this.$isPropagationStopped = true;
        };
        /**
         * Prevents processing of any event listeners in the current node and any subsequent nodes in the event flow.
         * This method takes effect immediately, and it affects event listeners in the current node. In contrast, the
         * stopPropagation() method doesn't take effect until all the event listeners in the current node finish processing.<br/>
         * Note: This method does not cancel the behavior associated with this event; see preventDefault() for that functionality.
         * @see #stopPropagation()
         * @see #preventDefault()
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 防止对事件流中当前节点中和所有后续节点中的事件侦听器进行处理。此方法会立即生效，并且会影响当前节点中的事件侦听器。
         * 相比之下，在当前节点中的所有事件侦听器都完成处理之前，stopPropagation() 方法不会生效。<br/>
         * 注意：此方法不会取消与此事件相关联的行为；有关此功能的信息，请参阅 preventDefault()。
         * @see #stopPropagation()
         * @see #preventDefault()
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Event.prototype.stopImmediatePropagation = function () {
            if (this.$bubbles)
                this.$isPropagationImmediateStopped = true;
        };
        /**
         * This method will be called automatically when you pass the event object as the parameters to the Event.release() method.
         * If your custom event is designed for reusable,you should override this method to make sure all the references to external
         * objects are cleaned. if not,it may cause memory leaking.
         * @see egret.Event.create()
         * @see egret.Event.release()
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 当事件实例传递给Event.release()静态方法时，实例上的clean()方法将会被自动调用。
         * 若此自定义事件的实例设计为可以循环复用的，为了避免引起内存泄露，自定义事件需要覆盖此方法来确保实例被缓存前断开对外部对象的一切引用。
         * @see egret.Event.create()
         * @see egret.Event.release()
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Event.prototype.clean = function () {
            this.data = this.$currentTarget = null;
            this.$setTarget(null);
        };
        /**
         * EventDispatcher object using the specified event object thrown Event. Objects thrown objects will be cached in the pool for the next round robin.
         * @param target the event target
         * @param type The type of the event. Event listeners can access this information through the inherited type property.
         * @param bubbles Determines whether the Event object bubbles. Event listeners can access this information through
         * the inherited bubbles property.
         * @param data {any} data
         * @method egret.Event.dispatchEvent
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 使用指定的 EventDispatcher 对象来抛出 Event 事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。
         * @param target {egret.IEventDispatcher} 派发事件目标
         * @param type {string} 事件类型
         * @param bubbles {boolean} 确定 Event 对象是否参与事件流的冒泡阶段。默认值为 false。
         * @param data {any} 事件data
         * @method egret.Event.dispatchEvent
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Event.dispatchEvent = function (target, type, bubbles, data) {
            if (bubbles === void 0) { bubbles = false; }
            var event = Event.create(Event, type, bubbles);
            var props = Event._getPropertyData(Event);
            if (data != undefined) {
                props.data = data;
            }
            var result = target.dispatchEvent(event);
            Event.release(event);
            return result;
        };
        /**
         * @private
         *
         * @param EventClass
         * @returns
         */
        Event._getPropertyData = function (EventClass) {
            var props = EventClass._props;
            if (!props)
                props = EventClass._props = {};
            return props;
        };
        /**
         * Gets one event instance from the object pool or create a new one. We highly recommend using the Event.create()
         * and Event.release() methods to create and release an event object,it can reduce the number of reallocate objects,
         * which allows you to get better code execution performance.<br/>
         * Note: If you want to use this method to initialize your custom event object,you must make sure the constructor
         * of your custom event is the same as the constructor of egret.Event.
         * @param EventClass Event Class。
         * @param type  The type of the event, accessible as Event.type.
         * @param bubbles  Determines whether the Event object participates in the bubbling stage of the event flow. The default value is false.
         * @param cancelable Determines whether the Event object can be canceled. The default values is false.
         * @example
         * <pre>
         *    let event = Event.create(Event,type, bubbles);
         *    event.data = data;    //optional,initializes custom data here
         *    this.dispatchEvent(event);
         *    Event.release(event);
         * </pre>
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 从对象池中取出或创建一个新的事件实例。我们建议您尽可能使用Event.create()和Event.release() 这一对方法来创建和释放事件对象，
         * 这一对方法会将事件实例在内部缓存下来供下次循环使用，减少对象的创建次数,从而获得更高的代码运行性能。<br/>
         * 注意：若使用此方法来创建自定义事件的实例，自定义的构造函数参数列表必须跟Event类一致。
         * @param EventClass Event类名。
         * @param type  事件的类型，可以作为 Event.type 访问。
         * @param bubbles  确定 Event 对象是否参与事件流的冒泡阶段。默认值为 false。
         * @param cancelable 确定是否可以取消 Event 对象。默认值为 false。
         * @example
         * <pre>
         *    let event = Event.create(Event,type, bubbles);
         *    event.data = data;  //可选，若指定义事件上需要附加其他参数，可以在获取实例后在此处设置。
         *    this.dispatchEvent(event);
         *    Event.release(event);
         * </pre>
         * @see #clean()
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Event.create = function (EventClass, type, bubbles, cancelable) {
            var eventPool;
            var hasEventPool = EventClass.hasOwnProperty("eventPool");
            if (hasEventPool) {
                eventPool = EventClass.eventPool;
            }
            if (!eventPool) {
                eventPool = EventClass.eventPool = [];
            }
            if (eventPool.length) {
                var event_1 = eventPool.pop();
                event_1.$type = type;
                event_1.$bubbles = !!bubbles;
                event_1.$cancelable = !!cancelable;
                event_1.$isDefaultPrevented = false;
                event_1.$isPropagationStopped = false;
                event_1.$isPropagationImmediateStopped = false;
                event_1.$eventPhase = 2 /* EventPhase.AT_TARGET */;
                return event_1;
            }
            return new EventClass(type, bubbles, cancelable);
        };
        /**
         * Releases an event object and cache it into the object pool.We highly recommend using the Event.create()
         * and Event.release() methods to create and release an event object,it can reduce the number of reallocate objects,
         * which allows you to get better code execution performance.<br/>
         * Note: The parameters of this method only accepts an instance created by the Event.create() method.
         * if not,it may throw an error.
         * @example
         * <pre>
         *    let event = Event.create(Event,type, bubbles);
         *    event.data = data; //optional,initializes custom data here
         *    this.dispatchEvent(event);
         *    Event.release(event);
         * </pre>
         * @see #clean()
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 释放一个事件对象，并缓存到对象池。我们建议您尽可能使用Event.create()和Event.release() 这一对方法来创建和释放事件对象，
         * 这一对方法会将事件实例在内部缓存下来供下次循环使用，减少对象的创建次数,从而获得更高的代码运行性能。<br/>
         * 注意：此方法只能传入由Event.create()创建的事件实例，传入非法对象实例可能会导致报错。
         * @example
         * <pre>
         *    let event = Event.create(Event,type, bubbles);
         *    event.data = data;   //可选，若指定义事件上需要附加其他参数，可以在获取实例后在此处设置。
         *    this.dispatchEvent(event);
         *    Event.release(event);
         * </pre>
         * @see #clean()
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Event.release = function (event) {
            event.clean();
            var EventClass = Object.getPrototypeOf(event).constructor;
            EventClass.eventPool.push(event);
        };
        /**
         * Dispatched when a display object is added to the on stage display list, either directly or through the addition
         * of a sub tree in which the display object is contained.
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 在将显示对象直接添加到舞台显示列表或将包含显示对象的子树添加至舞台显示列表中时调度。
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Event.ADDED_TO_STAGE = "addedToStage";
        /**
         * Dispatched when a display object is about to be removed from the display list, either directly or through the removal
         * of a sub tree in which the display object is contained.
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 在从显示列表中直接删除显示对象或删除包含显示对象的子树时调度。
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Event.REMOVED_FROM_STAGE = "removedFromStage";
        /**
         * Dispatched when a display object is added to the display list.
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 将显示对象添加到显示列表中时调度。
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Event.ADDED = "added";
        /**
         * Dispatched when a display object is about to be removed from the display list.
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 将要从显示列表中删除显示对象时调度。
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Event.REMOVED = "removed";
        /**
         * [broadcast event] Dispatched when the playhead is entering a new frame.
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * [广播事件] 进入新的一帧,监听此事件将会在下一帧开始时触发一次回调。这是一个广播事件，可以在任何一个显示对象上监听，无论它是否在显示列表中。
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Event.ENTER_FRAME = "enterFrame";
        /**
         * Dispatched when the display list is about to be updated and rendered.
         * Note: Every time you want to receive a render event,you must call the stage.invalidate() method.
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 渲染事件，监听此事件将会在本帧末即将开始渲染的前一刻触发回调，这是一个广播事件，可以在任何一个显示对象上监听，无论它是否在显示列表中。
         * 注意：每次您希望 Egret 发送 Event.RENDER 事件时，都必须调用 stage.invalidate() 方法，由于每帧只会触发一次屏幕刷新，
         * 若在 Event.RENDER 回调函数执行期间再次调用stage.invalidate()，将会被忽略。
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Event.RENDER = "render";
        /**
         * Dispatched when the size of stage or UIComponent is changed.
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 舞台尺寸或UI组件尺寸发生改变
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Event.RESIZE = "resize";
        /**
         * Dispatched when the value or selection of a property is chaned.
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 属性值或状态发生改变。通常是按钮的选中状态，或者列表的选中项索引改变。
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Event.CHANGE = "change";
        /**
         * Dispatched when the value or selection of a property is going to change.you can cancel this by calling the
         * preventDefault() method.
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 属性值或状态即将发生改变,通常是按钮的选中状态，或者列表的选中项索引改变。可以通过调用 preventDefault() 方法阻止索引发生更改。
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Event.CHANGING = "changing";
        /**
         * Dispatched when the net request is complete.
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 网络请求加载完成
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Event.COMPLETE = "complete";
        /**
         * Dispatched when loop completed.
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 循环完成。循环最后一次只派发 COMPLETE 事件，不派发 LOOP_COMPLETE 事件。
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Event.LOOP_COMPLETE = "loopComplete";
        /**
         * Dispatched when the TextInput instance gets focus.
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * TextInput实例获得焦点
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Event.FOCUS_IN = "focusIn";
        /**
         * Dispatched when the TextInput instance loses focus.
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * TextInput实例失去焦点
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Event.FOCUS_OUT = "focusOut";
        /**
         * Dispatched when the playback is ended.
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 动画声音等播放完成
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        Event.ENDED = "ended";
        /**
         * 游戏激活
         * @version Egret 2.4
         * @platform Web,Native
         */
        Event.ACTIVATE = "activate";
        /**
         * 取消激活
         * @version Egret 2.4
         * @platform Web,Native
         */
        Event.DEACTIVATE = "deactivate";
        /**
         * Event.CLOSE 常量定义 close 事件对象的 type 属性的值。
         * @version Egret 2.4
         * @platform Web,Native
         */
        Event.CLOSE = "close";
        /**
         * Event.CONNECT 常量定义 connect 事件对象的 type 属性的值。
         * @version Egret 2.4
         * @platform Web,Native
         */
        Event.CONNECT = "connect";
        /**
         * Event.LEAVE_STAGE 常量定义 leaveStage 事件对象的 type 属性的值。
         * @version Egret 2.4
         * @platform Web,Native
         */
        Event.LEAVE_STAGE = "leaveStage";
        /**
         * Event.SOUND_COMPLETE 常量定义 在声音完成播放后调度。
         * @version Egret 2.4
         * @platform Web,Native
         */
        Event.SOUND_COMPLETE = "soundComplete";
        return Event;
    }(egret_HashObject.HashObject));
    egret_Event.Event = Event;
})(egret_Event || (egret_Event = {}));
/// <reference path="./HashObject.ts" />
var egret_EventDispatcher;
(function (egret_EventDispatcher) {
    var ONCE_EVENT_LIST = [];
    var EventDispatcher = /** @class */ (function (_super) {
        __extends(EventDispatcher, _super);
        function EventDispatcher(target) {
            if (target === void 0) { target = null; }
            var _this = _super.call(this) || this;
            _this.$EventDispatcher = {
                0: target ? target : _this,
                1: {},
                2: {},
                3: 0
            };
            return _this;
        }
        /**
         * @private
         *
         * @param useCapture
         */
        EventDispatcher.prototype.$getEventMap = function (useCapture) {
            var values = this.$EventDispatcher;
            var eventMap = useCapture ? values[2 /* Keys.captureEventsMap */] : values[1 /* Keys.eventsMap */];
            return eventMap;
        };
        /**
         * @inheritDoc
         * @version Egret 2.4
         * @platform Web,Native
         */
        EventDispatcher.prototype.addEventListener = function (type, listener, thisObject, useCapture, priority) {
            this.$addListener(type, listener, thisObject, useCapture, priority);
        };
        /**
         * @inheritDoc
         * @version Egret 2.4
         * @platform Web,Native
         */
        EventDispatcher.prototype.once = function (type, listener, thisObject, useCapture, priority) {
            this.$addListener(type, listener, thisObject, useCapture, priority, true);
        };
        /**
         * @private
         */
        EventDispatcher.prototype.$addListener = function (type, listener, thisObject, useCapture, priority, dispatchOnce) {
            if (!listener) {
                egret$error(1003, "listener");
            }
            var values = this.$EventDispatcher;
            var eventMap = useCapture ? values[2 /* Keys.captureEventsMap */] : values[1 /* Keys.eventsMap */];
            var list = eventMap[type];
            if (!list) {
                list = eventMap[type] = [];
            }
            else if (values[3 /* Keys.notifyLevel */] !== 0) {
                eventMap[type] = list = list.concat();
            }
            this.$insertEventBin(list, type, listener, thisObject, useCapture, priority, dispatchOnce);
        };
        EventDispatcher.prototype.$insertEventBin = function (list, type, listener, thisObject, useCapture, priority, dispatchOnce) {
            priority = +priority | 0;
            var insertIndex = -1;
            var length = list.length;
            for (var i = 0; i < length; i++) {
                var bin = list[i];
                if (bin.listener == listener && bin.thisObject == thisObject && bin.target == this) {
                    return false;
                }
                if (insertIndex == -1 && bin.priority < priority) {
                    insertIndex = i;
                }
            }
            var eventBin = {
                type: type, listener: listener, thisObject: thisObject, priority: priority,
                target: this, useCapture: useCapture, dispatchOnce: !!dispatchOnce
            };
            if (insertIndex !== -1) {
                list.splice(insertIndex, 0, eventBin);
            }
            else {
                list.push(eventBin);
            }
            return true;
        };
        /**
         * @inheritDoc
         * @version Egret 2.4
         * @platform Web,Native
         */
        EventDispatcher.prototype.removeEventListener = function (type, listener, thisObject, useCapture) {
            var values = this.$EventDispatcher;
            var eventMap = useCapture ? values[2 /* Keys.captureEventsMap */] : values[1 /* Keys.eventsMap */];
            var list = eventMap[type];
            if (!list) {
                return;
            }
            if (values[3 /* Keys.notifyLevel */] !== 0) {
                eventMap[type] = list = list.concat();
            }
            this.$removeEventBin(list, listener, thisObject);
            if (list.length == 0) {
                eventMap[type] = null;
            }
        };
        EventDispatcher.prototype.$removeEventBin = function (list, listener, thisObject) {
            var length = list.length;
            for (var i = 0; i < length; i++) {
                var bin = list[i];
                if (bin.listener == listener && bin.thisObject == thisObject && bin.target == this) {
                    list.splice(i, 1);
                    return true;
                }
            }
            return false;
        };
        /**
         * @inheritDoc
         * @version Egret 2.4
         * @platform Web,Native
         */
        EventDispatcher.prototype.hasEventListener = function (type) {
            var values = this.$EventDispatcher;
            return !!(values[1 /* Keys.eventsMap */][type] || values[2 /* Keys.captureEventsMap */][type]);
        };
        /**
         * @inheritDoc
         * @version Egret 2.4
         * @platform Web,Native
         */
        EventDispatcher.prototype.willTrigger = function (type) {
            return this.hasEventListener(type);
        };
        /**
         * @inheritDoc
         * @version Egret 2.4
         * @platform Web,Native
         */
        EventDispatcher.prototype.dispatchEvent = function (event) {
            event.$currentTarget = this.$EventDispatcher[0 /* Keys.eventTarget */];
            event.$setTarget(event.$currentTarget);
            return this.$notifyListener(event, false);
        };
        /**
         * @private
         */
        EventDispatcher.prototype.$notifyListener = function (event, capturePhase) {
            var values = this.$EventDispatcher;
            var eventMap = capturePhase ? values[2 /* Keys.captureEventsMap */] : values[1 /* Keys.eventsMap */];
            var list = eventMap[event.$type];
            if (!list) {
                return true;
            }
            var length = list.length;
            if (length == 0) {
                return true;
            }
            var onceList = ONCE_EVENT_LIST;
            //做个标记，防止外部修改原始数组导致遍历错误。这里不直接调用list.concat()因为dispatch()方法调用通常比on()等方法频繁。
            values[3 /* Keys.notifyLevel */]++;
            for (var i = 0; i < length; i++) {
                var eventBin = list[i];
                eventBin.listener.call(eventBin.thisObject, event);
                if (eventBin.dispatchOnce) {
                    onceList.push(eventBin);
                }
                if (event.$isPropagationImmediateStopped) {
                    break;
                }
            }
            values[3 /* Keys.notifyLevel */]--;
            while (onceList.length) {
                var eventBin = onceList.pop();
                eventBin.target.removeEventListener(eventBin.type, eventBin.listener, eventBin.thisObject, eventBin.useCapture);
            }
            return !event.$isDefaultPrevented;
        };
        EventDispatcher.prototype.dispatchEventWith = function (type, bubbles, data, cancelable) {
            if (bubbles || this.hasEventListener(type)) {
                var event_2 = egret_Event.Event.create(egret_Event.Event, type, bubbles, cancelable);
                event_2.data = data;
                var result = this.dispatchEvent(event_2);
                egret_Event.Event.release(event_2);
                return result;
            }
            return true;
        };
        return EventDispatcher;
    }(egret_HashObject.HashObject));
    egret_EventDispatcher.EventDispatcher = EventDispatcher;
})(egret_EventDispatcher || (egret_EventDispatcher = {}));
var egret_web_HTML5WebSocket;
(function (egret_web_HTML5WebSocket) {
    /**
     * @private
     */
    var HTML5WebSocket = /** @class */ (function () {
        function HTML5WebSocket() {
            this.host = "";
            this.port = 0;
            if (!window["WebSocket"]) {
                egret$error(3100);
            }
        }
        HTML5WebSocket.prototype.addCallBacks = function (onConnect, onClose, onSocketData, onError, thisObject) {
            this.onConnect = onConnect;
            this.onClose = onClose;
            this.onSocketData = onSocketData;
            this.onError = onError;
            this.thisObject = thisObject;
        };
        HTML5WebSocket.prototype.connect = function (host, port) {
            this.host = host;
            this.port = port;
            var egret_WebSocket_WebSocket_URI = "ws://";
            var socketServerUrl = egret_WebSocket_WebSocket_URI + this.host + (this.port != null ? ":" + this.port : "");
            this.socket = new window["WebSocket"](socketServerUrl);
            this.socket.binaryType = "arraybuffer";
            this._bindEvent();
        };
        HTML5WebSocket.prototype.connectByUrl = function (url) {
            this.socket = new window["WebSocket"](url);
            this.socket.binaryType = "arraybuffer";
            this._bindEvent();
        };
        HTML5WebSocket.prototype._bindEvent = function () {
            var that = this;
            var socket = this.socket;
            socket.onopen = function () {
                if (that.onConnect) {
                    that.onConnect.call(that.thisObject);
                }
            };
            socket.onclose = function (e) {
                if (that.onClose) {
                    that.onClose.call(that.thisObject);
                }
            };
            socket.onerror = function (e) {
                if (that.onError) {
                    that.onError.call(that.thisObject);
                }
            };
            socket.onmessage = function (e) {
                if (that.onSocketData) {
                    if (e.data) {
                        that.onSocketData.call(that.thisObject, e.data);
                    }
                    else {
                        //for mygame
                        that.onSocketData.call(that.thisObject, e);
                    }
                }
            };
        };
        HTML5WebSocket.prototype.send = function (message) {
            this.socket.send(message);
        };
        HTML5WebSocket.prototype.close = function () {
            this.socket.close();
        };
        HTML5WebSocket.prototype.disconnect = function () {
            if (this.socket.disconnect) {
                this.socket.disconnect();
            }
        };
        return HTML5WebSocket;
    }());
    egret_web_HTML5WebSocket.HTML5WebSocket = HTML5WebSocket;
})(egret_web_HTML5WebSocket || (egret_web_HTML5WebSocket = {}));
var egret_IOErrorEvent;
(function (egret_IOErrorEvent) {
    /**
     * @classdesc IO流事件，当错误导致输入或输出操作失败时调度 IOErrorEvent 对象。
     * @version Egret 2.4
     * @platform Web,Native
     * @includeExample egret/events/IOErrorEvent.ts
     * @language en_US
     */
    /**
     * @classdesc IO流事件，当错误导致输入或输出操作失败时调度 IOErrorEvent 对象。
     * @version Egret 2.4
     * @platform Web,Native
     * @includeExample egret/events/IOErrorEvent.ts
     * @language zh_CN
     */
    var IOErrorEvent = /** @class */ (function (_super) {
        __extends(IOErrorEvent, _super);
        /**
         * Create a egret.IOErrorEvent objects
         * @param type {string} Type of event, accessible as Event.type.
         * @param bubbles {boolean} Determines whether the Event object participates in the bubbling stage of the event flow. The default value is false.
         * @param cancelable {boolean} Determine whether the Event object can be canceled. The default value is false.
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 创建一个 egret.IOErrorEvent 对象
         * @param type {string} 事件的类型，可以作为 Event.type 访问。
         * @param bubbles {boolean} 确定 Event 对象是否参与事件流的冒泡阶段。默认值为 false。
         * @param cancelable {boolean} 确定是否可以取消 Event 对象。默认值为 false。
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        function IOErrorEvent(type, bubbles, cancelable) {
            if (bubbles === void 0) { bubbles = false; }
            if (cancelable === void 0) { cancelable = false; }
            return _super.call(this, type, bubbles, cancelable) || this;
        }
        /**
         * EventDispatcher object using the specified event object thrown Event. The objects will be thrown in the object cache pool for the next round robin.
         * @param target {egret.IEventDispatcher} Distribute event target
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 使用指定的EventDispatcher对象来抛出Event事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。
         * @param target {egret.IEventDispatcher} 派发事件目标
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        IOErrorEvent.dispatchIOErrorEvent = function (target) {
            var event = egret_Event.Event.create(IOErrorEvent, IOErrorEvent.IO_ERROR);
            var result = target.dispatchEvent(event);
            egret_Event.Event.release(event);
            return result;
        };
        /**
         * io error
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * io发生错误
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        IOErrorEvent.IO_ERROR = "ioError";
        return IOErrorEvent;
    }(egret_Event.Event));
    egret_IOErrorEvent.IOErrorEvent = IOErrorEvent;
})(egret_IOErrorEvent || (egret_IOErrorEvent = {}));
var egret_ProgressEvent;
(function (egret_ProgressEvent) {
    /**
     * When a load operation has begun or a socket has received data, ProgressEvent object is dispatched.
     * There are two types of progress events: ProgressEvent.PROGRESS and ProgressEvent.SOCKET_DATA.
     * @version Egret 2.4
     * @platform Web,Native
     * @language en_US
     */
    /**
     * 当加载操作已开始或套接字已接收到数据时，将调度 ProgressEvent 对象。
     * 有两种类型的进程事件：ProgressEvent.PROGRESS 和 ProgressEvent.SOCKET_DATA。
     * @version Egret 2.4
     * @platform Web,Native
     * @language zh_CN
     */
    var ProgressEvent = /** @class */ (function (_super) {
        __extends(ProgressEvent, _super);
        /**
         * 创建一个 egret.ProgressEvent 对象
         * @param type  The type of the event, accessible as Event.type.
         * @param bubbles  Determines whether the Event object participates in the bubbling stage of the event flow. The default value is false.
         * @param cancelable Determines whether the Event object can be canceled. The default values is false.
         * @param bytesLoaded {number} Number of items or bytes loaded
         * @param bytesTotal {number} The total number of items or bytes loaded
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 创建一个 egret.ProgressEvent 对象
         * @param type  事件的类型，可以作为 Event.type 访问。
         * @param bubbles  确定 Event 对象是否参与事件流的冒泡阶段。默认值为 false。
         * @param cancelable 确定是否可以取消 Event 对象。默认值为 false。
         * @param bytesLoaded {number} 加载的项数或字节数
         * @param bytesTotal {number} 加载的总项数或总字节数
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        function ProgressEvent(type, bubbles, cancelable, bytesLoaded, bytesTotal) {
            if (bubbles === void 0) { bubbles = false; }
            if (cancelable === void 0) { cancelable = false; }
            if (bytesLoaded === void 0) { bytesLoaded = 0; }
            if (bytesTotal === void 0) { bytesTotal = 0; }
            var _this = _super.call(this, type, bubbles, cancelable) || this;
            /**
             * Number of items or bytes when the listener processes the event。
             * @version Egret 2.4
             * @platform Web,Native
             * @language en_US
             */
            /**
             * 在侦听器处理事件时加载的项数或字节数。
             * @version Egret 2.4
             * @platform Web,Native
             * @language zh_CN
             */
            _this.bytesLoaded = 0;
            /**
             * If the loading process succeeds, the total number or the total number of bytes that will be loaded term.
             * @version Egret 2.4
             * @platform Web,Native
             * @language en_US
             */
            /**
             * 如果加载过程成功，将加载的总项数或总字节数。
             * @version Egret 2.4
             * @platform Web,Native
             * @language zh_CN
             */
            _this.bytesTotal = 0;
            _this.bytesLoaded = bytesLoaded;
            _this.bytesTotal = bytesTotal;
            return _this;
        }
        /**
         * EventDispatcher object using the specified event object thrown Event. The objects will be thrown in the object cache pool for the next round robin.
         * @param target {egret.IEventDispatcher} Distribute event target
         * @param type  The type of the event, accessible as Event.type.
         * @param bytesLoaded {number} Number of items or bytes loaded
         * @param bytesTotal {number} The total number of items or bytes loaded
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 使用指定的EventDispatcher对象来抛出Event事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。
         * @param target {egret.IEventDispatcher} 派发事件目标
         * @param type {string} 事件类型
         * @param bytesLoaded {number} 加载的项数或字节数
         * @param bytesTotal {number} 加载的总项数或总字节数
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ProgressEvent.dispatchProgressEvent = function (target, type, bytesLoaded, bytesTotal) {
            if (bytesLoaded === void 0) { bytesLoaded = 0; }
            if (bytesTotal === void 0) { bytesTotal = 0; }
            var event = egret_Event.Event.create(ProgressEvent, type);
            event.bytesLoaded = bytesLoaded;
            event.bytesTotal = bytesTotal;
            var result = target.dispatchEvent(event);
            egret_Event.Event.release(event);
            return result;
        };
        /**
         * Changes in the loading progress
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 加载进度发生变化
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ProgressEvent.PROGRESS = "progress";
        /**
         * Get the data
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 获取到数据
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        ProgressEvent.SOCKET_DATA = "socketData";
        return ProgressEvent;
    }(egret_Event.Event));
    egret_ProgressEvent.ProgressEvent = ProgressEvent;
})(egret_ProgressEvent || (egret_ProgressEvent = {}));
var egret_WebSocket;
(function (egret_WebSocket) {
    /**
     * The egret.WebSocket class enables code to establish a TCP socket connection, for sending and receiving character string or binary data.
     * To use the methods of the egret.WebSocket class, first use the constructor function new egret.WebSocket to create an egret.WebSocket object.
     * The socket transmits and receives data in asynchronous mode.
     * @event egret_Event.Event.CONNECT Successfully connect to the server。
     * @event egret.ProgressEvent.SOCKET_DATA Receiving server data。
     * @event egret_Event.Event.CLOSE Dispatched when the server closes the connection.
     * @event egret.ProgressEvent Dispatched when an IO error causes a send or load operation to fail.
     * @see http://edn.egret.com/cn/docs/page/602 WebSocket
     * @version Egret 2.4
     * @platform Web,Native
     * @includeExample extension/socket/WebSocket.ts
     * @language en_US
     */
    /**
     * egret.WebSocket 类启用代码以建立传输控制协议 (TCP) 套接字连接，用于发送和接收字符串或二进制数据。
     * 要使用 egret.WebSocket 类的方法，请先使用构造函数 new egret.WebSocket 创建一个 egret.WebSocket 对象。
     * 套接字以异步方式传输和接收数据。
     * @event egret_Event.Event.CONNECT 连接服务器成功。
     * @event egret.ProgressEvent.SOCKET_DATA 接收服务器数据。
     * @event egret_Event.Event.CLOSE 在服务器关闭连接时调度。
     * @event egret.IOErrorEvent.IO_ERROR 在出现输入/输出错误并导致发送或加载操作失败时调度。。
     * @see http://edn.egret.com/cn/docs/page/602 WebSocket
     * @version Egret 2.4
     * @platform Web,Native
     * @includeExample extension/socket/WebSocket.ts
     * @language zh_CN
     */
    var WebSocket = /** @class */ (function (_super) {
        __extends(WebSocket, _super);
        /**
         * Create an egret.WebSocket object
         * This parameter is reserved for later versions. The connection address and port number are imported in the connect function
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 创建一个 egret.WebSocket 对象
         * 参数为预留参数，现版本暂不处理，连接地址和端口号在 connect 函数中传入
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        function WebSocket(host, port) {
            if (host === void 0) { host = ""; }
            if (port === void 0) { port = 0; }
            var _this = _super.call(this) || this;
            /**
             * @private
             */
            _this._writeMessage = "";
            /**
             * @private
             */
            _this._readMessage = "";
            /**
             * @private
             */
            _this._connected = false;
            /**
             * @private
             */
            _this._connecting = false;
            /**
             * @private
             */
            _this._isReadySend = false;
            /**
             * @private
             */
            _this._bytesWrite = false;
            /**
             * @private
             */
            _this._type = WebSocket.TYPE_STRING;
            _this._connected = false;
            _this._writeMessage = "";
            _this._readMessage = "";
            _this.socket = new egret_web_HTML5WebSocket.HTML5WebSocket();
            _this.socket.addCallBacks(_this.onConnect, _this.onClose, _this.onSocketData, _this.onError, _this);
            return _this;
        }
        /**
         * Connect the socket to the specified host and port number
         * @param host Name or IP address of the host to be connected
         * @param port Port number to be connected
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 将套接字连接到指定的主机和端口
         * @param host 要连接到的主机的名称或 IP 地址
         * @param port 要连接到的端口号
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        WebSocket.prototype.connect = function (host, port) {
            if (!this._connecting && !this._connected) {
                this._connecting = true;
                this.socket.connect(host, port);
            }
        };
        /**
         * 根据提供的url连接
         * @param url 全地址。如ws://echo.websocket.org:80
         */
        WebSocket.prototype.connectByUrl = function (url) {
            if (!this._connecting && !this._connected) {
                this._connecting = true;
                this.socket.connectByUrl(url);
            }
        };
        /**
         * Closesocket
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 关闭套接字
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        WebSocket.prototype.close = function () {
            if (this._connected) {
                this.socket.close();
            }
        };
        /**
         * @private
         *
         */
        WebSocket.prototype.onConnect = function () {
            this._connected = true;
            this._connecting = false;
            this.dispatchEventWith(egret_Event.Event.CONNECT);
        };
        /**
         * @private
         *
         */
        WebSocket.prototype.onClose = function () {
            this._connected = false;
            this.dispatchEventWith(egret_Event.Event.CLOSE);
        };
        /**
         * @private
         *
         */
        WebSocket.prototype.onError = function () {
            if (this._connecting) {
                this._connecting = false;
            }
            this.dispatchEventWith(egret_IOErrorEvent.IOErrorEvent.IO_ERROR);
        };
        /**
         * @private
         *
         * @param message
         */
        WebSocket.prototype.onSocketData = function (message) {
            if (typeof message == "string") {
                this._readMessage += message;
            }
            else {
                this._readByte._writeUint8Array(new Uint8Array(message));
            }
            egret_ProgressEvent.ProgressEvent.dispatchProgressEvent(this, egret_ProgressEvent.ProgressEvent.SOCKET_DATA);
        };
        /**
         * Refresh all data accumulated in the output buffer area of the socket
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 对套接字输出缓冲区中积累的所有数据进行刷新
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        WebSocket.prototype.flush = function () {
            if (!this._connected) {
                egret$error(3101);
                return;
            }
            if (this._writeMessage) {
                this.socket.send(this._writeMessage);
                this._writeMessage = "";
            }
            if (this._bytesWrite) {
                this.socket.send(this._writeByte.buffer);
                this._bytesWrite = false;
                this._writeByte.clear();
            }
            this._isReadySend = false;
        };
        /**
         * Write data in character string in the socket
         * @param message The character string to be written in the socket
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 将字符串数据写入套接字
         * @param message 要写入套接字的字符串
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        WebSocket.prototype.writeUTF = function (message) {
            if (!this._connected) {
                egret$error(3101);
                return;
            }
            if (this._type == WebSocket.TYPE_BINARY) {
                this._bytesWrite = true;
                this._writeByte.writeUTF(message);
            }
            else {
                this._writeMessage += message;
            }
            this.flush();
            // return;
            // if (this._isReadySend) {
            //     return;
            // }
            // this._isReadySend = true;
            // egret.callLater(this.flush, this);
        };
        /**
         * Read a UTF-8 character string from the socket
         * @returns {string}
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 从套接字读取一个 UTF-8 字符串
         * @returns {string}
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        WebSocket.prototype.readUTF = function () {
            var message;
            if (this._type == WebSocket.TYPE_BINARY) {
                this._readByte.position = 0;
                message = this._readByte.readUTF();
                this._readByte.clear();
            }
            else {
                message = this._readMessage;
                this._readMessage = "";
            }
            return message;
        };
        /**
         * Write a series of bytes from the specified byte array. The writing operation starts from the location expressed by offset.
         * If the length parameter is ignored, the default length 0 indicates that data is written from offset in the entire buffer area.
         * If the offset parameter is ignored, data is written in the entire buffer area.
         * @param bytes The ByteArray object where data is read from
         * @param offset Zero-based offset in the ByteArray object. From here start performing data writing
         * @param length Number of bytes to be written Default value 0 indicates data is written in the entire buffer area from the value specified by the offset parameter
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 从指定的字节数组写入一系列字节。写入操作从 offset 指定的位置开始。
         * 如果省略了 length 参数，则默认长度 0 将导致该方法从 offset 开始写入整个缓冲区。
         * 如果还省略了 offset 参数，则写入整个缓冲区。
         * @param bytes 要从中读取数据的 ByteArray 对象
         * @param offset ByteArray 对象中从零开始的偏移量，应由此开始执行数据写入
         * @param length 要写入的字节数。默认值 0 导致从 offset 参数指定的值开始写入整个缓冲区
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        WebSocket.prototype.writeBytes = function (bytes, offset, length) {
            if (offset === void 0) { offset = 0; }
            if (length === void 0) { length = 0; }
            if (!this._connected) {
                egret$error(3101);
                return;
            }
            if (!this._writeByte) {
                egret$error(3102);
                return;
            }
            this._bytesWrite = true;
            this._writeByte.writeBytes(bytes, offset, length);
            this.flush();
        };
        /**
         * Read data byte number specified by the length parameter from the socket. Read these bytes into the specified byte array starting from the location expressed by offset.
         * @param bytes The ByteArray object that data is read into
         * @param offset The offset for data reading starts from this byte array
         * @param length Byte number to be read Default value 0 indicates reading all available data
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 从套接字读取 length 参数指定的数据字节数。从 offset 所表示的位置开始，将这些字节读入指定的字节数组
         * @param bytes 要将数据读入的 ByteArray 对象
         * @param offset 数据读取的偏移量应从该字节数组中开始
         * @param length 要读取的字节数。默认值 0 导致读取所有可用的数据
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        WebSocket.prototype.readBytes = function (bytes, offset, length) {
            if (offset === void 0) { offset = 0; }
            if (length === void 0) { length = 0; }
            if (!this._readByte) {
                egret$error(3102);
                return;
            }
            this._readByte.position = 0;
            this._readByte.readBytes(bytes, offset, length);
            this._readByte.clear();
        };
        Object.defineProperty(WebSocket.prototype, "connected", {
            /**
             * Indicates whether the Socket object is connected currently
             * @version Egret 2.4
             * @platform Web,Native
             * @language en_US
             */
            /**
             * 表示此 Socket 对象目前是否已连接
             * @version Egret 2.4
             * @platform Web,Native
             * @language zh_CN
             */
            get: function () {
                return this._connected;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WebSocket.prototype, "type", {
            /**
             * Format for sending and receiving data. The default setting is the character string format
             * @version Egret 2.4
             * @platform Web,Native
             * @language en_US
             */
            /**
             * 发送和接收数据的格式，默认是字符串格式
             * @version Egret 2.4
             * @platform Web,Native
             * @language zh_CN
             */
            get: function () {
                return this._type;
            },
            set: function (value) {
                this._type = value;
                if (value == WebSocket.TYPE_BINARY && !this._writeByte) {
                    this._readByte = new egret_ByteArray.ByteArray();
                    this._writeByte = new egret_ByteArray.ByteArray();
                }
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Send and receive data in character string format
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 以字符串格式发送和接收数据
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        WebSocket.TYPE_STRING = "webSocketTypeString";
        /**
         * Send and receive data in binary format
         * @version Egret 2.4
         * @platform Web,Native
         * @language en_US
         */
        /**
         * 以二进制格式发送和接收数据
         * @version Egret 2.4
         * @platform Web,Native
         * @language zh_CN
         */
        WebSocket.TYPE_BINARY = "webSocketTypeBinary";
        WebSocket.URI = "ws://";
        return WebSocket;
    }(egret_EventDispatcher.EventDispatcher));
    egret_WebSocket.WebSocket = WebSocket;
})(egret_WebSocket || (egret_WebSocket = {}));
function egret$error(params, code_point) {
    if (code_point === void 0) { code_point = 'no_code_point'; }
    console.log('egret error:' + params + ',' + code_point);
}
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:270
     */
    var ActivityJadePlateModel = /** @class */ (function (_super) {
        __extends(ActivityJadePlateModel, _super);
        function ActivityJadePlateModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(270001 /* ActivityJadePlateModelCMD.CMDResActivityJadePlateInfoMessage */);
            return _this;
        }
        ActivityJadePlateModel.ins = function () {
            if (!this._ins)
                this._ins = new ActivityJadePlateModel();
            return this._ins;
        };
        ActivityJadePlateModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 270001 /* ActivityJadePlateModelCMD.CMDResActivityJadePlateInfoMessage */:
                    var acquiredLength1 = input.readShort();
                    var resActivityJadePlateInfoMessage = new Array(acquiredLength1);
                    for (var acquiredi1 = 0; acquiredi1 < acquiredLength1; acquiredi1++) {
                        resActivityJadePlateInfoMessage[acquiredi1] = input.readVarInt(false); //已领取
                    }
                    this.sendNotif(cmd, resActivityJadePlateInfoMessage);
                    break;
            }
        };
        return ActivityJadePlateModel;
    }(ModelBase));
    net.ActivityJadePlateModel = ActivityJadePlateModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:0
     */
    var AbcModel = /** @class */ (function (_super) {
        __extends(AbcModel, _super);
        function AbcModel() {
            return _super.call(this) || this;
        }
        AbcModel.ins = function () {
            if (!this._ins)
                this._ins = new AbcModel();
            return this._ins;
        };
        AbcModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
            }
        };
        return AbcModel;
    }(ModelBase));
    net.AbcModel = AbcModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:307
     */
    var AccessoryAwakeModel = /** @class */ (function (_super) {
        __extends(AccessoryAwakeModel, _super);
        function AccessoryAwakeModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(307002 /* AccessoryAwakeModelCMD.CMDResAccessoryAwakePanelMessage */);
            thisObj.reg(307004 /* AccessoryAwakeModelCMD.CMDResAwakeAccessoryMessage */);
            return _this;
        }
        AccessoryAwakeModel.ins = function () {
            if (!this._ins)
                this._ins = new AccessoryAwakeModel();
            return this._ins;
        };
        /**
         *
         * 新佩饰觉醒_前端请求饰配觉醒面板数据
         *
         * sendReqAccessoryAwakePanelMessage  307001
         */
        AccessoryAwakeModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(307001 /* AccessoryAwakeModelCMD.CMDReqAccessoryAwakePanelMessage */, output, s);
        };
        /**
         *
         * 新佩饰觉醒_前端请求觉醒佩饰
         * @param 部位
         *
         * sendReqAwakeAccessoryMessage  307003
         */
        AccessoryAwakeModel.prototype.send3 = function (pos, s) {
            var output = this.getO();
            output.writeVarInt(pos, false);
            this.send(307003 /* AccessoryAwakeModelCMD.CMDReqAwakeAccessoryMessage */, output, s);
        };
        AccessoryAwakeModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 307002 /* AccessoryAwakeModelCMD.CMDResAccessoryAwakePanelMessage */:
                    var awakeBeansLength1 = input.readShort();
                    var resAccessoryAwakePanelMessage = [];
                    for (var awakeBeansi1 = 0; awakeBeansi1 < awakeBeansLength1; awakeBeansi1++) {
                        if (input.readByte() != 0) {
                            var temp1044 = resAccessoryAwakePanelMessage[awakeBeansi1] = {}; //佩饰觉醒数据
                            temp1044["index"] = input.readVarInt(false); //部位
                            temp1044["level"] = input.readVarInt(false); //等级
                        }
                        else {
                            resAccessoryAwakePanelMessage[awakeBeansi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resAccessoryAwakePanelMessage);
                    break;
                case 307004 /* AccessoryAwakeModelCMD.CMDResAwakeAccessoryMessage */:
                    var awakeBeanLength1 = input.readByte();
                    if (awakeBeanLength1 != 0) {
                        var resAwakeAccessoryMessage = {}; //佩饰觉醒数据
                        resAwakeAccessoryMessage["index"] = input.readVarInt(false); //部位
                        resAwakeAccessoryMessage["level"] = input.readVarInt(false); //等级
                    }
                    this.sendNotif(cmd, resAwakeAccessoryMessage);
                    break;
            }
        };
        return AccessoryAwakeModel;
    }(ModelBase));
    net.AccessoryAwakeModel = AccessoryAwakeModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:58
     */
    var ActivationModel = /** @class */ (function (_super) {
        __extends(ActivationModel, _super);
        function ActivationModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(58002 /* ActivationModelCMD.CMDResActivationMessage */);
            return _this;
        }
        ActivationModel.ins = function () {
            if (!this._ins)
                this._ins = new ActivationModel();
            return this._ins;
        };
        /**
         *
         * 请求激活码信息
         *
         * sendReqActivationMessage  58001
         */
        ActivationModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(58001 /* ActivationModelCMD.CMDReqActivationMessage */, output, s);
        };
        ActivationModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 58002 /* ActivationModelCMD.CMDResActivationMessage */:
                    var resActivationMessage = input.readString(); //激活码 空表示没有（条件不满足）
                    this.sendNotif(cmd, resActivationMessage);
                    break;
            }
        };
        return ActivationModel;
    }(ModelBase));
    net.ActivationModel = ActivationModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:224
     */
    var ActivityAccumulativeConsumeModel = /** @class */ (function (_super) {
        __extends(ActivityAccumulativeConsumeModel, _super);
        function ActivityAccumulativeConsumeModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(224002 /* ActivityAccumulativeConsumeModelCMD.CMDResAdvanceAccumulativeConsumeInfoMessage */);
            return _this;
        }
        ActivityAccumulativeConsumeModel.ins = function () {
            if (!this._ins)
                this._ins = new ActivityAccumulativeConsumeModel();
            return this._ins;
        };
        /**
         *
         * 请求信息
         * @param 活动类型
         *
         * sendReqAdvanceAccumulativeConsumeInfoMessage  224001
         */
        ActivityAccumulativeConsumeModel.prototype.send1 = function (type, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            this.send(224001 /* ActivityAccumulativeConsumeModelCMD.CMDReqAdvanceAccumulativeConsumeInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取奖励
         * @param
         * @param
         *
         * sendReqAdvanceAccumulativeConsumeAcquireMessage  224003
         */
        ActivityAccumulativeConsumeModel.prototype.send3 = function (type, cid, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            output.writeVarInt(cid, false);
            this.send(224003 /* ActivityAccumulativeConsumeModelCMD.CMDReqAdvanceAccumulativeConsumeAcquireMessage */, output, s);
        };
        ActivityAccumulativeConsumeModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 224002 /* ActivityAccumulativeConsumeModelCMD.CMDResAdvanceAccumulativeConsumeInfoMessage */:
                    var resAdvanceAccumulativeConsumeInfoMessage = {};
                    resAdvanceAccumulativeConsumeInfoMessage["type"] = input.readVarInt(false); //
                    resAdvanceAccumulativeConsumeInfoMessage["consumed"] = input.readVarInt(false); //
                    var acquiredLength1 = input.readShort();
                    resAdvanceAccumulativeConsumeInfoMessage["acquired"] = new Array(acquiredLength1);
                    for (var acquiredi1 = 0; acquiredi1 < acquiredLength1; acquiredi1++) {
                        resAdvanceAccumulativeConsumeInfoMessage["acquired"][acquiredi1] = input.readVarInt(false); //
                    }
                    this.sendNotif(cmd, resAdvanceAccumulativeConsumeInfoMessage);
                    break;
            }
        };
        return ActivityAccumulativeConsumeModel;
    }(ModelBase));
    net.ActivityAccumulativeConsumeModel = ActivityAccumulativeConsumeModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:53
     */
    var ActivityContinuosLoginModel = /** @class */ (function (_super) {
        __extends(ActivityContinuosLoginModel, _super);
        function ActivityContinuosLoginModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(53002 /* ActivityContinuosLoginModelCMD.CMDResActivityContinuousLoginInfoMessage */);
            thisObj.reg(53004 /* ActivityContinuosLoginModelCMD.CMDResActivityContinuousLoginUpdateMessage */);
            return _this;
        }
        ActivityContinuosLoginModel.ins = function () {
            if (!this._ins)
                this._ins = new ActivityContinuosLoginModel();
            return this._ins;
        };
        /**
         *
         *
         *
         * sendReqActivityContinuousLoginInfoMessage  53001
         */
        ActivityContinuosLoginModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(53001 /* ActivityContinuosLoginModelCMD.CMDReqActivityContinuousLoginInfoMessage */, output, s);
        };
        /**
         *
         *
         * @param
         * @param 是否补签 1补签
         *
         * sendReqActivityContinuousLoginAcquireMessage  53003
         */
        ActivityContinuosLoginModel.prototype.send3 = function (cid, supp, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            output.writeVarInt(supp, false);
            this.send(53003 /* ActivityContinuosLoginModelCMD.CMDReqActivityContinuousLoginAcquireMessage */, output, s);
        };
        ActivityContinuosLoginModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 53002 /* ActivityContinuosLoginModelCMD.CMDResActivityContinuousLoginInfoMessage */:
                    var statusLength1 = input.readShort();
                    var resActivityContinuousLoginInfoMessage = [];
                    for (var statusi1 = 0; statusi1 < statusLength1; statusi1++) {
                        if (input.readByte() != 0) {
                            var temp600 = resActivityContinuousLoginInfoMessage[statusi1] = {}; //
                            temp600["cid"] = input.readVarInt(false); //
                            temp600["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityContinuousLoginInfoMessage[statusi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityContinuousLoginInfoMessage);
                    break;
                case 53004 /* ActivityContinuosLoginModelCMD.CMDResActivityContinuousLoginUpdateMessage */:
                    var statusLength2 = input.readByte();
                    if (statusLength2 != 0) {
                        var resActivityContinuousLoginUpdateMessage = {}; //
                        resActivityContinuousLoginUpdateMessage["cid"] = input.readVarInt(false); //
                        resActivityContinuousLoginUpdateMessage["status"] = input.readVarInt(false); //
                    }
                    this.sendNotif(cmd, resActivityContinuousLoginUpdateMessage);
                    break;
            }
        };
        return ActivityContinuosLoginModel;
    }(ModelBase));
    net.ActivityContinuosLoginModel = ActivityContinuosLoginModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:226
     */
    var ActivityCrazyShopModel = /** @class */ (function (_super) {
        __extends(ActivityCrazyShopModel, _super);
        function ActivityCrazyShopModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(226002 /* ActivityCrazyShopModelCMD.CMDResActivityCrazyShopInfoMessage */);
            thisObj.reg(226007 /* ActivityCrazyShopModelCMD.CMDResActivityCrazyShopInfo4tjMessage */);
            return _this;
        }
        ActivityCrazyShopModel.ins = function () {
            if (!this._ins)
                this._ins = new ActivityCrazyShopModel();
            return this._ins;
        };
        /**
         *
         * 疯狂购物车活动-前端请求疯狂购物车数据
         *
         * sendReqActivityCrazyShopInfoMessage  226001
         */
        ActivityCrazyShopModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(226001 /* ActivityCrazyShopModelCMD.CMDReqActivityCrazyShopInfoMessage */, output, s);
        };
        /**
         *
         * 疯狂购物车活动-前端请求加入商品到购物车中
         * @param 加入商品的配置id（即cfg_crazyshop表中的id）
         *
         * sendReqActivityCrazyShopAddCommodityMessage  226003
         */
        ActivityCrazyShopModel.prototype.send3 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(226003 /* ActivityCrazyShopModelCMD.CMDReqActivityCrazyShopAddCommodityMessage */, output, s);
        };
        /**
         *
         * 疯狂购物车活动-前端请求移除购物车中的商品
         * @param 移除商品的配置id（即cfg_crazyshop表中的id）
         *
         * sendReqActivityCrazyShopRemoveCommodityMessage  226004
         */
        ActivityCrazyShopModel.prototype.send4 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(226004 /* ActivityCrazyShopModelCMD.CMDReqActivityCrazyShopRemoveCommodityMessage */, output, s);
        };
        /**
         *
         * 疯狂购物车活动-前端请求结算疯狂购物车
         *
         * sendReqSettleCrazyShopMessage  226005
         */
        ActivityCrazyShopModel.prototype.send5 = function (s) {
            var output = this.getO();
            this.send(226005 /* ActivityCrazyShopModelCMD.CMDReqSettleCrazyShopMessage */, output, s);
        };
        /**
         *
         * 特戒复刻疯狂购物车活动-前端请求疯狂购物车数据
         *
         * sendReqActivityCrazyShopInfo4tjMessage  226006
         */
        ActivityCrazyShopModel.prototype.send6 = function (s) {
            var output = this.getO();
            this.send(226006 /* ActivityCrazyShopModelCMD.CMDReqActivityCrazyShopInfo4tjMessage */, output, s);
        };
        /**
         *
         * 特戒复刻疯狂购物车活动-前端请求加入商品到购物车中
         * @param 加入商品的配置id（即cfg_crazyshop表中的id）
         *
         * sendReqActivityCrazyShopAddCommodity4tjMessage  226008
         */
        ActivityCrazyShopModel.prototype.send8 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(226008 /* ActivityCrazyShopModelCMD.CMDReqActivityCrazyShopAddCommodity4tjMessage */, output, s);
        };
        /**
         *
         * 特戒复刻疯狂购物车活动-前端请求移除购物车中的商品
         * @param 移除商品的配置id（即cfg_crazyshop表中的id）
         *
         * sendReqActivityCrazyShopRemoveCommodity4tjMessage  226009
         */
        ActivityCrazyShopModel.prototype.send9 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(226009 /* ActivityCrazyShopModelCMD.CMDReqActivityCrazyShopRemoveCommodity4tjMessage */, output, s);
        };
        /**
         *
         * 特戒复刻疯狂购物车活动-前端请求结算疯狂购物车
         *
         * sendReqSettleCrazyShop4tjMessage  226010
         */
        ActivityCrazyShopModel.prototype.send10 = function (s) {
            var output = this.getO();
            this.send(226010 /* ActivityCrazyShopModelCMD.CMDReqSettleCrazyShop4tjMessage */, output, s);
        };
        ActivityCrazyShopModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 226002 /* ActivityCrazyShopModelCMD.CMDResActivityCrazyShopInfoMessage */:
                    var resActivityCrazyShopInfoMessage = {};
                    resActivityCrazyShopInfoMessage["count"] = input.readVarInt(false); //已结算次数
                    var commoditiesLength1 = input.readShort();
                    resActivityCrazyShopInfoMessage["commodities"] = new Array(commoditiesLength1);
                    for (var commoditiesi1 = 0; commoditiesi1 < commoditiesLength1; commoditiesi1++) {
                        resActivityCrazyShopInfoMessage["commodities"][commoditiesi1] = input.readVarInt(false); //已加入购物车的道具id（即cfg_crazyshop表中的id）列表
                    }
                    this.sendNotif(cmd, resActivityCrazyShopInfoMessage);
                    break;
                case 226007 /* ActivityCrazyShopModelCMD.CMDResActivityCrazyShopInfo4tjMessage */:
                    var resActivityCrazyShopInfo4tjMessage = {};
                    resActivityCrazyShopInfo4tjMessage["count"] = input.readVarInt(false); //已结算次数
                    var commoditiesLength2 = input.readShort();
                    resActivityCrazyShopInfo4tjMessage["commodities"] = new Array(commoditiesLength2);
                    for (var commoditiesi2 = 0; commoditiesi2 < commoditiesLength2; commoditiesi2++) {
                        resActivityCrazyShopInfo4tjMessage["commodities"][commoditiesi2] = input.readVarInt(false); //已加入购物车的道具id（即cfg_crazyshop表中的id）列表
                    }
                    this.sendNotif(cmd, resActivityCrazyShopInfo4tjMessage);
                    break;
            }
        };
        return ActivityCrazyShopModel;
    }(ModelBase));
    net.ActivityCrazyShopModel = ActivityCrazyShopModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:45
     */
    var ActivityDailyAccumylativeRechargeModel = /** @class */ (function (_super) {
        __extends(ActivityDailyAccumylativeRechargeModel, _super);
        function ActivityDailyAccumylativeRechargeModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(45002 /* ActivityDailyAccumylativeRechargeModelCMD.CMDResActivityDailyAccumulativeRechargeInfoMessage */);
            thisObj.reg(45006 /* ActivityDailyAccumylativeRechargeModelCMD.CMDResActivityDailyAccumulativeRechargeUpdateMessage */);
            thisObj.reg(45007 /* ActivityDailyAccumylativeRechargeModelCMD.CMDResActivityDailyAccumulativeRechargeProgressMessage */);
            return _this;
        }
        ActivityDailyAccumylativeRechargeModel.ins = function () {
            if (!this._ins)
                this._ins = new ActivityDailyAccumylativeRechargeModel();
            return this._ins;
        };
        /**
         *
         * 请求信息
         *
         * sendReqActivityDailyAccumulativeRechargeInfoMessage  45001
         */
        ActivityDailyAccumylativeRechargeModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(45001 /* ActivityDailyAccumylativeRechargeModelCMD.CMDReqActivityDailyAccumulativeRechargeInfoMessage */, output, s);
        };
        /**
         *
         * 领取每日奖励
         * @param id
         *
         * sendReqActivityDailyAccumulativeRechargeAcquireDailyMessage  45003
         */
        ActivityDailyAccumylativeRechargeModel.prototype.send3 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(45003 /* ActivityDailyAccumylativeRechargeModelCMD.CMDReqActivityDailyAccumulativeRechargeAcquireDailyMessage */, output, s);
        };
        /**
         *
         * 领取天累计奖励
         * @param id
         *
         * sendReqActivityDailyAccumulativeRechargeAcquireDaysMessage  45004
         */
        ActivityDailyAccumylativeRechargeModel.prototype.send4 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(45004 /* ActivityDailyAccumylativeRechargeModelCMD.CMDReqActivityDailyAccumulativeRechargeAcquireDaysMessage */, output, s);
        };
        /**
         *
         * 领取累充奖励
         * @param id
         *
         * sendReqActivityDailyAccumulativeRechargeAcquireAccumulativeMessage  45005
         */
        ActivityDailyAccumylativeRechargeModel.prototype.send5 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(45005 /* ActivityDailyAccumylativeRechargeModelCMD.CMDReqActivityDailyAccumulativeRechargeAcquireAccumulativeMessage */, output, s);
        };
        ActivityDailyAccumylativeRechargeModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 45002 /* ActivityDailyAccumylativeRechargeModelCMD.CMDResActivityDailyAccumulativeRechargeInfoMessage */:
                    var resActivityDailyAccumulativeRechargeInfoMessage = {};
                    resActivityDailyAccumulativeRechargeInfoMessage["round"] = input.readVarInt(false); //轮次
                    resActivityDailyAccumulativeRechargeInfoMessage["days"] = input.readVarInt(false); //已经累计的天数
                    resActivityDailyAccumulativeRechargeInfoMessage["dailyRecharged"] = input.readVarInt(false); //日充值数
                    resActivityDailyAccumulativeRechargeInfoMessage["totalRecharged"] = input.readVarInt(false); //累计充值数
                    var dailyStatusLength1 = input.readShort();
                    resActivityDailyAccumulativeRechargeInfoMessage["dailyStatus"] = [];
                    for (var dailyStatusi1 = 0; dailyStatusi1 < dailyStatusLength1; dailyStatusi1++) {
                        if (input.readByte() != 0) {
                            var temp686 = resActivityDailyAccumulativeRechargeInfoMessage["dailyStatus"][dailyStatusi1] = {}; //每日状态
                            temp686["cid"] = input.readVarInt(false); //
                            temp686["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityDailyAccumulativeRechargeInfoMessage["dailyStatus"][dailyStatusi1] = null;
                        }
                    }
                    var daysStatusLength1 = input.readShort();
                    resActivityDailyAccumulativeRechargeInfoMessage["daysStatus"] = [];
                    for (var daysStatusi1 = 0; daysStatusi1 < daysStatusLength1; daysStatusi1++) {
                        if (input.readByte() != 0) {
                            var temp687 = resActivityDailyAccumulativeRechargeInfoMessage["daysStatus"][daysStatusi1] = {}; //每日状态
                            temp687["cid"] = input.readVarInt(false); //
                            temp687["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityDailyAccumulativeRechargeInfoMessage["daysStatus"][daysStatusi1] = null;
                        }
                    }
                    var accumulativeStatusLength1 = input.readShort();
                    resActivityDailyAccumulativeRechargeInfoMessage["accumulativeStatus"] = [];
                    for (var accumulativeStatusi1 = 0; accumulativeStatusi1 < accumulativeStatusLength1; accumulativeStatusi1++) {
                        if (input.readByte() != 0) {
                            var temp688 = resActivityDailyAccumulativeRechargeInfoMessage["accumulativeStatus"][accumulativeStatusi1] = {}; //每日状态
                            temp688["cid"] = input.readVarInt(false); //
                            temp688["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityDailyAccumulativeRechargeInfoMessage["accumulativeStatus"][accumulativeStatusi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityDailyAccumulativeRechargeInfoMessage);
                    break;
                case 45006 /* ActivityDailyAccumylativeRechargeModelCMD.CMDResActivityDailyAccumulativeRechargeUpdateMessage */:
                    var resActivityDailyAccumulativeRechargeUpdateMessage = {};
                    var dailyStatusLength2 = input.readByte();
                    if (dailyStatusLength2 != 0) {
                        var temp689 = resActivityDailyAccumulativeRechargeUpdateMessage["dailyStatus"] = {}; //每日状态
                        temp689["cid"] = input.readVarInt(false); //
                        temp689["status"] = input.readVarInt(false); //
                    }
                    var daysStatusLength2 = input.readByte();
                    if (daysStatusLength2 != 0) {
                        var temp690 = resActivityDailyAccumulativeRechargeUpdateMessage["daysStatus"] = {}; //每日状态
                        temp690["cid"] = input.readVarInt(false); //
                        temp690["status"] = input.readVarInt(false); //
                    }
                    var accumulativeStatusLength2 = input.readByte();
                    if (accumulativeStatusLength2 != 0) {
                        var temp691 = resActivityDailyAccumulativeRechargeUpdateMessage["accumulativeStatus"] = {}; //每日状态
                        temp691["cid"] = input.readVarInt(false); //
                        temp691["status"] = input.readVarInt(false); //
                    }
                    this.sendNotif(cmd, resActivityDailyAccumulativeRechargeUpdateMessage);
                    break;
                case 45007 /* ActivityDailyAccumylativeRechargeModelCMD.CMDResActivityDailyAccumulativeRechargeProgressMessage */:
                    var resActivityDailyAccumulativeRechargeProgressMessage = {};
                    resActivityDailyAccumulativeRechargeProgressMessage["days"] = input.readVarInt(false); //已经累计的天数
                    resActivityDailyAccumulativeRechargeProgressMessage["dailyRecharged"] = input.readVarInt(false); //日充值数
                    resActivityDailyAccumulativeRechargeProgressMessage["totalRecharged"] = input.readVarInt(false); //累计充值数
                    this.sendNotif(cmd, resActivityDailyAccumulativeRechargeProgressMessage);
                    break;
            }
        };
        return ActivityDailyAccumylativeRechargeModel;
    }(ModelBase));
    net.ActivityDailyAccumylativeRechargeModel = ActivityDailyAccumylativeRechargeModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:353
     */
    var ActivityFaBaoPassPackModel = /** @class */ (function (_super) {
        __extends(ActivityFaBaoPassPackModel, _super);
        function ActivityFaBaoPassPackModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(353002 /* ActivityFaBaoPassPackModelCMD.CMDResActivityFaBaoPassPackInfoMessage */);
            return _this;
        }
        ActivityFaBaoPassPackModel.ins = function () {
            if (!this._ins)
                this._ins = new ActivityFaBaoPassPackModel();
            return this._ins;
        };
        /**
         *
         *
         *
         * sendReqActivityFaBaoPassPackInfoMessage  353001
         */
        ActivityFaBaoPassPackModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(353001 /* ActivityFaBaoPassPackModelCMD.CMDReqActivityFaBaoPassPackInfoMessage */, output, s);
        };
        /**
         *
         *
         * @param
         *
         * sendReqActiveFaBaoPassPackMessage  353003
         */
        ActivityFaBaoPassPackModel.prototype.send3 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(353003 /* ActivityFaBaoPassPackModelCMD.CMDReqActiveFaBaoPassPackMessage */, output, s);
        };
        /**
         *
         *
         * @param 配置id
         * @param 1 第一天，2 第二天， 3 第三天
         *
         * sendReqAcquireFaBaoPassPackMessage  353004
         */
        ActivityFaBaoPassPackModel.prototype.send4 = function (cfgId, day, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            output.writeVarInt(day, false);
            this.send(353004 /* ActivityFaBaoPassPackModelCMD.CMDReqAcquireFaBaoPassPackMessage */, output, s);
        };
        ActivityFaBaoPassPackModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 353002 /* ActivityFaBaoPassPackModelCMD.CMDResActivityFaBaoPassPackInfoMessage */:
                    var faBaoPassPacksLength1 = input.readShort();
                    var resActivityFaBaoPassPackInfoMessage = [];
                    for (var faBaoPassPacksi1 = 0; faBaoPassPacksi1 < faBaoPassPacksLength1; faBaoPassPacksi1++) {
                        if (input.readByte() != 0) {
                            var temp853 = resActivityFaBaoPassPackInfoMessage[faBaoPassPacksi1] = {}; //
                            temp853["cfgId"] = input.readVarInt(false); //配置id
                            temp853["isActive"] = input.readBoolean(); //是否激活
                            var acquiresLength1 = input.readShort();
                            temp853["acquires"] = [];
                            for (var acquiresi1 = 0; acquiresi1 < acquiresLength1; acquiresi1++) {
                                if (input.readByte() != 0) {
                                    var temp854 = temp853["acquires"][acquiresi1] = {}; //领取状态
                                    temp854["day"] = input.readVarInt(false); //1 第一天，2 第二天， 3 第三天
                                    temp854["state"] = input.readVarInt(false); //1 不可领取， 2可领取， 3已领取
                                }
                                else {
                                    temp853["acquires"][acquiresi1] = null;
                                }
                            }
                        }
                        else {
                            resActivityFaBaoPassPackInfoMessage[faBaoPassPacksi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityFaBaoPassPackInfoMessage);
                    break;
            }
        };
        return ActivityFaBaoPassPackModel;
    }(ModelBase));
    net.ActivityFaBaoPassPackModel = ActivityFaBaoPassPackModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:59
     */
    var ActivityMergeModel = /** @class */ (function (_super) {
        __extends(ActivityMergeModel, _super);
        function ActivityMergeModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(59003 /* ActivityMergeModelCMD.CMDResActivityMergeRechargeDailyInfoMessage */);
            thisObj.reg(59012 /* ActivityMergeModelCMD.CMDResActivityMergeContinuousLoginInfoMessage */);
            thisObj.reg(59014 /* ActivityMergeModelCMD.CMDResActivityMergeContinuousLoginUpdateMessage */);
            thisObj.reg(59022 /* ActivityMergeModelCMD.CMDResActivityMergeExchangeInfoMessage */);
            thisObj.reg(59032 /* ActivityMergeModelCMD.CMDResActivityMergePromotionsInfoMessage */);
            return _this;
        }
        ActivityMergeModel.ins = function () {
            if (!this._ins)
                this._ins = new ActivityMergeModel();
            return this._ins;
        };
        /**
         *
         *
         *
         * sendReqActivityMergeRechargeDailyInfoMessage  59001
         */
        ActivityMergeModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(59001 /* ActivityMergeModelCMD.CMDReqActivityMergeRechargeDailyInfoMessage */, output, s);
        };
        /**
         *
         *
         * @param
         *
         * sendReqActivityMergeRechargeDailyAcquireMessage  59002
         */
        ActivityMergeModel.prototype.send2 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(59002 /* ActivityMergeModelCMD.CMDReqActivityMergeRechargeDailyAcquireMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqActivityMergeContinuousLoginInfoMessage  59011
         */
        ActivityMergeModel.prototype.send11 = function (s) {
            var output = this.getO();
            this.send(59011 /* ActivityMergeModelCMD.CMDReqActivityMergeContinuousLoginInfoMessage */, output, s);
        };
        /**
         *
         *
         * @param
         * @param 是否补签 1补签
         *
         * sendReqActivityMergeContinuousLoginAcquireMessage  59013
         */
        ActivityMergeModel.prototype.send13 = function (cid, supp, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            output.writeVarInt(supp, false);
            this.send(59013 /* ActivityMergeModelCMD.CMDReqActivityMergeContinuousLoginAcquireMessage */, output, s);
        };
        /**
         *
         * 请求全民收集活动数据
         *
         * sendReqActivityMergeExchangeInfoMessage  59021
         */
        ActivityMergeModel.prototype.send21 = function (s) {
            var output = this.getO();
            this.send(59021 /* ActivityMergeModelCMD.CMDReqActivityMergeExchangeInfoMessage */, output, s);
        };
        /**
         *
         * 请求兑换全民收集奖励
         * @param 配置id
         * @param 数量
         *
         * sendReqActivityMergeExchangeAcquireMessage  59023
         */
        ActivityMergeModel.prototype.send23 = function (cid, count, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            output.writeVarInt(count, false);
            this.send(59023 /* ActivityMergeModelCMD.CMDReqActivityMergeExchangeAcquireMessage */, output, s);
        };
        /**
         *
         * 请求限时特惠活动数据
         *
         * sendReqActivityMergePromotionsInfoMessage  59031
         */
        ActivityMergeModel.prototype.send31 = function (s) {
            var output = this.getO();
            this.send(59031 /* ActivityMergeModelCMD.CMDReqActivityMergePromotionsInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取限时特惠奖励
         * @param 配置id
         * @param 是否匿名 0不匿名
         *
         * sendReqActivityMergePromotionsAcquireMessage  59033
         */
        ActivityMergeModel.prototype.send33 = function (cid, anonymous, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            output.writeVarInt(anonymous, false);
            this.send(59033 /* ActivityMergeModelCMD.CMDReqActivityMergePromotionsAcquireMessage */, output, s);
        };
        ActivityMergeModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 59003 /* ActivityMergeModelCMD.CMDResActivityMergeRechargeDailyInfoMessage */:
                    var resActivityMergeRechargeDailyInfoMessage = {};
                    resActivityMergeRechargeDailyInfoMessage["recharged"] = input.readVarInt(false); //
                    var statusLength1 = input.readShort();
                    resActivityMergeRechargeDailyInfoMessage["status"] = [];
                    for (var statusi1 = 0; statusi1 < statusLength1; statusi1++) {
                        if (input.readByte() != 0) {
                            var temp824 = resActivityMergeRechargeDailyInfoMessage["status"][statusi1] = {}; //
                            temp824["cid"] = input.readVarInt(false); //
                            temp824["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityMergeRechargeDailyInfoMessage["status"][statusi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityMergeRechargeDailyInfoMessage);
                    break;
                case 59012 /* ActivityMergeModelCMD.CMDResActivityMergeContinuousLoginInfoMessage */:
                    var statusLength2 = input.readShort();
                    var resActivityMergeContinuousLoginInfoMessage = [];
                    for (var statusi2 = 0; statusi2 < statusLength2; statusi2++) {
                        if (input.readByte() != 0) {
                            var temp825 = resActivityMergeContinuousLoginInfoMessage[statusi2] = {}; //
                            temp825["cid"] = input.readVarInt(false); //
                            temp825["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityMergeContinuousLoginInfoMessage[statusi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityMergeContinuousLoginInfoMessage);
                    break;
                case 59014 /* ActivityMergeModelCMD.CMDResActivityMergeContinuousLoginUpdateMessage */:
                    var statusLength3 = input.readByte();
                    if (statusLength3 != 0) {
                        var resActivityMergeContinuousLoginUpdateMessage = {}; //
                        resActivityMergeContinuousLoginUpdateMessage["cid"] = input.readVarInt(false); //
                        resActivityMergeContinuousLoginUpdateMessage["status"] = input.readVarInt(false); //
                    }
                    this.sendNotif(cmd, resActivityMergeContinuousLoginUpdateMessage);
                    break;
                case 59022 /* ActivityMergeModelCMD.CMDResActivityMergeExchangeInfoMessage */:
                    var statusLength4 = input.readShort();
                    var resActivityMergeExchangeInfoMessage = [];
                    for (var statusi4 = 0; statusi4 < statusLength4; statusi4++) {
                        if (input.readByte() != 0) {
                            var temp826 = resActivityMergeExchangeInfoMessage[statusi4] = {}; //活动兑换次数
                            temp826["cid"] = input.readVarInt(false); //
                            temp826["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityMergeExchangeInfoMessage[statusi4] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityMergeExchangeInfoMessage);
                    break;
                case 59032 /* ActivityMergeModelCMD.CMDResActivityMergePromotionsInfoMessage */:
                    var statusLength5 = input.readShort();
                    var resActivityMergePromotionsInfoMessage = [];
                    for (var statusi5 = 0; statusi5 < statusLength5; statusi5++) {
                        if (input.readByte() != 0) {
                            var temp827 = resActivityMergePromotionsInfoMessage[statusi5] = {}; //活动领取状态
                            temp827["cid"] = input.readVarInt(false); //
                            temp827["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityMergePromotionsInfoMessage[statusi5] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityMergePromotionsInfoMessage);
                    break;
            }
        };
        return ActivityMergeModel;
    }(ModelBase));
    net.ActivityMergeModel = ActivityMergeModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:4
     */
    var ActivityModel = /** @class */ (function (_super) {
        __extends(ActivityModel, _super);
        function ActivityModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(4002 /* ActivityModelCMD.CMDResAvailableActivitiesMessage */);
            thisObj.reg(4005 /* ActivityModelCMD.CMDResActivityRewardRecordListMessage */);
            thisObj.reg(4012 /* ActivityModelCMD.CMDResActivityFirstPurchaseInfoMessage */);
            thisObj.reg(4014 /* ActivityModelCMD.CMDResActivityFirstPurchaseAcquireMessage */);
            thisObj.reg(4016 /* ActivityModelCMD.CMDResActivityFirstPurchaseStepperInfoMessage */);
            thisObj.reg(4018 /* ActivityModelCMD.CMDResActivityFirstPurchaseStepperAcquireMessage */);
            thisObj.reg(4022 /* ActivityModelCMD.CMDResActivityPurchasePresentDailyInfoMessage */);
            thisObj.reg(4023 /* ActivityModelCMD.CMDResActivityPurchasePresentDaysInfoMessage */);
            thisObj.reg(4024 /* ActivityModelCMD.CMDResActivityPurchasePresentRechargeInfoMessage */);
            thisObj.reg(4032 /* ActivityModelCMD.CMDResActivityRankingLevelMessage */);
            thisObj.reg(4034 /* ActivityModelCMD.CMDResActivityRankingAmuletMessage */);
            thisObj.reg(4036 /* ActivityModelCMD.CMDResActivityRankingRechargeMessage */);
            thisObj.reg(4038 /* ActivityModelCMD.CMDResActivityRankingConsumeMessage */);
            thisObj.reg(4043 /* ActivityModelCMD.CMDResActivityEquipRecycleInfoMessage */);
            thisObj.reg(4053 /* ActivityModelCMD.CMDResActivitySaleBagInfoMessage */);
            thisObj.reg(4063 /* ActivityModelCMD.CMDResActivityCompeteLevelInfoMessage */);
            thisObj.reg(4064 /* ActivityModelCMD.CMDResActivityCompeteLevelProgressMessage */);
            thisObj.reg(4066 /* ActivityModelCMD.CMDResActivityTreasureMonsterInfoMessage */);
            thisObj.reg(4073 /* ActivityModelCMD.CMDResActivityCompeteAmuletInfoMessage */);
            thisObj.reg(4074 /* ActivityModelCMD.CMDResActivityCompeteAmuletProgressMessage */);
            thisObj.reg(4082 /* ActivityModelCMD.CMDResActivityWeekendGoalInfoMessage */);
            thisObj.reg(4092 /* ActivityModelCMD.CMDResActivityRechargeRebateInfoMessage */);
            thisObj.reg(4102 /* ActivityModelCMD.CMDResActivityRechargeDrawInfoMessage */);
            thisObj.reg(4113 /* ActivityModelCMD.CMDResActivityGemGoalInfoMessage */);
            thisObj.reg(4123 /* ActivityModelCMD.CMDResActivityRechargeDailyInfoMessage */);
            thisObj.reg(4132 /* ActivityModelCMD.CMDResActivityDiscountGiftDailyInfoMessage */);
            thisObj.reg(4142 /* ActivityModelCMD.CMDResActivityRechargePointInfoMessage */);
            thisObj.reg(4152 /* ActivityModelCMD.CMDResActivityLuckDrawInfoMessage */);
            thisObj.reg(4161 /* ActivityModelCMD.CMDResActivityAttackRankInfoMessage */);
            thisObj.reg(4163 /* ActivityModelCMD.CMDResActivityAttackTargetInfoMessage */);
            thisObj.reg(4166 /* ActivityModelCMD.CMDResTitleTaskInfoMessage */);
            thisObj.reg(4168 /* ActivityModelCMD.CMDResTitleTaskProcessMessage */);
            thisObj.reg(4170 /* ActivityModelCMD.CMDResActivityPromotionsInfoMessage */);
            thisObj.reg(4173 /* ActivityModelCMD.CMDResActivityExchangeInfoMessage */);
            thisObj.reg(4176 /* ActivityModelCMD.CMDResActivityOfficialAccountsInfoMessage */);
            thisObj.reg(4178 /* ActivityModelCMD.CMDResActivityVIPServiceInfoMessage */);
            thisObj.reg(4180 /* ActivityModelCMD.CMDResActivityAntiFraudGuideInfoMessage */);
            thisObj.reg(4184 /* ActivityModelCMD.CMDResActivityAnnounceInfoMessage */);
            thisObj.reg(4186 /* ActivityModelCMD.CMDResActivityTotalExchangeInfoMessage */);
            thisObj.reg(4192 /* ActivityModelCMD.CMDResActivityWeekendGoalCopyInfoMessage */);
            thisObj.reg(4202 /* ActivityModelCMD.CMDResActivityLuckyBoxInfoMessage */);
            thisObj.reg(4205 /* ActivityModelCMD.CMDResActivityLuckyBoxExtraInfoMessage */);
            thisObj.reg(4212 /* ActivityModelCMD.CMDResActivityRechargeLimitInfoMessage */);
            thisObj.reg(4222 /* ActivityModelCMD.CMDResActivitySponsorInfoMessage */);
            thisObj.reg(4232 /* ActivityModelCMD.CMDResActivitySevenDayGoalInfoMessage */);
            thisObj.reg(4234 /* ActivityModelCMD.CMDResActivitySevenDayProcessMessage */);
            thisObj.reg(4242 /* ActivityModelCMD.CMDResActivityFundInfoMessage */);
            thisObj.reg(4245 /* ActivityModelCMD.CMDResActivityFundMessage */);
            thisObj.reg(4252 /* ActivityModelCMD.CMDResActivityOpenPromotionsInfoMessage */);
            thisObj.reg(4262 /* ActivityModelCMD.CMDResActivityAmbrosiaInfoMessage */);
            thisObj.reg(4264 /* ActivityModelCMD.CMDResActivityAmbrosiaAcquireMessage */);
            thisObj.reg(4266 /* ActivityModelCMD.CMDResActivityGodGoalsRankingMessage */);
            thisObj.reg(4272 /* ActivityModelCMD.CMDResActivityDiscountShopInfoMessage */);
            thisObj.reg(4275 /* ActivityModelCMD.CMDResChooseRechargeMessage */);
            thisObj.reg(4282 /* ActivityModelCMD.CMDResHeavenPacketInfoMessage */);
            thisObj.reg(4292 /* ActivityModelCMD.CMDResGodRecordInfoMessage */);
            thisObj.reg(4294 /* ActivityModelCMD.CMDResGodRecordProcessMessage */);
            thisObj.reg(4302 /* ActivityModelCMD.CMDResFirstRechargeThreeMessage */);
            thisObj.reg(4312 /* ActivityModelCMD.CMDResGhostGoalMessage */);
            thisObj.reg(4314 /* ActivityModelCMD.CMDResGhostProcessMessage */);
            thisObj.reg(4321 /* ActivityModelCMD.CMDResDiceInfoMessage */);
            thisObj.reg(4403 /* ActivityModelCMD.CMDResActivityCompeteTrumpInfoMessage */);
            thisObj.reg(4404 /* ActivityModelCMD.CMDResActivityCompeteTrumpProgressMessage */);
            thisObj.reg(4413 /* ActivityModelCMD.CMDResActivityCompeteImageInfoMessage */);
            thisObj.reg(4414 /* ActivityModelCMD.CMDResActivityCompeteImageProgressMessage */);
            thisObj.reg(4422 /* ActivityModelCMD.CMDResActivityTreasureHeavenInfoMessage */);
            thisObj.reg(4425 /* ActivityModelCMD.CMDResActivityTreasureHeavenTurnMessage */);
            thisObj.reg(4427 /* ActivityModelCMD.CMDResActivityTreasureHeavenHotMessage */);
            thisObj.reg(4432 /* ActivityModelCMD.CMDResActivityTotalRechargeInfoMessage */);
            thisObj.reg(4443 /* ActivityModelCMD.CMDResActivityCompeteInfoMessage */);
            thisObj.reg(4444 /* ActivityModelCMD.CMDResActivityCompeteProgressMessage */);
            thisObj.reg(4452 /* ActivityModelCMD.CMDResActivityRankingReinAndLevelMessage */);
            thisObj.reg(4462 /* ActivityModelCMD.CMDResActivityDefenseRankInfoMessage */);
            thisObj.reg(4472 /* ActivityModelCMD.CMDResActivityFashionSaleInfoMessage */);
            thisObj.reg(4482 /* ActivityModelCMD.CMDResPlatformRewardInfoMessage */);
            thisObj.reg(4485 /* ActivityModelCMD.CMDResActivityPlatformCompeteLevelInfoMessage */);
            thisObj.reg(4492 /* ActivityModelCMD.CMDResMicroTerminalRewardStateMessage */);
            thisObj.reg(4502 /* ActivityModelCMD.CMDResActivitySevenDayStarInfoMessage */);
            thisObj.reg(4504 /* ActivityModelCMD.CMDResActivitySevenDayStarProcessMessage */);
            thisObj.reg(4512 /* ActivityModelCMD.CMDResActivityStarStatueInfoMessage */);
            thisObj.reg(4522 /* ActivityModelCMD.CMDResActivityQQHallGiftMessage */);
            thisObj.reg(4532 /* ActivityModelCMD.CMDResActivityMonopolyInfoMessage */);
            thisObj.reg(4542 /* ActivityModelCMD.CMDResActivityDailyRechargeRebateInfoMessage */);
            thisObj.reg(4552 /* ActivityModelCMD.CMDResActivityWingTaskInfoMessage */);
            thisObj.reg(4562 /* ActivityModelCMD.CMDResActivityMergeUnionInfoMessage */);
            thisObj.reg(4566 /* ActivityModelCMD.CMDResActivityTurntableInfoMessage */);
            thisObj.reg(4572 /* ActivityModelCMD.CMDResActivityDiscountTicketInfoMessage */);
            thisObj.reg(4582 /* ActivityModelCMD.CMDResActivityLoginRewardInfoMessage */);
            thisObj.reg(4592 /* ActivityModelCMD.CMDResActivityCumulativeLoginInfoMessage */);
            thisObj.reg(4613 /* ActivityModelCMD.CMDResActivitySecKillingMessage */);
            thisObj.reg(4622 /* ActivityModelCMD.CMDResActivityLimitRechargePackInfoMessage */);
            thisObj.reg(4632 /* ActivityModelCMD.CMDResTrumpSkillTaskInfoMessage */);
            thisObj.reg(4642 /* ActivityModelCMD.CMDResActivityQQBlueVipGiftMessage */);
            thisObj.reg(4645 /* ActivityModelCMD.CMDResQQBlueVipInfoMessage */);
            thisObj.reg(4652 /* ActivityModelCMD.CMDResWishInfoMessage */);
            thisObj.reg(4662 /* ActivityModelCMD.CMDResExpandInfoMessage */);
            thisObj.reg(4665 /* ActivityModelCMD.CMDResAdventureTraderInfoMessage */);
            thisObj.reg(4671 /* ActivityModelCMD.CMDResActivityRebateDuplicateInfoMessage */);
            thisObj.reg(4673 /* ActivityModelCMD.CMDResActivityRebateDuplicateSuccessMessage */);
            thisObj.reg(4675 /* ActivityModelCMD.CMDResActivityRebateDuplicatePanelMessage */);
            thisObj.reg(4682 /* ActivityModelCMD.CMDResActivityAncestorsDuplicateInfoMessage */);
            thisObj.reg(4692 /* ActivityModelCMD.CMDResActivityDoubleFirstRechargeInfoMessage */);
            thisObj.reg(4702 /* ActivityModelCMD.CMDResActivityRecycleRebateInfoMessage */);
            thisObj.reg(4712 /* ActivityModelCMD.CMDResActivityExquisiteInfoMessage */);
            thisObj.reg(4722 /* ActivityModelCMD.CMDResActivityClockRebateInfoMessage */);
            thisObj.reg(4732 /* ActivityModelCMD.CMDResActivityRankingCommonMessage */);
            thisObj.reg(4733 /* ActivityModelCMD.CMDResActivityWeekendSponsorShipGiftInfoMessage */);
            thisObj.reg(4734 /* ActivityModelCMD.CMDResActivityWeekendRechargeGiftInfoMessage */);
            thisObj.reg(4742 /* ActivityModelCMD.CMDResDivinePowerInfoMessage */);
            thisObj.reg(4746 /* ActivityModelCMD.CMDResMergeLevelUpInfoMessage */);
            return _this;
        }
        ActivityModel.ins = function () {
            if (!this._ins)
                this._ins = new ActivityModel();
            return this._ins;
        };
        /**
         *
         * 请求当前开放活动列表
         *
         * sendReqAvailableActivitiesMessage  4001
         */
        ActivityModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(4001 /* ActivityModelCMD.CMDReqAvailableActivitiesMessage */, output, s);
        };
        /**
         *
         * 请求匿名
         * @param 活动id
         * @param 状态 0不匿名 1匿名
         *
         * sendReqActivityAnonymousMessage  4003
         */
        ActivityModel.prototype.send3 = function (activityId, status, s) {
            var output = this.getO();
            output.writeVarInt(activityId, false);
            output.writeVarInt(status, false);
            this.send(4003 /* ActivityModelCMD.CMDReqActivityAnonymousMessage */, output, s);
        };
        /**
         *
         * 请求活动奖励记录
         * @param 活动id
         *
         * sendReqActivityRewardListMessage  4004
         */
        ActivityModel.prototype.send4 = function (activityId, s) {
            var output = this.getO();
            output.writeVarInt(activityId, false);
            this.send(4004 /* ActivityModelCMD.CMDReqActivityRewardListMessage */, output, s);
        };
        /**
         *
         * 请求玩家首充数据
         *
         * sendReqActivityFirstPurchaseInfoMessage  4011
         */
        ActivityModel.prototype.send11 = function (s) {
            var output = this.getO();
            this.send(4011 /* ActivityModelCMD.CMDReqActivityFirstPurchaseInfoMessage */, output, s);
        };
        /**
         *
         * null
         * @param 请求领取的奖励配置id
         *
         * sendReqActivityFirstPurchaseAcquireMessage  4013
         */
        ActivityModel.prototype.send13 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(4013 /* ActivityModelCMD.CMDReqActivityFirstPurchaseAcquireMessage */, output, s);
        };
        /**
         *
         * 请求玩家分档首充数据
         *
         * sendReqActivityFirstPurchaseStepperInfoMessage  4015
         */
        ActivityModel.prototype.send15 = function (s) {
            var output = this.getO();
            this.send(4015 /* ActivityModelCMD.CMDReqActivityFirstPurchaseStepperInfoMessage */, output, s);
        };
        /**
         *
         * null
         * @param 请求领取的奖励配置id
         *
         * sendReqActivityFirstPurchaseStepperAcquireMessage  4017
         */
        ActivityModel.prototype.send17 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(4017 /* ActivityModelCMD.CMDReqActivityFirstPurchaseStepperAcquireMessage */, output, s);
        };
        /**
         *
         * 请求活动信息
         *
         * sendReqActivityPurchasePresentInfoMessage  4021
         */
        ActivityModel.prototype.send21 = function (s) {
            var output = this.getO();
            this.send(4021 /* ActivityModelCMD.CMDReqActivityPurchasePresentInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取当日奖励
         * @param 领取奖励配置id
         *
         * sendReqActivityPurchasePresentAcquireDailyMessage  4025
         */
        ActivityModel.prototype.send25 = function (whichone, s) {
            var output = this.getO();
            output.writeVarInt(whichone, false);
            this.send(4025 /* ActivityModelCMD.CMDReqActivityPurchasePresentAcquireDailyMessage */, output, s);
        };
        /**
         *
         * 请求领取天数累计奖励
         *
         * sendReqActivityPurchasePresentAcquireDaysMessage  4026
         */
        ActivityModel.prototype.send26 = function (s) {
            var output = this.getO();
            this.send(4026 /* ActivityModelCMD.CMDReqActivityPurchasePresentAcquireDaysMessage */, output, s);
        };
        /**
         *
         * 请求领取充值累计奖励
         * @param 领取奖励配置id
         *
         * sendReqActivityPurchasePresentAcquireRechargeMessage  4027
         */
        ActivityModel.prototype.send27 = function (whichone, s) {
            var output = this.getO();
            output.writeVarInt(whichone, false);
            this.send(4027 /* ActivityModelCMD.CMDReqActivityPurchasePresentAcquireRechargeMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqActivityRankingLevelMessage  4031
         */
        ActivityModel.prototype.send31 = function (s) {
            var output = this.getO();
            this.send(4031 /* ActivityModelCMD.CMDReqActivityRankingLevelMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqActivityRankingAmuletMessage  4033
         */
        ActivityModel.prototype.send33 = function (s) {
            var output = this.getO();
            this.send(4033 /* ActivityModelCMD.CMDReqActivityRankingAmuletMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqActivityRankingRechargeMessage  4035
         */
        ActivityModel.prototype.send35 = function (s) {
            var output = this.getO();
            this.send(4035 /* ActivityModelCMD.CMDReqActivityRankingRechargeMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqActivityRankingConsumeMessage  4037
         */
        ActivityModel.prototype.send37 = function (s) {
            var output = this.getO();
            this.send(4037 /* ActivityModelCMD.CMDReqActivityRankingConsumeMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqActivityEquipRecycleInfoMessage  4041
         */
        ActivityModel.prototype.send41 = function (s) {
            var output = this.getO();
            this.send(4041 /* ActivityModelCMD.CMDReqActivityEquipRecycleInfoMessage */, output, s);
        };
        /**
         *
         *
         * @param 配置id
         *
         * sendReqActivityEquipRecycleAcquireMessage  4042
         */
        ActivityModel.prototype.send42 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(4042 /* ActivityModelCMD.CMDReqActivityEquipRecycleAcquireMessage */, output, s);
        };
        /**
         *
         * 请求信息
         *
         * sendReqActivitySaleBagInfoMessage  4051
         */
        ActivityModel.prototype.send51 = function (s) {
            var output = this.getO();
            this.send(4051 /* ActivityModelCMD.CMDReqActivitySaleBagInfoMessage */, output, s);
        };
        /**
         *
         * 请求购买
         * @param 购买配置id
         *
         * sendReqActivitySaleBagAcquireMessage  4052
         */
        ActivityModel.prototype.send52 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(4052 /* ActivityModelCMD.CMDReqActivitySaleBagAcquireMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqActivityCompeteLevelInfoMessage  4061
         */
        ActivityModel.prototype.send61 = function (s) {
            var output = this.getO();
            this.send(4061 /* ActivityModelCMD.CMDReqActivityCompeteLevelInfoMessage */, output, s);
        };
        /**
         *
         *
         * @param 配置id
         *
         * sendReqActivityCompeteLevelAcquireMessage  4062
         */
        ActivityModel.prototype.send62 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(4062 /* ActivityModelCMD.CMDReqActivityCompeteLevelAcquireMessage */, output, s);
        };
        /**
         *
         * 请求禁地封魔信息
         *
         * sendReqActivityTreasureMonsterInfoMessage  4065
         */
        ActivityModel.prototype.send65 = function (s) {
            var output = this.getO();
            this.send(4065 /* ActivityModelCMD.CMDReqActivityTreasureMonsterInfoMessage */, output, s);
        };
        /**
         *
         * 请求禁地封魔领取积分奖励
         * @param 配置id
         *
         * sendReqActivityTreasureMonsterAcquireMessage  4067
         */
        ActivityModel.prototype.send67 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(4067 /* ActivityModelCMD.CMDReqActivityTreasureMonsterAcquireMessage */, output, s);
        };
        /**
         *
         * 请求寻宝
         * @param cfg_treasure_monster配置id
         *
         * sendReqActivityTreasureMonsterCallMessage  4068
         */
        ActivityModel.prototype.send68 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(4068 /* ActivityModelCMD.CMDReqActivityTreasureMonsterCallMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqActivityCompeteAmuletInfoMessage  4071
         */
        ActivityModel.prototype.send71 = function (s) {
            var output = this.getO();
            this.send(4071 /* ActivityModelCMD.CMDReqActivityCompeteAmuletInfoMessage */, output, s);
        };
        /**
         *
         *
         * @param 配置id
         *
         * sendReqActivityCompeteAmuletAcquireMessage  4072
         */
        ActivityModel.prototype.send72 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(4072 /* ActivityModelCMD.CMDReqActivityCompeteAmuletAcquireMessage */, output, s);
        };
        /**
         *
         * 请求活动数据
         *
         * sendReqActivityWeekendGoalInfoMessage  4081
         */
        ActivityModel.prototype.send81 = function (s) {
            var output = this.getO();
            this.send(4081 /* ActivityModelCMD.CMDReqActivityWeekendGoalInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取奖励
         * @param 请求领取的任务id
         *
         * sendReqActivityWeekendGoalAcquireMessage  4083
         */
        ActivityModel.prototype.send83 = function (task, s) {
            var output = this.getO();
            output.writeVarInt(task, false);
            this.send(4083 /* ActivityModelCMD.CMDReqActivityWeekendGoalAcquireMessage */, output, s);
        };
        /**
         *
         * 请求活动数据
         *
         * sendReqActivityRechargeRebateInfoMessage  4091
         */
        ActivityModel.prototype.send91 = function (s) {
            var output = this.getO();
            this.send(4091 /* ActivityModelCMD.CMDReqActivityRechargeRebateInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取
         * @param 配置id
         *
         * sendReqActivityRechargeRebateAcquireMessage  4093
         */
        ActivityModel.prototype.send93 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(4093 /* ActivityModelCMD.CMDReqActivityRechargeRebateAcquireMessage */, output, s);
        };
        /**
         *
         * 请求活动数据
         *
         * sendReqActivityRechargeDrawInfoMessage  4101
         */
        ActivityModel.prototype.send101 = function (s) {
            var output = this.getO();
            this.send(4101 /* ActivityModelCMD.CMDReqActivityRechargeDrawInfoMessage */, output, s);
        };
        /**
         *
         * 请求抽奖
         *
         * sendReqActivityRechargeDrawAcquireMessage  4103
         */
        ActivityModel.prototype.send103 = function (s) {
            var output = this.getO();
            this.send(4103 /* ActivityModelCMD.CMDReqActivityRechargeDrawAcquireMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqActivityGemGoalInfoMessage  4111
         */
        ActivityModel.prototype.send111 = function (s) {
            var output = this.getO();
            this.send(4111 /* ActivityModelCMD.CMDReqActivityGemGoalInfoMessage */, output, s);
        };
        /**
         *
         *
         * @param 请求领取的奖励配置id
         *
         * sendReqActivityGemGoalAcquireMessage  4112
         */
        ActivityModel.prototype.send112 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(4112 /* ActivityModelCMD.CMDReqActivityGemGoalAcquireMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqActivityRechargeDailyInfoMessage  4121
         */
        ActivityModel.prototype.send121 = function (s) {
            var output = this.getO();
            this.send(4121 /* ActivityModelCMD.CMDReqActivityRechargeDailyInfoMessage */, output, s);
        };
        /**
         *
         *
         * @param
         *
         * sendReqActivityRechargeDailyAcquireMessage  4122
         */
        ActivityModel.prototype.send122 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(4122 /* ActivityModelCMD.CMDReqActivityRechargeDailyAcquireMessage */, output, s);
        };
        /**
         *
         * 请求活动信息
         *
         * sendReqActivityDiscountGiftInfoMessage  4131
         */
        ActivityModel.prototype.send131 = function (s) {
            var output = this.getO();
            this.send(4131 /* ActivityModelCMD.CMDReqActivityDiscountGiftInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取当日奖励
         * @param 领取奖励配置id
         * @param 是否匿名 0不匿名
         *
         * sendReqActivityDiscountGiftAcquireDailyMessage  4133
         */
        ActivityModel.prototype.send133 = function (whichone, anonymous, s) {
            var output = this.getO();
            output.writeVarInt(whichone, false);
            output.writeVarInt(anonymous, false);
            this.send(4133 /* ActivityModelCMD.CMDReqActivityDiscountGiftAcquireDailyMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqActivityRechargePointInfoMessage  4141
         */
        ActivityModel.prototype.send141 = function (s) {
            var output = this.getO();
            this.send(4141 /* ActivityModelCMD.CMDReqActivityRechargePointInfoMessage */, output, s);
        };
        /**
         *
         * 请求翻牌活动数据
         *
         * sendReqActivityLuckDrawInfoMessage  4151
         */
        ActivityModel.prototype.send151 = function (s) {
            var output = this.getO();
            this.send(4151 /* ActivityModelCMD.CMDReqActivityLuckDrawInfoMessage */, output, s);
        };
        /**
         *
         * 请求抽奖
         * @param 是否可以消耗元宝 1-可消耗
         * @param 翻牌位置
         *
         * sendReqActivityLuckDrawStartMessage  4153
         */
        ActivityModel.prototype.send153 = function (costMoney, index, s) {
            var output = this.getO();
            output.writeVarInt(costMoney, false);
            output.writeVarInt(index, false);
            this.send(4153 /* ActivityModelCMD.CMDReqActivityLuckDrawStartMessage */, output, s);
        };
        /**
         *
         * 请求重置抽奖
         *
         * sendReqActivityResetLuckDrawRecordMessage  4154
         */
        ActivityModel.prototype.send154 = function (s) {
            var output = this.getO();
            this.send(4154 /* ActivityModelCMD.CMDReqActivityResetLuckDrawRecordMessage */, output, s);
        };
        /**
         *
         * 攻击排行
         *
         * sendReqActivityAttackRankInfoMessage  4160
         */
        ActivityModel.prototype.send160 = function (s) {
            var output = this.getO();
            this.send(4160 /* ActivityModelCMD.CMDReqActivityAttackRankInfoMessage */, output, s);
        };
        /**
         *
         * 攻击目标
         *
         * sendReqActivityAttackTargetInfoMessage  4162
         */
        ActivityModel.prototype.send162 = function (s) {
            var output = this.getO();
            this.send(4162 /* ActivityModelCMD.CMDReqActivityAttackTargetInfoMessage */, output, s);
        };
        /**
         *
         * 攻击目标奖励领取
         * @param 奖励id
         *
         * sendReqActivityAttackTargetRewardMessage  4164
         */
        ActivityModel.prototype.send164 = function (cId, s) {
            var output = this.getO();
            output.writeVarInt(cId, false);
            this.send(4164 /* ActivityModelCMD.CMDReqActivityAttackTargetRewardMessage */, output, s);
        };
        /**
         *
         * 请求封号目标面板信息
         *
         * sendReqTitleTaskInfoMessage  4165
         */
        ActivityModel.prototype.send165 = function (s) {
            var output = this.getO();
            this.send(4165 /* ActivityModelCMD.CMDReqTitleTaskInfoMessage */, output, s);
        };
        /**
         *
         * 请求封号奖励
         * @param 奖励id
         *
         * sendReqGetTitleTaskRewardMessage  4167
         */
        ActivityModel.prototype.send167 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(4167 /* ActivityModelCMD.CMDReqGetTitleTaskRewardMessage */, output, s);
        };
        /**
         *
         * 请求限时特惠活动数据
         *
         * sendReqActivityPromotionsInfoMessage  4169
         */
        ActivityModel.prototype.send169 = function (s) {
            var output = this.getO();
            this.send(4169 /* ActivityModelCMD.CMDReqActivityPromotionsInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取限时特惠奖励
         * @param 配置id
         * @param 是否匿名 0不匿名
         *
         * sendReqActivityPromotionsAcquireMessage  4171
         */
        ActivityModel.prototype.send171 = function (cid, anonymous, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            output.writeVarInt(anonymous, false);
            this.send(4171 /* ActivityModelCMD.CMDReqActivityPromotionsAcquireMessage */, output, s);
        };
        /**
         *
         * 请求全民收集活动数据
         *
         * sendReqActivityExchangeInfoMessage  4172
         */
        ActivityModel.prototype.send172 = function (s) {
            var output = this.getO();
            this.send(4172 /* ActivityModelCMD.CMDReqActivityExchangeInfoMessage */, output, s);
        };
        /**
         *
         * 请求兑换全民收集奖励
         * @param 配置id
         * @param 数量
         *
         * sendReqActivityExchangeAcquireMessage  4174
         */
        ActivityModel.prototype.send174 = function (cid, count, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            output.writeVarInt(count, false);
            this.send(4174 /* ActivityModelCMD.CMDReqActivityExchangeAcquireMessage */, output, s);
        };
        /**
         *
         * 请求公众号福利活动数据
         * @param 活动类型
         *
         * sendReqActivityOfficialAccountsInfoMessage  4175
         */
        ActivityModel.prototype.send175 = function (activityType, s) {
            var output = this.getO();
            output.writeVarInt(activityType, false);
            this.send(4175 /* ActivityModelCMD.CMDReqActivityOfficialAccountsInfoMessage */, output, s);
        };
        /**
         *
         * 请求超级会员福利活动数据
         * @param 活动类型
         *
         * sendReqActivityVIPServiceInfoMessage  4177
         */
        ActivityModel.prototype.send177 = function (activityType, s) {
            var output = this.getO();
            output.writeVarInt(activityType, false);
            this.send(4177 /* ActivityModelCMD.CMDReqActivityVIPServiceInfoMessage */, output, s);
        };
        /**
         *
         * 请求防诈骗指南活动数据
         *
         * sendReqActivityAntiFraudGuideInfoMessage  4179
         */
        ActivityModel.prototype.send179 = function (s) {
            var output = this.getO();
            this.send(4179 /* ActivityModelCMD.CMDReqActivityAntiFraudGuideInfoMessage */, output, s);
        };
        /**
         *
         * 请求完成阅读防诈骗指南
         *
         * sendReqActivityAntiFraudGuideCompleteMessage  4181
         */
        ActivityModel.prototype.send181 = function (s) {
            var output = this.getO();
            this.send(4181 /* ActivityModelCMD.CMDReqActivityAntiFraudGuideCompleteMessage */, output, s);
        };
        /**
         *
         * 请求领取防诈骗指南活动奖励
         *
         * sendReqActivityAntiFraudGuideAcquireMessage  4182
         */
        ActivityModel.prototype.send182 = function (s) {
            var output = this.getO();
            this.send(4182 /* ActivityModelCMD.CMDReqActivityAntiFraudGuideAcquireMessage */, output, s);
        };
        /**
         *
         * 请求平台公告信息数据
         *
         * sendReqActivityAnnounceInfoMessage  4183
         */
        ActivityModel.prototype.send183 = function (s) {
            var output = this.getO();
            this.send(4183 /* ActivityModelCMD.CMDReqActivityAnnounceInfoMessage */, output, s);
        };
        /**
         *
         * 请求跨服战备活动数据
         *
         * sendReqActivityTotalExchangeInfoMessage  4185
         */
        ActivityModel.prototype.send185 = function (s) {
            var output = this.getO();
            this.send(4185 /* ActivityModelCMD.CMDReqActivityTotalExchangeInfoMessage */, output, s);
        };
        /**
         *
         * 请求兑换跨服战备奖励
         * @param cfgId
         *
         * sendReqActivityTotalExchangeAcquireMessage  4187
         */
        ActivityModel.prototype.send187 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(4187 /* ActivityModelCMD.CMDReqActivityTotalExchangeAcquireMessage */, output, s);
        };
        /**
         *
         * 请求活动数据
         *
         * sendReqActivityWeekendGoalCopyInfoMessage  4191
         */
        ActivityModel.prototype.send191 = function (s) {
            var output = this.getO();
            this.send(4191 /* ActivityModelCMD.CMDReqActivityWeekendGoalCopyInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取奖励
         * @param 请求领取的任务id
         *
         * sendReqActivityWeekendGoalCopyAcquireMessage  4193
         */
        ActivityModel.prototype.send193 = function (task, s) {
            var output = this.getO();
            output.writeVarInt(task, false);
            this.send(4193 /* ActivityModelCMD.CMDReqActivityWeekendGoalCopyAcquireMessage */, output, s);
        };
        /**
         *
         * 请求神魔寻宝信息
         *
         * sendReqActivityLuckyBoxInfoMessage  4201
         */
        ActivityModel.prototype.send201 = function (s) {
            var output = this.getO();
            this.send(4201 /* ActivityModelCMD.CMDReqActivityLuckyBoxInfoMessage */, output, s);
        };
        /**
         *
         * 请求开启神魔宝箱
         * @param 次数
         *
         * sendReqActivityLuckyBoxOpenMessage  4203
         */
        ActivityModel.prototype.send203 = function (count, s) {
            var output = this.getO();
            output.writeVarInt(count, false);
            this.send(4203 /* ActivityModelCMD.CMDReqActivityLuckyBoxOpenMessage */, output, s);
        };
        /**
         *
         * 请求神魔宝箱额外奖励信息
         * @param 活动类型
         *
         * sendReqActivityLuckyBoxExtraInfoMessage  4204
         */
        ActivityModel.prototype.send204 = function (type, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            this.send(4204 /* ActivityModelCMD.CMDReqActivityLuckyBoxExtraInfoMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqActivityRechargeLimitInfoMessage  4211
         */
        ActivityModel.prototype.send211 = function (s) {
            var output = this.getO();
            this.send(4211 /* ActivityModelCMD.CMDReqActivityRechargeLimitInfoMessage */, output, s);
        };
        /**
         *
         * 请求赞助礼包信息
         * @param 活动类型
         *
         * sendReqActivitySponsorInfoMessage  4221
         */
        ActivityModel.prototype.send221 = function (activityType, s) {
            var output = this.getO();
            output.writeVarInt(activityType, false);
            this.send(4221 /* ActivityModelCMD.CMDReqActivitySponsorInfoMessage */, output, s);
        };
        /**
         *
         * 请求购买赞助礼包
         * @param 配置id
         * @param 活动类型
         *
         * sendReqActivitySponsorAcquireMessage  4223
         */
        ActivityModel.prototype.send223 = function (cfgId, activityType, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            output.writeVarInt(activityType, false);
            this.send(4223 /* ActivityModelCMD.CMDReqActivitySponsorAcquireMessage */, output, s);
        };
        /**
         *
         * 请求七日封神信息
         *
         * sendReqActivitySevenDayGoalInfoMessage  4231
         */
        ActivityModel.prototype.send231 = function (s) {
            var output = this.getO();
            this.send(4231 /* ActivityModelCMD.CMDReqActivitySevenDayGoalInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取七日封神礼包
         * @param 配置id
         *
         * sendReqActivitySevenDayAcquireMessage  4233
         */
        ActivityModel.prototype.send233 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(4233 /* ActivityModelCMD.CMDReqActivitySevenDayAcquireMessage */, output, s);
        };
        /**
         *
         * 请求七日封神一键找回
         * @param 天数
         *
         * sendReqActivitySevenDayGetBackMessage  4235
         */
        ActivityModel.prototype.send235 = function (day, s) {
            var output = this.getO();
            output.writeVarInt(day, false);
            this.send(4235 /* ActivityModelCMD.CMDReqActivitySevenDayGetBackMessage */, output, s);
        };
        /**
         *
         * 请求基金信息
         * @param 活动类型
         *
         * sendReqActivityFundInfoMessage  4241
         */
        ActivityModel.prototype.send241 = function (activityType, s) {
            var output = this.getO();
            output.writeVarInt(activityType, false);
            this.send(4241 /* ActivityModelCMD.CMDReqActivityFundInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取基金礼包
         * @param 配置id
         * @param 活动类型
         *
         * sendReqActivityFundAcquireMessage  4243
         */
        ActivityModel.prototype.send243 = function (cfgId, activityType, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            output.writeVarInt(activityType, false);
            this.send(4243 /* ActivityModelCMD.CMDReqActivityFundAcquireMessage */, output, s);
        };
        /**
         *
         * 请求激活基金
         * @param 基金类型
         * @param 活动类型
         *
         * sendReqActivityFundActivateMessage  4244
         */
        ActivityModel.prototype.send244 = function (typeId, activityType, s) {
            var output = this.getO();
            output.writeVarInt(typeId, false);
            output.writeVarInt(activityType, false);
            this.send(4244 /* ActivityModelCMD.CMDReqActivityFundActivateMessage */, output, s);
        };
        /**
         *
         * 请求开服特惠活动数据
         *
         * sendReqActivityOpenPromotionsInfoMessage  4251
         */
        ActivityModel.prototype.send251 = function (s) {
            var output = this.getO();
            this.send(4251 /* ActivityModelCMD.CMDReqActivityOpenPromotionsInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取开服特惠奖励
         * @param 配置id
         * @param 是否匿名 0不匿名
         *
         * sendReqActivityOpenPromotionsAcquireMessage  4253
         */
        ActivityModel.prototype.send253 = function (cid, anonymous, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            output.writeVarInt(anonymous, false);
            this.send(4253 /* ActivityModelCMD.CMDReqActivityOpenPromotionsAcquireMessage */, output, s);
        };
        /**
         *
         * 请求采摘仙果活动数据
         *
         * sendReqActivityAmbrosiaInfoMessage  4261
         */
        ActivityModel.prototype.send261 = function (s) {
            var output = this.getO();
            this.send(4261 /* ActivityModelCMD.CMDReqActivityAmbrosiaInfoMessage */, output, s);
        };
        /**
         *
         * 请求采摘仙果奖励
         * @param 位置
         *
         * sendReqActivityAmbrosiaAcquireMessage  4263
         */
        ActivityModel.prototype.send263 = function (index, s) {
            var output = this.getO();
            output.writeVarInt(index, false);
            this.send(4263 /* ActivityModelCMD.CMDReqActivityAmbrosiaAcquireMessage */, output, s);
        };
        /**
         *
         * 请求封神排行
         *
         * sendReqActivityGodGoalsRankingMessage  4265
         */
        ActivityModel.prototype.send265 = function (s) {
            var output = this.getO();
            this.send(4265 /* ActivityModelCMD.CMDReqActivityGodGoalsRankingMessage */, output, s);
        };
        /**
         *
         * 请求折扣商城信息
         *
         * sendReqActivityDiscountShopInfoMessage  4271
         */
        ActivityModel.prototype.send271 = function (s) {
            var output = this.getO();
            this.send(4271 /* ActivityModelCMD.CMDReqActivityDiscountShopInfoMessage */, output, s);
        };
        /**
         *
         * 请求折扣商城购买
         * @param cfgId
         * @param 数量
         *
         * sendReqActivityDiscountShopBuyMessage  4273
         */
        ActivityModel.prototype.send273 = function (cfgId, count, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            output.writeVarInt(count, false);
            this.send(4273 /* ActivityModelCMD.CMDReqActivityDiscountShopBuyMessage */, output, s);
        };
        /**
         *
         * 请求自选充值信息
         * @param 活动类型
         *
         * sendReqChooseRechargeMessage  4274
         */
        ActivityModel.prototype.send274 = function (type, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            this.send(4274 /* ActivityModelCMD.CMDReqChooseRechargeMessage */, output, s);
        };
        /**
         *
         * 请求领取自选充值奖励消息
         * @param 奖励id
         * @param 活动类型
         *
         * sendReqChooseRechargeRewardMessage  4276
         */
        ActivityModel.prototype.send276 = function (cid, type, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            output.writeVarInt(type, false);
            this.send(4276 /* ActivityModelCMD.CMDReqChooseRechargeRewardMessage */, output, s);
        };
        /**
         *
         * 请求天降红包数据
         *
         * sendReqHeavenPacketInfoMessage  4281
         */
        ActivityModel.prototype.send281 = function (s) {
            var output = this.getO();
            this.send(4281 /* ActivityModelCMD.CMDReqHeavenPacketInfoMessage */, output, s);
        };
        /**
         *
         * 请求天降红包打开
         * @param 配置id
         *
         * sendReqHeavenPacketOpenMessage  4283
         */
        ActivityModel.prototype.send283 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(4283 /* ActivityModelCMD.CMDReqHeavenPacketOpenMessage */, output, s);
        };
        /**
         *
         * 请求封神录信息
         *
         * sendReqGodRecordInfoMessage  4291
         */
        ActivityModel.prototype.send291 = function (s) {
            var output = this.getO();
            this.send(4291 /* ActivityModelCMD.CMDReqGodRecordInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取封神录奖励
         * @param 配置id
         *
         * sendReqGodRecordAcquireMessage  4293
         */
        ActivityModel.prototype.send293 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(4293 /* ActivityModelCMD.CMDReqGodRecordAcquireMessage */, output, s);
        };
        /**
         *
         * 请求第三版首充信息
         *
         * sendReqFirstRechargeThreeMessage  4301
         */
        ActivityModel.prototype.send301 = function (s) {
            var output = this.getO();
            this.send(4301 /* ActivityModelCMD.CMDReqFirstRechargeThreeMessage */, output, s);
        };
        /**
         *
         * 领取第三版首充奖励
         * @param 配置id
         *
         * sendReqFirstRechargeThreeRewardMessage  4303
         */
        ActivityModel.prototype.send303 = function (cId, s) {
            var output = this.getO();
            output.writeVarInt(cId, false);
            this.send(4303 /* ActivityModelCMD.CMDReqFirstRechargeThreeRewardMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqGhostGoalMessage  4311
         */
        ActivityModel.prototype.send311 = function (s) {
            var output = this.getO();
            this.send(4311 /* ActivityModelCMD.CMDReqGhostGoalMessage */, output, s);
        };
        /**
         *
         * 请求领取鬼器奖励
         * @param 配置id
         *
         * sendReqGhostAcquireMessage  4313
         */
        ActivityModel.prototype.send313 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(4313 /* ActivityModelCMD.CMDReqGhostAcquireMessage */, output, s);
        };
        /**
         *
         * 骰子信息
         *
         * sendReqDiceInfoMessage  4320
         */
        ActivityModel.prototype.send320 = function (s) {
            var output = this.getO();
            this.send(4320 /* ActivityModelCMD.CMDReqDiceInfoMessage */, output, s);
        };
        /**
         *
         * 请求扔骰子
         *
         * sendReqUseDiceMessage  4323
         */
        ActivityModel.prototype.send323 = function (s) {
            var output = this.getO();
            this.send(4323 /* ActivityModelCMD.CMDReqUseDiceMessage */, output, s);
        };
        /**
         *
         * 扔骰子结果
         * @param 骰子结果
         *
         * sendResUseDiceMessage  4324
         */
        ActivityModel.prototype.send324 = function (num, s) {
            var output = this.getO();
            output.writeVarInt(num, false);
            this.send(4324 /* ActivityModelCMD.CMDResUseDiceMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqActivityCompeteTrumpInfoMessage  4401
         */
        ActivityModel.prototype.send401 = function (s) {
            var output = this.getO();
            this.send(4401 /* ActivityModelCMD.CMDReqActivityCompeteTrumpInfoMessage */, output, s);
        };
        /**
         *
         *
         * @param 配置id
         *
         * sendReqActivityCompeteTrumpAcquireMessage  4402
         */
        ActivityModel.prototype.send402 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(4402 /* ActivityModelCMD.CMDReqActivityCompeteTrumpAcquireMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqActivityCompeteImageLevelInfoMessage  4411
         */
        ActivityModel.prototype.send411 = function (s) {
            var output = this.getO();
            this.send(4411 /* ActivityModelCMD.CMDReqActivityCompeteImageLevelInfoMessage */, output, s);
        };
        /**
         *
         *
         * @param 配置id
         *
         * sendReqActivityCompeteImageAcquireMessage  4412
         */
        ActivityModel.prototype.send412 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(4412 /* ActivityModelCMD.CMDReqActivityCompeteImageAcquireMessage */, output, s);
        };
        /**
         *
         * 请求天帝宝藏信息
         * @param 活动类型
         *
         * sendReqActivityTreasureHeavenInfoMessage  4421
         */
        ActivityModel.prototype.send421 = function (type, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            this.send(4421 /* ActivityModelCMD.CMDReqActivityTreasureHeavenInfoMessage */, output, s);
        };
        /**
         *
         * 请求天帝宝藏寻宝
         * @param 活动类型
         * @param cfg_treasure_monster配置id
         *
         * sendReqActivityTreasureHeavenMessage  4423
         */
        ActivityModel.prototype.send423 = function (type, cid, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            output.writeVarInt(cid, false);
            this.send(4423 /* ActivityModelCMD.CMDReqActivityTreasureHeavenMessage */, output, s);
        };
        /**
         *
         * 请求天帝宝藏抽奖
         *
         * sendReqActivityTreasureHeavenTurnMessage  4424
         */
        ActivityModel.prototype.send424 = function (s) {
            var output = this.getO();
            this.send(4424 /* ActivityModelCMD.CMDReqActivityTreasureHeavenTurnMessage */, output, s);
        };
        /**
         *
         * 请求寻宝热度信息
         * @param 活动类型
         *
         * sendReqActivityTreasureHeavenHotMessage  4426
         */
        ActivityModel.prototype.send426 = function (type, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            this.send(4426 /* ActivityModelCMD.CMDReqActivityTreasureHeavenHotMessage */, output, s);
        };
        /**
         *
         * 请求限时返利信息
         * @param 类型
         *
         * sendReqActivityTotalRechargeInfoMessage  4431
         */
        ActivityModel.prototype.send431 = function (activityType, s) {
            var output = this.getO();
            output.writeVarInt(activityType, false);
            this.send(4431 /* ActivityModelCMD.CMDReqActivityTotalRechargeInfoMessage */, output, s);
        };
        /**
         *
         * 请求限时返利领取
         * @param 配置id
         * @param 类型
         *
         * sendReqActivityTotalRechargeAcquireMessage  4433
         */
        ActivityModel.prototype.send433 = function (cid, activityType, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            output.writeVarInt(activityType, false);
            this.send(4433 /* ActivityModelCMD.CMDReqActivityTotalRechargeAcquireMessage */, output, s);
        };
        /**
         *
         *
         * @param 活动类型
         *
         * sendReqActivityCompeteInfoMessage  4441
         */
        ActivityModel.prototype.send441 = function (activityType, s) {
            var output = this.getO();
            output.writeVarInt(activityType, false);
            this.send(4441 /* ActivityModelCMD.CMDReqActivityCompeteInfoMessage */, output, s);
        };
        /**
         *
         *
         * @param 配置id
         * @param 活动类型
         *
         * sendReqActivityCompeteAcquireMessage  4442
         */
        ActivityModel.prototype.send442 = function (cid, activityType, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            output.writeVarInt(activityType, false);
            this.send(4442 /* ActivityModelCMD.CMDReqActivityCompeteAcquireMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqActivityRankingReinAndLevelMessage  4451
         */
        ActivityModel.prototype.send451 = function (s) {
            var output = this.getO();
            this.send(4451 /* ActivityModelCMD.CMDReqActivityRankingReinAndLevelMessage */, output, s);
        };
        /**
         *
         * 防御排行
         *
         * sendReqActivityDefenseRankInfoMessage  4461
         */
        ActivityModel.prototype.send461 = function (s) {
            var output = this.getO();
            this.send(4461 /* ActivityModelCMD.CMDReqActivityDefenseRankInfoMessage */, output, s);
        };
        /**
         *
         * 时装贩售信息
         *
         * sendReqActivityFashionSaleInfoMessage  4471
         */
        ActivityModel.prototype.send471 = function (s) {
            var output = this.getO();
            this.send(4471 /* ActivityModelCMD.CMDReqActivityFashionSaleInfoMessage */, output, s);
        };
        /**
         *
         * 时装贩售购买物品
         * @param cfgId
         *
         * sendReqActivityFashionSaleRewardMessage  4473
         */
        ActivityModel.prototype.send473 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(4473 /* ActivityModelCMD.CMDReqActivityFashionSaleRewardMessage */, output, s);
        };
        /**
         *
         * 请求平台Vip奖励信息
         *
         * sendReqPlatformVipRewardMessage  4481
         */
        ActivityModel.prototype.send481 = function (s) {
            var output = this.getO();
            this.send(4481 /* ActivityModelCMD.CMDReqPlatformVipRewardMessage */, output, s);
        };
        /**
         *
         * 请求获取平台会员奖励
         * @param 配置表id
         *
         * sendReqAcquireVipRewardMessage  4483
         */
        ActivityModel.prototype.send483 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(4483 /* ActivityModelCMD.CMDReqAcquireVipRewardMessage */, output, s);
        };
        /**
         *
         *
         * @param 活动类型
         *
         * sendReqActivityPlatformCompeteInfoMessage  4484
         */
        ActivityModel.prototype.send484 = function (activityType, s) {
            var output = this.getO();
            output.writeVarInt(activityType, false);
            this.send(4484 /* ActivityModelCMD.CMDReqActivityPlatformCompeteInfoMessage */, output, s);
        };
        /**
         *
         *
         * @param 配置id
         * @param 活动类型
         *
         * sendReqActivityPlatformCompeteAcquireMessage  4487
         */
        ActivityModel.prototype.send487 = function (cid, activityType, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            output.writeVarInt(activityType, false);
            this.send(4487 /* ActivityModelCMD.CMDReqActivityPlatformCompeteAcquireMessage */, output, s);
        };
        /**
         *
         * 请求微端奖励状态信息
         *
         * sendReqMicroRewardInfoMessage  4490
         */
        ActivityModel.prototype.send490 = function (s) {
            var output = this.getO();
            this.send(4490 /* ActivityModelCMD.CMDReqMicroRewardInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取微端奖励
         *
         * sendReqAcquireMicroRewardMessage  4491
         */
        ActivityModel.prototype.send491 = function (s) {
            var output = this.getO();
            this.send(4491 /* ActivityModelCMD.CMDReqAcquireMicroRewardMessage */, output, s);
        };
        /**
         *
         * 请求明星代言奖励信息
         *
         * sendReqActivitySevenDayStarInfoMessage  4501
         */
        ActivityModel.prototype.send501 = function (s) {
            var output = this.getO();
            this.send(4501 /* ActivityModelCMD.CMDReqActivitySevenDayStarInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取明星代言奖励
         * @param 配置id
         *
         * sendReqActivitySevenDayStarAcquireMessage  4503
         */
        ActivityModel.prototype.send503 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(4503 /* ActivityModelCMD.CMDReqActivitySevenDayStarAcquireMessage */, output, s);
        };
        /**
         *
         * 请求明星雕像进度信息
         *
         * sendReqActivityStarStatueInfoMessage  4511
         */
        ActivityModel.prototype.send511 = function (s) {
            var output = this.getO();
            this.send(4511 /* ActivityModelCMD.CMDReqActivityStarStatueInfoMessage */, output, s);
        };
        /**
         *
         * 请求增加明星雕像进度
         *
         * sendReqActivityStarStatueProgressMessage  4513
         */
        ActivityModel.prototype.send513 = function (s) {
            var output = this.getO();
            this.send(4513 /* ActivityModelCMD.CMDReqActivityStarStatueProgressMessage */, output, s);
        };
        /**
         *
         * 请求领取明星雕像奖励
         * @param cfgId
         *
         * sendReqActivityStarStatueAcquireMessage  4514
         */
        ActivityModel.prototype.send514 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(4514 /* ActivityModelCMD.CMDReqActivityStarStatueAcquireMessage */, output, s);
        };
        /**
         *
         * 请求QQ大厅礼包信息
         * @param 活动类型
         *
         * sendReqActivityQQHallGiftMessage  4521
         */
        ActivityModel.prototype.send521 = function (activityType, s) {
            var output = this.getO();
            output.writeVarInt(activityType, false);
            this.send(4521 /* ActivityModelCMD.CMDReqActivityQQHallGiftMessage */, output, s);
        };
        /**
         *
         * 请求领取QQ大厅礼包
         * @param 配置id
         *
         * sendReqActivityQQHallAcquireMessage  4523
         */
        ActivityModel.prototype.send523 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(4523 /* ActivityModelCMD.CMDReqActivityQQHallAcquireMessage */, output, s);
        };
        /**
         *
         * 请求大富翁面板数据
         *
         * sendReqActivityMonopolyInfoMessage  4531
         */
        ActivityModel.prototype.send531 = function (s) {
            var output = this.getO();
            this.send(4531 /* ActivityModelCMD.CMDReqActivityMonopolyInfoMessage */, output, s);
        };
        /**
         *
         * 请求大富翁行走
         *
         * sendReqActivityMonopolyWalkMessage  4533
         */
        ActivityModel.prototype.send533 = function (s) {
            var output = this.getO();
            this.send(4533 /* ActivityModelCMD.CMDReqActivityMonopolyWalkMessage */, output, s);
        };
        /**
         *
         * 请求大富翁累计奖励
         * @param 奖励id，cfg_dfw_total
         *
         * sendReqActivityMonopolyAcquireMessage  4534
         */
        ActivityModel.prototype.send534 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(4534 /* ActivityModelCMD.CMDReqActivityMonopolyAcquireMessage */, output, s);
        };
        /**
         *
         * 请求充值返利数据
         *
         * sendReqActivityDailyRechargeRebateInfoMessage  4541
         */
        ActivityModel.prototype.send541 = function (s) {
            var output = this.getO();
            this.send(4541 /* ActivityModelCMD.CMDReqActivityDailyRechargeRebateInfoMessage */, output, s);
        };
        /**
         *
         * 请求充值返利领取
         * @param 配置id
         * @param 1-次数奖励 2-每日奖励
         *
         * sendReqActivityDailyRechargeRebateAcquireMessage  4543
         */
        ActivityModel.prototype.send543 = function (cfgId, typeId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            output.writeVarInt(typeId, false);
            this.send(4543 /* ActivityModelCMD.CMDReqActivityDailyRechargeRebateAcquireMessage */, output, s);
        };
        /**
         *
         * 请求羽翼任务数据
         *
         * sendReqActivityWingTaskInfoMessage  4551
         */
        ActivityModel.prototype.send551 = function (s) {
            var output = this.getO();
            this.send(4551 /* ActivityModelCMD.CMDReqActivityWingTaskInfoMessage */, output, s);
        };
        /**
         *
         * 请求羽翼任务领取
         * @param 配置id
         *
         * sendReqActivityWingTaskAcquireMessage  4553
         */
        ActivityModel.prototype.send553 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(4553 /* ActivityModelCMD.CMDReqActivityWingTaskAcquireMessage */, output, s);
        };
        /**
         *
         * 请求合会活动数据
         *
         * sendReqActivityMergeUnionInfoMessage  4561
         */
        ActivityModel.prototype.send561 = function (s) {
            var output = this.getO();
            this.send(4561 /* ActivityModelCMD.CMDReqActivityMergeUnionInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取合会活动奖励
         *
         * sendReqActivityMergeUnionRewardMessage  4563
         */
        ActivityModel.prototype.send563 = function (s) {
            var output = this.getO();
            this.send(4563 /* ActivityModelCMD.CMDReqActivityMergeUnionRewardMessage */, output, s);
        };
        /**
         *
         * 请求合会活动加入行会
         * @param 行会id
         *
         * sendReqActivityMergeUnionJoinMessage  4564
         */
        ActivityModel.prototype.send564 = function (unionId, s) {
            var output = this.getO();
            output.writeLong(unionId);
            this.send(4564 /* ActivityModelCMD.CMDReqActivityMergeUnionJoinMessage */, output, s);
        };
        /**
         *
         * 请求转盘活动数据
         * @param 活动类型
         *
         * sendReqActivityTurntableInfoMessage  4565
         */
        ActivityModel.prototype.send565 = function (type, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            this.send(4565 /* ActivityModelCMD.CMDReqActivityTurntableInfoMessage */, output, s);
        };
        /**
         *
         * 请求转转盘
         * @param 活动类型
         * @param 抽取次数
         *
         * sendReqActivityTurntableMessage  4567
         */
        ActivityModel.prototype.send567 = function (type, time, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            output.writeVarInt(time, false);
            this.send(4567 /* ActivityModelCMD.CMDReqActivityTurntableMessage */, output, s);
        };
        /**
         *
         * 请求超级折扣券商城数据
         *
         * sendReqActivityDiscountTicketInfoMessage  4571
         */
        ActivityModel.prototype.send571 = function (s) {
            var output = this.getO();
            this.send(4571 /* ActivityModelCMD.CMDReqActivityDiscountTicketInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取超级折扣券奖励
         * @param cfgId
         * @param 抵扣数量
         *
         * sendReqActivityDiscountTicketAcquireMessage  4573
         */
        ActivityModel.prototype.send573 = function (cfgId, count, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            output.writeVarInt(count, false);
            this.send(4573 /* ActivityModelCMD.CMDReqActivityDiscountTicketAcquireMessage */, output, s);
        };
        /**
         *
         * 请求封测登录数据
         *
         * sendReqActivityLoginRewardInfoMessage  4581
         */
        ActivityModel.prototype.send581 = function (s) {
            var output = this.getO();
            this.send(4581 /* ActivityModelCMD.CMDReqActivityLoginRewardInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取封测登录奖励
         * @param cfgId
         *
         * sendReqActivityLoginRewardAcquireMessage  4583
         */
        ActivityModel.prototype.send583 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(4583 /* ActivityModelCMD.CMDReqActivityLoginRewardAcquireMessage */, output, s);
        };
        /**
         *
         * 请求封测累登数据
         *
         * sendReqActivityCumulativeLoginInfoMessage  4591
         */
        ActivityModel.prototype.send591 = function (s) {
            var output = this.getO();
            this.send(4591 /* ActivityModelCMD.CMDReqActivityCumulativeLoginInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取封测累登奖励
         * @param taskId
         *
         * sendReqActivityCumulativeLoginAcquireMessage  4593
         */
        ActivityModel.prototype.send593 = function (task, s) {
            var output = this.getO();
            output.writeVarInt(task, false);
            this.send(4593 /* ActivityModelCMD.CMDReqActivityCumulativeLoginAcquireMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqActivitySecKillingInfoMessage  4611
         */
        ActivityModel.prototype.send611 = function (s) {
            var output = this.getO();
            this.send(4611 /* ActivityModelCMD.CMDReqActivitySecKillingInfoMessage */, output, s);
        };
        /**
         *
         *
         * @param 配置id
         *
         * sendReqActivitySecKillingAcquireMessage  4612
         */
        ActivityModel.prototype.send612 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(4612 /* ActivityModelCMD.CMDReqActivitySecKillingAcquireMessage */, output, s);
        };
        /**
         *
         * 限时充值礼包信息
         *
         * sendReqActivityLimitRechargePackInfoMessage  4621
         */
        ActivityModel.prototype.send621 = function (s) {
            var output = this.getO();
            this.send(4621 /* ActivityModelCMD.CMDReqActivityLimitRechargePackInfoMessage */, output, s);
        };
        /**
         *
         * 购买限时充值礼包
         * @param 配置id
         *
         * sendReqActivityLimitRechargePackBuyMessage  4623
         */
        ActivityModel.prototype.send623 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(4623 /* ActivityModelCMD.CMDReqActivityLimitRechargePackBuyMessage */, output, s);
        };
        /**
         *
         * 请求法宝任务已领取奖励信息
         *
         * sendReqTrumpSkillTaskInfoMessage  4631
         */
        ActivityModel.prototype.send631 = function (s) {
            var output = this.getO();
            this.send(4631 /* ActivityModelCMD.CMDReqTrumpSkillTaskInfoMessage */, output, s);
        };
        /**
         *
         * 请求获取法宝任务奖励
         * @param 配置id
         *
         * sendReqAcquireTrumpTaskRewardMessage  4633
         */
        ActivityModel.prototype.send633 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(4633 /* ActivityModelCMD.CMDReqAcquireTrumpTaskRewardMessage */, output, s);
        };
        /**
         *
         * 请求QQ蓝钻特权礼包信息
         *
         * sendReqActivityQQBlueVipGiftMessage  4641
         */
        ActivityModel.prototype.send641 = function (s) {
            var output = this.getO();
            this.send(4641 /* ActivityModelCMD.CMDReqActivityQQBlueVipGiftMessage */, output, s);
        };
        /**
         *
         * 请求领取QQ蓝钻特权礼包
         * @param 配置id
         *
         * sendReqActivityQQBlueVipAcquireMessage  4643
         */
        ActivityModel.prototype.send643 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(4643 /* ActivityModelCMD.CMDReqActivityQQBlueVipAcquireMessage */, output, s);
        };
        /**
         *
         * 请求拉取QQ蓝钻信息
         *
         * sendReqFetchQQBlueVipMessage  4644
         */
        ActivityModel.prototype.send644 = function (s) {
            var output = this.getO();
            this.send(4644 /* ActivityModelCMD.CMDReqFetchQQBlueVipMessage */, output, s);
        };
        /**
         *
         * 请求传世许愿信息
         *
         * sendReqWishInfoMessage  4651
         */
        ActivityModel.prototype.send651 = function (s) {
            var output = this.getO();
            this.send(4651 /* ActivityModelCMD.CMDReqWishInfoMessage */, output, s);
        };
        /**
         *
         * 请求保存/修改许愿
         *
         * sendReqAcquireWishMessage  4653
         */
        ActivityModel.prototype.send653 = function (cid, s) {
            var output = this.getO();
            output.writeShort(cid.length);
            for (var cidi1 = 0; cidi1 < cid.length; cidi1++) {
                output.writeVarInt(cid[cidi1], false);
            }
            this.send(4653 /* ActivityModelCMD.CMDReqAcquireWishMessage */, output, s);
        };
        /**
         *
         * 请求膨胀礼包信息
         *
         * sendReqExpandInfoMessage  4661
         */
        ActivityModel.prototype.send661 = function (s) {
            var output = this.getO();
            this.send(4661 /* ActivityModelCMD.CMDReqExpandInfoMessage */, output, s);
        };
        /**
         *
         * 请求膨胀礼包
         *
         * sendReqExpandMessage  4663
         */
        ActivityModel.prototype.send663 = function (s) {
            var output = this.getO();
            this.send(4663 /* ActivityModelCMD.CMDReqExpandMessage */, output, s);
        };
        /**
         *
         * 请求奇遇商人信息
         * @param 活动类型
         *
         * sendReqAdventureTraderInfoMessage  4664
         */
        ActivityModel.prototype.send664 = function (activityType, s) {
            var output = this.getO();
            output.writeVarInt(activityType, false);
            this.send(4664 /* ActivityModelCMD.CMDReqAdventureTraderInfoMessage */, output, s);
        };
        /**
         *
         * 请求奇遇商人兑换信息
         * @param 配置id
         * @param 活动类型
         *
         * sendReqAdventureTraderExchangeMessage  4666
         */
        ActivityModel.prototype.send666 = function (cfgId, itemLids, activityType, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            output.writeShort(itemLids.length);
            for (var itemLidsi1 = 0; itemLidsi1 < itemLids.length; itemLidsi1++) {
                output.writeLong(itemLids[itemLidsi1]);
            }
            output.writeVarInt(activityType, false);
            this.send(4666 /* ActivityModelCMD.CMDReqAdventureTraderExchangeMessage */, output, s);
        };
        /**
         *
         * 请求返利副本召唤怪物
         *
         * sendReqActivityRebateDuplicateCallMessage  4672
         */
        ActivityModel.prototype.send672 = function (s) {
            var output = this.getO();
            this.send(4672 /* ActivityModelCMD.CMDReqActivityRebateDuplicateCallMessage */, output, s);
        };
        /**
         *
         * 请求返利副本活动面板
         *
         * sendReqActivityRebateDuplicatePanelMessage  4674
         */
        ActivityModel.prototype.send674 = function (s) {
            var output = this.getO();
            this.send(4674 /* ActivityModelCMD.CMDReqActivityRebateDuplicatePanelMessage */, output, s);
        };
        /**
         *
         * 请求先祖遗迹面板
         *
         * sendReqActivityAncestorsDuplicateInfoMessage  4681
         */
        ActivityModel.prototype.send681 = function (s) {
            var output = this.getO();
            this.send(4681 /* ActivityModelCMD.CMDReqActivityAncestorsDuplicateInfoMessage */, output, s);
        };
        /**
         *
         * 请求双倍首充
         *
         * sendReqActivityDoubleFirstRechargeInfoMessage  4691
         */
        ActivityModel.prototype.send691 = function (s) {
            var output = this.getO();
            this.send(4691 /* ActivityModelCMD.CMDReqActivityDoubleFirstRechargeInfoMessage */, output, s);
        };
        /**
         *
         * 请求回收返利信息
         *
         * sendReqActivityRecycleRebateInfoMessage  4701
         */
        ActivityModel.prototype.send701 = function (s) {
            var output = this.getO();
            this.send(4701 /* ActivityModelCMD.CMDReqActivityRecycleRebateInfoMessage */, output, s);
        };
        /**
         *
         * 请求返利回收
         * @param 配置id
         *
         * sendReqActivityRecycleRebateMessage  4703
         */
        ActivityModel.prototype.send703 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(4703 /* ActivityModelCMD.CMDReqActivityRecycleRebateMessage */, output, s);
        };
        /**
         *
         * 请求玲珑塔信息
         *
         * sendReqActivityExquisiteInfoMessage  4711
         */
        ActivityModel.prototype.send711 = function (s) {
            var output = this.getO();
            this.send(4711 /* ActivityModelCMD.CMDReqActivityExquisiteInfoMessage */, output, s);
        };
        /**
         *
         * 请求定时返利数据
         *
         * sendReqActivityClockRebateInfoMessage  4721
         */
        ActivityModel.prototype.send721 = function (s) {
            var output = this.getO();
            this.send(4721 /* ActivityModelCMD.CMDReqActivityClockRebateInfoMessage */, output, s);
        };
        /**
         *
         * 请求定时返利购买礼包
         * @param 配置id
         *
         * sendReqActivityClockRebateGiftMessage  4723
         */
        ActivityModel.prototype.send723 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(4723 /* ActivityModelCMD.CMDReqActivityClockRebateGiftMessage */, output, s);
        };
        /**
         *
         * 请求定时返利领取返利
         *
         * sendReqActivityClockRebateRewardMessage  4724
         */
        ActivityModel.prototype.send724 = function (s) {
            var output = this.getO();
            this.send(4724 /* ActivityModelCMD.CMDReqActivityClockRebateRewardMessage */, output, s);
        };
        /**
         *
         *
         * @param 活动类型
         *
         * sendReqActivityRankingCommonMessage  4731
         */
        ActivityModel.prototype.send731 = function (type, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            this.send(4731 /* ActivityModelCMD.CMDReqActivityRankingCommonMessage */, output, s);
        };
        /**
         *
         * 请求周末赞助礼包活动数据
         *
         * sendReqActivityWeekendSponsorShipGiftInfoMessage  4735
         */
        ActivityModel.prototype.send735 = function (s) {
            var output = this.getO();
            this.send(4735 /* ActivityModelCMD.CMDReqActivityWeekendSponsorShipGiftInfoMessage */, output, s);
        };
        /**
         *
         * 请求周末充值享好礼数据
         *
         * sendReqActivityWeekendRechargeGiftInfoMessage  4736
         */
        ActivityModel.prototype.send736 = function (s) {
            var output = this.getO();
            this.send(4736 /* ActivityModelCMD.CMDReqActivityWeekendRechargeGiftInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取周末赞助礼包活动奖励
         * @param 配置id
         * @param 是否匿名 0不匿名
         *
         * sendReqActivityWeekendSponsorShipGiftAcquireMessage  4737
         */
        ActivityModel.prototype.send737 = function (cid, anonymous, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            output.writeVarInt(anonymous, false);
            this.send(4737 /* ActivityModelCMD.CMDReqActivityWeekendSponsorShipGiftAcquireMessage */, output, s);
        };
        /**
         *
         * 请求领取周末充值享好礼奖励
         * @param 配置id
         * @param 是否匿名 0不匿名
         *
         * sendReqActivityWeekendRechargeGiftAcquireMessage  4738
         */
        ActivityModel.prototype.send738 = function (cid, anonymous, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            output.writeVarInt(anonymous, false);
            this.send(4738 /* ActivityModelCMD.CMDReqActivityWeekendRechargeGiftAcquireMessage */, output, s);
        };
        /**
         *
         * 请求神力特戒礼包信息
         * @param 活动类型
         *
         * sendReqDivinePowerInfoMessage  4741
         */
        ActivityModel.prototype.send741 = function (activityType, s) {
            var output = this.getO();
            output.writeVarInt(activityType, false);
            this.send(4741 /* ActivityModelCMD.CMDReqDivinePowerInfoMessage */, output, s);
        };
        /**
         *
         * 请求购买神力特戒礼包
         * @param 配置id
         * @param 活动类型
         *
         * sendReqDivinePowerAcquireMessage  4743
         */
        ActivityModel.prototype.send743 = function (cfgId, activityType, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            output.writeVarInt(activityType, false);
            this.send(4743 /* ActivityModelCMD.CMDReqDivinePowerAcquireMessage */, output, s);
        };
        /**
         *
         * 请求合服等级直追活动信息
         *
         * sendReqMergeLevelUpInfoMessage  4744
         */
        ActivityModel.prototype.send744 = function (s) {
            var output = this.getO();
            this.send(4744 /* ActivityModelCMD.CMDReqMergeLevelUpInfoMessage */, output, s);
        };
        /**
         *
         * 请求合服等级直追购买
         * @param 配置id，根据合服等级排名找到配置，再把配置id发来
         * @param 数量
         *
         * sendReqMergeLevelUpAcquiredMessage  4745
         */
        ActivityModel.prototype.send745 = function (cfgId, count, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            output.writeVarInt(count, false);
            this.send(4745 /* ActivityModelCMD.CMDReqMergeLevelUpAcquiredMessage */, output, s);
        };
        ActivityModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 4002 /* ActivityModelCMD.CMDResAvailableActivitiesMessage */:
                    var schedulesLength1 = input.readShort();
                    var resAvailableActivitiesMessage = [];
                    for (var schedulesi1 = 0; schedulesi1 < schedulesLength1; schedulesi1++) {
                        if (input.readByte() != 0) {
                            var temp1151 = resAvailableActivitiesMessage[schedulesi1] = {}; //活动列表
                            temp1151["activityID"] = input.readVarInt(false); //活动id
                            temp1151["activityType"] = input.readVarInt(false); //活动类型
                            temp1151["beginTime"] = input.readVarInt(false); //活动开始时间（时间戳）
                            temp1151["endTime"] = input.readVarInt(false); //活动结束时间（时间戳）
                            temp1151["entrance"] = input.readVarInt(false); //活动入口
                            temp1151["order"] = input.readVarInt(false); //显示排序
                        }
                        else {
                            resAvailableActivitiesMessage[schedulesi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resAvailableActivitiesMessage);
                    break;
                case 4005 /* ActivityModelCMD.CMDResActivityRewardRecordListMessage */:
                    var resActivityRewardRecordListMessage = {};
                    resActivityRewardRecordListMessage["activityId"] = input.readVarInt(false); //活动id
                    var rewardRecordsLength1 = input.readShort();
                    resActivityRewardRecordListMessage["rewardRecords"] = [];
                    for (var rewardRecordsi1 = 0; rewardRecordsi1 < rewardRecordsLength1; rewardRecordsi1++) {
                        if (input.readByte() != 0) {
                            var temp1152 = resActivityRewardRecordListMessage["rewardRecords"][rewardRecordsi1] = {}; //奖励列表
                            temp1152["time"] = input.readVarInt(false); //时间
                            temp1152["itemId"] = input.readVarInt(false); //道具id
                        }
                        else {
                            resActivityRewardRecordListMessage["rewardRecords"][rewardRecordsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityRewardRecordListMessage);
                    break;
                case 4012 /* ActivityModelCMD.CMDResActivityFirstPurchaseInfoMessage */:
                    var resActivityFirstPurchaseInfoMessage = {};
                    resActivityFirstPurchaseInfoMessage["status"] = input.readVarInt(false); //充值状态 0未充值 1已充值
                    var acquiredLength1 = input.readShort();
                    resActivityFirstPurchaseInfoMessage["acquired"] = [];
                    for (var acquiredi1 = 0; acquiredi1 < acquiredLength1; acquiredi1++) {
                        if (input.readByte() != 0) {
                            var temp1153 = resActivityFirstPurchaseInfoMessage["acquired"][acquiredi1] = {}; //领取状态列表
                            temp1153["cid"] = input.readVarInt(false); //配置id
                            temp1153["status"] = input.readVarInt(false); //领取状态 0未领取 1已领取
                        }
                        else {
                            resActivityFirstPurchaseInfoMessage["acquired"][acquiredi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityFirstPurchaseInfoMessage);
                    break;
                case 4014 /* ActivityModelCMD.CMDResActivityFirstPurchaseAcquireMessage */:
                    var resActivityFirstPurchaseAcquireMessage = {};
                    resActivityFirstPurchaseAcquireMessage["cid"] = input.readVarInt(false); //请求领取的奖励配置id
                    resActivityFirstPurchaseAcquireMessage["status"] = input.readVarInt(false); //领取状态改变
                    this.sendNotif(cmd, resActivityFirstPurchaseAcquireMessage);
                    break;
                case 4016 /* ActivityModelCMD.CMDResActivityFirstPurchaseStepperInfoMessage */:
                    var resActivityFirstPurchaseStepperInfoMessage = {};
                    resActivityFirstPurchaseStepperInfoMessage["status"] = input.readVarInt(false); //充值状态 0未充值 1已充值
                    resActivityFirstPurchaseStepperInfoMessage["rechargeId"] = input.readVarInt(false); //档位
                    var acquiredLength2 = input.readShort();
                    resActivityFirstPurchaseStepperInfoMessage["acquired"] = [];
                    for (var acquiredi2 = 0; acquiredi2 < acquiredLength2; acquiredi2++) {
                        if (input.readByte() != 0) {
                            var temp1154 = resActivityFirstPurchaseStepperInfoMessage["acquired"][acquiredi2] = {}; //领取状态列表
                            temp1154["cid"] = input.readVarInt(false); //配置id
                            temp1154["status"] = input.readVarInt(false); //领取状态 0未领取 1已领取
                        }
                        else {
                            resActivityFirstPurchaseStepperInfoMessage["acquired"][acquiredi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityFirstPurchaseStepperInfoMessage);
                    break;
                case 4018 /* ActivityModelCMD.CMDResActivityFirstPurchaseStepperAcquireMessage */:
                    var resActivityFirstPurchaseStepperAcquireMessage = {};
                    resActivityFirstPurchaseStepperAcquireMessage["cid"] = input.readVarInt(false); //请求领取的奖励配置id
                    resActivityFirstPurchaseStepperAcquireMessage["status"] = input.readVarInt(false); //领取状态改变
                    this.sendNotif(cmd, resActivityFirstPurchaseStepperAcquireMessage);
                    break;
                case 4022 /* ActivityModelCMD.CMDResActivityPurchasePresentDailyInfoMessage */:
                    var resActivityPurchasePresentDailyInfoMessage = {};
                    var purchaseStatusLength1 = input.readShort();
                    resActivityPurchasePresentDailyInfoMessage["purchaseStatus"] = new Array(purchaseStatusLength1);
                    for (var purchaseStatusi1 = 0; purchaseStatusi1 < purchaseStatusLength1; purchaseStatusi1++) {
                        resActivityPurchasePresentDailyInfoMessage["purchaseStatus"][purchaseStatusi1] = input.readVarInt(false); //充值状态
                    }
                    var acquireStatusLength1 = input.readShort();
                    resActivityPurchasePresentDailyInfoMessage["acquireStatus"] = new Array(acquireStatusLength1);
                    for (var acquireStatusi1 = 0; acquireStatusi1 < acquireStatusLength1; acquireStatusi1++) {
                        resActivityPurchasePresentDailyInfoMessage["acquireStatus"][acquireStatusi1] = input.readVarInt(false); //领取状态
                    }
                    this.sendNotif(cmd, resActivityPurchasePresentDailyInfoMessage);
                    break;
                case 4023 /* ActivityModelCMD.CMDResActivityPurchasePresentDaysInfoMessage */:
                    var resActivityPurchasePresentDaysInfoMessage = {};
                    resActivityPurchasePresentDaysInfoMessage["accuCount"] = input.readVarInt(false); //累计天数
                    resActivityPurchasePresentDaysInfoMessage["accuAcquired"] = input.readVarInt(false); //领取进度(天数)
                    this.sendNotif(cmd, resActivityPurchasePresentDaysInfoMessage);
                    break;
                case 4024 /* ActivityModelCMD.CMDResActivityPurchasePresentRechargeInfoMessage */:
                    var resActivityPurchasePresentRechargeInfoMessage = {};
                    resActivityPurchasePresentRechargeInfoMessage["accuCount"] = input.readVarInt(false); //累充数量
                    var accuAcquiredLength1 = input.readShort();
                    resActivityPurchasePresentRechargeInfoMessage["accuAcquired"] = new Array(accuAcquiredLength1);
                    for (var accuAcquiredi1 = 0; accuAcquiredi1 < accuAcquiredLength1; accuAcquiredi1++) {
                        resActivityPurchasePresentRechargeInfoMessage["accuAcquired"][accuAcquiredi1] = input.readVarInt(false); //已经领取列表
                    }
                    this.sendNotif(cmd, resActivityPurchasePresentRechargeInfoMessage);
                    break;
                case 4032 /* ActivityModelCMD.CMDResActivityRankingLevelMessage */:
                    var resActivityRankingLevelMessage = {};
                    var rankingsLength1 = input.readShort();
                    resActivityRankingLevelMessage["rankings"] = [];
                    for (var rankingsi1 = 0; rankingsi1 < rankingsLength1; rankingsi1++) {
                        if (input.readByte() != 0) {
                            var temp1155 = resActivityRankingLevelMessage["rankings"][rankingsi1] = {}; //
                            temp1155["ranking"] = input.readVarInt(false); //
                            temp1155["uid"] = input.readLong(); //
                            temp1155["name"] = input.readString(); //
                            temp1155["score"] = input.readLong(); //
                        }
                        else {
                            resActivityRankingLevelMessage["rankings"][rankingsi1] = null;
                        }
                    }
                    resActivityRankingLevelMessage["selfScore"] = input.readVarInt(false); //自己的分数
                    resActivityRankingLevelMessage["selfRanking"] = input.readVarInt(false); //自己的排名 0未上榜
                    this.sendNotif(cmd, resActivityRankingLevelMessage);
                    break;
                case 4034 /* ActivityModelCMD.CMDResActivityRankingAmuletMessage */:
                    var resActivityRankingAmuletMessage = {};
                    var rankingsLength2 = input.readShort();
                    resActivityRankingAmuletMessage["rankings"] = [];
                    for (var rankingsi2 = 0; rankingsi2 < rankingsLength2; rankingsi2++) {
                        if (input.readByte() != 0) {
                            var temp1156 = resActivityRankingAmuletMessage["rankings"][rankingsi2] = {}; //
                            temp1156["ranking"] = input.readVarInt(false); //
                            temp1156["uid"] = input.readLong(); //
                            temp1156["name"] = input.readString(); //
                            temp1156["score"] = input.readLong(); //
                        }
                        else {
                            resActivityRankingAmuletMessage["rankings"][rankingsi2] = null;
                        }
                    }
                    resActivityRankingAmuletMessage["selfScore"] = input.readVarInt(false); //自己的分数
                    resActivityRankingAmuletMessage["selfRanking"] = input.readVarInt(false); //自己的排名 0未上榜
                    this.sendNotif(cmd, resActivityRankingAmuletMessage);
                    break;
                case 4036 /* ActivityModelCMD.CMDResActivityRankingRechargeMessage */:
                    var resActivityRankingRechargeMessage = {};
                    var rankingsLength3 = input.readShort();
                    resActivityRankingRechargeMessage["rankings"] = [];
                    for (var rankingsi3 = 0; rankingsi3 < rankingsLength3; rankingsi3++) {
                        if (input.readByte() != 0) {
                            var temp1157 = resActivityRankingRechargeMessage["rankings"][rankingsi3] = {}; //
                            temp1157["ranking"] = input.readVarInt(false); //
                            temp1157["uid"] = input.readLong(); //
                            temp1157["name"] = input.readString(); //
                            temp1157["score"] = input.readLong(); //
                        }
                        else {
                            resActivityRankingRechargeMessage["rankings"][rankingsi3] = null;
                        }
                    }
                    resActivityRankingRechargeMessage["selfScore"] = input.readVarInt(false); //自己的分数
                    resActivityRankingRechargeMessage["selfRanking"] = input.readVarInt(false); //自己的排名 0未上榜
                    this.sendNotif(cmd, resActivityRankingRechargeMessage);
                    break;
                case 4038 /* ActivityModelCMD.CMDResActivityRankingConsumeMessage */:
                    var resActivityRankingConsumeMessage = {};
                    var rankingsLength4 = input.readShort();
                    resActivityRankingConsumeMessage["rankings"] = [];
                    for (var rankingsi4 = 0; rankingsi4 < rankingsLength4; rankingsi4++) {
                        if (input.readByte() != 0) {
                            var temp1158 = resActivityRankingConsumeMessage["rankings"][rankingsi4] = {}; //
                            temp1158["ranking"] = input.readVarInt(false); //
                            temp1158["uid"] = input.readLong(); //
                            temp1158["name"] = input.readString(); //
                            temp1158["score"] = input.readLong(); //
                        }
                        else {
                            resActivityRankingConsumeMessage["rankings"][rankingsi4] = null;
                        }
                    }
                    resActivityRankingConsumeMessage["selfScore"] = input.readVarInt(false); //自己的分数
                    resActivityRankingConsumeMessage["selfRanking"] = input.readVarInt(false); //自己的排名 0未上榜
                    this.sendNotif(cmd, resActivityRankingConsumeMessage);
                    break;
                case 4043 /* ActivityModelCMD.CMDResActivityEquipRecycleInfoMessage */:
                    var resActivityEquipRecycleInfoMessage = {};
                    var acquiredLength3 = input.readShort();
                    resActivityEquipRecycleInfoMessage["acquired"] = [];
                    for (var acquiredi3 = 0; acquiredi3 < acquiredLength3; acquiredi3++) {
                        if (input.readByte() != 0) {
                            var temp1159 = resActivityEquipRecycleInfoMessage["acquired"][acquiredi3] = {}; //兑换状态列表
                            temp1159["cid"] = input.readVarInt(false); //
                            temp1159["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityEquipRecycleInfoMessage["acquired"][acquiredi3] = null;
                        }
                    }
                    var globalLeftsLength1 = input.readShort();
                    resActivityEquipRecycleInfoMessage["globalLefts"] = [];
                    for (var globalLeftsi1 = 0; globalLeftsi1 < globalLeftsLength1; globalLeftsi1++) {
                        if (input.readByte() != 0) {
                            var temp1160 = resActivityEquipRecycleInfoMessage["globalLefts"][globalLeftsi1] = {}; //总体兑换数量
                            temp1160["cid"] = input.readVarInt(false); //
                            temp1160["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityEquipRecycleInfoMessage["globalLefts"][globalLeftsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityEquipRecycleInfoMessage);
                    break;
                case 4053 /* ActivityModelCMD.CMDResActivitySaleBagInfoMessage */:
                    var statusLength1 = input.readShort();
                    var resActivitySaleBagInfoMessage = [];
                    for (var statusi1 = 0; statusi1 < statusLength1; statusi1++) {
                        if (input.readByte() != 0) {
                            var temp1161 = resActivitySaleBagInfoMessage[statusi1] = {}; //状态列表
                            temp1161["cid"] = input.readVarInt(false); //
                            temp1161["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivitySaleBagInfoMessage[statusi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivitySaleBagInfoMessage);
                    break;
                case 4063 /* ActivityModelCMD.CMDResActivityCompeteLevelInfoMessage */:
                    var resActivityCompeteLevelInfoMessage = {};
                    var pAcquiredLength1 = input.readShort();
                    resActivityCompeteLevelInfoMessage["pAcquired"] = [];
                    for (var pAcquiredi1 = 0; pAcquiredi1 < pAcquiredLength1; pAcquiredi1++) {
                        if (input.readByte() != 0) {
                            var temp1162 = resActivityCompeteLevelInfoMessage["pAcquired"][pAcquiredi1] = {}; //个人领取状态
                            temp1162["cid"] = input.readVarInt(false); //
                            temp1162["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityCompeteLevelInfoMessage["pAcquired"][pAcquiredi1] = null;
                        }
                    }
                    var gAcquiredLength1 = input.readShort();
                    resActivityCompeteLevelInfoMessage["gAcquired"] = [];
                    for (var gAcquiredi1 = 0; gAcquiredi1 < gAcquiredLength1; gAcquiredi1++) {
                        if (input.readByte() != 0) {
                            var temp1163 = resActivityCompeteLevelInfoMessage["gAcquired"][gAcquiredi1] = {}; //全服领取状态
                            temp1163["cid"] = input.readVarInt(false); //
                            temp1163["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityCompeteLevelInfoMessage["gAcquired"][gAcquiredi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityCompeteLevelInfoMessage);
                    break;
                case 4064 /* ActivityModelCMD.CMDResActivityCompeteLevelProgressMessage */:
                    var progressLength1 = input.readShort();
                    var resActivityCompeteLevelProgressMessage = [];
                    for (var progressi1 = 0; progressi1 < progressLength1; progressi1++) {
                        if (input.readByte() != 0) {
                            var temp1164 = resActivityCompeteLevelProgressMessage[progressi1] = {}; //
                            temp1164["taskId"] = input.readVarInt(false); //任务id
                            temp1164["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp1164["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength1 = input.readShort();
                            temp1164["goalDataList"] = [];
                            for (var goalDataListi1 = 0; goalDataListi1 < goalDataListLength1; goalDataListi1++) {
                                if (input.readByte() != 0) {
                                    var temp1165 = temp1164["goalDataList"][goalDataListi1] = {}; //目标数据
                                    temp1165["goalId"] = input.readVarInt(false); //目标id
                                    temp1165["progress"] = input.readVarInt(false); //当前完成进度
                                    temp1165["goalType"] = input.readVarInt(false); //目标类型
                                    temp1165["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength1 = input.readShort();
                                    temp1165["goalParams"] = new Array(goalParamsLength1);
                                    for (var goalParamsi1 = 0; goalParamsi1 < goalParamsLength1; goalParamsi1++) {
                                        temp1165["goalParams"][goalParamsi1] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp1164["goalDataList"][goalDataListi1] = null;
                                }
                            }
                        }
                        else {
                            resActivityCompeteLevelProgressMessage[progressi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityCompeteLevelProgressMessage);
                    break;
                case 4066 /* ActivityModelCMD.CMDResActivityTreasureMonsterInfoMessage */:
                    var resActivityTreasureMonsterInfoMessage = {};
                    var acquiredLength4 = input.readShort();
                    resActivityTreasureMonsterInfoMessage["acquired"] = [];
                    for (var acquiredi4 = 0; acquiredi4 < acquiredLength4; acquiredi4++) {
                        if (input.readByte() != 0) {
                            var temp1166 = resActivityTreasureMonsterInfoMessage["acquired"][acquiredi4] = {}; //积分领取状态列表
                            temp1166["cid"] = input.readVarInt(false); //
                            temp1166["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityTreasureMonsterInfoMessage["acquired"][acquiredi4] = null;
                        }
                    }
                    resActivityTreasureMonsterInfoMessage["score"] = input.readVarInt(false); //积分
                    resActivityTreasureMonsterInfoMessage["daily"] = input.readVarInt(false); //今日次数
                    resActivityTreasureMonsterInfoMessage["anonymous"] = input.readBoolean(); //是否匿名
                    this.sendNotif(cmd, resActivityTreasureMonsterInfoMessage);
                    break;
                case 4073 /* ActivityModelCMD.CMDResActivityCompeteAmuletInfoMessage */:
                    var resActivityCompeteAmuletInfoMessage = {};
                    var pAcquiredLength2 = input.readShort();
                    resActivityCompeteAmuletInfoMessage["pAcquired"] = [];
                    for (var pAcquiredi2 = 0; pAcquiredi2 < pAcquiredLength2; pAcquiredi2++) {
                        if (input.readByte() != 0) {
                            var temp1167 = resActivityCompeteAmuletInfoMessage["pAcquired"][pAcquiredi2] = {}; //个人领取状态
                            temp1167["cid"] = input.readVarInt(false); //
                            temp1167["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityCompeteAmuletInfoMessage["pAcquired"][pAcquiredi2] = null;
                        }
                    }
                    var gAcquiredLength2 = input.readShort();
                    resActivityCompeteAmuletInfoMessage["gAcquired"] = [];
                    for (var gAcquiredi2 = 0; gAcquiredi2 < gAcquiredLength2; gAcquiredi2++) {
                        if (input.readByte() != 0) {
                            var temp1168 = resActivityCompeteAmuletInfoMessage["gAcquired"][gAcquiredi2] = {}; //全服领取状态
                            temp1168["cid"] = input.readVarInt(false); //
                            temp1168["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityCompeteAmuletInfoMessage["gAcquired"][gAcquiredi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityCompeteAmuletInfoMessage);
                    break;
                case 4074 /* ActivityModelCMD.CMDResActivityCompeteAmuletProgressMessage */:
                    var progressLength2 = input.readShort();
                    var resActivityCompeteAmuletProgressMessage = [];
                    for (var progressi2 = 0; progressi2 < progressLength2; progressi2++) {
                        if (input.readByte() != 0) {
                            var temp1169 = resActivityCompeteAmuletProgressMessage[progressi2] = {}; //
                            temp1169["taskId"] = input.readVarInt(false); //任务id
                            temp1169["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp1169["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength2 = input.readShort();
                            temp1169["goalDataList"] = [];
                            for (var goalDataListi2 = 0; goalDataListi2 < goalDataListLength2; goalDataListi2++) {
                                if (input.readByte() != 0) {
                                    var temp1170 = temp1169["goalDataList"][goalDataListi2] = {}; //目标数据
                                    temp1170["goalId"] = input.readVarInt(false); //目标id
                                    temp1170["progress"] = input.readVarInt(false); //当前完成进度
                                    temp1170["goalType"] = input.readVarInt(false); //目标类型
                                    temp1170["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength2 = input.readShort();
                                    temp1170["goalParams"] = new Array(goalParamsLength2);
                                    for (var goalParamsi2 = 0; goalParamsi2 < goalParamsLength2; goalParamsi2++) {
                                        temp1170["goalParams"][goalParamsi2] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp1169["goalDataList"][goalDataListi2] = null;
                                }
                            }
                        }
                        else {
                            resActivityCompeteAmuletProgressMessage[progressi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityCompeteAmuletProgressMessage);
                    break;
                case 4082 /* ActivityModelCMD.CMDResActivityWeekendGoalInfoMessage */:
                    var dataLength1 = input.readShort();
                    var resActivityWeekendGoalInfoMessage = [];
                    for (var datai1 = 0; datai1 < dataLength1; datai1++) {
                        if (input.readByte() != 0) {
                            var temp1171 = resActivityWeekendGoalInfoMessage[datai1] = {}; //活动数据列表
                            temp1171["taskId"] = input.readVarInt(false); //任务id
                            temp1171["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp1171["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength3 = input.readShort();
                            temp1171["goalDataList"] = [];
                            for (var goalDataListi3 = 0; goalDataListi3 < goalDataListLength3; goalDataListi3++) {
                                if (input.readByte() != 0) {
                                    var temp1172 = temp1171["goalDataList"][goalDataListi3] = {}; //目标数据
                                    temp1172["goalId"] = input.readVarInt(false); //目标id
                                    temp1172["progress"] = input.readVarInt(false); //当前完成进度
                                    temp1172["goalType"] = input.readVarInt(false); //目标类型
                                    temp1172["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength3 = input.readShort();
                                    temp1172["goalParams"] = new Array(goalParamsLength3);
                                    for (var goalParamsi3 = 0; goalParamsi3 < goalParamsLength3; goalParamsi3++) {
                                        temp1172["goalParams"][goalParamsi3] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp1171["goalDataList"][goalDataListi3] = null;
                                }
                            }
                        }
                        else {
                            resActivityWeekendGoalInfoMessage[datai1] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityWeekendGoalInfoMessage);
                    break;
                case 4092 /* ActivityModelCMD.CMDResActivityRechargeRebateInfoMessage */:
                    var resActivityRechargeRebateInfoMessage = {};
                    resActivityRechargeRebateInfoMessage["recharged"] = input.readVarInt(false); //充值数量
                    var statusLength2 = input.readShort();
                    resActivityRechargeRebateInfoMessage["status"] = [];
                    for (var statusi2 = 0; statusi2 < statusLength2; statusi2++) {
                        if (input.readByte() != 0) {
                            var temp1173 = resActivityRechargeRebateInfoMessage["status"][statusi2] = {}; //活动领取状态
                            temp1173["cid"] = input.readVarInt(false); //
                            temp1173["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityRechargeRebateInfoMessage["status"][statusi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityRechargeRebateInfoMessage);
                    break;
                case 4102 /* ActivityModelCMD.CMDResActivityRechargeDrawInfoMessage */:
                    var resActivityRechargeDrawInfoMessage = {};
                    resActivityRechargeDrawInfoMessage["recharged"] = input.readVarInt(false); //充值数量
                    var statusLength3 = input.readShort();
                    resActivityRechargeDrawInfoMessage["status"] = [];
                    for (var statusi3 = 0; statusi3 < statusLength3; statusi3++) {
                        if (input.readByte() != 0) {
                            var temp1174 = resActivityRechargeDrawInfoMessage["status"][statusi3] = {}; //活动领取状态
                            temp1174["cid"] = input.readVarInt(false); //
                            temp1174["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityRechargeDrawInfoMessage["status"][statusi3] = null;
                        }
                    }
                    var logsLength1 = input.readShort();
                    resActivityRechargeDrawInfoMessage["logs"] = [];
                    for (var logsi1 = 0; logsi1 < logsLength1; logsi1++) {
                        if (input.readByte() != 0) {
                            var temp1175 = resActivityRechargeDrawInfoMessage["logs"][logsi1] = {}; //日志数据
                            var roleLength1 = input.readByte();
                            if (roleLength1 != 0) {
                                var temp1176 = temp1175["role"] = {}; //玩家
                                temp1176["uid"] = input.readLong(); //玩家id
                                temp1176["name"] = input.readString(); //玩家名字
                                temp1176["union"] = input.readString(); //行会名字
                            }
                            var itemLength1 = input.readByte();
                            if (itemLength1 != 0) {
                                var temp1177 = temp1175["item"] = {}; //道具
                                temp1177["itemId"] = input.readVarInt(false); //config id
                                temp1177["itemCount"] = input.readVarInt(false); //item count
                            }
                        }
                        else {
                            resActivityRechargeDrawInfoMessage["logs"][logsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityRechargeDrawInfoMessage);
                    break;
                case 4113 /* ActivityModelCMD.CMDResActivityGemGoalInfoMessage */:
                    var goalsLength1 = input.readShort();
                    var resActivityGemGoalInfoMessage = [];
                    for (var goalsi1 = 0; goalsi1 < goalsLength1; goalsi1++) {
                        if (input.readByte() != 0) {
                            var temp1178 = resActivityGemGoalInfoMessage[goalsi1] = {}; //
                            temp1178["taskId"] = input.readVarInt(false); //任务id
                            temp1178["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp1178["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength4 = input.readShort();
                            temp1178["goalDataList"] = [];
                            for (var goalDataListi4 = 0; goalDataListi4 < goalDataListLength4; goalDataListi4++) {
                                if (input.readByte() != 0) {
                                    var temp1179 = temp1178["goalDataList"][goalDataListi4] = {}; //目标数据
                                    temp1179["goalId"] = input.readVarInt(false); //目标id
                                    temp1179["progress"] = input.readVarInt(false); //当前完成进度
                                    temp1179["goalType"] = input.readVarInt(false); //目标类型
                                    temp1179["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength4 = input.readShort();
                                    temp1179["goalParams"] = new Array(goalParamsLength4);
                                    for (var goalParamsi4 = 0; goalParamsi4 < goalParamsLength4; goalParamsi4++) {
                                        temp1179["goalParams"][goalParamsi4] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp1178["goalDataList"][goalDataListi4] = null;
                                }
                            }
                        }
                        else {
                            resActivityGemGoalInfoMessage[goalsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityGemGoalInfoMessage);
                    break;
                case 4123 /* ActivityModelCMD.CMDResActivityRechargeDailyInfoMessage */:
                    var statusLength4 = input.readShort();
                    var resActivityRechargeDailyInfoMessage = [];
                    for (var statusi4 = 0; statusi4 < statusLength4; statusi4++) {
                        if (input.readByte() != 0) {
                            var temp1180 = resActivityRechargeDailyInfoMessage[statusi4] = {}; //
                            temp1180["cid"] = input.readVarInt(false); //
                            temp1180["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityRechargeDailyInfoMessage[statusi4] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityRechargeDailyInfoMessage);
                    break;
                case 4132 /* ActivityModelCMD.CMDResActivityDiscountGiftDailyInfoMessage */:
                    var resActivityDiscountGiftDailyInfoMessage = {};
                    var purchaseStatusLength2 = input.readShort();
                    resActivityDiscountGiftDailyInfoMessage["purchaseStatus"] = new Array(purchaseStatusLength2);
                    for (var purchaseStatusi2 = 0; purchaseStatusi2 < purchaseStatusLength2; purchaseStatusi2++) {
                        resActivityDiscountGiftDailyInfoMessage["purchaseStatus"][purchaseStatusi2] = input.readVarInt(false); //充值状态
                    }
                    var acquireStatusLength2 = input.readShort();
                    resActivityDiscountGiftDailyInfoMessage["acquireStatus"] = new Array(acquireStatusLength2);
                    for (var acquireStatusi2 = 0; acquireStatusi2 < acquireStatusLength2; acquireStatusi2++) {
                        resActivityDiscountGiftDailyInfoMessage["acquireStatus"][acquireStatusi2] = input.readVarInt(false); //领取状态
                    }
                    this.sendNotif(cmd, resActivityDiscountGiftDailyInfoMessage);
                    break;
                case 4142 /* ActivityModelCMD.CMDResActivityRechargePointInfoMessage */:
                    var statusLength5 = input.readShort();
                    var resActivityRechargePointInfoMessage = [];
                    for (var statusi5 = 0; statusi5 < statusLength5; statusi5++) {
                        if (input.readByte() != 0) {
                            var temp1181 = resActivityRechargePointInfoMessage[statusi5] = {}; //
                            temp1181["cid"] = input.readVarInt(false); //
                            temp1181["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityRechargePointInfoMessage[statusi5] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityRechargePointInfoMessage);
                    break;
                case 4152 /* ActivityModelCMD.CMDResActivityLuckDrawInfoMessage */:
                    var resActivityLuckDrawInfoMessage = {};
                    resActivityLuckDrawInfoMessage["resetCount"] = input.readVarInt(false); //重置次数
                    resActivityLuckDrawInfoMessage["drawCount"] = input.readVarInt(false); //抽奖次数
                    resActivityLuckDrawInfoMessage["param"] = input.readVarInt(false); //当前中奖的格子 0 面板消息  其他-抽奖返回
                    var statusLength6 = input.readShort();
                    resActivityLuckDrawInfoMessage["status"] = [];
                    for (var statusi6 = 0; statusi6 < statusLength6; statusi6++) {
                        if (input.readByte() != 0) {
                            var temp1182 = resActivityLuckDrawInfoMessage["status"][statusi6] = {}; //活动领取状态
                            temp1182["cid"] = input.readVarInt(false); //
                            temp1182["status"] = input.readVarInt(false); //
                            temp1182["index"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityLuckDrawInfoMessage["status"][statusi6] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityLuckDrawInfoMessage);
                    break;
                case 4161 /* ActivityModelCMD.CMDResActivityAttackRankInfoMessage */:
                    var resActivityAttackRankInfoMessage = {};
                    resActivityAttackRankInfoMessage["rank"] = input.readVarInt(false); //我的排名
                    var rankingsLength5 = input.readShort();
                    resActivityAttackRankInfoMessage["rankings"] = [];
                    for (var rankingsi5 = 0; rankingsi5 < rankingsLength5; rankingsi5++) {
                        if (input.readByte() != 0) {
                            var temp1183 = resActivityAttackRankInfoMessage["rankings"][rankingsi5] = {}; //
                            temp1183["ranking"] = input.readVarInt(false); //
                            temp1183["uid"] = input.readLong(); //
                            temp1183["name"] = input.readString(); //
                            temp1183["score"] = input.readLong(); //
                        }
                        else {
                            resActivityAttackRankInfoMessage["rankings"][rankingsi5] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityAttackRankInfoMessage);
                    break;
                case 4163 /* ActivityModelCMD.CMDResActivityAttackTargetInfoMessage */:
                    var beansLength1 = input.readShort();
                    var resActivityAttackTargetInfoMessage = [];
                    for (var beansi1 = 0; beansi1 < beansLength1; beansi1++) {
                        if (input.readByte() != 0) {
                            var temp1184 = resActivityAttackTargetInfoMessage[beansi1] = {}; //
                            temp1184["cId"] = input.readVarInt(false); //配置id
                            temp1184["leave"] = input.readVarInt(false); //剩余名额
                            temp1184["state"] = input.readVarInt(false); //0:不可领 1:可领 2:已领
                        }
                        else {
                            resActivityAttackTargetInfoMessage[beansi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityAttackTargetInfoMessage);
                    break;
                case 4166 /* ActivityModelCMD.CMDResTitleTaskInfoMessage */:
                    var goalsLength2 = input.readShort();
                    var resTitleTaskInfoMessage = [];
                    for (var goalsi2 = 0; goalsi2 < goalsLength2; goalsi2++) {
                        if (input.readByte() != 0) {
                            var temp1185 = resTitleTaskInfoMessage[goalsi2] = {}; //
                            temp1185["taskId"] = input.readVarInt(false); //任务id
                            temp1185["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp1185["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength5 = input.readShort();
                            temp1185["goalDataList"] = [];
                            for (var goalDataListi5 = 0; goalDataListi5 < goalDataListLength5; goalDataListi5++) {
                                if (input.readByte() != 0) {
                                    var temp1186 = temp1185["goalDataList"][goalDataListi5] = {}; //目标数据
                                    temp1186["goalId"] = input.readVarInt(false); //目标id
                                    temp1186["progress"] = input.readVarInt(false); //当前完成进度
                                    temp1186["goalType"] = input.readVarInt(false); //目标类型
                                    temp1186["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength5 = input.readShort();
                                    temp1186["goalParams"] = new Array(goalParamsLength5);
                                    for (var goalParamsi5 = 0; goalParamsi5 < goalParamsLength5; goalParamsi5++) {
                                        temp1186["goalParams"][goalParamsi5] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp1185["goalDataList"][goalDataListi5] = null;
                                }
                            }
                        }
                        else {
                            resTitleTaskInfoMessage[goalsi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resTitleTaskInfoMessage);
                    break;
                case 4168 /* ActivityModelCMD.CMDResTitleTaskProcessMessage */:
                    var resTitleTaskProcessMessage = {};
                    var goalsLength3 = input.readShort();
                    resTitleTaskProcessMessage["goals"] = [];
                    for (var goalsi3 = 0; goalsi3 < goalsLength3; goalsi3++) {
                        if (input.readByte() != 0) {
                            var temp1187 = resTitleTaskProcessMessage["goals"][goalsi3] = {}; //
                            temp1187["taskId"] = input.readVarInt(false); //任务id
                            temp1187["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp1187["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength6 = input.readShort();
                            temp1187["goalDataList"] = [];
                            for (var goalDataListi6 = 0; goalDataListi6 < goalDataListLength6; goalDataListi6++) {
                                if (input.readByte() != 0) {
                                    var temp1188 = temp1187["goalDataList"][goalDataListi6] = {}; //目标数据
                                    temp1188["goalId"] = input.readVarInt(false); //目标id
                                    temp1188["progress"] = input.readVarInt(false); //当前完成进度
                                    temp1188["goalType"] = input.readVarInt(false); //目标类型
                                    temp1188["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength6 = input.readShort();
                                    temp1188["goalParams"] = new Array(goalParamsLength6);
                                    for (var goalParamsi6 = 0; goalParamsi6 < goalParamsLength6; goalParamsi6++) {
                                        temp1188["goalParams"][goalParamsi6] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp1187["goalDataList"][goalDataListi6] = null;
                                }
                            }
                        }
                        else {
                            resTitleTaskProcessMessage["goals"][goalsi3] = null;
                        }
                    }
                    resTitleTaskProcessMessage["isReward"] = input.readVarInt(false); //0-更新 1-领奖
                    this.sendNotif(cmd, resTitleTaskProcessMessage);
                    break;
                case 4170 /* ActivityModelCMD.CMDResActivityPromotionsInfoMessage */:
                    var statusLength7 = input.readShort();
                    var resActivityPromotionsInfoMessage = [];
                    for (var statusi7 = 0; statusi7 < statusLength7; statusi7++) {
                        if (input.readByte() != 0) {
                            var temp1189 = resActivityPromotionsInfoMessage[statusi7] = {}; //活动领取状态
                            temp1189["cid"] = input.readVarInt(false); //
                            temp1189["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityPromotionsInfoMessage[statusi7] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityPromotionsInfoMessage);
                    break;
                case 4173 /* ActivityModelCMD.CMDResActivityExchangeInfoMessage */:
                    var statusLength8 = input.readShort();
                    var resActivityExchangeInfoMessage = [];
                    for (var statusi8 = 0; statusi8 < statusLength8; statusi8++) {
                        if (input.readByte() != 0) {
                            var temp1190 = resActivityExchangeInfoMessage[statusi8] = {}; //活动兑换次数
                            temp1190["cid"] = input.readVarInt(false); //
                            temp1190["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityExchangeInfoMessage[statusi8] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityExchangeInfoMessage);
                    break;
                case 4176 /* ActivityModelCMD.CMDResActivityOfficialAccountsInfoMessage */:
                    var infoLength1 = input.readByte();
                    if (infoLength1 != 0) {
                        var resActivityOfficialAccountsInfoMessage = {}; //公众号福利
                        var itemLength2 = input.readShort();
                        resActivityOfficialAccountsInfoMessage["item"] = [];
                        for (var itemi2 = 0; itemi2 < itemLength2; itemi2++) {
                            if (input.readByte() != 0) {
                                var temp1191 = resActivityOfficialAccountsInfoMessage["item"][itemi2] = {}; //道具
                                temp1191["itemId"] = input.readVarInt(false); //config id
                                temp1191["itemCount"] = input.readVarInt(false); //item count
                            }
                            else {
                                resActivityOfficialAccountsInfoMessage["item"][itemi2] = null;
                            }
                        }
                        resActivityOfficialAccountsInfoMessage["qccode"] = input.readString(); //图标
                        resActivityOfficialAccountsInfoMessage["hyperlink"] = input.readString(); //link
                        resActivityOfficialAccountsInfoMessage["activityType"] = input.readVarInt(false); //活动类型
                        resActivityOfficialAccountsInfoMessage["params"] = input.readString(); //额外参数
                    }
                    this.sendNotif(cmd, resActivityOfficialAccountsInfoMessage);
                    break;
                case 4178 /* ActivityModelCMD.CMDResActivityVIPServiceInfoMessage */:
                    var infoLength2 = input.readByte();
                    if (infoLength2 != 0) {
                        var resActivityVIPServiceInfoMessage = {}; //公众号福利
                        var itemLength3 = input.readShort();
                        resActivityVIPServiceInfoMessage["item"] = [];
                        for (var itemi3 = 0; itemi3 < itemLength3; itemi3++) {
                            if (input.readByte() != 0) {
                                var temp1192 = resActivityVIPServiceInfoMessage["item"][itemi3] = {}; //道具
                                temp1192["itemId"] = input.readVarInt(false); //config id
                                temp1192["itemCount"] = input.readVarInt(false); //item count
                            }
                            else {
                                resActivityVIPServiceInfoMessage["item"][itemi3] = null;
                            }
                        }
                        resActivityVIPServiceInfoMessage["qccode"] = input.readString(); //图标
                        resActivityVIPServiceInfoMessage["hyperlink"] = input.readString(); //link
                        resActivityVIPServiceInfoMessage["activityType"] = input.readVarInt(false); //活动类型
                        resActivityVIPServiceInfoMessage["params"] = input.readString(); //额外参数
                    }
                    this.sendNotif(cmd, resActivityVIPServiceInfoMessage);
                    break;
                case 4180 /* ActivityModelCMD.CMDResActivityAntiFraudGuideInfoMessage */:
                    var resActivityAntiFraudGuideInfoMessage = {};
                    resActivityAntiFraudGuideInfoMessage["isReward"] = input.readVarInt(false); //0-未阅读 1-已阅读,未领取 2-已领取
                    resActivityAntiFraudGuideInfoMessage["resetTime"] = input.readVarInt(false); //下次重置时间
                    var itemLength4 = input.readShort();
                    resActivityAntiFraudGuideInfoMessage["item"] = [];
                    for (var itemi4 = 0; itemi4 < itemLength4; itemi4++) {
                        if (input.readByte() != 0) {
                            var temp1193 = resActivityAntiFraudGuideInfoMessage["item"][itemi4] = {}; //道具
                            temp1193["itemId"] = input.readVarInt(false); //config id
                            temp1193["itemCount"] = input.readVarInt(false); //item count
                        }
                        else {
                            resActivityAntiFraudGuideInfoMessage["item"][itemi4] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityAntiFraudGuideInfoMessage);
                    break;
                case 4184 /* ActivityModelCMD.CMDResActivityAnnounceInfoMessage */:
                    var infoLength3 = input.readShort();
                    var resActivityAnnounceInfoMessage = [];
                    for (var infoi3 = 0; infoi3 < infoLength3; infoi3++) {
                        if (input.readByte() != 0) {
                            var temp1194 = resActivityAnnounceInfoMessage[infoi3] = {}; //返回公告信息数据
                            var itemLength5 = input.readShort();
                            temp1194["item"] = [];
                            for (var itemi5 = 0; itemi5 < itemLength5; itemi5++) {
                                if (input.readByte() != 0) {
                                    var temp1195 = temp1194["item"][itemi5] = {}; //道具
                                    temp1195["itemId"] = input.readVarInt(false); //config id
                                    temp1195["itemCount"] = input.readVarInt(false); //item count
                                }
                                else {
                                    temp1194["item"][itemi5] = null;
                                }
                            }
                            temp1194["qccode"] = input.readString(); //图标
                            temp1194["hyperlink"] = input.readString(); //link
                            temp1194["activityType"] = input.readVarInt(false); //活动类型
                            temp1194["params"] = input.readString(); //额外参数
                        }
                        else {
                            resActivityAnnounceInfoMessage[infoi3] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityAnnounceInfoMessage);
                    break;
                case 4186 /* ActivityModelCMD.CMDResActivityTotalExchangeInfoMessage */:
                    var infoLength4 = input.readShort();
                    var resActivityTotalExchangeInfoMessage = [];
                    for (var infoi4 = 0; infoi4 < infoLength4; infoi4++) {
                        if (input.readByte() != 0) {
                            var temp1196 = resActivityTotalExchangeInfoMessage[infoi4] = {}; //返回信息数据
                            temp1196["cid"] = input.readVarInt(false); //配置id
                            temp1196["status"] = input.readVarInt(false); //领取状态 0未领取 1已领取
                        }
                        else {
                            resActivityTotalExchangeInfoMessage[infoi4] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityTotalExchangeInfoMessage);
                    break;
                case 4192 /* ActivityModelCMD.CMDResActivityWeekendGoalCopyInfoMessage */:
                    var dataLength2 = input.readShort();
                    var resActivityWeekendGoalCopyInfoMessage = [];
                    for (var datai2 = 0; datai2 < dataLength2; datai2++) {
                        if (input.readByte() != 0) {
                            var temp1197 = resActivityWeekendGoalCopyInfoMessage[datai2] = {}; //活动数据列表
                            temp1197["taskId"] = input.readVarInt(false); //任务id
                            temp1197["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp1197["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength7 = input.readShort();
                            temp1197["goalDataList"] = [];
                            for (var goalDataListi7 = 0; goalDataListi7 < goalDataListLength7; goalDataListi7++) {
                                if (input.readByte() != 0) {
                                    var temp1198 = temp1197["goalDataList"][goalDataListi7] = {}; //目标数据
                                    temp1198["goalId"] = input.readVarInt(false); //目标id
                                    temp1198["progress"] = input.readVarInt(false); //当前完成进度
                                    temp1198["goalType"] = input.readVarInt(false); //目标类型
                                    temp1198["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength7 = input.readShort();
                                    temp1198["goalParams"] = new Array(goalParamsLength7);
                                    for (var goalParamsi7 = 0; goalParamsi7 < goalParamsLength7; goalParamsi7++) {
                                        temp1198["goalParams"][goalParamsi7] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp1197["goalDataList"][goalDataListi7] = null;
                                }
                            }
                        }
                        else {
                            resActivityWeekendGoalCopyInfoMessage[datai2] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityWeekendGoalCopyInfoMessage);
                    break;
                case 4202 /* ActivityModelCMD.CMDResActivityLuckyBoxInfoMessage */:
                    var resActivityLuckyBoxInfoMessage = {};
                    resActivityLuckyBoxInfoMessage["luck"] = input.readVarInt(false); //幸运值
                    var gotIdLength1 = input.readShort();
                    resActivityLuckyBoxInfoMessage["gotId"] = new Array(gotIdLength1);
                    for (var gotIdi1 = 0; gotIdi1 < gotIdLength1; gotIdi1++) {
                        resActivityLuckyBoxInfoMessage["gotId"][gotIdi1] = input.readVarInt(false); //已领取的大奖id
                    }
                    resActivityLuckyBoxInfoMessage["anonymous"] = input.readBoolean(); //是否匿名
                    this.sendNotif(cmd, resActivityLuckyBoxInfoMessage);
                    break;
                case 4205 /* ActivityModelCMD.CMDResActivityLuckyBoxExtraInfoMessage */:
                    var resActivityLuckyBoxExtraInfoMessage = {};
                    resActivityLuckyBoxExtraInfoMessage["type"] = input.readVarInt(false); //活动类型
                    resActivityLuckyBoxExtraInfoMessage["count"] = input.readVarInt(false); //全服次数
                    var gotIdLength2 = input.readShort();
                    resActivityLuckyBoxExtraInfoMessage["gotId"] = new Array(gotIdLength2);
                    for (var gotIdi2 = 0; gotIdi2 < gotIdLength2; gotIdi2++) {
                        resActivityLuckyBoxExtraInfoMessage["gotId"][gotIdi2] = input.readVarInt(false); //已领取的奖励id，cfg_luckbox_type
                    }
                    this.sendNotif(cmd, resActivityLuckyBoxExtraInfoMessage);
                    break;
                case 4212 /* ActivityModelCMD.CMDResActivityRechargeLimitInfoMessage */:
                    var resActivityRechargeLimitInfoMessage = {};
                    resActivityRechargeLimitInfoMessage["desc"] = input.readString(); //描述
                    var statusLength9 = input.readShort();
                    resActivityRechargeLimitInfoMessage["status"] = [];
                    for (var statusi9 = 0; statusi9 < statusLength9; statusi9++) {
                        if (input.readByte() != 0) {
                            var temp1199 = resActivityRechargeLimitInfoMessage["status"][statusi9] = {}; //状态列表 状态0未首充 1已首充
                            temp1199["cid"] = input.readVarInt(false); //
                            temp1199["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityRechargeLimitInfoMessage["status"][statusi9] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityRechargeLimitInfoMessage);
                    break;
                case 4222 /* ActivityModelCMD.CMDResActivitySponsorInfoMessage */:
                    var resActivitySponsorInfoMessage = {};
                    var infoLength5 = input.readShort();
                    resActivitySponsorInfoMessage["info"] = [];
                    for (var infoi5 = 0; infoi5 < infoLength5; infoi5++) {
                        if (input.readByte() != 0) {
                            var temp1200 = resActivitySponsorInfoMessage["info"][infoi5] = {}; //返回信息数据
                            temp1200["cid"] = input.readVarInt(false); //配置id
                            temp1200["status"] = input.readVarInt(false); //领取状态 0未领取 1已领取
                        }
                        else {
                            resActivitySponsorInfoMessage["info"][infoi5] = null;
                        }
                    }
                    resActivitySponsorInfoMessage["anonymous"] = input.readBoolean(); //是否匿名
                    resActivitySponsorInfoMessage["reward"] = input.readBoolean(); //大奖是否领取
                    resActivitySponsorInfoMessage["activityType"] = input.readVarInt(false); //活动类型
                    this.sendNotif(cmd, resActivitySponsorInfoMessage);
                    break;
                case 4232 /* ActivityModelCMD.CMDResActivitySevenDayGoalInfoMessage */:
                    var resActivitySevenDayGoalInfoMessage = {};
                    var dataLength3 = input.readShort();
                    resActivitySevenDayGoalInfoMessage["data"] = [];
                    for (var datai3 = 0; datai3 < dataLength3; datai3++) {
                        if (input.readByte() != 0) {
                            var temp1201 = resActivitySevenDayGoalInfoMessage["data"][datai3] = {}; //活动数据列表
                            temp1201["taskId"] = input.readVarInt(false); //任务id
                            temp1201["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp1201["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength8 = input.readShort();
                            temp1201["goalDataList"] = [];
                            for (var goalDataListi8 = 0; goalDataListi8 < goalDataListLength8; goalDataListi8++) {
                                if (input.readByte() != 0) {
                                    var temp1202 = temp1201["goalDataList"][goalDataListi8] = {}; //目标数据
                                    temp1202["goalId"] = input.readVarInt(false); //目标id
                                    temp1202["progress"] = input.readVarInt(false); //当前完成进度
                                    temp1202["goalType"] = input.readVarInt(false); //目标类型
                                    temp1202["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength8 = input.readShort();
                                    temp1202["goalParams"] = new Array(goalParamsLength8);
                                    for (var goalParamsi8 = 0; goalParamsi8 < goalParamsLength8; goalParamsi8++) {
                                        temp1202["goalParams"][goalParamsi8] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp1201["goalDataList"][goalDataListi8] = null;
                                }
                            }
                        }
                        else {
                            resActivitySevenDayGoalInfoMessage["data"][datai3] = null;
                        }
                    }
                    resActivitySevenDayGoalInfoMessage["startTime"] = input.readVarInt(false); //开启时间
                    var findBackLength1 = input.readShort();
                    resActivitySevenDayGoalInfoMessage["findBack"] = new Array(findBackLength1);
                    for (var findBacki1 = 0; findBacki1 < findBackLength1; findBacki1++) {
                        resActivitySevenDayGoalInfoMessage["findBack"][findBacki1] = input.readVarInt(false); //已找回的任务 cfgId
                    }
                    this.sendNotif(cmd, resActivitySevenDayGoalInfoMessage);
                    break;
                case 4234 /* ActivityModelCMD.CMDResActivitySevenDayProcessMessage */:
                    var dataLength4 = input.readShort();
                    var resActivitySevenDayProcessMessage = [];
                    for (var datai4 = 0; datai4 < dataLength4; datai4++) {
                        if (input.readByte() != 0) {
                            var temp1203 = resActivitySevenDayProcessMessage[datai4] = {}; //活动数据列表
                            temp1203["taskId"] = input.readVarInt(false); //任务id
                            temp1203["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp1203["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength9 = input.readShort();
                            temp1203["goalDataList"] = [];
                            for (var goalDataListi9 = 0; goalDataListi9 < goalDataListLength9; goalDataListi9++) {
                                if (input.readByte() != 0) {
                                    var temp1204 = temp1203["goalDataList"][goalDataListi9] = {}; //目标数据
                                    temp1204["goalId"] = input.readVarInt(false); //目标id
                                    temp1204["progress"] = input.readVarInt(false); //当前完成进度
                                    temp1204["goalType"] = input.readVarInt(false); //目标类型
                                    temp1204["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength9 = input.readShort();
                                    temp1204["goalParams"] = new Array(goalParamsLength9);
                                    for (var goalParamsi9 = 0; goalParamsi9 < goalParamsLength9; goalParamsi9++) {
                                        temp1204["goalParams"][goalParamsi9] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp1203["goalDataList"][goalDataListi9] = null;
                                }
                            }
                        }
                        else {
                            resActivitySevenDayProcessMessage[datai4] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivitySevenDayProcessMessage);
                    break;
                case 4242 /* ActivityModelCMD.CMDResActivityFundInfoMessage */:
                    var resActivityFundInfoMessage = {};
                    var dataLength5 = input.readShort();
                    resActivityFundInfoMessage["data"] = [];
                    for (var datai5 = 0; datai5 < dataLength5; datai5++) {
                        if (input.readByte() != 0) {
                            var temp1205 = resActivityFundInfoMessage["data"][datai5] = {}; //活动数据列表
                            temp1205["taskId"] = input.readVarInt(false); //任务id
                            temp1205["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp1205["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength10 = input.readShort();
                            temp1205["goalDataList"] = [];
                            for (var goalDataListi10 = 0; goalDataListi10 < goalDataListLength10; goalDataListi10++) {
                                if (input.readByte() != 0) {
                                    var temp1206 = temp1205["goalDataList"][goalDataListi10] = {}; //目标数据
                                    temp1206["goalId"] = input.readVarInt(false); //目标id
                                    temp1206["progress"] = input.readVarInt(false); //当前完成进度
                                    temp1206["goalType"] = input.readVarInt(false); //目标类型
                                    temp1206["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength10 = input.readShort();
                                    temp1206["goalParams"] = new Array(goalParamsLength10);
                                    for (var goalParamsi10 = 0; goalParamsi10 < goalParamsLength10; goalParamsi10++) {
                                        temp1206["goalParams"][goalParamsi10] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp1205["goalDataList"][goalDataListi10] = null;
                                }
                            }
                        }
                        else {
                            resActivityFundInfoMessage["data"][datai5] = null;
                        }
                    }
                    var fundTypeLength1 = input.readShort();
                    resActivityFundInfoMessage["fundType"] = new Array(fundTypeLength1);
                    for (var fundTypei1 = 0; fundTypei1 < fundTypeLength1; fundTypei1++) {
                        resActivityFundInfoMessage["fundType"][fundTypei1] = input.readVarInt(false); //基金类型
                    }
                    resActivityFundInfoMessage["activityId"] = input.readVarInt(false); //活动id
                    resActivityFundInfoMessage["activityType"] = input.readVarInt(false); //活动类型
                    this.sendNotif(cmd, resActivityFundInfoMessage);
                    break;
                case 4245 /* ActivityModelCMD.CMDResActivityFundMessage */:
                    var resActivityFundMessage = {};
                    var dataLength6 = input.readShort();
                    resActivityFundMessage["data"] = [];
                    for (var datai6 = 0; datai6 < dataLength6; datai6++) {
                        if (input.readByte() != 0) {
                            var temp1207 = resActivityFundMessage["data"][datai6] = {}; //活动数据列表
                            temp1207["taskId"] = input.readVarInt(false); //任务id
                            temp1207["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp1207["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength11 = input.readShort();
                            temp1207["goalDataList"] = [];
                            for (var goalDataListi11 = 0; goalDataListi11 < goalDataListLength11; goalDataListi11++) {
                                if (input.readByte() != 0) {
                                    var temp1208 = temp1207["goalDataList"][goalDataListi11] = {}; //目标数据
                                    temp1208["goalId"] = input.readVarInt(false); //目标id
                                    temp1208["progress"] = input.readVarInt(false); //当前完成进度
                                    temp1208["goalType"] = input.readVarInt(false); //目标类型
                                    temp1208["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength11 = input.readShort();
                                    temp1208["goalParams"] = new Array(goalParamsLength11);
                                    for (var goalParamsi11 = 0; goalParamsi11 < goalParamsLength11; goalParamsi11++) {
                                        temp1208["goalParams"][goalParamsi11] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp1207["goalDataList"][goalDataListi11] = null;
                                }
                            }
                        }
                        else {
                            resActivityFundMessage["data"][datai6] = null;
                        }
                    }
                    resActivityFundMessage["activityType"] = input.readVarInt(false); //活动类型
                    this.sendNotif(cmd, resActivityFundMessage);
                    break;
                case 4252 /* ActivityModelCMD.CMDResActivityOpenPromotionsInfoMessage */:
                    var statusLength10 = input.readShort();
                    var resActivityOpenPromotionsInfoMessage = [];
                    for (var statusi10 = 0; statusi10 < statusLength10; statusi10++) {
                        if (input.readByte() != 0) {
                            var temp1209 = resActivityOpenPromotionsInfoMessage[statusi10] = {}; //活动领取状态
                            temp1209["cid"] = input.readVarInt(false); //
                            temp1209["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityOpenPromotionsInfoMessage[statusi10] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityOpenPromotionsInfoMessage);
                    break;
                case 4262 /* ActivityModelCMD.CMDResActivityAmbrosiaInfoMessage */:
                    var resActivityAmbrosiaInfoMessage = {};
                    resActivityAmbrosiaInfoMessage["turn"] = input.readVarInt(false); //第几轮
                    resActivityAmbrosiaInfoMessage["score"] = input.readVarInt(false); //积分
                    resActivityAmbrosiaInfoMessage["today"] = input.readVarInt(false); //今日当前轮充值金额
                    resActivityAmbrosiaInfoMessage["yesterday"] = input.readVarInt(false); //昨日当前轮充值金额
                    var statusLength11 = input.readShort();
                    resActivityAmbrosiaInfoMessage["status"] = [];
                    for (var statusi11 = 0; statusi11 < statusLength11; statusi11++) {
                        if (input.readByte() != 0) {
                            var temp1210 = resActivityAmbrosiaInfoMessage["status"][statusi11] = {}; //采摘状态，位置对应配置id
                            temp1210["cid"] = input.readVarInt(false); //
                            temp1210["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityAmbrosiaInfoMessage["status"][statusi11] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityAmbrosiaInfoMessage);
                    break;
                case 4264 /* ActivityModelCMD.CMDResActivityAmbrosiaAcquireMessage */:
                    var resActivityAmbrosiaAcquireMessage = input.readVarInt(false); //奖励id
                    this.sendNotif(cmd, resActivityAmbrosiaAcquireMessage);
                    break;
                case 4266 /* ActivityModelCMD.CMDResActivityGodGoalsRankingMessage */:
                    var resActivityGodGoalsRankingMessage = {};
                    var rankingsLength6 = input.readShort();
                    resActivityGodGoalsRankingMessage["rankings"] = [];
                    for (var rankingsi6 = 0; rankingsi6 < rankingsLength6; rankingsi6++) {
                        if (input.readByte() != 0) {
                            var temp1211 = resActivityGodGoalsRankingMessage["rankings"][rankingsi6] = {}; //
                            temp1211["ranking"] = input.readVarInt(false); //
                            temp1211["uid"] = input.readLong(); //
                            temp1211["name"] = input.readString(); //
                            temp1211["score"] = input.readLong(); //
                        }
                        else {
                            resActivityGodGoalsRankingMessage["rankings"][rankingsi6] = null;
                        }
                    }
                    resActivityGodGoalsRankingMessage["selfScore"] = input.readVarInt(false); //自己的分数
                    resActivityGodGoalsRankingMessage["selfRanking"] = input.readVarInt(false); //自己的排名 0未上榜
                    this.sendNotif(cmd, resActivityGodGoalsRankingMessage);
                    break;
                case 4272 /* ActivityModelCMD.CMDResActivityDiscountShopInfoMessage */:
                    var resActivityDiscountShopInfoMessage = {};
                    resActivityDiscountShopInfoMessage["discount"] = input.readVarInt(false); //折扣
                    resActivityDiscountShopInfoMessage["rechargeCount"] = input.readVarInt(false); //充值金额
                    var limitLength1 = input.readShort();
                    resActivityDiscountShopInfoMessage["limit"] = [];
                    for (var limiti1 = 0; limiti1 < limitLength1; limiti1++) {
                        if (input.readByte() != 0) {
                            var temp1212 = resActivityDiscountShopInfoMessage["limit"][limiti1] = {}; //
                            temp1212["id"] = input.readVarInt(false); //
                            temp1212["value"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityDiscountShopInfoMessage["limit"][limiti1] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityDiscountShopInfoMessage);
                    break;
                case 4275 /* ActivityModelCMD.CMDResChooseRechargeMessage */:
                    var resChooseRechargeMessage = {};
                    resChooseRechargeMessage["count"] = input.readVarInt(false); //已充值金额
                    var rewardLength1 = input.readShort();
                    resChooseRechargeMessage["reward"] = new Array(rewardLength1);
                    for (var rewardi1 = 0; rewardi1 < rewardLength1; rewardi1++) {
                        resChooseRechargeMessage["reward"][rewardi1] = input.readVarInt(false); //已领取的奖励id
                    }
                    resChooseRechargeMessage["type"] = input.readVarInt(false); //活动类型
                    this.sendNotif(cmd, resChooseRechargeMessage);
                    break;
                case 4282 /* ActivityModelCMD.CMDResHeavenPacketInfoMessage */:
                    var statusLength12 = input.readShort();
                    var resHeavenPacketInfoMessage = [];
                    for (var statusi12 = 0; statusi12 < statusLength12; statusi12++) {
                        if (input.readByte() != 0) {
                            var temp1213 = resHeavenPacketInfoMessage[statusi12] = {}; //领取状态，cid：配置id；status：0未领取1已领取；index：金额
                            temp1213["cid"] = input.readVarInt(false); //
                            temp1213["status"] = input.readVarInt(false); //
                            temp1213["index"] = input.readVarInt(false); //
                        }
                        else {
                            resHeavenPacketInfoMessage[statusi12] = null;
                        }
                    }
                    this.sendNotif(cmd, resHeavenPacketInfoMessage);
                    break;
                case 4292 /* ActivityModelCMD.CMDResGodRecordInfoMessage */:
                    var dataLength7 = input.readShort();
                    var resGodRecordInfoMessage = [];
                    for (var datai7 = 0; datai7 < dataLength7; datai7++) {
                        if (input.readByte() != 0) {
                            var temp1214 = resGodRecordInfoMessage[datai7] = {}; //活动数据列表
                            temp1214["taskId"] = input.readVarInt(false); //任务id
                            temp1214["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp1214["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength12 = input.readShort();
                            temp1214["goalDataList"] = [];
                            for (var goalDataListi12 = 0; goalDataListi12 < goalDataListLength12; goalDataListi12++) {
                                if (input.readByte() != 0) {
                                    var temp1215 = temp1214["goalDataList"][goalDataListi12] = {}; //目标数据
                                    temp1215["goalId"] = input.readVarInt(false); //目标id
                                    temp1215["progress"] = input.readVarInt(false); //当前完成进度
                                    temp1215["goalType"] = input.readVarInt(false); //目标类型
                                    temp1215["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength12 = input.readShort();
                                    temp1215["goalParams"] = new Array(goalParamsLength12);
                                    for (var goalParamsi12 = 0; goalParamsi12 < goalParamsLength12; goalParamsi12++) {
                                        temp1215["goalParams"][goalParamsi12] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp1214["goalDataList"][goalDataListi12] = null;
                                }
                            }
                        }
                        else {
                            resGodRecordInfoMessage[datai7] = null;
                        }
                    }
                    this.sendNotif(cmd, resGodRecordInfoMessage);
                    break;
                case 4294 /* ActivityModelCMD.CMDResGodRecordProcessMessage */:
                    var processLength1 = input.readShort();
                    var resGodRecordProcessMessage = [];
                    for (var processi1 = 0; processi1 < processLength1; processi1++) {
                        if (input.readByte() != 0) {
                            var temp1216 = resGodRecordProcessMessage[processi1] = {}; //活动数据变化
                            temp1216["taskId"] = input.readVarInt(false); //任务id
                            temp1216["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp1216["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength13 = input.readShort();
                            temp1216["goalDataList"] = [];
                            for (var goalDataListi13 = 0; goalDataListi13 < goalDataListLength13; goalDataListi13++) {
                                if (input.readByte() != 0) {
                                    var temp1217 = temp1216["goalDataList"][goalDataListi13] = {}; //目标数据
                                    temp1217["goalId"] = input.readVarInt(false); //目标id
                                    temp1217["progress"] = input.readVarInt(false); //当前完成进度
                                    temp1217["goalType"] = input.readVarInt(false); //目标类型
                                    temp1217["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength13 = input.readShort();
                                    temp1217["goalParams"] = new Array(goalParamsLength13);
                                    for (var goalParamsi13 = 0; goalParamsi13 < goalParamsLength13; goalParamsi13++) {
                                        temp1217["goalParams"][goalParamsi13] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp1216["goalDataList"][goalDataListi13] = null;
                                }
                            }
                        }
                        else {
                            resGodRecordProcessMessage[processi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resGodRecordProcessMessage);
                    break;
                case 4302 /* ActivityModelCMD.CMDResFirstRechargeThreeMessage */:
                    var resFirstRechargeThreeMessage = {};
                    resFirstRechargeThreeMessage["rechargeId"] = input.readVarInt(false); //当前首充ID
                    var acquiredLength5 = input.readShort();
                    resFirstRechargeThreeMessage["acquired"] = [];
                    for (var acquiredi5 = 0; acquiredi5 < acquiredLength5; acquiredi5++) {
                        if (input.readByte() != 0) {
                            var temp1218 = resFirstRechargeThreeMessage["acquired"][acquiredi5] = {}; //奖励领取状态
                            temp1218["cid"] = input.readVarInt(false); //配置id
                            temp1218["status"] = input.readVarInt(false); //领取状态 0未领取 1已领取
                        }
                        else {
                            resFirstRechargeThreeMessage["acquired"][acquiredi5] = null;
                        }
                    }
                    this.sendNotif(cmd, resFirstRechargeThreeMessage);
                    break;
                case 4312 /* ActivityModelCMD.CMDResGhostGoalMessage */:
                    var progressLength3 = input.readShort();
                    var resGhostGoalMessage = [];
                    for (var progressi3 = 0; progressi3 < progressLength3; progressi3++) {
                        if (input.readByte() != 0) {
                            var temp1219 = resGhostGoalMessage[progressi3] = {}; //
                            temp1219["taskId"] = input.readVarInt(false); //任务id
                            temp1219["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp1219["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength14 = input.readShort();
                            temp1219["goalDataList"] = [];
                            for (var goalDataListi14 = 0; goalDataListi14 < goalDataListLength14; goalDataListi14++) {
                                if (input.readByte() != 0) {
                                    var temp1220 = temp1219["goalDataList"][goalDataListi14] = {}; //目标数据
                                    temp1220["goalId"] = input.readVarInt(false); //目标id
                                    temp1220["progress"] = input.readVarInt(false); //当前完成进度
                                    temp1220["goalType"] = input.readVarInt(false); //目标类型
                                    temp1220["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength14 = input.readShort();
                                    temp1220["goalParams"] = new Array(goalParamsLength14);
                                    for (var goalParamsi14 = 0; goalParamsi14 < goalParamsLength14; goalParamsi14++) {
                                        temp1220["goalParams"][goalParamsi14] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp1219["goalDataList"][goalDataListi14] = null;
                                }
                            }
                        }
                        else {
                            resGhostGoalMessage[progressi3] = null;
                        }
                    }
                    this.sendNotif(cmd, resGhostGoalMessage);
                    break;
                case 4314 /* ActivityModelCMD.CMDResGhostProcessMessage */:
                    var processLength2 = input.readShort();
                    var resGhostProcessMessage = [];
                    for (var processi2 = 0; processi2 < processLength2; processi2++) {
                        if (input.readByte() != 0) {
                            var temp1221 = resGhostProcessMessage[processi2] = {}; //活动数据变化
                            temp1221["taskId"] = input.readVarInt(false); //任务id
                            temp1221["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp1221["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength15 = input.readShort();
                            temp1221["goalDataList"] = [];
                            for (var goalDataListi15 = 0; goalDataListi15 < goalDataListLength15; goalDataListi15++) {
                                if (input.readByte() != 0) {
                                    var temp1222 = temp1221["goalDataList"][goalDataListi15] = {}; //目标数据
                                    temp1222["goalId"] = input.readVarInt(false); //目标id
                                    temp1222["progress"] = input.readVarInt(false); //当前完成进度
                                    temp1222["goalType"] = input.readVarInt(false); //目标类型
                                    temp1222["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength15 = input.readShort();
                                    temp1222["goalParams"] = new Array(goalParamsLength15);
                                    for (var goalParamsi15 = 0; goalParamsi15 < goalParamsLength15; goalParamsi15++) {
                                        temp1222["goalParams"][goalParamsi15] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp1221["goalDataList"][goalDataListi15] = null;
                                }
                            }
                        }
                        else {
                            resGhostProcessMessage[processi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resGhostProcessMessage);
                    break;
                case 4321 /* ActivityModelCMD.CMDResDiceInfoMessage */:
                    var resDiceInfoMessage = {};
                    var cfgIdLength1 = input.readShort();
                    resDiceInfoMessage["cfgId"] = new Array(cfgIdLength1);
                    for (var cfgIdi1 = 0; cfgIdi1 < cfgIdLength1; cfgIdi1++) {
                        resDiceInfoMessage["cfgId"][cfgIdi1] = input.readVarInt(false); //已领取的配置id
                    }
                    resDiceInfoMessage["time"] = input.readVarInt(false); //剩余次数
                    resDiceInfoMessage["count"] = input.readVarInt(false); //充值金额
                    this.sendNotif(cmd, resDiceInfoMessage);
                    break;
                case 4403 /* ActivityModelCMD.CMDResActivityCompeteTrumpInfoMessage */:
                    var resActivityCompeteTrumpInfoMessage = {};
                    var pAcquiredLength3 = input.readShort();
                    resActivityCompeteTrumpInfoMessage["pAcquired"] = [];
                    for (var pAcquiredi3 = 0; pAcquiredi3 < pAcquiredLength3; pAcquiredi3++) {
                        if (input.readByte() != 0) {
                            var temp1223 = resActivityCompeteTrumpInfoMessage["pAcquired"][pAcquiredi3] = {}; //个人领取状态
                            temp1223["cid"] = input.readVarInt(false); //
                            temp1223["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityCompeteTrumpInfoMessage["pAcquired"][pAcquiredi3] = null;
                        }
                    }
                    var gAcquiredLength3 = input.readShort();
                    resActivityCompeteTrumpInfoMessage["gAcquired"] = [];
                    for (var gAcquiredi3 = 0; gAcquiredi3 < gAcquiredLength3; gAcquiredi3++) {
                        if (input.readByte() != 0) {
                            var temp1224 = resActivityCompeteTrumpInfoMessage["gAcquired"][gAcquiredi3] = {}; //全服领取状态
                            temp1224["cid"] = input.readVarInt(false); //
                            temp1224["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityCompeteTrumpInfoMessage["gAcquired"][gAcquiredi3] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityCompeteTrumpInfoMessage);
                    break;
                case 4404 /* ActivityModelCMD.CMDResActivityCompeteTrumpProgressMessage */:
                    var progressLength4 = input.readShort();
                    var resActivityCompeteTrumpProgressMessage = [];
                    for (var progressi4 = 0; progressi4 < progressLength4; progressi4++) {
                        if (input.readByte() != 0) {
                            var temp1225 = resActivityCompeteTrumpProgressMessage[progressi4] = {}; //
                            temp1225["taskId"] = input.readVarInt(false); //任务id
                            temp1225["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp1225["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength16 = input.readShort();
                            temp1225["goalDataList"] = [];
                            for (var goalDataListi16 = 0; goalDataListi16 < goalDataListLength16; goalDataListi16++) {
                                if (input.readByte() != 0) {
                                    var temp1226 = temp1225["goalDataList"][goalDataListi16] = {}; //目标数据
                                    temp1226["goalId"] = input.readVarInt(false); //目标id
                                    temp1226["progress"] = input.readVarInt(false); //当前完成进度
                                    temp1226["goalType"] = input.readVarInt(false); //目标类型
                                    temp1226["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength16 = input.readShort();
                                    temp1226["goalParams"] = new Array(goalParamsLength16);
                                    for (var goalParamsi16 = 0; goalParamsi16 < goalParamsLength16; goalParamsi16++) {
                                        temp1226["goalParams"][goalParamsi16] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp1225["goalDataList"][goalDataListi16] = null;
                                }
                            }
                        }
                        else {
                            resActivityCompeteTrumpProgressMessage[progressi4] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityCompeteTrumpProgressMessage);
                    break;
                case 4413 /* ActivityModelCMD.CMDResActivityCompeteImageInfoMessage */:
                    var resActivityCompeteImageInfoMessage = {};
                    var pAcquiredLength4 = input.readShort();
                    resActivityCompeteImageInfoMessage["pAcquired"] = [];
                    for (var pAcquiredi4 = 0; pAcquiredi4 < pAcquiredLength4; pAcquiredi4++) {
                        if (input.readByte() != 0) {
                            var temp1227 = resActivityCompeteImageInfoMessage["pAcquired"][pAcquiredi4] = {}; //个人领取状态
                            temp1227["cid"] = input.readVarInt(false); //
                            temp1227["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityCompeteImageInfoMessage["pAcquired"][pAcquiredi4] = null;
                        }
                    }
                    var gAcquiredLength4 = input.readShort();
                    resActivityCompeteImageInfoMessage["gAcquired"] = [];
                    for (var gAcquiredi4 = 0; gAcquiredi4 < gAcquiredLength4; gAcquiredi4++) {
                        if (input.readByte() != 0) {
                            var temp1228 = resActivityCompeteImageInfoMessage["gAcquired"][gAcquiredi4] = {}; //全服领取状态
                            temp1228["cid"] = input.readVarInt(false); //
                            temp1228["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityCompeteImageInfoMessage["gAcquired"][gAcquiredi4] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityCompeteImageInfoMessage);
                    break;
                case 4414 /* ActivityModelCMD.CMDResActivityCompeteImageProgressMessage */:
                    var progressLength5 = input.readShort();
                    var resActivityCompeteImageProgressMessage = [];
                    for (var progressi5 = 0; progressi5 < progressLength5; progressi5++) {
                        if (input.readByte() != 0) {
                            var temp1229 = resActivityCompeteImageProgressMessage[progressi5] = {}; //
                            temp1229["taskId"] = input.readVarInt(false); //任务id
                            temp1229["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp1229["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength17 = input.readShort();
                            temp1229["goalDataList"] = [];
                            for (var goalDataListi17 = 0; goalDataListi17 < goalDataListLength17; goalDataListi17++) {
                                if (input.readByte() != 0) {
                                    var temp1230 = temp1229["goalDataList"][goalDataListi17] = {}; //目标数据
                                    temp1230["goalId"] = input.readVarInt(false); //目标id
                                    temp1230["progress"] = input.readVarInt(false); //当前完成进度
                                    temp1230["goalType"] = input.readVarInt(false); //目标类型
                                    temp1230["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength17 = input.readShort();
                                    temp1230["goalParams"] = new Array(goalParamsLength17);
                                    for (var goalParamsi17 = 0; goalParamsi17 < goalParamsLength17; goalParamsi17++) {
                                        temp1230["goalParams"][goalParamsi17] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp1229["goalDataList"][goalDataListi17] = null;
                                }
                            }
                        }
                        else {
                            resActivityCompeteImageProgressMessage[progressi5] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityCompeteImageProgressMessage);
                    break;
                case 4422 /* ActivityModelCMD.CMDResActivityTreasureHeavenInfoMessage */:
                    var resActivityTreasureHeavenInfoMessage = {};
                    resActivityTreasureHeavenInfoMessage["type"] = input.readVarInt(false); //活动类型
                    resActivityTreasureHeavenInfoMessage["score"] = input.readVarInt(false); //积分
                    var turnsLength1 = input.readShort();
                    resActivityTreasureHeavenInfoMessage["turns"] = new Array(turnsLength1);
                    for (var turnsi1 = 0; turnsi1 < turnsLength1; turnsi1++) {
                        resActivityTreasureHeavenInfoMessage["turns"][turnsi1] = input.readVarInt(false); //已抽中的id，cfg_treasure_turn
                    }
                    resActivityTreasureHeavenInfoMessage["anonymous"] = input.readBoolean(); //是否匿名
                    this.sendNotif(cmd, resActivityTreasureHeavenInfoMessage);
                    break;
                case 4425 /* ActivityModelCMD.CMDResActivityTreasureHeavenTurnMessage */:
                    var resActivityTreasureHeavenTurnMessage = input.readVarInt(false); //cfg_treasure_turn配置id
                    this.sendNotif(cmd, resActivityTreasureHeavenTurnMessage);
                    break;
                case 4427 /* ActivityModelCMD.CMDResActivityTreasureHeavenHotMessage */:
                    var resActivityTreasureHeavenHotMessage = {};
                    resActivityTreasureHeavenHotMessage["type"] = input.readVarInt(false); //活动类型
                    resActivityTreasureHeavenHotMessage["pri"] = input.readVarInt(false); //个人热度
                    resActivityTreasureHeavenHotMessage["pub"] = input.readVarInt(false); //全服热度
                    this.sendNotif(cmd, resActivityTreasureHeavenHotMessage);
                    break;
                case 4432 /* ActivityModelCMD.CMDResActivityTotalRechargeInfoMessage */:
                    var resActivityTotalRechargeInfoMessage = {};
                    resActivityTotalRechargeInfoMessage["score"] = input.readVarInt(false); //积分
                    resActivityTotalRechargeInfoMessage["activityType"] = input.readVarInt(false); //类型
                    var acquiredLength6 = input.readShort();
                    resActivityTotalRechargeInfoMessage["acquired"] = [];
                    for (var acquiredi6 = 0; acquiredi6 < acquiredLength6; acquiredi6++) {
                        if (input.readByte() != 0) {
                            var temp1231 = resActivityTotalRechargeInfoMessage["acquired"][acquiredi6] = {}; //领取状态
                            temp1231["cid"] = input.readVarInt(false); //
                            temp1231["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityTotalRechargeInfoMessage["acquired"][acquiredi6] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityTotalRechargeInfoMessage);
                    break;
                case 4443 /* ActivityModelCMD.CMDResActivityCompeteInfoMessage */:
                    var resActivityCompeteInfoMessage = {};
                    var pAcquiredLength5 = input.readShort();
                    resActivityCompeteInfoMessage["pAcquired"] = [];
                    for (var pAcquiredi5 = 0; pAcquiredi5 < pAcquiredLength5; pAcquiredi5++) {
                        if (input.readByte() != 0) {
                            var temp1232 = resActivityCompeteInfoMessage["pAcquired"][pAcquiredi5] = {}; //个人领取状态
                            temp1232["cid"] = input.readVarInt(false); //
                            temp1232["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityCompeteInfoMessage["pAcquired"][pAcquiredi5] = null;
                        }
                    }
                    var gAcquiredLength5 = input.readShort();
                    resActivityCompeteInfoMessage["gAcquired"] = [];
                    for (var gAcquiredi5 = 0; gAcquiredi5 < gAcquiredLength5; gAcquiredi5++) {
                        if (input.readByte() != 0) {
                            var temp1233 = resActivityCompeteInfoMessage["gAcquired"][gAcquiredi5] = {}; //全服领取状态
                            temp1233["cid"] = input.readVarInt(false); //
                            temp1233["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityCompeteInfoMessage["gAcquired"][gAcquiredi5] = null;
                        }
                    }
                    resActivityCompeteInfoMessage["activityType"] = input.readVarInt(false); //活动类型
                    this.sendNotif(cmd, resActivityCompeteInfoMessage);
                    break;
                case 4444 /* ActivityModelCMD.CMDResActivityCompeteProgressMessage */:
                    var resActivityCompeteProgressMessage = {};
                    var progressLength6 = input.readShort();
                    resActivityCompeteProgressMessage["progress"] = [];
                    for (var progressi6 = 0; progressi6 < progressLength6; progressi6++) {
                        if (input.readByte() != 0) {
                            var temp1234 = resActivityCompeteProgressMessage["progress"][progressi6] = {}; //
                            temp1234["taskId"] = input.readVarInt(false); //任务id
                            temp1234["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp1234["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength18 = input.readShort();
                            temp1234["goalDataList"] = [];
                            for (var goalDataListi18 = 0; goalDataListi18 < goalDataListLength18; goalDataListi18++) {
                                if (input.readByte() != 0) {
                                    var temp1235 = temp1234["goalDataList"][goalDataListi18] = {}; //目标数据
                                    temp1235["goalId"] = input.readVarInt(false); //目标id
                                    temp1235["progress"] = input.readVarInt(false); //当前完成进度
                                    temp1235["goalType"] = input.readVarInt(false); //目标类型
                                    temp1235["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength18 = input.readShort();
                                    temp1235["goalParams"] = new Array(goalParamsLength18);
                                    for (var goalParamsi18 = 0; goalParamsi18 < goalParamsLength18; goalParamsi18++) {
                                        temp1235["goalParams"][goalParamsi18] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp1234["goalDataList"][goalDataListi18] = null;
                                }
                            }
                        }
                        else {
                            resActivityCompeteProgressMessage["progress"][progressi6] = null;
                        }
                    }
                    resActivityCompeteProgressMessage["activityType"] = input.readVarInt(false); //活动类型
                    this.sendNotif(cmd, resActivityCompeteProgressMessage);
                    break;
                case 4452 /* ActivityModelCMD.CMDResActivityRankingReinAndLevelMessage */:
                    var resActivityRankingReinAndLevelMessage = {};
                    var rankingsLength7 = input.readShort();
                    resActivityRankingReinAndLevelMessage["rankings"] = [];
                    for (var rankingsi7 = 0; rankingsi7 < rankingsLength7; rankingsi7++) {
                        if (input.readByte() != 0) {
                            var temp1236 = resActivityRankingReinAndLevelMessage["rankings"][rankingsi7] = {}; //
                            temp1236["ranking"] = input.readVarInt(false); //
                            temp1236["uid"] = input.readLong(); //
                            temp1236["name"] = input.readString(); //
                            temp1236["score"] = input.readLong(); //
                        }
                        else {
                            resActivityRankingReinAndLevelMessage["rankings"][rankingsi7] = null;
                        }
                    }
                    resActivityRankingReinAndLevelMessage["selfScore"] = input.readVarInt(false); //自己的分数
                    resActivityRankingReinAndLevelMessage["selfRanking"] = input.readVarInt(false); //自己的排名 0未上榜
                    this.sendNotif(cmd, resActivityRankingReinAndLevelMessage);
                    break;
                case 4462 /* ActivityModelCMD.CMDResActivityDefenseRankInfoMessage */:
                    var resActivityDefenseRankInfoMessage = {};
                    resActivityDefenseRankInfoMessage["rank"] = input.readVarInt(false); //我的排名
                    var rankingsLength8 = input.readShort();
                    resActivityDefenseRankInfoMessage["rankings"] = [];
                    for (var rankingsi8 = 0; rankingsi8 < rankingsLength8; rankingsi8++) {
                        if (input.readByte() != 0) {
                            var temp1237 = resActivityDefenseRankInfoMessage["rankings"][rankingsi8] = {}; //
                            temp1237["ranking"] = input.readVarInt(false); //
                            temp1237["uid"] = input.readLong(); //
                            temp1237["name"] = input.readString(); //
                            temp1237["score"] = input.readLong(); //
                        }
                        else {
                            resActivityDefenseRankInfoMessage["rankings"][rankingsi8] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityDefenseRankInfoMessage);
                    break;
                case 4472 /* ActivityModelCMD.CMDResActivityFashionSaleInfoMessage */:
                    var pAcquiredLength6 = input.readShort();
                    var resActivityFashionSaleInfoMessage = [];
                    for (var pAcquiredi6 = 0; pAcquiredi6 < pAcquiredLength6; pAcquiredi6++) {
                        if (input.readByte() != 0) {
                            var temp1238 = resActivityFashionSaleInfoMessage[pAcquiredi6] = {}; //购买状态
                            temp1238["cid"] = input.readVarInt(false); //
                            temp1238["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityFashionSaleInfoMessage[pAcquiredi6] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityFashionSaleInfoMessage);
                    break;
                case 4482 /* ActivityModelCMD.CMDResPlatformRewardInfoMessage */:
                    var rewardStatusLength1 = input.readShort();
                    var resPlatformRewardInfoMessage = [];
                    for (var rewardStatusi1 = 0; rewardStatusi1 < rewardStatusLength1; rewardStatusi1++) {
                        if (input.readByte() != 0) {
                            var temp1239 = resPlatformRewardInfoMessage[rewardStatusi1] = {}; //奖励状态
                            temp1239["cid"] = input.readVarInt(false); //
                            temp1239["status"] = input.readVarInt(false); //
                        }
                        else {
                            resPlatformRewardInfoMessage[rewardStatusi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resPlatformRewardInfoMessage);
                    break;
                case 4485 /* ActivityModelCMD.CMDResActivityPlatformCompeteLevelInfoMessage */:
                    var pAcquiredLength7 = input.readShort();
                    var resActivityPlatformCompeteLevelInfoMessage = [];
                    for (var pAcquiredi7 = 0; pAcquiredi7 < pAcquiredLength7; pAcquiredi7++) {
                        if (input.readByte() != 0) {
                            var temp1240 = resActivityPlatformCompeteLevelInfoMessage[pAcquiredi7] = {}; //个人领取状态
                            temp1240["cid"] = input.readVarInt(false); //
                            temp1240["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityPlatformCompeteLevelInfoMessage[pAcquiredi7] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityPlatformCompeteLevelInfoMessage);
                    break;
                case 4492 /* ActivityModelCMD.CMDResMicroTerminalRewardStateMessage */:
                    var rewardStatusLength2 = input.readByte();
                    if (rewardStatusLength2 != 0) {
                        var resMicroTerminalRewardStateMessage = {}; //奖励状态
                        resMicroTerminalRewardStateMessage["cid"] = input.readVarInt(false); //
                        resMicroTerminalRewardStateMessage["status"] = input.readVarInt(false); //
                    }
                    this.sendNotif(cmd, resMicroTerminalRewardStateMessage);
                    break;
                case 4502 /* ActivityModelCMD.CMDResActivitySevenDayStarInfoMessage */:
                    var dataLength8 = input.readShort();
                    var resActivitySevenDayStarInfoMessage = [];
                    for (var datai8 = 0; datai8 < dataLength8; datai8++) {
                        if (input.readByte() != 0) {
                            var temp1241 = resActivitySevenDayStarInfoMessage[datai8] = {}; //活动数据列表
                            temp1241["taskId"] = input.readVarInt(false); //任务id
                            temp1241["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp1241["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength19 = input.readShort();
                            temp1241["goalDataList"] = [];
                            for (var goalDataListi19 = 0; goalDataListi19 < goalDataListLength19; goalDataListi19++) {
                                if (input.readByte() != 0) {
                                    var temp1242 = temp1241["goalDataList"][goalDataListi19] = {}; //目标数据
                                    temp1242["goalId"] = input.readVarInt(false); //目标id
                                    temp1242["progress"] = input.readVarInt(false); //当前完成进度
                                    temp1242["goalType"] = input.readVarInt(false); //目标类型
                                    temp1242["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength19 = input.readShort();
                                    temp1242["goalParams"] = new Array(goalParamsLength19);
                                    for (var goalParamsi19 = 0; goalParamsi19 < goalParamsLength19; goalParamsi19++) {
                                        temp1242["goalParams"][goalParamsi19] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp1241["goalDataList"][goalDataListi19] = null;
                                }
                            }
                        }
                        else {
                            resActivitySevenDayStarInfoMessage[datai8] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivitySevenDayStarInfoMessage);
                    break;
                case 4504 /* ActivityModelCMD.CMDResActivitySevenDayStarProcessMessage */:
                    var dataLength9 = input.readShort();
                    var resActivitySevenDayStarProcessMessage = [];
                    for (var datai9 = 0; datai9 < dataLength9; datai9++) {
                        if (input.readByte() != 0) {
                            var temp1243 = resActivitySevenDayStarProcessMessage[datai9] = {}; //活动数据列表
                            temp1243["taskId"] = input.readVarInt(false); //任务id
                            temp1243["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp1243["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength20 = input.readShort();
                            temp1243["goalDataList"] = [];
                            for (var goalDataListi20 = 0; goalDataListi20 < goalDataListLength20; goalDataListi20++) {
                                if (input.readByte() != 0) {
                                    var temp1244 = temp1243["goalDataList"][goalDataListi20] = {}; //目标数据
                                    temp1244["goalId"] = input.readVarInt(false); //目标id
                                    temp1244["progress"] = input.readVarInt(false); //当前完成进度
                                    temp1244["goalType"] = input.readVarInt(false); //目标类型
                                    temp1244["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength20 = input.readShort();
                                    temp1244["goalParams"] = new Array(goalParamsLength20);
                                    for (var goalParamsi20 = 0; goalParamsi20 < goalParamsLength20; goalParamsi20++) {
                                        temp1244["goalParams"][goalParamsi20] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp1243["goalDataList"][goalDataListi20] = null;
                                }
                            }
                        }
                        else {
                            resActivitySevenDayStarProcessMessage[datai9] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivitySevenDayStarProcessMessage);
                    break;
                case 4512 /* ActivityModelCMD.CMDResActivityStarStatueInfoMessage */:
                    var resActivityStarStatueInfoMessage = {};
                    resActivityStarStatueInfoMessage["progress"] = input.readVarInt(false); //当前进度值
                    resActivityStarStatueInfoMessage["days"] = input.readVarInt(false); //结束天数
                    var rewardStatusLength3 = input.readShort();
                    resActivityStarStatueInfoMessage["rewardStatus"] = [];
                    for (var rewardStatusi3 = 0; rewardStatusi3 < rewardStatusLength3; rewardStatusi3++) {
                        if (input.readByte() != 0) {
                            var temp1245 = resActivityStarStatueInfoMessage["rewardStatus"][rewardStatusi3] = {}; //奖励领取状态
                            temp1245["cid"] = input.readVarInt(false); //
                            temp1245["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityStarStatueInfoMessage["rewardStatus"][rewardStatusi3] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityStarStatueInfoMessage);
                    break;
                case 4522 /* ActivityModelCMD.CMDResActivityQQHallGiftMessage */:
                    var resActivityQQHallGiftMessage = {};
                    var beansLength2 = input.readShort();
                    resActivityQQHallGiftMessage["beans"] = [];
                    for (var beansi2 = 0; beansi2 < beansLength2; beansi2++) {
                        if (input.readByte() != 0) {
                            var temp1246 = resActivityQQHallGiftMessage["beans"][beansi2] = {}; //状态列表
                            temp1246["cid"] = input.readVarInt(false); //
                            temp1246["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityQQHallGiftMessage["beans"][beansi2] = null;
                        }
                    }
                    resActivityQQHallGiftMessage["activityType"] = input.readVarInt(false); //活动类型
                    this.sendNotif(cmd, resActivityQQHallGiftMessage);
                    break;
                case 4532 /* ActivityModelCMD.CMDResActivityMonopolyInfoMessage */:
                    var resActivityMonopolyInfoMessage = {};
                    resActivityMonopolyInfoMessage["pos"] = input.readVarInt(false); //当前位置
                    resActivityMonopolyInfoMessage["time"] = input.readVarInt(false); //剩余次数
                    resActivityMonopolyInfoMessage["maxTime"] = input.readVarInt(false); //总次数
                    resActivityMonopolyInfoMessage["total"] = input.readVarInt(false); //总步数
                    var statusLength13 = input.readShort();
                    resActivityMonopolyInfoMessage["status"] = [];
                    for (var statusi13 = 0; statusi13 < statusLength13; statusi13++) {
                        if (input.readByte() != 0) {
                            var temp1247 = resActivityMonopolyInfoMessage["status"][statusi13] = {}; //累计领奖状态
                            temp1247["cid"] = input.readVarInt(false); //
                            temp1247["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityMonopolyInfoMessage["status"][statusi13] = null;
                        }
                    }
                    resActivityMonopolyInfoMessage["dice"] = input.readVarInt(false); //行走点数，请求行走才有
                    this.sendNotif(cmd, resActivityMonopolyInfoMessage);
                    break;
                case 4542 /* ActivityModelCMD.CMDResActivityDailyRechargeRebateInfoMessage */:
                    var resActivityDailyRechargeRebateInfoMessage = {};
                    resActivityDailyRechargeRebateInfoMessage["count"] = input.readVarInt(false); //当天充值金额
                    resActivityDailyRechargeRebateInfoMessage["days"] = input.readVarInt(false); //完成天数
                    resActivityDailyRechargeRebateInfoMessage["activityId"] = input.readVarInt(false); //活动id
                    var statusLength14 = input.readShort();
                    resActivityDailyRechargeRebateInfoMessage["status"] = [];
                    for (var statusi14 = 0; statusi14 < statusLength14; statusi14++) {
                        if (input.readByte() != 0) {
                            var temp1248 = resActivityDailyRechargeRebateInfoMessage["status"][statusi14] = {}; //活动领取状态
                            temp1248["cid"] = input.readVarInt(false); //
                            temp1248["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityDailyRechargeRebateInfoMessage["status"][statusi14] = null;
                        }
                    }
                    var dailyStatusLength1 = input.readShort();
                    resActivityDailyRechargeRebateInfoMessage["dailyStatus"] = [];
                    for (var dailyStatusi1 = 0; dailyStatusi1 < dailyStatusLength1; dailyStatusi1++) {
                        if (input.readByte() != 0) {
                            var temp1249 = resActivityDailyRechargeRebateInfoMessage["dailyStatus"][dailyStatusi1] = {}; //每日奖励状态
                            temp1249["cid"] = input.readVarInt(false); //
                            temp1249["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityDailyRechargeRebateInfoMessage["dailyStatus"][dailyStatusi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityDailyRechargeRebateInfoMessage);
                    break;
                case 4552 /* ActivityModelCMD.CMDResActivityWingTaskInfoMessage */:
                    var dataLength10 = input.readShort();
                    var resActivityWingTaskInfoMessage = [];
                    for (var datai10 = 0; datai10 < dataLength10; datai10++) {
                        if (input.readByte() != 0) {
                            var temp1250 = resActivityWingTaskInfoMessage[datai10] = {}; //活动数据列表
                            temp1250["taskId"] = input.readVarInt(false); //任务id
                            temp1250["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp1250["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength21 = input.readShort();
                            temp1250["goalDataList"] = [];
                            for (var goalDataListi21 = 0; goalDataListi21 < goalDataListLength21; goalDataListi21++) {
                                if (input.readByte() != 0) {
                                    var temp1251 = temp1250["goalDataList"][goalDataListi21] = {}; //目标数据
                                    temp1251["goalId"] = input.readVarInt(false); //目标id
                                    temp1251["progress"] = input.readVarInt(false); //当前完成进度
                                    temp1251["goalType"] = input.readVarInt(false); //目标类型
                                    temp1251["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength21 = input.readShort();
                                    temp1251["goalParams"] = new Array(goalParamsLength21);
                                    for (var goalParamsi21 = 0; goalParamsi21 < goalParamsLength21; goalParamsi21++) {
                                        temp1251["goalParams"][goalParamsi21] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp1250["goalDataList"][goalDataListi21] = null;
                                }
                            }
                        }
                        else {
                            resActivityWingTaskInfoMessage[datai10] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityWingTaskInfoMessage);
                    break;
                case 4562 /* ActivityModelCMD.CMDResActivityMergeUnionInfoMessage */:
                    var resActivityMergeUnionInfoMessage = {};
                    var dataLength11 = input.readShort();
                    resActivityMergeUnionInfoMessage["data"] = [];
                    for (var datai11 = 0; datai11 < dataLength11; datai11++) {
                        if (input.readByte() != 0) {
                            var temp1252 = resActivityMergeUnionInfoMessage["data"][datai11] = {}; //活动数据列表
                            temp1252["unionId"] = input.readLong(); //unionId
                            temp1252["unionName"] = input.readString(); //行会名
                            temp1252["unionLevel"] = input.readVarInt(false); //行会等级
                            temp1252["unionChairman"] = input.readString(); //行会会长
                            temp1252["atk"] = input.readLong(); //行会攻击
                        }
                        else {
                            resActivityMergeUnionInfoMessage["data"][datai11] = null;
                        }
                    }
                    resActivityMergeUnionInfoMessage["unionId"] = input.readLong(); //选择的行会id
                    resActivityMergeUnionInfoMessage["reward"] = input.readVarInt(false); //奖励是否领取
                    this.sendNotif(cmd, resActivityMergeUnionInfoMessage);
                    break;
                case 4566 /* ActivityModelCMD.CMDResActivityTurntableInfoMessage */:
                    var resActivityTurntableInfoMessage = {};
                    resActivityTurntableInfoMessage["activityType"] = input.readVarInt(false); //活动类型
                    var infoLength6 = input.readShort();
                    resActivityTurntableInfoMessage["info"] = [];
                    for (var infoi6 = 0; infoi6 < infoLength6; infoi6++) {
                        if (input.readByte() != 0) {
                            var temp1253 = resActivityTurntableInfoMessage["info"][infoi6] = {}; //活动数据列表
                            temp1253["cfgId"] = input.readVarInt(false); //配置id
                            temp1253["time"] = input.readVarInt(false); //数量
                        }
                        else {
                            resActivityTurntableInfoMessage["info"][infoi6] = null;
                        }
                    }
                    var resultLength1 = input.readShort();
                    resActivityTurntableInfoMessage["result"] = [];
                    for (var resulti1 = 0; resulti1 < resultLength1; resulti1++) {
                        if (input.readByte() != 0) {
                            var temp1254 = resActivityTurntableInfoMessage["result"][resulti1] = {}; //转转盘结果列表
                            temp1254["cfgId"] = input.readVarInt(false); //配置id
                            temp1254["time"] = input.readVarInt(false); //数量
                        }
                        else {
                            resActivityTurntableInfoMessage["result"][resulti1] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityTurntableInfoMessage);
                    break;
                case 4572 /* ActivityModelCMD.CMDResActivityDiscountTicketInfoMessage */:
                    var resActivityDiscountTicketInfoMessage = {};
                    var statusLength15 = input.readShort();
                    resActivityDiscountTicketInfoMessage["status"] = [];
                    for (var statusi15 = 0; statusi15 < statusLength15; statusi15++) {
                        if (input.readByte() != 0) {
                            var temp1255 = resActivityDiscountTicketInfoMessage["status"][statusi15] = {}; //活动领取状态
                            temp1255["cid"] = input.readVarInt(false); //
                            temp1255["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityDiscountTicketInfoMessage["status"][statusi15] = null;
                        }
                    }
                    resActivityDiscountTicketInfoMessage["discountNum"] = input.readVarInt(false); //折扣券数量
                    resActivityDiscountTicketInfoMessage["anonymous"] = input.readBoolean(); //是否匿名
                    this.sendNotif(cmd, resActivityDiscountTicketInfoMessage);
                    break;
                case 4582 /* ActivityModelCMD.CMDResActivityLoginRewardInfoMessage */:
                    var resActivityLoginRewardInfoMessage = {};
                    var statusLength16 = input.readShort();
                    resActivityLoginRewardInfoMessage["status"] = [];
                    for (var statusi16 = 0; statusi16 < statusLength16; statusi16++) {
                        if (input.readByte() != 0) {
                            var temp1256 = resActivityLoginRewardInfoMessage["status"][statusi16] = {}; //活动领取状态
                            temp1256["cid"] = input.readVarInt(false); //
                            temp1256["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityLoginRewardInfoMessage["status"][statusi16] = null;
                        }
                    }
                    resActivityLoginRewardInfoMessage["days"] = input.readVarInt(false); //登录天数
                    this.sendNotif(cmd, resActivityLoginRewardInfoMessage);
                    break;
                case 4592 /* ActivityModelCMD.CMDResActivityCumulativeLoginInfoMessage */:
                    var resActivityCumulativeLoginInfoMessage = {};
                    var goalDataLength1 = input.readShort();
                    resActivityCumulativeLoginInfoMessage["goalData"] = [];
                    for (var goalDatai1 = 0; goalDatai1 < goalDataLength1; goalDatai1++) {
                        if (input.readByte() != 0) {
                            var temp1257 = resActivityCumulativeLoginInfoMessage["goalData"][goalDatai1] = {}; //目标任务数据
                            temp1257["taskId"] = input.readVarInt(false); //任务id
                            temp1257["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp1257["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength22 = input.readShort();
                            temp1257["goalDataList"] = [];
                            for (var goalDataListi22 = 0; goalDataListi22 < goalDataListLength22; goalDataListi22++) {
                                if (input.readByte() != 0) {
                                    var temp1258 = temp1257["goalDataList"][goalDataListi22] = {}; //目标数据
                                    temp1258["goalId"] = input.readVarInt(false); //目标id
                                    temp1258["progress"] = input.readVarInt(false); //当前完成进度
                                    temp1258["goalType"] = input.readVarInt(false); //目标类型
                                    temp1258["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength22 = input.readShort();
                                    temp1258["goalParams"] = new Array(goalParamsLength22);
                                    for (var goalParamsi22 = 0; goalParamsi22 < goalParamsLength22; goalParamsi22++) {
                                        temp1258["goalParams"][goalParamsi22] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp1257["goalDataList"][goalDataListi22] = null;
                                }
                            }
                        }
                        else {
                            resActivityCumulativeLoginInfoMessage["goalData"][goalDatai1] = null;
                        }
                    }
                    resActivityCumulativeLoginInfoMessage["days"] = input.readVarInt(false); //累计登录天数
                    this.sendNotif(cmd, resActivityCumulativeLoginInfoMessage);
                    break;
                case 4613 /* ActivityModelCMD.CMDResActivitySecKillingMessage */:
                    var resActivitySecKillingMessage = {};
                    var secKillingBeanLength1 = input.readShort();
                    resActivitySecKillingMessage["secKillingBean"] = [];
                    for (var secKillingBeani1 = 0; secKillingBeani1 < secKillingBeanLength1; secKillingBeani1++) {
                        if (input.readByte() != 0) {
                            var temp1259 = resActivitySecKillingMessage["secKillingBean"][secKillingBeani1] = {}; //个人领取状态
                            temp1259["activityID"] = input.readVarInt(false); //活动id
                            temp1259["cfgId"] = input.readVarInt(false); //配置id
                            temp1259["type"] = input.readVarInt(false); //0:未购买 1:已购买
                        }
                        else {
                            resActivitySecKillingMessage["secKillingBean"][secKillingBeani1] = null;
                        }
                    }
                    resActivitySecKillingMessage["money"] = input.readVarInt(false); //充值金额
                    this.sendNotif(cmd, resActivitySecKillingMessage);
                    break;
                case 4622 /* ActivityModelCMD.CMDResActivityLimitRechargePackInfoMessage */:
                    var statusLength17 = input.readShort();
                    var resActivityLimitRechargePackInfoMessage = [];
                    for (var statusi17 = 0; statusi17 < statusLength17; statusi17++) {
                        if (input.readByte() != 0) {
                            var temp1260 = resActivityLimitRechargePackInfoMessage[statusi17] = {}; //活动领取状态
                            temp1260["cid"] = input.readVarInt(false); //
                            temp1260["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityLimitRechargePackInfoMessage[statusi17] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityLimitRechargePackInfoMessage);
                    break;
                case 4632 /* ActivityModelCMD.CMDResTrumpSkillTaskInfoMessage */:
                    var resTrumpSkillTaskInfoMessage = {};
                    resTrumpSkillTaskInfoMessage["type"] = input.readVarInt(false); //活动类型
                    var beanLength1 = input.readShort();
                    resTrumpSkillTaskInfoMessage["bean"] = [];
                    for (var beani1 = 0; beani1 < beanLength1; beani1++) {
                        if (input.readByte() != 0) {
                            var temp1261 = resTrumpSkillTaskInfoMessage["bean"][beani1] = {}; //已领奖的列表
                            temp1261["page"] = input.readVarInt(false); //页签
                            var typeLength1 = input.readShort();
                            temp1261["type"] = new Array(typeLength1);
                            for (var typei1 = 0; typei1 < typeLength1; typei1++) {
                                temp1261["type"][typei1] = input.readVarInt(false); //类型
                            }
                        }
                        else {
                            resTrumpSkillTaskInfoMessage["bean"][beani1] = null;
                        }
                    }
                    this.sendNotif(cmd, resTrumpSkillTaskInfoMessage);
                    break;
                case 4642 /* ActivityModelCMD.CMDResActivityQQBlueVipGiftMessage */:
                    var beansLength3 = input.readShort();
                    var resActivityQQBlueVipGiftMessage = [];
                    for (var beansi3 = 0; beansi3 < beansLength3; beansi3++) {
                        if (input.readByte() != 0) {
                            var temp1262 = resActivityQQBlueVipGiftMessage[beansi3] = {}; //领取状态列表
                            temp1262["cid"] = input.readVarInt(false); //
                            temp1262["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityQQBlueVipGiftMessage[beansi3] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityQQBlueVipGiftMessage);
                    break;
                case 4645 /* ActivityModelCMD.CMDResQQBlueVipInfoMessage */:
                    var resQQBlueVipInfoMessage = {};
                    resQQBlueVipInfoMessage["blueVipType"] = input.readVarInt(false); //蓝钻开通类型（二进制组成）
                    resQQBlueVipInfoMessage["blueVipLevel"] = input.readVarInt(false); //蓝钻等级
                    this.sendNotif(cmd, resQQBlueVipInfoMessage);
                    break;
                case 4652 /* ActivityModelCMD.CMDResWishInfoMessage */:
                    var resWishInfoMessage = {};
                    resWishInfoMessage["type"] = input.readVarInt(false); //活动类型
                    var cidLength1 = input.readShort();
                    resWishInfoMessage["cid"] = new Array(cidLength1);
                    for (var cidi1 = 0; cidi1 < cidLength1; cidi1++) {
                        resWishInfoMessage["cid"][cidi1] = input.readVarInt(false); //已保存的许愿
                    }
                    resWishInfoMessage["time"] = input.readVarInt(false); //可许愿的次数
                    this.sendNotif(cmd, resWishInfoMessage);
                    break;
                case 4662 /* ActivityModelCMD.CMDResExpandInfoMessage */:
                    var resExpandInfoMessage = input.readVarInt(false); //当前膨胀id
                    this.sendNotif(cmd, resExpandInfoMessage);
                    break;
                case 4665 /* ActivityModelCMD.CMDResAdventureTraderInfoMessage */:
                    var adventureDataLength1 = input.readShort();
                    var resAdventureTraderInfoMessage = [];
                    for (var adventureDatai1 = 0; adventureDatai1 < adventureDataLength1; adventureDatai1++) {
                        if (input.readByte() != 0) {
                            var temp1263 = resAdventureTraderInfoMessage[adventureDatai1] = {}; //奇遇数据
                            temp1263["cfgId"] = input.readVarInt(false); //配置id
                            temp1263["exchangeLimit"] = input.readVarInt(false); //可兑换次数
                            var goalDataLength2 = input.readShort();
                            temp1263["goalData"] = [];
                            for (var goalDatai2 = 0; goalDatai2 < goalDataLength2; goalDatai2++) {
                                if (input.readByte() != 0) {
                                    var temp1264 = temp1263["goalData"][goalDatai2] = {}; //任务目标数据
                                    temp1264["taskId"] = input.readVarInt(false); //任务id
                                    temp1264["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                                    temp1264["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                                    var goalDataListLength23 = input.readShort();
                                    temp1264["goalDataList"] = [];
                                    for (var goalDataListi23 = 0; goalDataListi23 < goalDataListLength23; goalDataListi23++) {
                                        if (input.readByte() != 0) {
                                            var temp1265 = temp1264["goalDataList"][goalDataListi23] = {}; //目标数据
                                            temp1265["goalId"] = input.readVarInt(false); //目标id
                                            temp1265["progress"] = input.readVarInt(false); //当前完成进度
                                            temp1265["goalType"] = input.readVarInt(false); //目标类型
                                            temp1265["goalCount"] = input.readVarInt(false); //目标需求数量
                                            var goalParamsLength23 = input.readShort();
                                            temp1265["goalParams"] = new Array(goalParamsLength23);
                                            for (var goalParamsi23 = 0; goalParamsi23 < goalParamsLength23; goalParamsi23++) {
                                                temp1265["goalParams"][goalParamsi23] = input.readVarInt(false); //目标参数
                                            }
                                        }
                                        else {
                                            temp1264["goalDataList"][goalDataListi23] = null;
                                        }
                                    }
                                }
                                else {
                                    temp1263["goalData"][goalDatai2] = null;
                                }
                            }
                        }
                        else {
                            resAdventureTraderInfoMessage[adventureDatai1] = null;
                        }
                    }
                    this.sendNotif(cmd, resAdventureTraderInfoMessage);
                    break;
                case 4671 /* ActivityModelCMD.CMDResActivityRebateDuplicateInfoMessage */:
                    var resActivityRebateDuplicateInfoMessage = {};
                    resActivityRebateDuplicateInfoMessage["round"] = input.readVarInt(false); //当前轮次
                    resActivityRebateDuplicateInfoMessage["expire"] = input.readVarInt(false); //挑战结束时间(s) 0未召唤
                    this.sendNotif(cmd, resActivityRebateDuplicateInfoMessage);
                    break;
                case 4673 /* ActivityModelCMD.CMDResActivityRebateDuplicateSuccessMessage */:
                    var resActivityRebateDuplicateSuccessMessage = input.readVarInt(false); //轮次
                    this.sendNotif(cmd, resActivityRebateDuplicateSuccessMessage);
                    break;
                case 4675 /* ActivityModelCMD.CMDResActivityRebateDuplicatePanelMessage */:
                    var resActivityRebateDuplicatePanelMessage = input.readVarInt(false); //当前轮次 0已全部通关
                    this.sendNotif(cmd, resActivityRebateDuplicatePanelMessage);
                    break;
                case 4682 /* ActivityModelCMD.CMDResActivityAncestorsDuplicateInfoMessage */:
                    var beansLength4 = input.readShort();
                    var resActivityAncestorsDuplicateInfoMessage = [];
                    for (var beansi4 = 0; beansi4 < beansLength4; beansi4++) {
                        if (input.readByte() != 0) {
                            var temp1266 = resActivityAncestorsDuplicateInfoMessage[beansi4] = {}; //领取状态列表
                            temp1266["cid"] = input.readVarInt(false); //
                            temp1266["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityAncestorsDuplicateInfoMessage[beansi4] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityAncestorsDuplicateInfoMessage);
                    break;
                case 4692 /* ActivityModelCMD.CMDResActivityDoubleFirstRechargeInfoMessage */:
                    var resActivityDoubleFirstRechargeInfoMessage = {};
                    var beansLength5 = input.readShort();
                    resActivityDoubleFirstRechargeInfoMessage["beans"] = [];
                    for (var beansi5 = 0; beansi5 < beansLength5; beansi5++) {
                        if (input.readByte() != 0) {
                            var temp1267 = resActivityDoubleFirstRechargeInfoMessage["beans"][beansi5] = {}; //领取状态列表
                            temp1267["cid"] = input.readVarInt(false); //
                            temp1267["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityDoubleFirstRechargeInfoMessage["beans"][beansi5] = null;
                        }
                    }
                    resActivityDoubleFirstRechargeInfoMessage["endTime"] = input.readVarInt(false); //结束时间
                    this.sendNotif(cmd, resActivityDoubleFirstRechargeInfoMessage);
                    break;
                case 4702 /* ActivityModelCMD.CMDResActivityRecycleRebateInfoMessage */:
                    var resActivityRecycleRebateInfoMessage = {};
                    resActivityRecycleRebateInfoMessage["recycleTimes"] = input.readVarInt(false); //已回收次数
                    var beansLength6 = input.readShort();
                    resActivityRecycleRebateInfoMessage["beans"] = [];
                    for (var beansi6 = 0; beansi6 < beansLength6; beansi6++) {
                        if (input.readByte() != 0) {
                            var temp1268 = resActivityRecycleRebateInfoMessage["beans"][beansi6] = {}; //领取次数
                            temp1268["cid"] = input.readVarInt(false); //
                            temp1268["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityRecycleRebateInfoMessage["beans"][beansi6] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityRecycleRebateInfoMessage);
                    break;
                case 4712 /* ActivityModelCMD.CMDResActivityExquisiteInfoMessage */:
                    var resActivityExquisiteInfoMessage = input.readVarInt(false); //参与次数
                    this.sendNotif(cmd, resActivityExquisiteInfoMessage);
                    break;
                case 4722 /* ActivityModelCMD.CMDResActivityClockRebateInfoMessage */:
                    var resActivityClockRebateInfoMessage = {};
                    var boughtLength1 = input.readShort();
                    resActivityClockRebateInfoMessage["bought"] = new Array(boughtLength1);
                    for (var boughti1 = 0; boughti1 < boughtLength1; boughti1++) {
                        resActivityClockRebateInfoMessage["bought"][boughti1] = input.readVarInt(false); //已购买的配置id
                    }
                    resActivityClockRebateInfoMessage["pool"] = input.readVarInt(false); //奖池
                    resActivityClockRebateInfoMessage["status"] = input.readVarInt(false); //返利领取状态 0未领取1已领取
                    this.sendNotif(cmd, resActivityClockRebateInfoMessage);
                    break;
                case 4732 /* ActivityModelCMD.CMDResActivityRankingCommonMessage */:
                    var resActivityRankingCommonMessage = {};
                    resActivityRankingCommonMessage["type"] = input.readVarInt(false); //活动类型
                    resActivityRankingCommonMessage["selfScore"] = input.readVarInt(false); //自己的分数
                    resActivityRankingCommonMessage["selfRanking"] = input.readVarInt(false); //自己的排名 0未上榜
                    var rankingsLength9 = input.readShort();
                    resActivityRankingCommonMessage["rankings"] = [];
                    for (var rankingsi9 = 0; rankingsi9 < rankingsLength9; rankingsi9++) {
                        if (input.readByte() != 0) {
                            var temp1269 = resActivityRankingCommonMessage["rankings"][rankingsi9] = {}; //
                            temp1269["ranking"] = input.readVarInt(false); //
                            temp1269["uid"] = input.readLong(); //
                            temp1269["name"] = input.readString(); //
                            temp1269["score"] = input.readLong(); //
                        }
                        else {
                            resActivityRankingCommonMessage["rankings"][rankingsi9] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityRankingCommonMessage);
                    break;
                case 4733 /* ActivityModelCMD.CMDResActivityWeekendSponsorShipGiftInfoMessage */:
                    var statusLength18 = input.readShort();
                    var resActivityWeekendSponsorShipGiftInfoMessage = [];
                    for (var statusi18 = 0; statusi18 < statusLength18; statusi18++) {
                        if (input.readByte() != 0) {
                            var temp1270 = resActivityWeekendSponsorShipGiftInfoMessage[statusi18] = {}; //活动领取状态
                            temp1270["cid"] = input.readVarInt(false); //
                            temp1270["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityWeekendSponsorShipGiftInfoMessage[statusi18] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityWeekendSponsorShipGiftInfoMessage);
                    break;
                case 4734 /* ActivityModelCMD.CMDResActivityWeekendRechargeGiftInfoMessage */:
                    var statusLength19 = input.readShort();
                    var resActivityWeekendRechargeGiftInfoMessage = [];
                    for (var statusi19 = 0; statusi19 < statusLength19; statusi19++) {
                        if (input.readByte() != 0) {
                            var temp1271 = resActivityWeekendRechargeGiftInfoMessage[statusi19] = {}; //活动领取状态
                            temp1271["cid"] = input.readVarInt(false); //
                            temp1271["status"] = input.readVarInt(false); //
                        }
                        else {
                            resActivityWeekendRechargeGiftInfoMessage[statusi19] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityWeekendRechargeGiftInfoMessage);
                    break;
                case 4742 /* ActivityModelCMD.CMDResDivinePowerInfoMessage */:
                    var resDivinePowerInfoMessage = {};
                    resDivinePowerInfoMessage["activityType"] = input.readVarInt(false); //活动类型
                    var giftsLength1 = input.readShort();
                    resDivinePowerInfoMessage["gifts"] = new Array(giftsLength1);
                    for (var giftsi1 = 0; giftsi1 < giftsLength1; giftsi1++) {
                        resDivinePowerInfoMessage["gifts"][giftsi1] = input.readVarInt(false); //已购买的礼包
                    }
                    this.sendNotif(cmd, resDivinePowerInfoMessage);
                    break;
                case 4746 /* ActivityModelCMD.CMDResMergeLevelUpInfoMessage */:
                    var resMergeLevelUpInfoMessage = {};
                    resMergeLevelUpInfoMessage["selfRank"] = input.readVarInt(false); //自己的合服等级排行
                    var topThreeRankLength = input.readShort();
                    resMergeLevelUpInfoMessage["topThreeRank"] = new Array(topThreeRankLength);
                    for (var topThreeRanki1 = 0; topThreeRanki1 < topThreeRankLength; topThreeRanki1++) {
                        resMergeLevelUpInfoMessage["topThreeRank"][topThreeRanki1] = input.readString(); //合服等级排行前三的人的名字
                    }
                    resMergeLevelUpInfoMessage["acquired"] = input.readVarInt(false); //已经购买次数
                    resMergeLevelUpInfoMessage["limit"] = input.readVarInt(false); //可购买上限
                    resMergeLevelUpInfoMessage["levelGap"] = input.readVarInt(false); //与第一名等级差距
                    this.sendNotif(cmd, resMergeLevelUpInfoMessage);
                    break;
            }
        };
        return ActivityModel;
    }(ModelBase));
    net.ActivityModel = ActivityModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:240
     */
    var ActivityPlatformModel = /** @class */ (function (_super) {
        __extends(ActivityPlatformModel, _super);
        function ActivityPlatformModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(240002 /* ActivityPlatformModelCMD.CMDResActivityPlatformPhoneVerifyMessage */);
            return _this;
        }
        ActivityPlatformModel.ins = function () {
            if (!this._ins)
                this._ins = new ActivityPlatformModel();
            return this._ins;
        };
        /**
         *
         * 请求手机绑定信息
         *
         * sendReqActivityPlatformPhoneVerifyMessage  240001
         */
        ActivityPlatformModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(240001 /* ActivityPlatformModelCMD.CMDReqActivityPlatformPhoneVerifyMessage */, output, s);
        };
        /**
         *
         * 领奖
         *
         * sendReqActivityPlatformPhoneVerifyAcquireMessage  240003
         */
        ActivityPlatformModel.prototype.send3 = function (s) {
            var output = this.getO();
            this.send(240003 /* ActivityPlatformModelCMD.CMDReqActivityPlatformPhoneVerifyAcquireMessage */, output, s);
        };
        /**
         *
         * 请求信息完善状态
         *
         * sendReqActivityPlatformInfoCompleteMessage  240011
         */
        ActivityPlatformModel.prototype.send11 = function (s) {
            var output = this.getO();
            this.send(240011 /* ActivityPlatformModelCMD.CMDReqActivityPlatformInfoCompleteMessage */, output, s);
        };
        /**
         *
         * 请求信息完善状态
         * @param
         * @param
         * @param
         * @param
         *
         * sendResActivityPlatformInfoCompleteMessage  240012
         */
        ActivityPlatformModel.prototype.send12 = function (bind, age, acquired, rewards, link, s) {
            var output = this.getO();
            output.writeVarInt(bind, false);
            output.writeVarInt(age, false);
            output.writeVarInt(acquired, false);
            if (rewards != null) {
                output.writeShort(rewards.length);
                for (var rewardsi1 = 0; rewardsi1 < rewards.length; rewardsi1++) {
                    if (rewards[rewardsi1] != null) {
                        output.writeByte(1);
                        output.writeVarInt(rewards[rewardsi1].itemId, false);
                        output.writeVarInt(rewards[rewardsi1].itemCount, false);
                    }
                    else {
                        output.writeByte(0);
                    }
                }
            }
            else {
                output.writeShort(0);
            }
            output.writeString(link);
            this.send(240012 /* ActivityPlatformModelCMD.CMDResActivityPlatformInfoCompleteMessage */, output, s);
        };
        /**
         *
         * 领奖
         *
         * sendReqActivityPlatformInfoCompleteAcquireMessage  240013
         */
        ActivityPlatformModel.prototype.send13 = function (s) {
            var output = this.getO();
            this.send(240013 /* ActivityPlatformModelCMD.CMDReqActivityPlatformInfoCompleteAcquireMessage */, output, s);
        };
        ActivityPlatformModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 240002 /* ActivityPlatformModelCMD.CMDResActivityPlatformPhoneVerifyMessage */:
                    var resActivityPlatformPhoneVerifyMessage = {};
                    resActivityPlatformPhoneVerifyMessage["bind"] = input.readVarInt(false); //
                    resActivityPlatformPhoneVerifyMessage["acquired"] = input.readVarInt(false); //
                    var rewardsLength1 = input.readShort();
                    resActivityPlatformPhoneVerifyMessage["rewards"] = [];
                    for (var rewardsi1 = 0; rewardsi1 < rewardsLength1; rewardsi1++) {
                        if (input.readByte() != 0) {
                            var temp602 = resActivityPlatformPhoneVerifyMessage["rewards"][rewardsi1] = {}; //奖励
                            temp602["itemId"] = input.readVarInt(false); //config id
                            temp602["itemCount"] = input.readVarInt(false); //item count
                        }
                        else {
                            resActivityPlatformPhoneVerifyMessage["rewards"][rewardsi1] = null;
                        }
                    }
                    resActivityPlatformPhoneVerifyMessage["link"] = input.readString(); //
                    this.sendNotif(cmd, resActivityPlatformPhoneVerifyMessage);
                    break;
            }
        };
        return ActivityPlatformModel;
    }(ModelBase));
    net.ActivityPlatformModel = ActivityPlatformModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:234
     */
    var ActivityRankingCompeteModel = /** @class */ (function (_super) {
        __extends(ActivityRankingCompeteModel, _super);
        function ActivityRankingCompeteModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(234002 /* ActivityRankingCompeteModelCMD.CMDResActivityRankingCompeteWealthInfoMessage */);
            return _this;
        }
        ActivityRankingCompeteModel.ins = function () {
            if (!this._ins)
                this._ins = new ActivityRankingCompeteModel();
            return this._ins;
        };
        /**
         *
         *
         * @param 活动类型
         *
         * sendReqActivityRankingCompeteWealthInfoMessage  234001
         */
        ActivityRankingCompeteModel.prototype.send1 = function (type, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            this.send(234001 /* ActivityRankingCompeteModelCMD.CMDReqActivityRankingCompeteWealthInfoMessage */, output, s);
        };
        ActivityRankingCompeteModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 234002 /* ActivityRankingCompeteModelCMD.CMDResActivityRankingCompeteWealthInfoMessage */:
                    var resActivityRankingCompeteWealthInfoMessage = {};
                    resActivityRankingCompeteWealthInfoMessage["type"] = input.readVarInt(false); //活动类型
                    resActivityRankingCompeteWealthInfoMessage["score"] = input.readLong(); //自己的分数
                    var rankingsLength1 = input.readShort();
                    resActivityRankingCompeteWealthInfoMessage["rankings"] = [];
                    for (var rankingsi1 = 0; rankingsi1 < rankingsLength1; rankingsi1++) {
                        if (input.readByte() != 0) {
                            var temp613 = resActivityRankingCompeteWealthInfoMessage["rankings"][rankingsi1] = {}; //排名信息
                            temp613["ranking"] = input.readVarInt(false); //
                            temp613["uid"] = input.readLong(); //
                            temp613["name"] = input.readString(); //
                            temp613["score"] = input.readLong(); //
                        }
                        else {
                            resActivityRankingCompeteWealthInfoMessage["rankings"][rankingsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityRankingCompeteWealthInfoMessage);
                    break;
            }
        };
        return ActivityRankingCompeteModel;
    }(ModelBase));
    net.ActivityRankingCompeteModel = ActivityRankingCompeteModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:312
     */
    var ActivityRebatePackageModel = /** @class */ (function (_super) {
        __extends(ActivityRebatePackageModel, _super);
        function ActivityRebatePackageModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(312002 /* ActivityRebatePackageModelCMD.CMDResRebatePackageInfoMessage */);
            return _this;
        }
        ActivityRebatePackageModel.ins = function () {
            if (!this._ins)
                this._ins = new ActivityRebatePackageModel();
            return this._ins;
        };
        /**
         *
         * 返利礼包活动_前端请求返利礼包活动数据
         *
         * sendReqRebatePackageInfoMessage  312001
         */
        ActivityRebatePackageModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(312001 /* ActivityRebatePackageModelCMD.CMDReqRebatePackageInfoMessage */, output, s);
        };
        /**
         *
         * 返利礼包活动_前端请求购买活动礼包
         * @param 返利活动礼包ID
         *
         * sendReqPurchaseActivityPackageMessage  312003
         */
        ActivityRebatePackageModel.prototype.send3 = function (packageId, s) {
            var output = this.getO();
            output.writeVarInt(packageId, false);
            this.send(312003 /* ActivityRebatePackageModelCMD.CMDReqPurchaseActivityPackageMessage */, output, s);
        };
        /**
         *
         * 返利礼包活动_前端请求领取返利礼包
         * @param 返利活动礼包ID
         *
         * sendReqReceiveRebatePackageMessage  312004
         */
        ActivityRebatePackageModel.prototype.send4 = function (packageId, s) {
            var output = this.getO();
            output.writeVarInt(packageId, false);
            this.send(312004 /* ActivityRebatePackageModelCMD.CMDReqReceiveRebatePackageMessage */, output, s);
        };
        ActivityRebatePackageModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 312002 /* ActivityRebatePackageModelCMD.CMDResRebatePackageInfoMessage */:
                    var rebatePackageInfoLength1 = input.readShort();
                    var resRebatePackageInfoMessage = [];
                    for (var rebatePackageInfoi1 = 0; rebatePackageInfoi1 < rebatePackageInfoLength1; rebatePackageInfoi1++) {
                        if (input.readByte() != 0) {
                            var temp848 = resRebatePackageInfoMessage[rebatePackageInfoi1] = {}; //返利礼包数据
                            temp848["id"] = input.readVarInt(false); //活动礼包ID（对应cfg_freepack中的id）
                            temp848["status"] = input.readVarInt(false); //返利礼包领取状态（0:活动礼包已购买,返利礼包未领取;1:活动礼包已购买,返利礼包已领取;）
                            temp848["limitTime"] = input.readLong(); //返利礼包可领取的时间（单位：秒）
                        }
                        else {
                            resRebatePackageInfoMessage[rebatePackageInfoi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resRebatePackageInfoMessage);
                    break;
            }
        };
        return ActivityRebatePackageModel;
    }(ModelBase));
    net.ActivityRebatePackageModel = ActivityRebatePackageModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:318
     */
    var ActivityTigerYearModel = /** @class */ (function (_super) {
        __extends(ActivityTigerYearModel, _super);
        function ActivityTigerYearModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(318002 /* ActivityTigerYearModelCMD.CMDResActivityTigerYearInfoMessage */);
            thisObj.reg(318005 /* ActivityTigerYearModelCMD.CMDResActivityTigerYearGoalUpdateMessage */);
            return _this;
        }
        ActivityTigerYearModel.ins = function () {
            if (!this._ins)
                this._ins = new ActivityTigerYearModel();
            return this._ins;
        };
        /**
         *
         * 虎年战令活动-前端请求虎年战令数据
         *
         * sendReqActivityTigerYearInfoMessage  318001
         */
        ActivityTigerYearModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(318001 /* ActivityTigerYearModelCMD.CMDReqActivityTigerYearInfoMessage */, output, s);
        };
        /**
         *
         * 虎年战令活动-前端请求激活高级战令
         *
         * sendReqActivityTigerYearActivateMessage  318003
         */
        ActivityTigerYearModel.prototype.send3 = function (s) {
            var output = this.getO();
            this.send(318003 /* ActivityTigerYearModelCMD.CMDReqActivityTigerYearActivateMessage */, output, s);
        };
        /**
         *
         * 虎年战令活动-前端请求领取战令奖励
         * @param 请求领取的奖励配置ID(即cfg_tigeryear中的id)
         * @param 请求领取的奖励类型(0:普通奖励;1:高级奖励.)
         *
         * sendReqActivityTigerYearReceiveMessage  318004
         */
        ActivityTigerYearModel.prototype.send4 = function (cfgId, type, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            output.writeVarInt(type, false);
            this.send(318004 /* ActivityTigerYearModelCMD.CMDReqActivityTigerYearReceiveMessage */, output, s);
        };
        ActivityTigerYearModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 318002 /* ActivityTigerYearModelCMD.CMDResActivityTigerYearInfoMessage */:
                    var resActivityTigerYearInfoMessage = {};
                    resActivityTigerYearInfoMessage["activateStatus"] = input.readBoolean(); //高级战令激活状态(true:已激活;false:未激活.)
                    var taskDataListLength1 = input.readShort();
                    resActivityTigerYearInfoMessage["taskDataList"] = [];
                    for (var taskDataListi1 = 0; taskDataListi1 < taskDataListLength1; taskDataListi1++) {
                        if (input.readByte() != 0) {
                            var temp718 = resActivityTigerYearInfoMessage["taskDataList"][taskDataListi1] = {}; //活动数据列表
                            temp718["taskId"] = input.readVarInt(false); //任务id
                            temp718["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp718["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength1 = input.readShort();
                            temp718["goalDataList"] = [];
                            for (var goalDataListi1 = 0; goalDataListi1 < goalDataListLength1; goalDataListi1++) {
                                if (input.readByte() != 0) {
                                    var temp719 = temp718["goalDataList"][goalDataListi1] = {}; //目标数据
                                    temp719["goalId"] = input.readVarInt(false); //目标id
                                    temp719["progress"] = input.readVarInt(false); //当前完成进度
                                    temp719["goalType"] = input.readVarInt(false); //目标类型
                                    temp719["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength1 = input.readShort();
                                    temp719["goalParams"] = new Array(goalParamsLength1);
                                    for (var goalParamsi1 = 0; goalParamsi1 < goalParamsLength1; goalParamsi1++) {
                                        temp719["goalParams"][goalParamsi1] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp718["goalDataList"][goalDataListi1] = null;
                                }
                            }
                        }
                        else {
                            resActivityTigerYearInfoMessage["taskDataList"][taskDataListi1] = null;
                        }
                    }
                    var reward1ListLength1 = input.readShort();
                    resActivityTigerYearInfoMessage["reward1List"] = new Array(reward1ListLength1);
                    for (var reward1Listi1 = 0; reward1Listi1 < reward1ListLength1; reward1Listi1++) {
                        resActivityTigerYearInfoMessage["reward1List"][reward1Listi1] = input.readVarInt(false); //已领取普通奖励的配置ID列表(cfg_tigeryear中的id)
                    }
                    var reward2ListLength1 = input.readShort();
                    resActivityTigerYearInfoMessage["reward2List"] = new Array(reward2ListLength1);
                    for (var reward2Listi1 = 0; reward2Listi1 < reward2ListLength1; reward2Listi1++) {
                        resActivityTigerYearInfoMessage["reward2List"][reward2Listi1] = input.readVarInt(false); //已领取高级奖励的配置ID列表(cfg_tigeryear中的id)
                    }
                    this.sendNotif(cmd, resActivityTigerYearInfoMessage);
                    break;
                case 318005 /* ActivityTigerYearModelCMD.CMDResActivityTigerYearGoalUpdateMessage */:
                    var goalUpdateListLength1 = input.readShort();
                    var resActivityTigerYearGoalUpdateMessage = [];
                    for (var goalUpdateListi1 = 0; goalUpdateListi1 < goalUpdateListLength1; goalUpdateListi1++) {
                        if (input.readByte() != 0) {
                            var temp720 = resActivityTigerYearGoalUpdateMessage[goalUpdateListi1] = {}; //虎年战令任务数据更新列表
                            temp720["taskId"] = input.readVarInt(false); //任务id
                            temp720["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp720["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength2 = input.readShort();
                            temp720["goalDataList"] = [];
                            for (var goalDataListi2 = 0; goalDataListi2 < goalDataListLength2; goalDataListi2++) {
                                if (input.readByte() != 0) {
                                    var temp721 = temp720["goalDataList"][goalDataListi2] = {}; //目标数据
                                    temp721["goalId"] = input.readVarInt(false); //目标id
                                    temp721["progress"] = input.readVarInt(false); //当前完成进度
                                    temp721["goalType"] = input.readVarInt(false); //目标类型
                                    temp721["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength2 = input.readShort();
                                    temp721["goalParams"] = new Array(goalParamsLength2);
                                    for (var goalParamsi2 = 0; goalParamsi2 < goalParamsLength2; goalParamsi2++) {
                                        temp721["goalParams"][goalParamsi2] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp720["goalDataList"][goalDataListi2] = null;
                                }
                            }
                        }
                        else {
                            resActivityTigerYearGoalUpdateMessage[goalUpdateListi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resActivityTigerYearGoalUpdateMessage);
                    break;
            }
        };
        return ActivityTigerYearModel;
    }(ModelBase));
    net.ActivityTigerYearModel = ActivityTigerYearModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:268
     */
    var AdvanceEnchantmentModel = /** @class */ (function (_super) {
        __extends(AdvanceEnchantmentModel, _super);
        function AdvanceEnchantmentModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(268002 /* AdvanceEnchantmentModelCMD.CMDResAdvanceEnchantmentInfoMessage */);
            thisObj.reg(268004 /* AdvanceEnchantmentModelCMD.CMDResAdvanceEnchantmentUpdateMessage */);
            return _this;
        }
        AdvanceEnchantmentModel.ins = function () {
            if (!this._ins)
                this._ins = new AdvanceEnchantmentModel();
            return this._ins;
        };
        /**
         *
         * 请求附魔信息
         * @param （元神）对象唯一id，否则为主角
         *
         * sendReqAdvanceEnchantmentInfoMessage  268001
         */
        AdvanceEnchantmentModel.prototype.send1 = function (uid, s) {
            var output = this.getO();
            output.writeLong(uid);
            this.send(268001 /* AdvanceEnchantmentModelCMD.CMDReqAdvanceEnchantmentInfoMessage */, output, s);
        };
        /**
         *
         * 请求附魔
         * @param （元神）对象唯一id，否则为主角
         * @param 道具唯一id
         *
         * sendReqAdvanceEnchantmentActivateMessage  268003
         */
        AdvanceEnchantmentModel.prototype.send3 = function (uid, iid, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeLong(iid);
            this.send(268003 /* AdvanceEnchantmentModelCMD.CMDReqAdvanceEnchantmentActivateMessage */, output, s);
        };
        AdvanceEnchantmentModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 268002 /* AdvanceEnchantmentModelCMD.CMDResAdvanceEnchantmentInfoMessage */:
                    var resAdvanceEnchantmentInfoMessage = {};
                    resAdvanceEnchantmentInfoMessage["uid"] = input.readLong(); //（元神）对象唯一id，否则为主角
                    var enchantmentsLength1 = input.readShort();
                    resAdvanceEnchantmentInfoMessage["enchantments"] = [];
                    for (var enchantmentsi1 = 0; enchantmentsi1 < enchantmentsLength1; enchantmentsi1++) {
                        if (input.readByte() != 0) {
                            var temp907 = resAdvanceEnchantmentInfoMessage["enchantments"][enchantmentsi1] = {}; //附魔信息
                            temp907["slot"] = input.readVarInt(false); //部位
                            temp907["level"] = input.readVarInt(false); //部位
                        }
                        else {
                            resAdvanceEnchantmentInfoMessage["enchantments"][enchantmentsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resAdvanceEnchantmentInfoMessage);
                    break;
                case 268004 /* AdvanceEnchantmentModelCMD.CMDResAdvanceEnchantmentUpdateMessage */:
                    var resAdvanceEnchantmentUpdateMessage = {};
                    resAdvanceEnchantmentUpdateMessage["uid"] = input.readLong(); //（元神）对象唯一id，否则为主角
                    var enchantmentLength1 = input.readByte();
                    if (enchantmentLength1 != 0) {
                        var temp908 = resAdvanceEnchantmentUpdateMessage["enchantment"] = {}; //附魔
                        temp908["slot"] = input.readVarInt(false); //部位
                        temp908["level"] = input.readVarInt(false); //部位
                    }
                    this.sendNotif(cmd, resAdvanceEnchantmentUpdateMessage);
                    break;
            }
        };
        return AdvanceEnchantmentModel;
    }(ModelBase));
    net.AdvanceEnchantmentModel = AdvanceEnchantmentModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:304
     */
    var AdviceModel = /** @class */ (function (_super) {
        __extends(AdviceModel, _super);
        function AdviceModel() {
            return _super.call(this) || this;
        }
        AdviceModel.ins = function () {
            if (!this._ins)
                this._ins = new AdviceModel();
            return this._ins;
        };
        /**
         *
         *
         * @param
         *
         * sendReqAdviceCommitMessage  304001
         */
        AdviceModel.prototype.send1 = function (content, s) {
            var output = this.getO();
            output.writeString(content);
            this.send(304001 /* AdviceModelCMD.CMDReqAdviceCommitMessage */, output, s);
        };
        AdviceModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
            }
        };
        return AdviceModel;
    }(ModelBase));
    net.AdviceModel = AdviceModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:176
     */
    var AnnounceModel = /** @class */ (function (_super) {
        __extends(AnnounceModel, _super);
        function AnnounceModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(176001 /* AnnounceModelCMD.CMDResAnnounceMessage */);
            thisObj.reg(176002 /* AnnounceModelCMD.CMDResKillTipMessage */);
            thisObj.reg(176003 /* AnnounceModelCMD.CMDResKillTipsBroadcastMessage */);
            return _this;
        }
        AnnounceModel.ins = function () {
            if (!this._ins)
                this._ins = new AnnounceModel();
            return this._ins;
        };
        AnnounceModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 176001 /* AnnounceModelCMD.CMDResAnnounceMessage */:
                    var resAnnounceMessage = {};
                    var channelLength1 = input.readShort();
                    resAnnounceMessage["channel"] = new Array(channelLength1);
                    for (var channeli1 = 0; channeli1 < channelLength1; channeli1++) {
                        resAnnounceMessage["channel"][channeli1] = input.readVarInt(false); //公告频道
                    }
                    resAnnounceMessage["content"] = input.readString(); //公告内容
                    var paramsLength = input.readShort();
                    resAnnounceMessage["params"] = new Array(paramsLength);
                    for (var paramsi1 = 0; paramsi1 < paramsLength; paramsi1++) {
                        resAnnounceMessage["params"][paramsi1] = input.readString(); //填充参数
                    }
                    this.sendNotif(cmd, resAnnounceMessage);
                    break;
                case 176002 /* AnnounceModelCMD.CMDResKillTipMessage */:
                    var resKillTipMessage = input.readVarInt(false); //连杀数
                    this.sendNotif(cmd, resKillTipMessage);
                    break;
                case 176003 /* AnnounceModelCMD.CMDResKillTipsBroadcastMessage */:
                    var resKillTipsBroadcastMessage = {};
                    resKillTipsBroadcastMessage["tip"] = input.readString(); //策划配置的tipsword
                    var killerLength1 = input.readByte();
                    if (killerLength1 != 0) {
                        var temp24 = resKillTipsBroadcastMessage["killer"] = {}; //杀人者
                        temp24["career"] = input.readVarInt(false); //职业
                        temp24["sex"] = input.readVarInt(false); //性别
                        temp24["name"] = input.readString(); //名字
                    }
                    var beKillerLength1 = input.readByte();
                    if (beKillerLength1 != 0) {
                        var temp25 = resKillTipsBroadcastMessage["beKiller"] = {}; //被杀者
                        temp25["career"] = input.readVarInt(false); //职业
                        temp25["sex"] = input.readVarInt(false); //性别
                        temp25["name"] = input.readString(); //名字
                    }
                    this.sendNotif(cmd, resKillTipsBroadcastMessage);
                    break;
            }
        };
        return AnnounceModel;
    }(ModelBase));
    net.AnnounceModel = AnnounceModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:200
     */
    var AppearanceModel = /** @class */ (function (_super) {
        __extends(AppearanceModel, _super);
        function AppearanceModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(200011 /* AppearanceModelCMD.CMDResAppearanceInfoMessage */);
            thisObj.reg(200012 /* AppearanceModelCMD.CMDResAppearanceWearsMessage */);
            return _this;
        }
        AppearanceModel.ins = function () {
            if (!this._ins)
                this._ins = new AppearanceModel();
            return this._ins;
        };
        /**
         *
         * 请求所有时装信息
         * @param uid
         *
         * sendReqAppearanceInfoMessage  200001
         */
        AppearanceModel.prototype.send1 = function (uid, s) {
            var output = this.getO();
            output.writeLong(uid);
            this.send(200001 /* AppearanceModelCMD.CMDReqAppearanceInfoMessage */, output, s);
        };
        /**
         *
         * 解锁时装
         * @param uid
         * @param 使用的解锁道具
         *
         * sendReqAppearanceUnlockMessage  200002
         */
        AppearanceModel.prototype.send2 = function (uid, itemId, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeLong(itemId);
            this.send(200002 /* AppearanceModelCMD.CMDReqAppearanceUnlockMessage */, output, s);
        };
        /**
         *
         * 穿戴时装
         * @param uid
         * @param
         *
         * sendReqAppearanceWearMessage  200003
         */
        AppearanceModel.prototype.send3 = function (uid, appearanceId, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(appearanceId, false);
            this.send(200003 /* AppearanceModelCMD.CMDReqAppearanceWearMessage */, output, s);
        };
        /**
         *
         * 脱下时装
         * @param uid
         * @param
         *
         * sendReqAppearanceUnWearMessage  200004
         */
        AppearanceModel.prototype.send4 = function (uid, appearanceId, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(appearanceId, false);
            this.send(200004 /* AppearanceModelCMD.CMDReqAppearanceUnWearMessage */, output, s);
        };
        /**
         *
         * 升级
         * @param uid
         * @param
         *
         * sendReqAppearanceLevenUpMessage  200005
         */
        AppearanceModel.prototype.send5 = function (uid, appearanceId, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(appearanceId, false);
            this.send(200005 /* AppearanceModelCMD.CMDReqAppearanceLevenUpMessage */, output, s);
        };
        AppearanceModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 200011 /* AppearanceModelCMD.CMDResAppearanceInfoMessage */:
                    var resAppearanceInfoMessage = {};
                    resAppearanceInfoMessage["uid"] = input.readLong(); //uid
                    var appearanceLength1 = input.readShort();
                    resAppearanceInfoMessage["appearance"] = [];
                    for (var appearancei1 = 0; appearancei1 < appearanceLength1; appearancei1++) {
                        if (input.readByte() != 0) {
                            var temp1307 = resAppearanceInfoMessage["appearance"][appearancei1] = {}; //
                            temp1307["id"] = input.readVarInt(false); //
                            temp1307["expire"] = input.readVarInt(false); //过期时间，-1表示永久
                            temp1307["level"] = input.readVarInt(false); //
                        }
                        else {
                            resAppearanceInfoMessage["appearance"][appearancei1] = null;
                        }
                    }
                    this.sendNotif(cmd, resAppearanceInfoMessage);
                    break;
                case 200012 /* AppearanceModelCMD.CMDResAppearanceWearsMessage */:
                    var resAppearanceWearsMessage = {};
                    resAppearanceWearsMessage["uid"] = input.readLong(); //uid
                    var waresLength1 = input.readShort();
                    resAppearanceWearsMessage["wares"] = [];
                    for (var waresi1 = 0; waresi1 < waresLength1; waresi1++) {
                        if (input.readByte() != 0) {
                            var temp1308 = resAppearanceWearsMessage["wares"][waresi1] = {}; //
                            temp1308["type"] = input.readVarInt(false); //
                            var idLength1 = input.readShort();
                            temp1308["id"] = new Array(idLength1);
                            for (var idi1 = 0; idi1 < idLength1; idi1++) {
                                temp1308["id"][idi1] = input.readVarInt(false); //
                            }
                        }
                        else {
                            resAppearanceWearsMessage["wares"][waresi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resAppearanceWearsMessage);
                    break;
            }
        };
        return AppearanceModel;
    }(ModelBase));
    net.AppearanceModel = AppearanceModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:188
     */
    var AuctionModel = /** @class */ (function (_super) {
        __extends(AuctionModel, _super);
        function AuctionModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(188011 /* AuctionModelCMD.CMDResAuctionInfoMessage */);
            return _this;
        }
        AuctionModel.ins = function () {
            if (!this._ins)
                this._ins = new AuctionModel();
            return this._ins;
        };
        /**
         *
         * 请求拍卖列表
         *
         * sendReqAuctionInfoMessage  188001
         */
        AuctionModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(188001 /* AuctionModelCMD.CMDReqAuctionInfoMessage */, output, s);
        };
        /**
         *
         * 请求出价，如果商品可一口价且出价为一口价，则当作一口价购买处理
         * @param 商品uid
         * @param 玩家出价
         *
         * sendReqAuctionOfferMessage  188002
         */
        AuctionModel.prototype.send2 = function (uid, price, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeLong(price);
            this.send(188002 /* AuctionModelCMD.CMDReqAuctionOfferMessage */, output, s);
        };
        AuctionModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 188011 /* AuctionModelCMD.CMDResAuctionInfoMessage */:
                    var auctionsLength1 = input.readShort();
                    var resAuctionInfoMessage = [];
                    for (var auctionsi1 = 0; auctionsi1 < auctionsLength1; auctionsi1++) {
                        if (input.readByte() != 0) {
                            var temp960 = resAuctionInfoMessage[auctionsi1] = {}; //列表
                            temp960["uid"] = input.readLong(); //
                            var itemLength1 = input.readByte();
                            if (itemLength1 != 0) {
                                var temp961 = temp960["item"] = {}; //道具信息
                                temp961["uid"] = input.readLong(); //唯一id
                                temp961["itemId"] = input.readVarInt(false); //道具配置id
                                temp961["count"] = input.readVarInt(false); //数量
                                temp961["expire"] = input.readVarInt(false); //过期时间
                                temp961["uTimes"] = input.readVarInt(false); //已经使用的次数
                                temp961["time"] = input.readVarInt(false); //道具获得时间
                                var paramsLength1 = input.readShort();
                                temp961["params"] = new Array(paramsLength1);
                                for (var paramsi1 = 0; paramsi1 < paramsLength1; paramsi1++) {
                                    temp961["params"][paramsi1] = input.readVarInt(false); //道具参数
                                }
                                var equipDataLength1 = input.readByte();
                                if (equipDataLength1 != 0) {
                                    var temp962 = temp961["equipData"] = {}; //装备属性（null表示没有）
                                    temp962["durable"] = input.readVarInt(false); //消耗耐久
                                    temp962["starLevel"] = input.readVarInt(false); //升星等级
                                    temp962["starLock"] = input.readVarInt(false); //被锁星级
                                    temp962["starExp"] = input.readVarInt(false); //升星祝福值
                                    temp962["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                    temp962["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                    temp962["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                    temp962["spiritLevel"] = input.readVarInt(false); //注灵等级
                                    temp962["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                    temp962["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                    temp962["sign"] = input.readString(); //签名
                                    var destinyAttrsLength1 = input.readShort();
                                    temp962["destinyAttrs"] = [];
                                    for (var destinyAttrsi1 = 0; destinyAttrsi1 < destinyAttrsLength1; destinyAttrsi1++) {
                                        if (input.readByte() != 0) {
                                            var temp963 = temp962["destinyAttrs"][destinyAttrsi1] = {}; //命运属性
                                            temp963["career"] = input.readVarInt(false); //职业限定
                                            temp963["attributeType"] = input.readVarInt(false); //属性类型
                                            temp963["attributeValue"] = input.readLong(); //属性值
                                        }
                                        else {
                                            temp962["destinyAttrs"][destinyAttrsi1] = null;
                                        }
                                    }
                                    var superAttrsLength1 = input.readShort();
                                    temp962["superAttrs"] = [];
                                    for (var superAttrsi1 = 0; superAttrsi1 < superAttrsLength1; superAttrsi1++) {
                                        if (input.readByte() != 0) {
                                            var temp964 = temp962["superAttrs"][superAttrsi1] = {}; //极品属性
                                            temp964["career"] = input.readVarInt(false); //职业限定
                                            temp964["attributeType"] = input.readVarInt(false); //属性类型
                                            temp964["attributeValue"] = input.readLong(); //属性值
                                        }
                                        else {
                                            temp962["superAttrs"][superAttrsi1] = null;
                                        }
                                    }
                                    var identifyAttrsLength1 = input.readShort();
                                    temp962["identifyAttrs"] = [];
                                    for (var identifyAttrsi1 = 0; identifyAttrsi1 < identifyAttrsLength1; identifyAttrsi1++) {
                                        if (input.readByte() != 0) {
                                            var temp965 = temp962["identifyAttrs"][identifyAttrsi1] = {}; //鉴定属性
                                            temp965["career"] = input.readVarInt(false); //职业限定
                                            temp965["attributeType"] = input.readVarInt(false); //属性类型
                                            temp965["attributeValue"] = input.readLong(); //属性值
                                        }
                                        else {
                                            temp962["identifyAttrs"][identifyAttrsi1] = null;
                                        }
                                    }
                                    var xiLianAttrsLength1 = input.readShort();
                                    temp962["xiLianAttrs"] = [];
                                    for (var xiLianAttrsi1 = 0; xiLianAttrsi1 < xiLianAttrsLength1; xiLianAttrsi1++) {
                                        if (input.readByte() != 0) {
                                            var temp966 = temp962["xiLianAttrs"][xiLianAttrsi1] = {}; //配饰洗练属性
                                            temp966["career"] = input.readVarInt(false); //职业限定
                                            temp966["attributeType"] = input.readVarInt(false); //属性类型
                                            temp966["attributeValue"] = input.readLong(); //属性值
                                        }
                                        else {
                                            temp962["xiLianAttrs"][xiLianAttrsi1] = null;
                                        }
                                    }
                                    temp962["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                    temp962["growLevel"] = input.readVarInt(false); //成长等级
                                    temp962["growExp"] = input.readVarInt(false); //成长经验
                                    var bestAttrsLength1 = input.readShort();
                                    temp962["bestAttrs"] = new Array(bestAttrsLength1);
                                    for (var bestAttrsi1 = 0; bestAttrsi1 < bestAttrsLength1; bestAttrsi1++) {
                                        temp962["bestAttrs"][bestAttrsi1] = input.readVarInt(false); //极品属性（新）
                                    }
                                    var soulAttrsLength1 = input.readShort();
                                    temp962["soulAttrs"] = new Array(soulAttrsLength1);
                                    for (var soulAttrsi1 = 0; soulAttrsi1 < soulAttrsLength1; soulAttrsi1++) {
                                        temp962["soulAttrs"][soulAttrsi1] = input.readVarInt(false); //心魂属性
                                    }
                                    var godsAttrsLength1 = input.readShort();
                                    temp962["godsAttrs"] = new Array(godsAttrsLength1);
                                    for (var godsAttrsi1 = 0; godsAttrsi1 < godsAttrsLength1; godsAttrsi1++) {
                                        temp962["godsAttrs"][godsAttrsi1] = input.readVarInt(false); //额外神级属性
                                    }
                                    temp962["qualification"] = input.readVarInt(false); //资质
                                    var specialDurableLength1 = input.readShort();
                                    temp962["specialDurable"] = [];
                                    for (var specialDurablei1 = 0; specialDurablei1 < specialDurableLength1; specialDurablei1++) {
                                        if (input.readByte() != 0) {
                                            var temp967 = temp962["specialDurable"][specialDurablei1] = {}; //特殊耐久消耗值
                                            temp967["type"] = input.readVarInt(false); //类型
                                            temp967["value"] = input.readVarInt(false); //已消耗值
                                        }
                                        else {
                                            temp962["specialDurable"][specialDurablei1] = null;
                                        }
                                    }
                                }
                                var immobilizationLength1 = input.readByte();
                                if (immobilizationLength1 != 0) {
                                    var temp968 = temp961["immobilization"] = {}; //固化数据
                                    temp968["action"] = input.readVarInt(false); //产生行为
                                    temp968["expire"] = input.readVarInt(false); //过期时间 时间戳
                                }
                                var fromLength1 = input.readByte();
                                if (fromLength1 != 0) {
                                    var temp969 = temp961["from"] = {}; //来源
                                    temp969["action"] = input.readVarInt(false); //产生行为
                                    temp969["firstRole"] = input.readLong(); //第一个玩家id
                                    temp969["firstRoleName"] = input.readString(); //第一个玩家名字
                                    var paramsLength2 = input.readShort();
                                    temp969["params"] = [];
                                    for (var paramsi2 = 0; paramsi2 < paramsLength2; paramsi2++) {
                                        if (input.readByte() != 0) {
                                            var temp970 = temp969["params"][paramsi2] = {}; //
                                            temp970["key"] = input.readVarInt(false); //
                                            temp970["value"] = input.readString(); //
                                        }
                                        else {
                                            temp969["params"][paramsi2] = null;
                                        }
                                    }
                                }
                                temp961["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                                var spriteDataLength1 = input.readByte();
                                if (spriteDataLength1 != 0) {
                                    var temp971 = temp961["spriteData"] = {}; //灵兽数据（null表示没有）
                                    temp971["level"] = input.readVarInt(false); //灵兽等级
                                    temp971["exp"] = input.readVarInt(false); //灵兽经验
                                    temp971["skin"] = input.readVarInt(false); //灵兽皮肤
                                    var skillsLength1 = input.readShort();
                                    temp971["skills"] = [];
                                    for (var skillsi1 = 0; skillsi1 < skillsLength1; skillsi1++) {
                                        if (input.readByte() != 0) {
                                            var temp972 = temp971["skills"][skillsi1] = {}; //灵兽出战技能
                                            temp972["id"] = input.readVarInt(false); //
                                            temp972["value"] = input.readVarInt(false); //
                                        }
                                        else {
                                            temp971["skills"][skillsi1] = null;
                                        }
                                    }
                                    var ownerSkillsLength1 = input.readShort();
                                    temp971["ownerSkills"] = [];
                                    for (var ownerSkillsi1 = 0; ownerSkillsi1 < ownerSkillsLength1; ownerSkillsi1++) {
                                        if (input.readByte() != 0) {
                                            var temp973 = temp971["ownerSkills"][ownerSkillsi1] = {}; //灵兽拥有的技能
                                            temp973["id"] = input.readVarInt(false); //
                                            temp973["value"] = input.readVarInt(false); //
                                        }
                                        else {
                                            temp971["ownerSkills"][ownerSkillsi1] = null;
                                        }
                                    }
                                    var ownerSkinsLength1 = input.readShort();
                                    temp971["ownerSkins"] = [];
                                    for (var ownerSkinsi1 = 0; ownerSkinsi1 < ownerSkinsLength1; ownerSkinsi1++) {
                                        if (input.readByte() != 0) {
                                            var temp974 = temp971["ownerSkins"][ownerSkinsi1] = {}; //灵兽拥有的皮肤
                                            temp974["id"] = input.readVarInt(false); //
                                            temp974["value"] = input.readVarInt(false); //
                                        }
                                        else {
                                            temp971["ownerSkins"][ownerSkinsi1] = null;
                                        }
                                    }
                                    var absorbExpLength1 = input.readShort();
                                    temp971["absorbExp"] = [];
                                    for (var absorbExpi1 = 0; absorbExpi1 < absorbExpLength1; absorbExpi1++) {
                                        if (input.readByte() != 0) {
                                            var temp975 = temp971["absorbExp"][absorbExpi1] = {}; //灵兽吸收经验值
                                            temp975["id"] = input.readVarInt(false); //
                                            temp975["value"] = input.readVarInt(false); //
                                        }
                                        else {
                                            temp971["absorbExp"][absorbExpi1] = null;
                                        }
                                    }
                                }
                            }
                            temp960["cate"] = input.readVarInt(false); //0行会 1世界 2流拍
                            temp960["currency"] = input.readVarInt(false); //货币
                            temp960["curPrice"] = input.readVarInt(false); //当前价格
                            temp960["endPrice"] = input.readVarInt(false); //一口价
                            temp960["pubExpire"] = input.readVarInt(false); //公示结束时间（时间戳）
                            temp960["aucExpire"] = input.readVarInt(false); //拍卖结束时间（时间戳） 只有在pubExpire与aucExpire之间才可以进行正常拍卖行为
                            temp960["offer"] = input.readLong(); //当前竞价者uid
                        }
                        else {
                            resAuctionInfoMessage[auctionsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resAuctionInfoMessage);
                    break;
            }
        };
        return AuctionModel;
    }(ModelBase));
    net.AuctionModel = AuctionModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:300
     */
    var AuthenticationModel = /** @class */ (function (_super) {
        __extends(AuthenticationModel, _super);
        function AuthenticationModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(300002 /* AuthenticationModelCMD.CMDResAuthenticationStatusMessage */);
            thisObj.reg(300005 /* AuthenticationModelCMD.CMDResAuthenticationErrorMessage */);
            return _this;
        }
        AuthenticationModel.ins = function () {
            if (!this._ins)
                this._ins = new AuthenticationModel();
            return this._ins;
        };
        /**
         *
         * 请求二级密码设置状态
         *
         * sendReqAuthenticationStatusMessage  300001
         */
        AuthenticationModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(300001 /* AuthenticationModelCMD.CMDReqAuthenticationStatusMessage */, output, s);
        };
        /**
         *
         * 请求二级密码设置状态
         * @param 旧密码 如果为初设则不用传
         * @param 新密码
         *
         * sendReqAuthenticationAlterMessage  300003
         */
        AuthenticationModel.prototype.send3 = function (oldPsd, newPsd, s) {
            var output = this.getO();
            output.writeString(oldPsd);
            output.writeString(newPsd);
            this.send(300003 /* AuthenticationModelCMD.CMDReqAuthenticationAlterMessage */, output, s);
        };
        /**
         *
         * 请求验证二级密码
         * @param 密码
         *
         * sendReqAuthenticationAuthMessage  300004
         */
        AuthenticationModel.prototype.send4 = function (password, s) {
            var output = this.getO();
            output.writeString(password);
            this.send(300004 /* AuthenticationModelCMD.CMDReqAuthenticationAuthMessage */, output, s);
        };
        /**
         *
         * 今日不再提醒
         *
         * sendReqAuthenticationSilenceMessage  300006
         */
        AuthenticationModel.prototype.send6 = function (s) {
            var output = this.getO();
            this.send(300006 /* AuthenticationModelCMD.CMDReqAuthenticationSilenceMessage */, output, s);
        };
        AuthenticationModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 300002 /* AuthenticationModelCMD.CMDResAuthenticationStatusMessage */:
                    var resAuthenticationStatusMessage = input.readVarInt(false); //是否设置了密码 0没有 1有
                    this.sendNotif(cmd, resAuthenticationStatusMessage);
                    break;
                case 300005 /* AuthenticationModelCMD.CMDResAuthenticationErrorMessage */:
                    var resAuthenticationErrorMessage = input.readVarInt(false); //0非密码验证时 1密码验证时
                    this.sendNotif(cmd, resAuthenticationErrorMessage);
                    break;
            }
        };
        return AuthenticationModel;
    }(ModelBase));
    net.AuthenticationModel = AuthenticationModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:43
     */
    var BackModel = /** @class */ (function (_super) {
        __extends(BackModel, _super);
        function BackModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(43002 /* BackModelCMD.CMDResCloseServerMessage */);
            thisObj.reg(43004 /* BackModelCMD.CMDResBackRetMessage */);
            thisObj.reg(43007 /* BackModelCMD.CMDResPongMessage */);
            thisObj.reg(43012 /* BackModelCMD.CMDResSendEmailMessage */);
            thisObj.reg(43015 /* BackModelCMD.CMDResChangePropertyMessage */);
            thisObj.reg(43020 /* BackModelCMD.CMDResRechargeMessage */);
            thisObj.reg(43022 /* BackModelCMD.CMDResBackLoginMessage */);
            thisObj.reg(43023 /* BackModelCMD.CMDResCustomizeAnnounceMessage */);
            thisObj.reg(43032 /* BackModelCMD.CMDResDeleteUnionMessage */);
            thisObj.reg(43039 /* BackModelCMD.CMDResFetchMemoryMessage */);
            thisObj.reg(43041 /* BackModelCMD.CMDResPushMemoryMessage */);
            thisObj.reg(43049 /* BackModelCMD.CMDResStopAnnounceResultMessage */);
            thisObj.reg(43063 /* BackModelCMD.CMDResRoleMailMessage */);
            thisObj.reg(43100 /* BackModelCMD.CMDResBackResultMessage */);
            thisObj.reg(43112 /* BackModelCMD.CMDResBackRolePropertyCurrencyQueryMessage */);
            thisObj.reg(43116 /* BackModelCMD.CMDResBackRolePropertyItemQueryMessage */);
            return _this;
        }
        BackModel.ins = function () {
            if (!this._ins)
                this._ins = new BackModel();
            return this._ins;
        };
        /**
         *
         * 请求关服
         *
         * sendReqCloseServerMessage  43001
         */
        BackModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(43001 /* BackModelCMD.CMDReqCloseServerMessage */, output, s);
        };
        /**
         *
         * 请求执行GM命令
         * @param 命令
         *
         * sendReqExecGMMessage  43003
         */
        BackModel.prototype.send3 = function (command, s) {
            var output = this.getO();
            output.writeString(command);
            this.send(43003 /* BackModelCMD.CMDReqExecGMMessage */, output, s);
        };
        /**
         *
         * 重新加载配置文件
         * @param 类型（1 全部重载，2 加载指定的配置表 3 加载指定的cache）
         * @param 配置表名字,type=2的时候生效
         * @param 缓存的类全名,type=3的时候生效
         *
         * sendReqReloadCfgMessage  43005
         */
        BackModel.prototype.send5 = function (type, cfgName, cacheName, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            output.writeString(cfgName);
            output.writeString(cacheName);
            this.send(43005 /* BackModelCMD.CMDReqReloadCfgMessage */, output, s);
        };
        /**
         *
         * ping消息
         *
         * sendReqPingMessage  43006
         */
        BackModel.prototype.send6 = function (s) {
            var output = this.getO();
            this.send(43006 /* BackModelCMD.CMDReqPingMessage */, output, s);
        };
        /**
         *
         * 请求发送自定义公告(后台用)
         * @param 唯一自增id
         * @param 开始时间
         * @param 结束时间
         * @param 间隔
         * @param 类型
         * @param 内容
         *
         * sendReqCustomizeAnnounceMessage  43009
         */
        BackModel.prototype.send9 = function (uniqueId, startTime, endTime, period, type, content, s) {
            var output = this.getO();
            output.writeVarInt(uniqueId, false);
            output.writeVarInt(startTime, false);
            output.writeVarInt(endTime, false);
            output.writeVarInt(period, false);
            output.writeVarInt(type, false);
            output.writeString(content);
            this.send(43009 /* BackModelCMD.CMDReqCustomizeAnnounceMessage */, output, s);
        };
        /**
         *
         * 请求发送邮件（后台用）
         * @param 收件人id
         * @param 标题
         * @param 内容
         * @param 附件
         * @param 附件时间
         *
         * sendReqSendEmailMessage  43011
         */
        BackModel.prototype.send11 = function (targetId, title, content, itemStr, itemTime, s) {
            var output = this.getO();
            output.writeLong(targetId);
            output.writeString(title);
            output.writeString(content);
            output.writeString(itemStr);
            output.writeVarInt(itemTime, false);
            this.send(43011 /* BackModelCMD.CMDReqSendEmailMessage */, output, s);
        };
        /**
         *
         * 后台修改配置文件
         * @param 键
         * @param 值
         *
         * sendReqChangePropertyMessage  43013
         */
        BackModel.prototype.send13 = function (key, value, s) {
            var output = this.getO();
            output.writeString(key);
            output.writeString(value);
            this.send(43013 /* BackModelCMD.CMDReqChangePropertyMessage */, output, s);
        };
        /**
         *
         * 刷property配置表
         *
         * sendReqLoadPropertyMessage  43014
         */
        BackModel.prototype.send14 = function (s) {
            var output = this.getO();
            this.send(43014 /* BackModelCMD.CMDReqLoadPropertyMessage */, output, s);
        };
        /**
         *
         * 请求操作服务器状态
         * @param 操作类型 1 查询 2修改
         * @param 0 关闭 1 维护 2 开放
         *
         * sendReqOperateServerStateMessage  43016
         */
        BackModel.prototype.send16 = function (type, state, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            output.writeVarInt(state, false);
            this.send(43016 /* BackModelCMD.CMDReqOperateServerStateMessage */, output, s);
        };
        /**
         *
         * 充值
         * @param 订单信息
         * @param 请求参数
         *
         * sendReqRechargeMessage  43019
         */
        BackModel.prototype.send19 = function (orderInfo, parameters, s) {
            var output = this.getO();
            output.writeString(orderInfo);
            output.writeString(parameters);
            this.send(43019 /* BackModelCMD.CMDReqRechargeMessage */, output, s);
        };
        /**
         *
         * 通过后台登录
         * @param 玩家登录账号
         *
         * sendReqBackLoginMessage  43021
         */
        BackModel.prototype.send21 = function (loginName, s) {
            var output = this.getO();
            output.writeString(loginName);
            this.send(43021 /* BackModelCMD.CMDReqBackLoginMessage */, output, s);
        };
        /**
         *
         * 通过后台全服登录
         * @param 标题
         * @param 内容
         * @param 附件
         * @param 类型 1所有人 2等级 3充值的元宝数量
         * @param 参数
         * @param 附件时间
         *
         * sendReqSendServerMailMessage  43024
         */
        BackModel.prototype.send24 = function (title, content, itemStr, type, filterParam, itemTime, s) {
            var output = this.getO();
            output.writeString(title);
            output.writeString(content);
            output.writeString(itemStr);
            output.writeVarInt(type, false);
            output.writeVarInt(filterParam, false);
            output.writeVarInt(itemTime, false);
            this.send(43024 /* BackModelCMD.CMDReqSendServerMailMessage */, output, s);
        };
        /**
         *
         * 查询所有帮会信息
         *
         * sendReqSendAllUnionMessage  43025
         */
        BackModel.prototype.send25 = function (s) {
            var output = this.getO();
            this.send(43025 /* BackModelCMD.CMDReqSendAllUnionMessage */, output, s);
        };
        /**
         *
         * 请求解散帮会
         * @param 帮会id
         *
         * sendReqDeleteUnionMessage  43031
         */
        BackModel.prototype.send31 = function (unionid, s) {
            var output = this.getO();
            output.writeLong(unionid);
            this.send(43031 /* BackModelCMD.CMDReqDeleteUnionMessage */, output, s);
        };
        /**
         *
         * 通过帮会id查询帮会
         * @param 帮会id
         *
         * sendReqSendUnionInfoMessage  43034
         */
        BackModel.prototype.send34 = function (uid, s) {
            var output = this.getO();
            output.writeLong(uid);
            this.send(43034 /* BackModelCMD.CMDReqSendUnionInfoMessage */, output, s);
        };
        /**
         *
         * 在线人数
         * @param 当前时间
         *
         * sendReqBackOnlineCountMessage  43035
         */
        BackModel.prototype.send35 = function (time, s) {
            var output = this.getO();
            output.writeVarInt(time, false);
            this.send(43035 /* BackModelCMD.CMDReqBackOnlineCountMessage */, output, s);
        };
        /**
         *
         * 重载脚本消息
         *
         * sendReqReloadScriptMessage  43037
         */
        BackModel.prototype.send37 = function (s) {
            var output = this.getO();
            this.send(43037 /* BackModelCMD.CMDReqReloadScriptMessage */, output, s);
        };
        /**
         *
         * 请求获取内存数据
         * @param 数据类型
         * @param id
         *
         * sendReqFetchMemoryMessage  43038
         */
        BackModel.prototype.send38 = function (tableType, mid, s) {
            var output = this.getO();
            output.writeVarInt(tableType, false);
            output.writeLong(mid);
            this.send(43038 /* BackModelCMD.CMDReqFetchMemoryMessage */, output, s);
        };
        /**
         *
         * 更新内存数据结果
         * @param 表类型
         * @param id
         * @param 数据字节数组
         *
         * sendReqPushMemoryMessage  43040
         */
        BackModel.prototype.send40 = function (tableType, mid, s) {
            var output = this.getO();
            output.writeVarInt(tableType, false);
            output.writeLong(mid);
            this.send(43040 /* BackModelCMD.CMDReqPushMemoryMessage */, output, s);
        };
        /**
         *
         * 后台改变会长
         * @param unionId
         * @param uid
         * @param 玩家游戏名称 选传(可不传)，传了根据这个找Role
         *
         * sendReqBackChangeUnionMasterMessage  43044
         */
        BackModel.prototype.send44 = function (unionId, uid, playerName, s) {
            var output = this.getO();
            output.writeLong(unionId);
            output.writeLong(uid);
            output.writeString(playerName);
            this.send(43044 /* BackModelCMD.CMDReqBackChangeUnionMasterMessage */, output, s);
        };
        /**
         *
         * 后台修改行会公告
         * @param uid
         * @param 公告内容
         *
         * sendReqBackChangeUnionAnnounceMessage  43045
         */
        BackModel.prototype.send45 = function (uid, content, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeString(content);
            this.send(43045 /* BackModelCMD.CMDReqBackChangeUnionAnnounceMessage */, output, s);
        };
        /**
         *
         * 停止发公告(后台用)
         * @param 唯一自增id
         *
         * sendReqStopAnnounceMessage  43048
         */
        BackModel.prototype.send48 = function (uniqueId, s) {
            var output = this.getO();
            output.writeVarInt(uniqueId, false);
            this.send(43048 /* BackModelCMD.CMDReqStopAnnounceMessage */, output, s);
        };
        /**
         *
         * 请求设定创建开服限制
         * @param 开服天数
         * @param 限制描述
         *
         * sendReqSetRoleCreateLimitMessage  43050
         */
        BackModel.prototype.send50 = function (openServerDays, limitDescribe, s) {
            var output = this.getO();
            output.writeVarInt(openServerDays, false);
            output.writeString(limitDescribe);
            this.send(43050 /* BackModelCMD.CMDReqSetRoleCreateLimitMessage */, output, s);
        };
        /**
         *
         * 请求获得玩家邮件数据
         * @param 玩家id
         *
         * sendReqRoleMailListMessage  43062
         */
        BackModel.prototype.send62 = function (rid, s) {
            var output = this.getO();
            output.writeLong(rid);
            this.send(43062 /* BackModelCMD.CMDReqRoleMailListMessage */, output, s);
        };
        /**
         *
         * 请求删除邮件
         * @param 玩家id
         * @param 邮件id
         *
         * sendReqDeleteRoleMailMessage  43064
         */
        BackModel.prototype.send64 = function (rid, mailId, s) {
            var output = this.getO();
            output.writeLong(rid);
            output.writeLong(mailId);
            this.send(43064 /* BackModelCMD.CMDReqDeleteRoleMailMessage */, output, s);
        };
        /**
         *
         * ban user
         * @param
         * @param
         * @param
         * @param
         * @param
         *
         * sendReqBackBanUserMessage  43101
         */
        BackModel.prototype.send101 = function (channel, sid, uid, time, reason, s) {
            var output = this.getO();
            output.writeString(channel);
            output.writeVarInt(sid, false);
            output.writeString(uid);
            output.writeVarInt(time, false);
            output.writeString(reason);
            this.send(43101 /* BackModelCMD.CMDReqBackBanUserMessage */, output, s);
        };
        /**
         *
         * ban role
         * @param
         * @param
         * @param
         *
         * sendReqBackBanRoleMessage  43102
         */
        BackModel.prototype.send102 = function (roleId, time, reason, s) {
            var output = this.getO();
            output.writeLong(roleId);
            output.writeVarInt(time, false);
            output.writeString(reason);
            this.send(43102 /* BackModelCMD.CMDReqBackBanRoleMessage */, output, s);
        };
        /**
         *
         * ban ip
         * @param
         * @param
         * @param
         *
         * sendReqBackBanIPMessage  43103
         */
        BackModel.prototype.send103 = function (IP, time, reason, s) {
            var output = this.getO();
            output.writeString(IP);
            output.writeVarInt(time, false);
            output.writeString(reason);
            this.send(43103 /* BackModelCMD.CMDReqBackBanIPMessage */, output, s);
        };
        /**
         *
         * ban chat
         * @param
         * @param 0slience 2soliloquize
         * @param
         * @param
         *
         * sendReqBackBanChatMessage  43104
         */
        BackModel.prototype.send104 = function (roleId, type, time, reason, s) {
            var output = this.getO();
            output.writeLong(roleId);
            output.writeVarInt(type, false);
            output.writeVarInt(time, false);
            output.writeString(reason);
            this.send(43104 /* BackModelCMD.CMDReqBackBanChatMessage */, output, s);
        };
        /**
         *
         * ban device
         * @param
         * @param
         * @param
         *
         * sendReqBackBanDeviceMessage  43105
         */
        BackModel.prototype.send105 = function (device, time, reason, s) {
            var output = this.getO();
            output.writeString(device);
            output.writeVarInt(time, false);
            output.writeString(reason);
            this.send(43105 /* BackModelCMD.CMDReqBackBanDeviceMessage */, output, s);
        };
        /**
         *
         * recall chat
         * @param
         * @param
         *
         * sendReqBackRecallChatMessage  43106
         */
        BackModel.prototype.send106 = function (roleId, content, s) {
            var output = this.getO();
            output.writeLong(roleId);
            output.writeString(content);
            this.send(43106 /* BackModelCMD.CMDReqBackRecallChatMessage */, output, s);
        };
        /**
         *
         *
         * @param
         *
         * sendReqBackRolePropertyCurrencyQueryMessage  43111
         */
        BackModel.prototype.send111 = function (rid, s) {
            var output = this.getO();
            output.writeLong(rid);
            this.send(43111 /* BackModelCMD.CMDReqBackRolePropertyCurrencyQueryMessage */, output, s);
        };
        /**
         *
         *
         * @param
         * @param
         * @param
         *
         * sendReqBackRolePropertyCurrencyAlterMessage  43113
         */
        BackModel.prototype.send113 = function (rid, cid, count, s) {
            var output = this.getO();
            output.writeLong(rid);
            output.writeVarInt(cid, false);
            output.writeLong(count);
            this.send(43113 /* BackModelCMD.CMDReqBackRolePropertyCurrencyAlterMessage */, output, s);
        };
        /**
         *
         *
         * @param
         *
         * sendReqBackRolePropertyItemQueryMessage  43115
         */
        BackModel.prototype.send115 = function (rid, s) {
            var output = this.getO();
            output.writeLong(rid);
            this.send(43115 /* BackModelCMD.CMDReqBackRolePropertyItemQueryMessage */, output, s);
        };
        /**
         *
         *
         * @param
         * @param
         * @param
         * @param
         *
         * sendReqBackRolePropertyItemDeleteMessage  43117
         */
        BackModel.prototype.send117 = function (rid, where, index, uid, s) {
            var output = this.getO();
            output.writeLong(rid);
            output.writeVarInt(where, false);
            output.writeVarInt(index, false);
            output.writeLong(uid);
            this.send(43117 /* BackModelCMD.CMDReqBackRolePropertyItemDeleteMessage */, output, s);
        };
        /**
         *
         *
         * @param
         *
         * sendReqBackRoleDeleteMessage  43118
         */
        BackModel.prototype.send118 = function (rid, s) {
            var output = this.getO();
            output.writeLong(rid);
            this.send(43118 /* BackModelCMD.CMDReqBackRoleDeleteMessage */, output, s);
        };
        /**
         *
         *
         * @param
         *
         * sendReqBackRoleRecoverMessage  43119
         */
        BackModel.prototype.send119 = function (rid, s) {
            var output = this.getO();
            output.writeLong(rid);
            this.send(43119 /* BackModelCMD.CMDReqBackRoleRecoverMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqBackActivationGenerateMessage  43120
         */
        BackModel.prototype.send120 = function (s) {
            var output = this.getO();
            this.send(43120 /* BackModelCMD.CMDReqBackActivationGenerateMessage */, output, s);
        };
        /**
         *
         *
         * @param 角色id
         * @param 邮件id
         *
         * sendReqBackMailDeleteMessage  43121
         */
        BackModel.prototype.send121 = function (rid, mid, s) {
            var output = this.getO();
            output.writeLong(rid);
            output.writeLong(mid);
            this.send(43121 /* BackModelCMD.CMDReqBackMailDeleteMessage */, output, s);
        };
        /**
         *
         *
         * @param
         * @param
         *
         * sendReqBackTokenAuthMessage  43122
         */
        BackModel.prototype.send122 = function (roleId, token, s) {
            var output = this.getO();
            output.writeLong(roleId);
            output.writeString(token);
            this.send(43122 /* BackModelCMD.CMDReqBackTokenAuthMessage */, output, s);
        };
        /**
         *
         *
         * @param
         * @param
         *
         * sendReqBackUserQueryMessage  43123
         */
        BackModel.prototype.send123 = function (sid, uid, s) {
            var output = this.getO();
            output.writeVarInt(sid, false);
            output.writeString(uid);
            this.send(43123 /* BackModelCMD.CMDReqBackUserQueryMessage */, output, s);
        };
        /**
         *
         *
         * @param
         * @param
         * @param
         *
         * sendReqBackKickOfflineMessage  43124
         */
        BackModel.prototype.send124 = function (sid, uid, roleId, s) {
            var output = this.getO();
            output.writeVarInt(sid, false);
            output.writeString(uid);
            output.writeLong(roleId);
            this.send(43124 /* BackModelCMD.CMDReqBackKickOfflineMessage */, output, s);
        };
        /**
         *
         *
         * @param
         * @param
         * @param
         * @param
         * @param
         * @param
         * @param
         * @param
         *
         * sendReqBackBanMessage  43125
         */
        BackModel.prototype.send125 = function (channel, sid, type, target, banType, banTime, params, reason, s) {
            var output = this.getO();
            output.writeString(channel);
            output.writeVarInt(sid, false);
            output.writeVarInt(type, false);
            output.writeString(target);
            output.writeVarInt(banType, false);
            output.writeVarInt(banTime, false);
            output.writeString(params);
            output.writeString(reason);
            this.send(43125 /* BackModelCMD.CMDReqBackBanMessage */, output, s);
        };
        /**
         *
         *
         * @param
         *
         * sendReqBackBanQueryMessage  43126
         */
        BackModel.prototype.send126 = function (params, s) {
            var output = this.getO();
            output.writeString(params);
            this.send(43126 /* BackModelCMD.CMDReqBackBanQueryMessage */, output, s);
        };
        /**
         *
         *
         * @param
         * @param
         *
         * sendReqBackRoleAuthQueryMessage  43127
         */
        BackModel.prototype.send127 = function (rid, alter, s) {
            var output = this.getO();
            output.writeLong(rid);
            output.writeString(alter);
            this.send(43127 /* BackModelCMD.CMDReqBackRoleAuthQueryMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqBackQueryStallMessage  43128
         */
        BackModel.prototype.send128 = function (s) {
            var output = this.getO();
            this.send(43128 /* BackModelCMD.CMDReqBackQueryStallMessage */, output, s);
        };
        /**
         *
         *
         * @param
         * @param
         *
         * sendReqBackStallRemoveMessage  43129
         */
        BackModel.prototype.send129 = function (rid, uid, s) {
            var output = this.getO();
            output.writeLong(rid);
            output.writeLong(uid);
            this.send(43129 /* BackModelCMD.CMDReqBackStallRemoveMessage */, output, s);
        };
        /**
         *
         *
         * @param
         * @param
         *
         * sendReqBackAuctionUpdateMessage  43130
         */
        BackModel.prototype.send130 = function (auctions, rest, s) {
            var output = this.getO();
            output.writeString(auctions);
            output.writeString(rest);
            this.send(43130 /* BackModelCMD.CMDReqBackAuctionUpdateMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqBackGroupRefreshMessage  43131
         */
        BackModel.prototype.send131 = function (s) {
            var output = this.getO();
            this.send(43131 /* BackModelCMD.CMDReqBackGroupRefreshMessage */, output, s);
        };
        /**
         *
         *
         * @param
         *
         * sendReqBackLoginAuthMessage  43132
         */
        BackModel.prototype.send132 = function (params, s) {
            var output = this.getO();
            output.writeString(params);
            this.send(43132 /* BackModelCMD.CMDReqBackLoginAuthMessage */, output, s);
        };
        BackModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 43002 /* BackModelCMD.CMDResCloseServerMessage */:
                    var resCloseServerMessage = {};
                    resCloseServerMessage["code"] = input.readVarInt(false); //执行代码
                    resCloseServerMessage["info"] = input.readString(); //信息
                    this.sendNotif(cmd, resCloseServerMessage);
                    break;
                case 43004 /* BackModelCMD.CMDResBackRetMessage */:
                    var resBackRetMessage = input.readString(); //返回信息
                    this.sendNotif(cmd, resBackRetMessage);
                    break;
                case 43007 /* BackModelCMD.CMDResPongMessage */:
                    this.sendNotif(cmd);
                    break;
                case 43012 /* BackModelCMD.CMDResSendEmailMessage */:
                    var resSendEmailMessage = {};
                    resSendEmailMessage["targetId"] = input.readLong(); //收件人id
                    resSendEmailMessage["title"] = input.readString(); //标题
                    resSendEmailMessage["content"] = input.readString(); //内容
                    resSendEmailMessage["itemStr"] = input.readString(); //附件
                    this.sendNotif(cmd, resSendEmailMessage);
                    break;
                case 43015 /* BackModelCMD.CMDResChangePropertyMessage */:
                    var resChangePropertyMessage = {};
                    resChangePropertyMessage["key"] = input.readString(); //键
                    resChangePropertyMessage["value"] = input.readString(); //值
                    this.sendNotif(cmd, resChangePropertyMessage);
                    break;
                case 43020 /* BackModelCMD.CMDResRechargeMessage */:
                    var resRechargeMessage = input.readString(); //返回码
                    this.sendNotif(cmd, resRechargeMessage);
                    break;
                case 43022 /* BackModelCMD.CMDResBackLoginMessage */:
                    var resBackLoginMessage = input.readVarInt(false); //登录结果 1成功 2失败
                    this.sendNotif(cmd, resBackLoginMessage);
                    break;
                case 43023 /* BackModelCMD.CMDResCustomizeAnnounceMessage */:
                    var resCustomizeAnnounceMessage = {};
                    resCustomizeAnnounceMessage["type"] = input.readVarInt(false); //类型
                    resCustomizeAnnounceMessage["content"] = input.readString(); //内容
                    this.sendNotif(cmd, resCustomizeAnnounceMessage);
                    break;
                case 43032 /* BackModelCMD.CMDResDeleteUnionMessage */:
                    var resDeleteUnionMessage = input.readLong(); //帮会id
                    this.sendNotif(cmd, resDeleteUnionMessage);
                    break;
                case 43039 /* BackModelCMD.CMDResFetchMemoryMessage */:
                    var resFetchMemoryMessage = {};
                    resFetchMemoryMessage["tableType"] = input.readVarInt(false); //表类型
                    resFetchMemoryMessage["mid"] = input.readLong(); //id
                    this.sendNotif(cmd, resFetchMemoryMessage);
                    break;
                case 43041 /* BackModelCMD.CMDResPushMemoryMessage */:
                    var resPushMemoryMessage = input.readString(); //结果
                    this.sendNotif(cmd, resPushMemoryMessage);
                    break;
                case 43049 /* BackModelCMD.CMDResStopAnnounceResultMessage */:
                    var resStopAnnounceResultMessage = input.readVarInt(false); //返回结果
                    this.sendNotif(cmd, resStopAnnounceResultMessage);
                    break;
                case 43063 /* BackModelCMD.CMDResRoleMailMessage */:
                    var mailListLength1 = input.readShort();
                    var resRoleMailMessage = [];
                    for (var mailListi1 = 0; mailListi1 < mailListLength1; mailListi1++) {
                        if (input.readByte() != 0) {
                            var temp726 = resRoleMailMessage[mailListi1] = {}; //邮件列表
                            temp726["mailId"] = input.readLong(); //邮件id
                            temp726["title"] = input.readString(); //标题
                            temp726["itemStr"] = input.readString(); //附件
                        }
                        else {
                            resRoleMailMessage[mailListi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resRoleMailMessage);
                    break;
                case 43100 /* BackModelCMD.CMDResBackResultMessage */:
                    var resBackResultMessage = {};
                    resBackResultMessage["status"] = input.readVarInt(false); //0 success
                    resBackResultMessage["error"] = input.readString(); //
                    resBackResultMessage["data"] = input.readString(); //
                    this.sendNotif(cmd, resBackResultMessage);
                    break;
                case 43112 /* BackModelCMD.CMDResBackRolePropertyCurrencyQueryMessage */:
                    var resBackRolePropertyCurrencyQueryMessage = {};
                    resBackRolePropertyCurrencyQueryMessage["rid"] = input.readLong(); //
                    var coinsLength1 = input.readShort();
                    resBackRolePropertyCurrencyQueryMessage["coins"] = [];
                    for (var coinsi1 = 0; coinsi1 < coinsLength1; coinsi1++) {
                        if (input.readByte() != 0) {
                            var temp727 = resBackRolePropertyCurrencyQueryMessage["coins"][coinsi1] = {}; //
                            temp727["itemId"] = input.readVarInt(false); //
                            temp727["count"] = input.readLong(); //
                        }
                        else {
                            resBackRolePropertyCurrencyQueryMessage["coins"][coinsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resBackRolePropertyCurrencyQueryMessage);
                    break;
                case 43116 /* BackModelCMD.CMDResBackRolePropertyItemQueryMessage */:
                    var resBackRolePropertyItemQueryMessage = {};
                    resBackRolePropertyItemQueryMessage["rid"] = input.readLong(); //
                    var storagesLength1 = input.readShort();
                    resBackRolePropertyItemQueryMessage["storages"] = [];
                    for (var storagesi1 = 0; storagesi1 < storagesLength1; storagesi1++) {
                        if (input.readByte() != 0) {
                            var temp728 = resBackRolePropertyItemQueryMessage["storages"][storagesi1] = {}; //
                            temp728["where"] = input.readVarInt(false); //
                            var itemsLength1 = input.readShort();
                            temp728["items"] = [];
                            for (var itemsi1 = 0; itemsi1 < itemsLength1; itemsi1++) {
                                if (input.readByte() != 0) {
                                    var temp729 = temp728["items"][itemsi1] = {}; //
                                    temp729["index"] = input.readVarInt(false); //
                                    var itemLength1 = input.readByte();
                                    if (itemLength1 != 0) {
                                        var temp730 = temp729["item"] = {}; //
                                        temp730["uid"] = input.readLong(); //唯一id
                                        temp730["itemId"] = input.readVarInt(false); //道具配置id
                                        temp730["count"] = input.readVarInt(false); //数量
                                        temp730["expire"] = input.readVarInt(false); //过期时间
                                        temp730["uTimes"] = input.readVarInt(false); //已经使用的次数
                                        temp730["time"] = input.readVarInt(false); //道具获得时间
                                        var paramsLength1 = input.readShort();
                                        temp730["params"] = new Array(paramsLength1);
                                        for (var paramsi1 = 0; paramsi1 < paramsLength1; paramsi1++) {
                                            temp730["params"][paramsi1] = input.readVarInt(false); //道具参数
                                        }
                                        var equipDataLength1 = input.readByte();
                                        if (equipDataLength1 != 0) {
                                            var temp731 = temp730["equipData"] = {}; //装备属性（null表示没有）
                                            temp731["durable"] = input.readVarInt(false); //消耗耐久
                                            temp731["starLevel"] = input.readVarInt(false); //升星等级
                                            temp731["starLock"] = input.readVarInt(false); //被锁星级
                                            temp731["starExp"] = input.readVarInt(false); //升星祝福值
                                            temp731["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                            temp731["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                            temp731["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                            temp731["spiritLevel"] = input.readVarInt(false); //注灵等级
                                            temp731["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                            temp731["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                            temp731["sign"] = input.readString(); //签名
                                            var destinyAttrsLength1 = input.readShort();
                                            temp731["destinyAttrs"] = [];
                                            for (var destinyAttrsi1 = 0; destinyAttrsi1 < destinyAttrsLength1; destinyAttrsi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp732 = temp731["destinyAttrs"][destinyAttrsi1] = {}; //命运属性
                                                    temp732["career"] = input.readVarInt(false); //职业限定
                                                    temp732["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp732["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp731["destinyAttrs"][destinyAttrsi1] = null;
                                                }
                                            }
                                            var superAttrsLength1 = input.readShort();
                                            temp731["superAttrs"] = [];
                                            for (var superAttrsi1 = 0; superAttrsi1 < superAttrsLength1; superAttrsi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp733 = temp731["superAttrs"][superAttrsi1] = {}; //极品属性
                                                    temp733["career"] = input.readVarInt(false); //职业限定
                                                    temp733["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp733["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp731["superAttrs"][superAttrsi1] = null;
                                                }
                                            }
                                            var identifyAttrsLength1 = input.readShort();
                                            temp731["identifyAttrs"] = [];
                                            for (var identifyAttrsi1 = 0; identifyAttrsi1 < identifyAttrsLength1; identifyAttrsi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp734 = temp731["identifyAttrs"][identifyAttrsi1] = {}; //鉴定属性
                                                    temp734["career"] = input.readVarInt(false); //职业限定
                                                    temp734["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp734["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp731["identifyAttrs"][identifyAttrsi1] = null;
                                                }
                                            }
                                            var xiLianAttrsLength1 = input.readShort();
                                            temp731["xiLianAttrs"] = [];
                                            for (var xiLianAttrsi1 = 0; xiLianAttrsi1 < xiLianAttrsLength1; xiLianAttrsi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp735 = temp731["xiLianAttrs"][xiLianAttrsi1] = {}; //配饰洗练属性
                                                    temp735["career"] = input.readVarInt(false); //职业限定
                                                    temp735["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp735["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp731["xiLianAttrs"][xiLianAttrsi1] = null;
                                                }
                                            }
                                            temp731["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                            temp731["growLevel"] = input.readVarInt(false); //成长等级
                                            temp731["growExp"] = input.readVarInt(false); //成长经验
                                            var bestAttrsLength1 = input.readShort();
                                            temp731["bestAttrs"] = new Array(bestAttrsLength1);
                                            for (var bestAttrsi1 = 0; bestAttrsi1 < bestAttrsLength1; bestAttrsi1++) {
                                                temp731["bestAttrs"][bestAttrsi1] = input.readVarInt(false); //极品属性（新）
                                            }
                                            var soulAttrsLength1 = input.readShort();
                                            temp731["soulAttrs"] = new Array(soulAttrsLength1);
                                            for (var soulAttrsi1 = 0; soulAttrsi1 < soulAttrsLength1; soulAttrsi1++) {
                                                temp731["soulAttrs"][soulAttrsi1] = input.readVarInt(false); //心魂属性
                                            }
                                            var godsAttrsLength1 = input.readShort();
                                            temp731["godsAttrs"] = new Array(godsAttrsLength1);
                                            for (var godsAttrsi1 = 0; godsAttrsi1 < godsAttrsLength1; godsAttrsi1++) {
                                                temp731["godsAttrs"][godsAttrsi1] = input.readVarInt(false); //额外神级属性
                                            }
                                            temp731["qualification"] = input.readVarInt(false); //资质
                                            var specialDurableLength1 = input.readShort();
                                            temp731["specialDurable"] = [];
                                            for (var specialDurablei1 = 0; specialDurablei1 < specialDurableLength1; specialDurablei1++) {
                                                if (input.readByte() != 0) {
                                                    var temp736 = temp731["specialDurable"][specialDurablei1] = {}; //特殊耐久消耗值
                                                    temp736["type"] = input.readVarInt(false); //类型
                                                    temp736["value"] = input.readVarInt(false); //已消耗值
                                                }
                                                else {
                                                    temp731["specialDurable"][specialDurablei1] = null;
                                                }
                                            }
                                        }
                                        var immobilizationLength1 = input.readByte();
                                        if (immobilizationLength1 != 0) {
                                            var temp737 = temp730["immobilization"] = {}; //固化数据
                                            temp737["action"] = input.readVarInt(false); //产生行为
                                            temp737["expire"] = input.readVarInt(false); //过期时间 时间戳
                                        }
                                        var fromLength1 = input.readByte();
                                        if (fromLength1 != 0) {
                                            var temp738 = temp730["from"] = {}; //来源
                                            temp738["action"] = input.readVarInt(false); //产生行为
                                            temp738["firstRole"] = input.readLong(); //第一个玩家id
                                            temp738["firstRoleName"] = input.readString(); //第一个玩家名字
                                            var paramsLength2 = input.readShort();
                                            temp738["params"] = [];
                                            for (var paramsi2 = 0; paramsi2 < paramsLength2; paramsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp739 = temp738["params"][paramsi2] = {}; //
                                                    temp739["key"] = input.readVarInt(false); //
                                                    temp739["value"] = input.readString(); //
                                                }
                                                else {
                                                    temp738["params"][paramsi2] = null;
                                                }
                                            }
                                        }
                                        temp730["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                                        var spriteDataLength1 = input.readByte();
                                        if (spriteDataLength1 != 0) {
                                            var temp740 = temp730["spriteData"] = {}; //灵兽数据（null表示没有）
                                            temp740["level"] = input.readVarInt(false); //灵兽等级
                                            temp740["exp"] = input.readVarInt(false); //灵兽经验
                                            temp740["skin"] = input.readVarInt(false); //灵兽皮肤
                                            var skillsLength1 = input.readShort();
                                            temp740["skills"] = [];
                                            for (var skillsi1 = 0; skillsi1 < skillsLength1; skillsi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp741 = temp740["skills"][skillsi1] = {}; //灵兽出战技能
                                                    temp741["id"] = input.readVarInt(false); //
                                                    temp741["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp740["skills"][skillsi1] = null;
                                                }
                                            }
                                            var ownerSkillsLength1 = input.readShort();
                                            temp740["ownerSkills"] = [];
                                            for (var ownerSkillsi1 = 0; ownerSkillsi1 < ownerSkillsLength1; ownerSkillsi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp742 = temp740["ownerSkills"][ownerSkillsi1] = {}; //灵兽拥有的技能
                                                    temp742["id"] = input.readVarInt(false); //
                                                    temp742["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp740["ownerSkills"][ownerSkillsi1] = null;
                                                }
                                            }
                                            var ownerSkinsLength1 = input.readShort();
                                            temp740["ownerSkins"] = [];
                                            for (var ownerSkinsi1 = 0; ownerSkinsi1 < ownerSkinsLength1; ownerSkinsi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp743 = temp740["ownerSkins"][ownerSkinsi1] = {}; //灵兽拥有的皮肤
                                                    temp743["id"] = input.readVarInt(false); //
                                                    temp743["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp740["ownerSkins"][ownerSkinsi1] = null;
                                                }
                                            }
                                            var absorbExpLength1 = input.readShort();
                                            temp740["absorbExp"] = [];
                                            for (var absorbExpi1 = 0; absorbExpi1 < absorbExpLength1; absorbExpi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp744 = temp740["absorbExp"][absorbExpi1] = {}; //灵兽吸收经验值
                                                    temp744["id"] = input.readVarInt(false); //
                                                    temp744["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp740["absorbExp"][absorbExpi1] = null;
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    temp728["items"][itemsi1] = null;
                                }
                            }
                        }
                        else {
                            resBackRolePropertyItemQueryMessage["storages"][storagesi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resBackRolePropertyItemQueryMessage);
                    break;
            }
        };
        return BackModel;
    }(ModelBase));
    net.BackModel = BackModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:2
     */
    var BackpackModel = /** @class */ (function (_super) {
        __extends(BackpackModel, _super);
        function BackpackModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(2101 /* BackpackModelCMD.CMDResBackpackGridMessage */);
            thisObj.reg(2102 /* BackpackModelCMD.CMDResBackpackUnlockMessage */);
            thisObj.reg(2103 /* BackpackModelCMD.CMDResBackpackCoinMessage */);
            thisObj.reg(2104 /* BackpackModelCMD.CMDResBackpackChangedMessage */);
            thisObj.reg(2105 /* BackpackModelCMD.CMDResBackpackMergeMessage */);
            thisObj.reg(2106 /* BackpackModelCMD.CMDResBackpackCoinGainsMessage */);
            return _this;
        }
        BackpackModel.ins = function () {
            if (!this._ins)
                this._ins = new BackpackModel();
            return this._ins;
        };
        /**
         *
         * 请求背包数据
         * @param 哪个背包
         *
         * sendReqBackpackGridMessage  2001
         */
        BackpackModel.prototype.send1 = function (where, s) {
            var output = this.getO();
            output.writeVarInt(where, false);
            this.send(2001 /* BackpackModelCMD.CMDReqBackpackGridMessage */, output, s);
        };
        /**
         *
         * 请求解锁背包格子
         * @param 哪个背包
         * @param 解锁多少格
         *
         * sendReqBackpackUnlockMessage  2002
         */
        BackpackModel.prototype.send2 = function (where, count, s) {
            var output = this.getO();
            output.writeVarInt(where, false);
            output.writeVarInt(count, false);
            this.send(2002 /* BackpackModelCMD.CMDReqBackpackUnlockMessage */, output, s);
        };
        /**
         *
         * 请求玩家货币信息
         *
         * sendReqBackpackCoinMessage  2003
         */
        BackpackModel.prototype.send3 = function (s) {
            var output = this.getO();
            this.send(2003 /* BackpackModelCMD.CMDReqBackpackCoinMessage */, output, s);
        };
        /**
         *
         * 背包整理
         * @param 哪个背包
         * @param 是否同类型的多个背包一起整理
         *
         * sendReqBackpackSortMessage  2004
         */
        BackpackModel.prototype.send4 = function (where, entirety, s) {
            var output = this.getO();
            output.writeVarInt(where, false);
            output.writeVarInt(entirety, false);
            this.send(2004 /* BackpackModelCMD.CMDReqBackpackSortMessage */, output, s);
        };
        /**
         *
         * 道具移动 合并 拆分
         * @param 源背包
         * @param 目的背包
         * @param 源位置
         * @param 目标位置
         * @param 操作数量
         *
         * sendReqBackpackMergeMessage  2005
         */
        BackpackModel.prototype.send5 = function (sourceWhere, targetWhere, sourceIndex, targetIndex, count, s) {
            var output = this.getO();
            output.writeVarInt(sourceWhere, false);
            output.writeVarInt(targetWhere, false);
            output.writeVarInt(sourceIndex, false);
            output.writeVarInt(targetIndex, false);
            output.writeVarInt(count, false);
            this.send(2005 /* BackpackModelCMD.CMDReqBackpackMergeMessage */, output, s);
        };
        /**
         *
         * 请求丢弃道具
         * @param 背包
         * @param 位置（货币时传id）
         * @param 数量
         *
         * sendReqBackpackDiscardMessage  2006
         */
        BackpackModel.prototype.send6 = function (where, index, count, s) {
            var output = this.getO();
            output.writeVarInt(where, false);
            output.writeVarInt(index, false);
            output.writeVarInt(count, false);
            this.send(2006 /* BackpackModelCMD.CMDReqBackpackDiscardMessage */, output, s);
        };
        /**
         *
         * 请求提取寻宝仓库
         * @param
         *
         * sendReqBackpackFetchTreasureMessage  2007
         */
        BackpackModel.prototype.send7 = function (lidList, where, s) {
            var output = this.getO();
            output.writeShort(lidList.length);
            for (var lidListi1 = 0; lidListi1 < lidList.length; lidListi1++) {
                output.writeLong(lidList[lidListi1]);
            }
            output.writeVarInt(where, false);
            this.send(2007 /* BackpackModelCMD.CMDReqBackpackFetchTreasureMessage */, output, s);
        };
        BackpackModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 2101 /* BackpackModelCMD.CMDResBackpackGridMessage */:
                    var resBackpackGridMessage = {};
                    resBackpackGridMessage["where"] = input.readVarInt(false); //
                    var itemsLength1 = input.readShort();
                    resBackpackGridMessage["items"] = [];
                    for (var itemsi1 = 0; itemsi1 < itemsLength1; itemsi1++) {
                        if (input.readByte() != 0) {
                            var temp768 = resBackpackGridMessage["items"][itemsi1] = {}; //
                            temp768["index"] = input.readVarInt(false); //
                            var itemLength1 = input.readByte();
                            if (itemLength1 != 0) {
                                var temp769 = temp768["item"] = {}; //
                                temp769["uid"] = input.readLong(); //唯一id
                                temp769["itemId"] = input.readVarInt(false); //道具配置id
                                temp769["count"] = input.readVarInt(false); //数量
                                temp769["expire"] = input.readVarInt(false); //过期时间
                                temp769["uTimes"] = input.readVarInt(false); //已经使用的次数
                                temp769["time"] = input.readVarInt(false); //道具获得时间
                                var paramsLength1 = input.readShort();
                                temp769["params"] = new Array(paramsLength1);
                                for (var paramsi1 = 0; paramsi1 < paramsLength1; paramsi1++) {
                                    temp769["params"][paramsi1] = input.readVarInt(false); //道具参数
                                }
                                var equipDataLength1 = input.readByte();
                                if (equipDataLength1 != 0) {
                                    var temp770 = temp769["equipData"] = {}; //装备属性（null表示没有）
                                    temp770["durable"] = input.readVarInt(false); //消耗耐久
                                    temp770["starLevel"] = input.readVarInt(false); //升星等级
                                    temp770["starLock"] = input.readVarInt(false); //被锁星级
                                    temp770["starExp"] = input.readVarInt(false); //升星祝福值
                                    temp770["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                    temp770["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                    temp770["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                    temp770["spiritLevel"] = input.readVarInt(false); //注灵等级
                                    temp770["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                    temp770["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                    temp770["sign"] = input.readString(); //签名
                                    var destinyAttrsLength1 = input.readShort();
                                    temp770["destinyAttrs"] = [];
                                    for (var destinyAttrsi1 = 0; destinyAttrsi1 < destinyAttrsLength1; destinyAttrsi1++) {
                                        if (input.readByte() != 0) {
                                            var temp771 = temp770["destinyAttrs"][destinyAttrsi1] = {}; //命运属性
                                            temp771["career"] = input.readVarInt(false); //职业限定
                                            temp771["attributeType"] = input.readVarInt(false); //属性类型
                                            temp771["attributeValue"] = input.readLong(); //属性值
                                        }
                                        else {
                                            temp770["destinyAttrs"][destinyAttrsi1] = null;
                                        }
                                    }
                                    var superAttrsLength1 = input.readShort();
                                    temp770["superAttrs"] = [];
                                    for (var superAttrsi1 = 0; superAttrsi1 < superAttrsLength1; superAttrsi1++) {
                                        if (input.readByte() != 0) {
                                            var temp772 = temp770["superAttrs"][superAttrsi1] = {}; //极品属性
                                            temp772["career"] = input.readVarInt(false); //职业限定
                                            temp772["attributeType"] = input.readVarInt(false); //属性类型
                                            temp772["attributeValue"] = input.readLong(); //属性值
                                        }
                                        else {
                                            temp770["superAttrs"][superAttrsi1] = null;
                                        }
                                    }
                                    var identifyAttrsLength1 = input.readShort();
                                    temp770["identifyAttrs"] = [];
                                    for (var identifyAttrsi1 = 0; identifyAttrsi1 < identifyAttrsLength1; identifyAttrsi1++) {
                                        if (input.readByte() != 0) {
                                            var temp773 = temp770["identifyAttrs"][identifyAttrsi1] = {}; //鉴定属性
                                            temp773["career"] = input.readVarInt(false); //职业限定
                                            temp773["attributeType"] = input.readVarInt(false); //属性类型
                                            temp773["attributeValue"] = input.readLong(); //属性值
                                        }
                                        else {
                                            temp770["identifyAttrs"][identifyAttrsi1] = null;
                                        }
                                    }
                                    var xiLianAttrsLength1 = input.readShort();
                                    temp770["xiLianAttrs"] = [];
                                    for (var xiLianAttrsi1 = 0; xiLianAttrsi1 < xiLianAttrsLength1; xiLianAttrsi1++) {
                                        if (input.readByte() != 0) {
                                            var temp774 = temp770["xiLianAttrs"][xiLianAttrsi1] = {}; //配饰洗练属性
                                            temp774["career"] = input.readVarInt(false); //职业限定
                                            temp774["attributeType"] = input.readVarInt(false); //属性类型
                                            temp774["attributeValue"] = input.readLong(); //属性值
                                        }
                                        else {
                                            temp770["xiLianAttrs"][xiLianAttrsi1] = null;
                                        }
                                    }
                                    temp770["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                    temp770["growLevel"] = input.readVarInt(false); //成长等级
                                    temp770["growExp"] = input.readVarInt(false); //成长经验
                                    var bestAttrsLength1 = input.readShort();
                                    temp770["bestAttrs"] = new Array(bestAttrsLength1);
                                    for (var bestAttrsi1 = 0; bestAttrsi1 < bestAttrsLength1; bestAttrsi1++) {
                                        temp770["bestAttrs"][bestAttrsi1] = input.readVarInt(false); //极品属性（新）
                                    }
                                    var soulAttrsLength1 = input.readShort();
                                    temp770["soulAttrs"] = new Array(soulAttrsLength1);
                                    for (var soulAttrsi1 = 0; soulAttrsi1 < soulAttrsLength1; soulAttrsi1++) {
                                        temp770["soulAttrs"][soulAttrsi1] = input.readVarInt(false); //心魂属性
                                    }
                                    var godsAttrsLength1 = input.readShort();
                                    temp770["godsAttrs"] = new Array(godsAttrsLength1);
                                    for (var godsAttrsi1 = 0; godsAttrsi1 < godsAttrsLength1; godsAttrsi1++) {
                                        temp770["godsAttrs"][godsAttrsi1] = input.readVarInt(false); //额外神级属性
                                    }
                                    temp770["qualification"] = input.readVarInt(false); //资质
                                    var specialDurableLength1 = input.readShort();
                                    temp770["specialDurable"] = [];
                                    for (var specialDurablei1 = 0; specialDurablei1 < specialDurableLength1; specialDurablei1++) {
                                        if (input.readByte() != 0) {
                                            var temp775 = temp770["specialDurable"][specialDurablei1] = {}; //特殊耐久消耗值
                                            temp775["type"] = input.readVarInt(false); //类型
                                            temp775["value"] = input.readVarInt(false); //已消耗值
                                        }
                                        else {
                                            temp770["specialDurable"][specialDurablei1] = null;
                                        }
                                    }
                                }
                                var immobilizationLength1 = input.readByte();
                                if (immobilizationLength1 != 0) {
                                    var temp776 = temp769["immobilization"] = {}; //固化数据
                                    temp776["action"] = input.readVarInt(false); //产生行为
                                    temp776["expire"] = input.readVarInt(false); //过期时间 时间戳
                                }
                                var fromLength1 = input.readByte();
                                if (fromLength1 != 0) {
                                    var temp777 = temp769["from"] = {}; //来源
                                    temp777["action"] = input.readVarInt(false); //产生行为
                                    temp777["firstRole"] = input.readLong(); //第一个玩家id
                                    temp777["firstRoleName"] = input.readString(); //第一个玩家名字
                                    var paramsLength2 = input.readShort();
                                    temp777["params"] = [];
                                    for (var paramsi2 = 0; paramsi2 < paramsLength2; paramsi2++) {
                                        if (input.readByte() != 0) {
                                            var temp778 = temp777["params"][paramsi2] = {}; //
                                            temp778["key"] = input.readVarInt(false); //
                                            temp778["value"] = input.readString(); //
                                        }
                                        else {
                                            temp777["params"][paramsi2] = null;
                                        }
                                    }
                                }
                                temp769["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                                var spriteDataLength1 = input.readByte();
                                if (spriteDataLength1 != 0) {
                                    var temp779 = temp769["spriteData"] = {}; //灵兽数据（null表示没有）
                                    temp779["level"] = input.readVarInt(false); //灵兽等级
                                    temp779["exp"] = input.readVarInt(false); //灵兽经验
                                    temp779["skin"] = input.readVarInt(false); //灵兽皮肤
                                    var skillsLength1 = input.readShort();
                                    temp779["skills"] = [];
                                    for (var skillsi1 = 0; skillsi1 < skillsLength1; skillsi1++) {
                                        if (input.readByte() != 0) {
                                            var temp780 = temp779["skills"][skillsi1] = {}; //灵兽出战技能
                                            temp780["id"] = input.readVarInt(false); //
                                            temp780["value"] = input.readVarInt(false); //
                                        }
                                        else {
                                            temp779["skills"][skillsi1] = null;
                                        }
                                    }
                                    var ownerSkillsLength1 = input.readShort();
                                    temp779["ownerSkills"] = [];
                                    for (var ownerSkillsi1 = 0; ownerSkillsi1 < ownerSkillsLength1; ownerSkillsi1++) {
                                        if (input.readByte() != 0) {
                                            var temp781 = temp779["ownerSkills"][ownerSkillsi1] = {}; //灵兽拥有的技能
                                            temp781["id"] = input.readVarInt(false); //
                                            temp781["value"] = input.readVarInt(false); //
                                        }
                                        else {
                                            temp779["ownerSkills"][ownerSkillsi1] = null;
                                        }
                                    }
                                    var ownerSkinsLength1 = input.readShort();
                                    temp779["ownerSkins"] = [];
                                    for (var ownerSkinsi1 = 0; ownerSkinsi1 < ownerSkinsLength1; ownerSkinsi1++) {
                                        if (input.readByte() != 0) {
                                            var temp782 = temp779["ownerSkins"][ownerSkinsi1] = {}; //灵兽拥有的皮肤
                                            temp782["id"] = input.readVarInt(false); //
                                            temp782["value"] = input.readVarInt(false); //
                                        }
                                        else {
                                            temp779["ownerSkins"][ownerSkinsi1] = null;
                                        }
                                    }
                                    var absorbExpLength1 = input.readShort();
                                    temp779["absorbExp"] = [];
                                    for (var absorbExpi1 = 0; absorbExpi1 < absorbExpLength1; absorbExpi1++) {
                                        if (input.readByte() != 0) {
                                            var temp783 = temp779["absorbExp"][absorbExpi1] = {}; //灵兽吸收经验值
                                            temp783["id"] = input.readVarInt(false); //
                                            temp783["value"] = input.readVarInt(false); //
                                        }
                                        else {
                                            temp779["absorbExp"][absorbExpi1] = null;
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            resBackpackGridMessage["items"][itemsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resBackpackGridMessage);
                    break;
                case 2102 /* BackpackModelCMD.CMDResBackpackUnlockMessage */:
                    var resBackpackUnlockMessage = {};
                    resBackpackUnlockMessage["where"] = input.readVarInt(false); //
                    resBackpackUnlockMessage["unlocked"] = input.readVarInt(false); //
                    this.sendNotif(cmd, resBackpackUnlockMessage);
                    break;
                case 2103 /* BackpackModelCMD.CMDResBackpackCoinMessage */:
                    var coinsLength1 = input.readShort();
                    var resBackpackCoinMessage = [];
                    for (var coinsi1 = 0; coinsi1 < coinsLength1; coinsi1++) {
                        if (input.readByte() != 0) {
                            var temp784 = resBackpackCoinMessage[coinsi1] = {}; //
                            temp784["itemId"] = input.readVarInt(false); //
                            temp784["count"] = input.readLong(); //
                        }
                        else {
                            resBackpackCoinMessage[coinsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resBackpackCoinMessage);
                    break;
                case 2104 /* BackpackModelCMD.CMDResBackpackChangedMessage */:
                    var resBackpackChangedMessage = {};
                    resBackpackChangedMessage["action"] = input.readVarInt(false); //操作码
                    var changedCoinsLength1 = input.readShort();
                    resBackpackChangedMessage["changedCoins"] = [];
                    for (var changedCoinsi1 = 0; changedCoinsi1 < changedCoinsLength1; changedCoinsi1++) {
                        if (input.readByte() != 0) {
                            var temp785 = resBackpackChangedMessage["changedCoins"][changedCoinsi1] = {}; //
                            temp785["itemId"] = input.readVarInt(false); //
                            temp785["count"] = input.readLong(); //
                        }
                        else {
                            resBackpackChangedMessage["changedCoins"][changedCoinsi1] = null;
                        }
                    }
                    var changedItemsLength1 = input.readShort();
                    resBackpackChangedMessage["changedItems"] = [];
                    for (var changedItemsi1 = 0; changedItemsi1 < changedItemsLength1; changedItemsi1++) {
                        if (input.readByte() != 0) {
                            var temp786 = resBackpackChangedMessage["changedItems"][changedItemsi1] = {}; //
                            temp786["where"] = input.readVarInt(false); //
                            var changesLength1 = input.readShort();
                            temp786["changes"] = [];
                            for (var changesi1 = 0; changesi1 < changesLength1; changesi1++) {
                                if (input.readByte() != 0) {
                                    var temp787 = temp786["changes"][changesi1] = {}; //
                                    temp787["index"] = input.readVarInt(false); //
                                    var itemLength2 = input.readByte();
                                    if (itemLength2 != 0) {
                                        var temp788 = temp787["item"] = {}; //
                                        temp788["uid"] = input.readLong(); //唯一id
                                        temp788["itemId"] = input.readVarInt(false); //道具配置id
                                        temp788["count"] = input.readVarInt(false); //数量
                                        temp788["expire"] = input.readVarInt(false); //过期时间
                                        temp788["uTimes"] = input.readVarInt(false); //已经使用的次数
                                        temp788["time"] = input.readVarInt(false); //道具获得时间
                                        var paramsLength3 = input.readShort();
                                        temp788["params"] = new Array(paramsLength3);
                                        for (var paramsi3 = 0; paramsi3 < paramsLength3; paramsi3++) {
                                            temp788["params"][paramsi3] = input.readVarInt(false); //道具参数
                                        }
                                        var equipDataLength2 = input.readByte();
                                        if (equipDataLength2 != 0) {
                                            var temp789 = temp788["equipData"] = {}; //装备属性（null表示没有）
                                            temp789["durable"] = input.readVarInt(false); //消耗耐久
                                            temp789["starLevel"] = input.readVarInt(false); //升星等级
                                            temp789["starLock"] = input.readVarInt(false); //被锁星级
                                            temp789["starExp"] = input.readVarInt(false); //升星祝福值
                                            temp789["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                            temp789["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                            temp789["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                            temp789["spiritLevel"] = input.readVarInt(false); //注灵等级
                                            temp789["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                            temp789["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                            temp789["sign"] = input.readString(); //签名
                                            var destinyAttrsLength2 = input.readShort();
                                            temp789["destinyAttrs"] = [];
                                            for (var destinyAttrsi2 = 0; destinyAttrsi2 < destinyAttrsLength2; destinyAttrsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp790 = temp789["destinyAttrs"][destinyAttrsi2] = {}; //命运属性
                                                    temp790["career"] = input.readVarInt(false); //职业限定
                                                    temp790["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp790["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp789["destinyAttrs"][destinyAttrsi2] = null;
                                                }
                                            }
                                            var superAttrsLength2 = input.readShort();
                                            temp789["superAttrs"] = [];
                                            for (var superAttrsi2 = 0; superAttrsi2 < superAttrsLength2; superAttrsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp791 = temp789["superAttrs"][superAttrsi2] = {}; //极品属性
                                                    temp791["career"] = input.readVarInt(false); //职业限定
                                                    temp791["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp791["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp789["superAttrs"][superAttrsi2] = null;
                                                }
                                            }
                                            var identifyAttrsLength2 = input.readShort();
                                            temp789["identifyAttrs"] = [];
                                            for (var identifyAttrsi2 = 0; identifyAttrsi2 < identifyAttrsLength2; identifyAttrsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp792 = temp789["identifyAttrs"][identifyAttrsi2] = {}; //鉴定属性
                                                    temp792["career"] = input.readVarInt(false); //职业限定
                                                    temp792["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp792["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp789["identifyAttrs"][identifyAttrsi2] = null;
                                                }
                                            }
                                            var xiLianAttrsLength2 = input.readShort();
                                            temp789["xiLianAttrs"] = [];
                                            for (var xiLianAttrsi2 = 0; xiLianAttrsi2 < xiLianAttrsLength2; xiLianAttrsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp793 = temp789["xiLianAttrs"][xiLianAttrsi2] = {}; //配饰洗练属性
                                                    temp793["career"] = input.readVarInt(false); //职业限定
                                                    temp793["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp793["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp789["xiLianAttrs"][xiLianAttrsi2] = null;
                                                }
                                            }
                                            temp789["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                            temp789["growLevel"] = input.readVarInt(false); //成长等级
                                            temp789["growExp"] = input.readVarInt(false); //成长经验
                                            var bestAttrsLength2 = input.readShort();
                                            temp789["bestAttrs"] = new Array(bestAttrsLength2);
                                            for (var bestAttrsi2 = 0; bestAttrsi2 < bestAttrsLength2; bestAttrsi2++) {
                                                temp789["bestAttrs"][bestAttrsi2] = input.readVarInt(false); //极品属性（新）
                                            }
                                            var soulAttrsLength2 = input.readShort();
                                            temp789["soulAttrs"] = new Array(soulAttrsLength2);
                                            for (var soulAttrsi2 = 0; soulAttrsi2 < soulAttrsLength2; soulAttrsi2++) {
                                                temp789["soulAttrs"][soulAttrsi2] = input.readVarInt(false); //心魂属性
                                            }
                                            var godsAttrsLength2 = input.readShort();
                                            temp789["godsAttrs"] = new Array(godsAttrsLength2);
                                            for (var godsAttrsi2 = 0; godsAttrsi2 < godsAttrsLength2; godsAttrsi2++) {
                                                temp789["godsAttrs"][godsAttrsi2] = input.readVarInt(false); //额外神级属性
                                            }
                                            temp789["qualification"] = input.readVarInt(false); //资质
                                            var specialDurableLength2 = input.readShort();
                                            temp789["specialDurable"] = [];
                                            for (var specialDurablei2 = 0; specialDurablei2 < specialDurableLength2; specialDurablei2++) {
                                                if (input.readByte() != 0) {
                                                    var temp794 = temp789["specialDurable"][specialDurablei2] = {}; //特殊耐久消耗值
                                                    temp794["type"] = input.readVarInt(false); //类型
                                                    temp794["value"] = input.readVarInt(false); //已消耗值
                                                }
                                                else {
                                                    temp789["specialDurable"][specialDurablei2] = null;
                                                }
                                            }
                                        }
                                        var immobilizationLength2 = input.readByte();
                                        if (immobilizationLength2 != 0) {
                                            var temp795 = temp788["immobilization"] = {}; //固化数据
                                            temp795["action"] = input.readVarInt(false); //产生行为
                                            temp795["expire"] = input.readVarInt(false); //过期时间 时间戳
                                        }
                                        var fromLength2 = input.readByte();
                                        if (fromLength2 != 0) {
                                            var temp796 = temp788["from"] = {}; //来源
                                            temp796["action"] = input.readVarInt(false); //产生行为
                                            temp796["firstRole"] = input.readLong(); //第一个玩家id
                                            temp796["firstRoleName"] = input.readString(); //第一个玩家名字
                                            var paramsLength4 = input.readShort();
                                            temp796["params"] = [];
                                            for (var paramsi4 = 0; paramsi4 < paramsLength4; paramsi4++) {
                                                if (input.readByte() != 0) {
                                                    var temp797 = temp796["params"][paramsi4] = {}; //
                                                    temp797["key"] = input.readVarInt(false); //
                                                    temp797["value"] = input.readString(); //
                                                }
                                                else {
                                                    temp796["params"][paramsi4] = null;
                                                }
                                            }
                                        }
                                        temp788["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                                        var spriteDataLength2 = input.readByte();
                                        if (spriteDataLength2 != 0) {
                                            var temp798 = temp788["spriteData"] = {}; //灵兽数据（null表示没有）
                                            temp798["level"] = input.readVarInt(false); //灵兽等级
                                            temp798["exp"] = input.readVarInt(false); //灵兽经验
                                            temp798["skin"] = input.readVarInt(false); //灵兽皮肤
                                            var skillsLength2 = input.readShort();
                                            temp798["skills"] = [];
                                            for (var skillsi2 = 0; skillsi2 < skillsLength2; skillsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp799 = temp798["skills"][skillsi2] = {}; //灵兽出战技能
                                                    temp799["id"] = input.readVarInt(false); //
                                                    temp799["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp798["skills"][skillsi2] = null;
                                                }
                                            }
                                            var ownerSkillsLength2 = input.readShort();
                                            temp798["ownerSkills"] = [];
                                            for (var ownerSkillsi2 = 0; ownerSkillsi2 < ownerSkillsLength2; ownerSkillsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp800 = temp798["ownerSkills"][ownerSkillsi2] = {}; //灵兽拥有的技能
                                                    temp800["id"] = input.readVarInt(false); //
                                                    temp800["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp798["ownerSkills"][ownerSkillsi2] = null;
                                                }
                                            }
                                            var ownerSkinsLength2 = input.readShort();
                                            temp798["ownerSkins"] = [];
                                            for (var ownerSkinsi2 = 0; ownerSkinsi2 < ownerSkinsLength2; ownerSkinsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp801 = temp798["ownerSkins"][ownerSkinsi2] = {}; //灵兽拥有的皮肤
                                                    temp801["id"] = input.readVarInt(false); //
                                                    temp801["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp798["ownerSkins"][ownerSkinsi2] = null;
                                                }
                                            }
                                            var absorbExpLength2 = input.readShort();
                                            temp798["absorbExp"] = [];
                                            for (var absorbExpi2 = 0; absorbExpi2 < absorbExpLength2; absorbExpi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp802 = temp798["absorbExp"][absorbExpi2] = {}; //灵兽吸收经验值
                                                    temp802["id"] = input.readVarInt(false); //
                                                    temp802["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp798["absorbExp"][absorbExpi2] = null;
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    temp786["changes"][changesi1] = null;
                                }
                            }
                        }
                        else {
                            resBackpackChangedMessage["changedItems"][changedItemsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resBackpackChangedMessage);
                    break;
                case 2105 /* BackpackModelCMD.CMDResBackpackMergeMessage */:
                    var resBackpackMergeMessage = {};
                    resBackpackMergeMessage["result"] = input.readBoolean(); //结果
                    resBackpackMergeMessage["sourceWhere"] = input.readVarInt(false); //
                    resBackpackMergeMessage["sourceIndex"] = input.readVarInt(false); //
                    this.sendNotif(cmd, resBackpackMergeMessage);
                    break;
                case 2106 /* BackpackModelCMD.CMDResBackpackCoinGainsMessage */:
                    var resBackpackCoinGainsMessage = {};
                    var gainsLength1 = input.readShort();
                    resBackpackCoinGainsMessage["gains"] = [];
                    for (var gainsi1 = 0; gainsi1 < gainsLength1; gainsi1++) {
                        if (input.readByte() != 0) {
                            var temp803 = resBackpackCoinGainsMessage["gains"][gainsi1] = {}; //
                            temp803["itemId"] = input.readVarInt(false); //
                            temp803["count"] = input.readLong(); //
                        }
                        else {
                            resBackpackCoinGainsMessage["gains"][gainsi1] = null;
                        }
                    }
                    var consumesLength1 = input.readShort();
                    resBackpackCoinGainsMessage["consumes"] = [];
                    for (var consumesi1 = 0; consumesi1 < consumesLength1; consumesi1++) {
                        if (input.readByte() != 0) {
                            var temp804 = resBackpackCoinGainsMessage["consumes"][consumesi1] = {}; //
                            temp804["itemId"] = input.readVarInt(false); //
                            temp804["count"] = input.readLong(); //
                        }
                        else {
                            resBackpackCoinGainsMessage["consumes"][consumesi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resBackpackCoinGainsMessage);
                    break;
            }
        };
        return BackpackModel;
    }(ModelBase));
    net.BackpackModel = BackpackModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:10
     */
    var BagModel = /** @class */ (function (_super) {
        __extends(BagModel, _super);
        function BagModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(10041 /* BagModelCMD.CMDResBagLootAcquiredMessage */);
            return _this;
        }
        BagModel.ins = function () {
            if (!this._ins)
                this._ins = new BagModel();
            return this._ins;
        };
        BagModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 10041 /* BagModelCMD.CMDResBagLootAcquiredMessage */:
                    var lootsLength1 = input.readShort();
                    var resBagLootAcquiredMessage = [];
                    for (var lootsi1 = 0; lootsi1 < lootsLength1; lootsi1++) {
                        if (input.readByte() != 0) {
                            var temp588 = resBagLootAcquiredMessage[lootsi1] = {}; //掉落列表
                            temp588["itemId"] = input.readVarInt(false); //config id
                            temp588["itemCount"] = input.readVarInt(false); //item count
                        }
                        else {
                            resBagLootAcquiredMessage[lootsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resBagLootAcquiredMessage);
                    break;
            }
        };
        return BagModel;
    }(ModelBase));
    net.BagModel = BagModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:344
     */
    var BonfireDonateModel = /** @class */ (function (_super) {
        __extends(BonfireDonateModel, _super);
        function BonfireDonateModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(344002 /* BonfireDonateModelCMD.CMDResBonfireDonateInfoMessage */);
            thisObj.reg(344005 /* BonfireDonateModelCMD.CMDResBonfirePositionMessage */);
            thisObj.reg(344009 /* BonfireDonateModelCMD.CMDResNextTeleportMessage */);
            return _this;
        }
        BonfireDonateModel.ins = function () {
            if (!this._ins)
                this._ins = new BonfireDonateModel();
            return this._ins;
        };
        /**
         *
         * 请求篝火捐献信息
         *
         * sendReqBonfireDonateInfoMessage  344001
         */
        BonfireDonateModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(344001 /* BonfireDonateModelCMD.CMDReqBonfireDonateInfoMessage */, output, s);
        };
        /**
         *
         * 请求捐献材料
         *
         * sendReqDonateMaterialMessage  344003
         */
        BonfireDonateModel.prototype.send3 = function (s) {
            var output = this.getO();
            this.send(344003 /* BonfireDonateModelCMD.CMDReqDonateMaterialMessage */, output, s);
        };
        /**
         *
         * 请求篝火信息
         *
         * sendReqBonfireInfoMessage  344004
         */
        BonfireDonateModel.prototype.send4 = function (s) {
            var output = this.getO();
            this.send(344004 /* BonfireDonateModelCMD.CMDReqBonfireInfoMessage */, output, s);
        };
        /**
         *
         * 请求设立篝火
         *
         * sendReqSetUpBonfireMessage  344006
         */
        BonfireDonateModel.prototype.send6 = function (s) {
            var output = this.getO();
            this.send(344006 /* BonfireDonateModelCMD.CMDReqSetUpBonfireMessage */, output, s);
        };
        /**
         *
         * 请求传送到篝火处
         *
         * sendReqTeleportToBonfireMessage  344007
         */
        BonfireDonateModel.prototype.send7 = function (s) {
            var output = this.getO();
            this.send(344007 /* BonfireDonateModelCMD.CMDReqTeleportToBonfireMessage */, output, s);
        };
        /**
         *
         * 请求篝火传送CD
         *
         * sendReqBonfireTeleportCDMessage  344008
         */
        BonfireDonateModel.prototype.send8 = function (s) {
            var output = this.getO();
            this.send(344008 /* BonfireDonateModelCMD.CMDReqBonfireTeleportCDMessage */, output, s);
        };
        BonfireDonateModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 344002 /* BonfireDonateModelCMD.CMDResBonfireDonateInfoMessage */:
                    var resBonfireDonateInfoMessage = {};
                    resBonfireDonateInfoMessage["level"] = input.readVarInt(false); //篝火等级
                    resBonfireDonateInfoMessage["exp"] = input.readVarInt(false); //当前经验值
                    this.sendNotif(cmd, resBonfireDonateInfoMessage);
                    break;
                case 344005 /* BonfireDonateModelCMD.CMDResBonfirePositionMessage */:
                    var resBonfirePositionMessage = {};
                    resBonfirePositionMessage["nextFreeTime"] = input.readVarInt(false); //下次篝火免费消耗时间戳
                    resBonfirePositionMessage["mapCfgId"] = input.readVarInt(false); //篝火所在地图配置id
                    resBonfirePositionMessage["x"] = input.readVarInt(false); //篝火所在地图位置x
                    resBonfirePositionMessage["y"] = input.readVarInt(false); //篝火所在地图位置y
                    this.sendNotif(cmd, resBonfirePositionMessage);
                    break;
                case 344009 /* BonfireDonateModelCMD.CMDResNextTeleportMessage */:
                    var resNextTeleportMessage = input.readLong(); //下次篝火可传送时间戳
                    this.sendNotif(cmd, resNextTeleportMessage);
                    break;
            }
        };
        return BonfireDonateModel;
    }(ModelBase));
    net.BonfireDonateModel = BonfireDonateModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:196
     */
    var BoreModel = /** @class */ (function (_super) {
        __extends(BoreModel, _super);
        function BoreModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(196002 /* BoreModelCMD.CMDResRoleBoreInfoMessage */);
            thisObj.reg(196005 /* BoreModelCMD.CMDResComposeStoneMessage */);
            thisObj.reg(196007 /* BoreModelCMD.CMDResBoreComposeSettingMessage */);
            return _this;
        }
        BoreModel.ins = function () {
            if (!this._ins)
                this._ins = new BoreModel();
            return this._ins;
        };
        /**
         *
         * 请求打孔面板
         * @param 唯一id
         *
         * sendReqRoleBoreInfoMessage  196001
         */
        BoreModel.prototype.send1 = function (uid, s) {
            var output = this.getO();
            output.writeLong(uid);
            this.send(196001 /* BoreModelCMD.CMDReqRoleBoreInfoMessage */, output, s);
        };
        /**
         *
         * 请求打孔
         * @param 唯一id
         * @param 孔id
         *
         * sendReqBoreMessage  196003
         */
        BoreModel.prototype.send3 = function (uid, index, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(index, false);
            this.send(196003 /* BoreModelCMD.CMDReqBoreMessage */, output, s);
        };
        /**
         *
         * 请求宝石合成
         *
         * sendReqComposeStoneMessage  196004
         */
        BoreModel.prototype.send4 = function (lid, s) {
            var output = this.getO();
            output.writeShort(lid.length);
            for (var lidi1 = 0; lidi1 < lid.length; lidi1++) {
                output.writeLong(lid[lidi1]);
            }
            this.send(196004 /* BoreModelCMD.CMDReqComposeStoneMessage */, output, s);
        };
        /**
         *
         * 请求合成设置
         *
         * sendReqBoreComposeSettingMessage  196006
         */
        BoreModel.prototype.send6 = function (s) {
            var output = this.getO();
            this.send(196006 /* BoreModelCMD.CMDReqBoreComposeSettingMessage */, output, s);
        };
        /**
         *
         *
         * @param 等级
         *
         * sendReqBoreComposeSettingUpdateMessage  196008
         */
        BoreModel.prototype.send8 = function (level, participation, keeps, s) {
            var output = this.getO();
            output.writeVarInt(level, false);
            output.writeShort(participation.length);
            for (var participationi1 = 0; participationi1 < participation.length; participationi1++) {
                output.writeVarInt(participation[participationi1], false);
            }
            output.writeShort(keeps.length);
            for (var keepsi1 = 0; keepsi1 < keeps.length; keepsi1++) {
                output.writeVarInt(keeps[keepsi1], false);
            }
            this.send(196008 /* BoreModelCMD.CMDReqBoreComposeSettingUpdateMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqBoreQuickComposeMessage  196009
         */
        BoreModel.prototype.send9 = function (s) {
            var output = this.getO();
            this.send(196009 /* BoreModelCMD.CMDReqBoreQuickComposeMessage */, output, s);
        };
        BoreModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 196002 /* BoreModelCMD.CMDResRoleBoreInfoMessage */:
                    var resRoleBoreInfoMessage = {};
                    resRoleBoreInfoMessage["uid"] = input.readLong(); //唯一id
                    var BoreBeansLength1 = input.readShort();
                    resRoleBoreInfoMessage["BoreBeans"] = [];
                    for (var BoreBeansi1 = 0; BoreBeansi1 < BoreBeansLength1; BoreBeansi1++) {
                        if (input.readByte() != 0) {
                            var temp589 = resRoleBoreInfoMessage["BoreBeans"][BoreBeansi1] = {}; //打孔信息
                            temp589["state"] = input.readVarInt(false); //0:未开启 1:已开启
                            temp589["index"] = input.readVarInt(false); //孔位置
                        }
                        else {
                            resRoleBoreInfoMessage["BoreBeans"][BoreBeansi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resRoleBoreInfoMessage);
                    break;
                case 196005 /* BoreModelCMD.CMDResComposeStoneMessage */:
                    var resComposeStoneMessage = {};
                    resComposeStoneMessage["result"] = input.readVarInt(false); //0:成功 1:失败
                    resComposeStoneMessage["itemId"] = input.readVarInt(false); //道具id
                    this.sendNotif(cmd, resComposeStoneMessage);
                    break;
                case 196007 /* BoreModelCMD.CMDResBoreComposeSettingMessage */:
                    var resBoreComposeSettingMessage = {};
                    resBoreComposeSettingMessage["level"] = input.readVarInt(false); //等级
                    var participationLength1 = input.readShort();
                    resBoreComposeSettingMessage["participation"] = new Array(participationLength1);
                    for (var participationi1 = 0; participationi1 < participationLength1; participationi1++) {
                        resBoreComposeSettingMessage["participation"][participationi1] = input.readVarInt(false); //参与合成的宝石类型
                    }
                    var keepsLength1 = input.readShort();
                    resBoreComposeSettingMessage["keeps"] = new Array(keepsLength1);
                    for (var keepsi1 = 0; keepsi1 < keepsLength1; keepsi1++) {
                        resBoreComposeSettingMessage["keeps"][keepsi1] = input.readVarInt(false); //保留合成的技能类型
                    }
                    this.sendNotif(cmd, resBoreComposeSettingMessage);
                    break;
            }
        };
        return BoreModel;
    }(ModelBase));
    net.BoreModel = BoreModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:30
     */
    var BossModel = /** @class */ (function (_super) {
        __extends(BossModel, _super);
        function BossModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(30002 /* BossModelCMD.CMDResOpenBossInfoByTypeMessage */);
            thisObj.reg(30003 /* BossModelCMD.CMDResPlayerAllMonsterDropCountMessage */);
            thisObj.reg(30004 /* BossModelCMD.CMDResPlayerMonsterDropCountMessage */);
            thisObj.reg(30015 /* BossModelCMD.CMDResBossActivityOpenMessage */);
            thisObj.reg(30017 /* BossModelCMD.CMDResBossStrategyLogMessage */);
            thisObj.reg(30019 /* BossModelCMD.CMDResMarkTopBossMessage */);
            return _this;
        }
        BossModel.ins = function () {
            if (!this._ins)
                this._ins = new BossModel();
            return this._ins;
        };
        /**
         *
         * 请求副本面板信息(通用)
         * @param 副本类型
         *
         * sendReqInstancePanelInfoMessage  30001
         */
        BossModel.prototype.send1 = function (insType, s) {
            var output = this.getO();
            output.writeVarInt(insType, false);
            this.send(30001 /* BossModelCMD.CMDReqInstancePanelInfoMessage */, output, s);
        };
        /**
         *
         * 请求拾取主线boss奖励
         *
         * sendReqPickUpMainTaskBossMessage  30009
         */
        BossModel.prototype.send9 = function (s) {
            var output = this.getO();
            this.send(30009 /* BossModelCMD.CMDReqPickUpMainTaskBossMessage */, output, s);
        };
        /**
         *
         * 请求扫荡个人副本
         * @param 副本id
         *
         * sendReqSwapPersonalBossMessage  30011
         */
        BossModel.prototype.send11 = function (instanceId, s) {
            var output = this.getO();
            output.writeVarInt(instanceId, false);
            this.send(30011 /* BossModelCMD.CMDReqSwapPersonalBossMessage */, output, s);
        };
        /**
         *
         * 设置boss攻略中的置顶boss
         * @param cfg_boss_tiaozhan1中的id
         *
         * sendReqMarkTopBossMessage  30016
         */
        BossModel.prototype.send16 = function (cfgId, s) {
            var output = this.getO();
            output.writeLong(cfgId);
            this.send(30016 /* BossModelCMD.CMDReqMarkTopBossMessage */, output, s);
        };
        /**
         *
         * 请求获得boss攻略中的日志信息
         *
         * sendReqBossStrategyLogMessage  30018
         */
        BossModel.prototype.send18 = function (s) {
            var output = this.getO();
            this.send(30018 /* BossModelCMD.CMDReqBossStrategyLogMessage */, output, s);
        };
        BossModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 30002 /* BossModelCMD.CMDResOpenBossInfoByTypeMessage */:
                    var resOpenBossInfoByTypeMessage = {};
                    var bossInfoLength1 = input.readShort();
                    resOpenBossInfoByTypeMessage["bossInfo"] = [];
                    for (var bossInfoi1 = 0; bossInfoi1 < bossInfoLength1; bossInfoi1++) {
                        if (input.readByte() != 0) {
                            var temp762 = resOpenBossInfoByTypeMessage["bossInfo"][bossInfoi1] = {}; //boss列表信息
                            temp762["instanceId"] = input.readVarInt(false); //副本id
                            temp762["type"] = input.readVarInt(false); //类型
                            temp762["surplusNum"] = input.readVarInt(false); //剩余次数
                            temp762["freshTime"] = input.readVarInt(false); //下次刷新时间
                            temp762["hp"] = input.readLong(); //当前血量
                            temp762["num"] = input.readVarInt(false); //人数
                            temp762["ownerName"] = input.readString(); //归属人
                            temp762["state"] = input.readVarInt(false); //状态 0未勾选 1勾选 
                            temp762["sweepCount"] = input.readVarInt(false); //扫荡次数
                            temp762["isSucceed"] = input.readVarInt(false); //是否通关过这个副本
                        }
                        else {
                            resOpenBossInfoByTypeMessage["bossInfo"][bossInfoi1] = null;
                        }
                    }
                    var instanceInfoLength1 = input.readByte();
                    if (instanceInfoLength1 != 0) {
                        var temp763 = resOpenBossInfoByTypeMessage["instanceInfo"] = {}; //副本信息
                        temp763["type"] = input.readVarInt(false); //类型
                        temp763["count"] = input.readVarInt(false); //总次数
                        temp763["surplusNum"] = input.readVarInt(false); //剩余次数
                        temp763["freshTime"] = input.readVarInt(false); //下次增加次数时间
                        temp763["freshBossTime"] = input.readVarInt(false); //下次刷新boss时间
                    }
                    this.sendNotif(cmd, resOpenBossInfoByTypeMessage);
                    break;
                case 30003 /* BossModelCMD.CMDResPlayerAllMonsterDropCountMessage */:
                    var beansLength1 = input.readShort();
                    var resPlayerAllMonsterDropCountMessage = [];
                    for (var beansi1 = 0; beansi1 < beansLength1; beansi1++) {
                        if (input.readByte() != 0) {
                            var temp764 = resPlayerAllMonsterDropCountMessage[beansi1] = {}; //次数信息
                            temp764["group"] = input.readVarInt(false); //组别
                            temp764["count"] = input.readVarInt(false); //获得次数
                            temp764["extraCount"] = input.readVarInt(false); //道具或者其他地方额外增加的总次数
                        }
                        else {
                            resPlayerAllMonsterDropCountMessage[beansi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resPlayerAllMonsterDropCountMessage);
                    break;
                case 30004 /* BossModelCMD.CMDResPlayerMonsterDropCountMessage */:
                    var beanLength1 = input.readByte();
                    if (beanLength1 != 0) {
                        var resPlayerMonsterDropCountMessage = {}; //更新次数
                        resPlayerMonsterDropCountMessage["group"] = input.readVarInt(false); //组别
                        resPlayerMonsterDropCountMessage["count"] = input.readVarInt(false); //获得次数
                        resPlayerMonsterDropCountMessage["extraCount"] = input.readVarInt(false); //道具或者其他地方额外增加的总次数
                    }
                    this.sendNotif(cmd, resPlayerMonsterDropCountMessage);
                    break;
                case 30015 /* BossModelCMD.CMDResBossActivityOpenMessage */:
                    var resBossActivityOpenMessage = {};
                    resBossActivityOpenMessage["type"] = input.readVarInt(false); //类型（前后端一致的枚举）
                    resBossActivityOpenMessage["instanceId"] = input.readVarInt(false); //副本id（instance表id或者duplicate表id）
                    resBossActivityOpenMessage["params"] = input.readVarInt(false); //参数
                    this.sendNotif(cmd, resBossActivityOpenMessage);
                    break;
                case 30017 /* BossModelCMD.CMDResBossStrategyLogMessage */:
                    var logListLength1 = input.readShort();
                    var resBossStrategyLogMessage = [];
                    for (var logListi1 = 0; logListi1 < logListLength1; logListi1++) {
                        if (input.readByte() != 0) {
                            var temp765 = resBossStrategyLogMessage[logListi1] = {}; //boss攻略中的日志
                            temp765["challengeTime"] = input.readLong(); //挑战时间
                            temp765["bossId"] = input.readVarInt(false); //bossId
                            temp765["mapName"] = input.readString(); //地图名称
                            temp765["itemId"] = input.readVarInt(false); //装备id
                        }
                        else {
                            resBossStrategyLogMessage[logListi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resBossStrategyLogMessage);
                    break;
                case 30019 /* BossModelCMD.CMDResMarkTopBossMessage */:
                    var resMarkTopBossMessage = input.readLong(); //cfg_boss_tiaozhan1中的id
                    this.sendNotif(cmd, resMarkTopBossMessage);
                    break;
            }
        };
        return BossModel;
    }(ModelBase));
    net.BossModel = BossModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:204
     */
    var BossOfferModel = /** @class */ (function (_super) {
        __extends(BossOfferModel, _super);
        function BossOfferModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(204002 /* BossOfferModelCMD.CMDResBossOfferInfoMessage */);
            thisObj.reg(204004 /* BossOfferModelCMD.CMDResBossOfferUpdateMessage */);
            thisObj.reg(204005 /* BossOfferModelCMD.CMDResBossOfferGlobalInfoMessage */);
            thisObj.reg(204007 /* BossOfferModelCMD.CMDResBossOfferGlobalUpdateMessage */);
            return _this;
        }
        BossOfferModel.ins = function () {
            if (!this._ins)
                this._ins = new BossOfferModel();
            return this._ins;
        };
        /**
         *
         * 请求信息
         *
         * sendReqBossOfferInfoMessage  204001
         */
        BossOfferModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(204001 /* BossOfferModelCMD.CMDReqBossOfferInfoMessage */, output, s);
        };
        /**
         *
         * 请求领奖
         * @param id
         *
         * sendReqBossOfferAcquireMessage  204003
         */
        BossOfferModel.prototype.send3 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(204003 /* BossOfferModelCMD.CMDReqBossOfferAcquireMessage */, output, s);
        };
        /**
         *
         *
         * @param id
         *
         * sendReqBossOfferAcquireGlobalMessage  204006
         */
        BossOfferModel.prototype.send6 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(204006 /* BossOfferModelCMD.CMDReqBossOfferAcquireGlobalMessage */, output, s);
        };
        BossOfferModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 204002 /* BossOfferModelCMD.CMDResBossOfferInfoMessage */:
                    var infoLength1 = input.readShort();
                    var resBossOfferInfoMessage = [];
                    for (var infoi1 = 0; infoi1 < infoLength1; infoi1++) {
                        if (input.readByte() != 0) {
                            var temp1037 = resBossOfferInfoMessage[infoi1] = {}; //
                            temp1037["id"] = input.readVarInt(false); //id
                            temp1037["progress"] = input.readVarInt(false); //进度
                            temp1037["acquired"] = input.readVarInt(false); //已领取次数
                            temp1037["killer"] = input.readString(); //击杀者
                        }
                        else {
                            resBossOfferInfoMessage[infoi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resBossOfferInfoMessage);
                    break;
                case 204004 /* BossOfferModelCMD.CMDResBossOfferUpdateMessage */:
                    var updateLength1 = input.readShort();
                    var resBossOfferUpdateMessage = [];
                    for (var updatei1 = 0; updatei1 < updateLength1; updatei1++) {
                        if (input.readByte() != 0) {
                            var temp1038 = resBossOfferUpdateMessage[updatei1] = {}; //
                            temp1038["id"] = input.readVarInt(false); //id
                            temp1038["progress"] = input.readVarInt(false); //进度
                            temp1038["acquired"] = input.readVarInt(false); //已领取次数
                            temp1038["killer"] = input.readString(); //击杀者
                        }
                        else {
                            resBossOfferUpdateMessage[updatei1] = null;
                        }
                    }
                    this.sendNotif(cmd, resBossOfferUpdateMessage);
                    break;
                case 204005 /* BossOfferModelCMD.CMDResBossOfferGlobalInfoMessage */:
                    var infoLength2 = input.readShort();
                    var resBossOfferGlobalInfoMessage = [];
                    for (var infoi2 = 0; infoi2 < infoLength2; infoi2++) {
                        if (input.readByte() != 0) {
                            var temp1039 = resBossOfferGlobalInfoMessage[infoi2] = {}; //
                            temp1039["id"] = input.readVarInt(false); //id
                            temp1039["progress"] = input.readVarInt(false); //进度
                            temp1039["acquired"] = input.readVarInt(false); //已领取次数
                            temp1039["killer"] = input.readString(); //击杀者
                        }
                        else {
                            resBossOfferGlobalInfoMessage[infoi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resBossOfferGlobalInfoMessage);
                    break;
                case 204007 /* BossOfferModelCMD.CMDResBossOfferGlobalUpdateMessage */:
                    var updateLength2 = input.readShort();
                    var resBossOfferGlobalUpdateMessage = [];
                    for (var updatei2 = 0; updatei2 < updateLength2; updatei2++) {
                        if (input.readByte() != 0) {
                            var temp1040 = resBossOfferGlobalUpdateMessage[updatei2] = {}; //
                            temp1040["id"] = input.readVarInt(false); //id
                            temp1040["progress"] = input.readVarInt(false); //进度
                            temp1040["acquired"] = input.readVarInt(false); //已领取次数
                            temp1040["killer"] = input.readString(); //击杀者
                        }
                        else {
                            resBossOfferGlobalUpdateMessage[updatei2] = null;
                        }
                    }
                    this.sendNotif(cmd, resBossOfferGlobalUpdateMessage);
                    break;
            }
        };
        return BossOfferModel;
    }(ModelBase));
    net.BossOfferModel = BossOfferModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:182
     */
    var BrawlingModel = /** @class */ (function (_super) {
        __extends(BrawlingModel, _super);
        function BrawlingModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(182001 /* BrawlingModelCMD.CMDResBrawlingInfoMessage */);
            return _this;
        }
        BrawlingModel.ins = function () {
            if (!this._ins)
                this._ins = new BrawlingModel();
            return this._ins;
        };
        BrawlingModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 182001 /* BrawlingModelCMD.CMDResBrawlingInfoMessage */:
                    var resBrawlingInfoMessage = {};
                    var beanListLength1 = input.readShort();
                    resBrawlingInfoMessage["beanList"] = [];
                    for (var beanListi1 = 0; beanListi1 < beanListLength1; beanListi1++) {
                        if (input.readByte() != 0) {
                            var temp724 = resBrawlingInfoMessage["beanList"][beanListi1] = {}; //排行榜
                            temp724["rid"] = input.readLong(); //玩家id
                            temp724["name"] = input.readString(); //玩家名字
                            temp724["score"] = input.readVarInt(false); //玩家得分
                            var rewardListLength1 = input.readShort();
                            temp724["rewardList"] = [];
                            for (var rewardListi1 = 0; rewardListi1 < rewardListLength1; rewardListi1++) {
                                if (input.readByte() != 0) {
                                    var temp725 = temp724["rewardList"][rewardListi1] = {}; //奖励
                                    temp725["itemId"] = input.readVarInt(false); //道具id
                                    temp725["count"] = input.readVarInt(false); //数量
                                }
                                else {
                                    temp724["rewardList"][rewardListi1] = null;
                                }
                            }
                        }
                        else {
                            resBrawlingInfoMessage["beanList"][beanListi1] = null;
                        }
                    }
                    resBrawlingInfoMessage["myScore"] = input.readVarInt(false); //我的积分
                    resBrawlingInfoMessage["myRank"] = input.readVarInt(false); //我的排名
                    this.sendNotif(cmd, resBrawlingInfoMessage);
                    break;
            }
        };
        return BrawlingModel;
    }(ModelBase));
    net.BrawlingModel = BrawlingModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:209
     */
    var BrotherModel = /** @class */ (function (_super) {
        __extends(BrotherModel, _super);
        function BrotherModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(209001 /* BrotherModelCMD.CMDResPvp2TeamScoreMessage */);
            thisObj.reg(209002 /* BrotherModelCMD.CMDResPvp2NextMatchTimeMessage */);
            thisObj.reg(209003 /* BrotherModelCMD.CMDResPvp2MatchTeamsMessage */);
            return _this;
        }
        BrotherModel.ins = function () {
            if (!this._ins)
                this._ins = new BrotherModel();
            return this._ins;
        };
        BrotherModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 209001 /* BrotherModelCMD.CMDResPvp2TeamScoreMessage */:
                    var teamsLength1 = input.readShort();
                    var resPvp2TeamScoreMessage = [];
                    for (var teamsi1 = 0; teamsi1 < teamsLength1; teamsi1++) {
                        if (input.readByte() != 0) {
                            var temp1295 = resPvp2TeamScoreMessage[teamsi1] = {}; //队伍列表
                            temp1295["teamId"] = input.readLong(); //玩家1
                            temp1295["rid1"] = input.readLong(); //玩家1
                            temp1295["rid2"] = input.readLong(); //玩家2
                            temp1295["name1"] = input.readString(); //玩家1
                            temp1295["name2"] = input.readString(); //玩家2
                            temp1295["hp1"] = input.readVarInt(false); //百分比，譬如数值20表示20%
                            temp1295["hp2"] = input.readVarInt(false); //百分比
                            temp1295["score"] = input.readVarInt(false); //积分
                        }
                        else {
                            resPvp2TeamScoreMessage[teamsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resPvp2TeamScoreMessage);
                    break;
                case 209002 /* BrotherModelCMD.CMDResPvp2NextMatchTimeMessage */:
                    var resPvp2NextMatchTimeMessage = input.readVarInt(false); //秒
                    this.sendNotif(cmd, resPvp2NextMatchTimeMessage);
                    break;
                case 209003 /* BrotherModelCMD.CMDResPvp2MatchTeamsMessage */:
                    var matchsLength1 = input.readShort();
                    var resPvp2MatchTeamsMessage = [];
                    for (var matchsi1 = 0; matchsi1 < matchsLength1; matchsi1++) {
                        if (input.readByte() != 0) {
                            var temp1296 = resPvp2MatchTeamsMessage[matchsi1] = {}; //队伍列表
                            temp1296["teamId"] = input.readLong(); //玩家1
                            temp1296["rid1"] = input.readLong(); //玩家1
                            temp1296["rid2"] = input.readLong(); //玩家2
                            temp1296["name1"] = input.readString(); //玩家1
                            temp1296["name2"] = input.readString(); //玩家2
                            temp1296["career1"] = input.readVarInt(false); //职业1
                            temp1296["career2"] = input.readVarInt(false); //职业2
                            temp1296["sex1"] = input.readVarInt(false); //性别1
                            temp1296["sex2"] = input.readVarInt(false); //性别2
                        }
                        else {
                            resPvp2MatchTeamsMessage[matchsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resPvp2MatchTeamsMessage);
                    break;
            }
        };
        return BrotherModel;
    }(ModelBase));
    net.BrotherModel = BrotherModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:70
     */
    var BufferModel = /** @class */ (function (_super) {
        __extends(BufferModel, _super);
        function BufferModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(70001 /* BufferModelCMD.CMDResRemoveBufferMessage */);
            thisObj.reg(70002 /* BufferModelCMD.CMDResAddBufferMessage */);
            thisObj.reg(70003 /* BufferModelCMD.CMDResUpdateBufferMessage */);
            thisObj.reg(70007 /* BufferModelCMD.CMDResDisplayBufferEffectMessage */);
            return _this;
        }
        BufferModel.ins = function () {
            if (!this._ins)
                this._ins = new BufferModel();
            return this._ins;
        };
        BufferModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 70001 /* BufferModelCMD.CMDResRemoveBufferMessage */:
                    var resRemoveBufferMessage = {};
                    resRemoveBufferMessage["bid"] = input.readVarInt(false); //id
                    resRemoveBufferMessage["lid"] = input.readLong(); //玩家id
                    resRemoveBufferMessage["buffId"] = input.readVarInt(false); //移除的buffid
                    this.sendNotif(cmd, resRemoveBufferMessage);
                    break;
                case 70002 /* BufferModelCMD.CMDResAddBufferMessage */:
                    var resAddBufferMessage = {};
                    resAddBufferMessage["bid"] = input.readVarInt(false); //id
                    resAddBufferMessage["lid"] = input.readLong(); //玩家id
                    resAddBufferMessage["ownerId"] = input.readLong(); //释放者id
                    resAddBufferMessage["buffId"] = input.readVarInt(false); //bufferId
                    resAddBufferMessage["createTime"] = input.readVarInt(false); //创建时间
                    resAddBufferMessage["endTime"] = input.readVarInt(false); //结束时间
                    resAddBufferMessage["buffCdEndTime"] = input.readVarInt(false); //buff冷却结束时间
                    resAddBufferMessage["overlying"] = input.readVarInt(false); //buff层数
                    resAddBufferMessage["param"] = input.readVarInt(false); //参数
                    resAddBufferMessage["ban"] = input.readBoolean(); //是否被冻结
                    this.sendNotif(cmd, resAddBufferMessage);
                    break;
                case 70003 /* BufferModelCMD.CMDResUpdateBufferMessage */:
                    var resUpdateBufferMessage = {};
                    resUpdateBufferMessage["bid"] = input.readVarInt(false); //id
                    resUpdateBufferMessage["lid"] = input.readLong(); //玩家id
                    resUpdateBufferMessage["buffId"] = input.readVarInt(false); //bufferId
                    resUpdateBufferMessage["endTime"] = input.readVarInt(false); //结束时间
                    resUpdateBufferMessage["overlying"] = input.readVarInt(false); //buff层数
                    resUpdateBufferMessage["param"] = input.readVarInt(false); //参数
                    resUpdateBufferMessage["ban"] = input.readBoolean(); //是否被冻结
                    this.sendNotif(cmd, resUpdateBufferMessage);
                    break;
                case 70007 /* BufferModelCMD.CMDResDisplayBufferEffectMessage */:
                    var resDisplayBufferEffectMessage = {};
                    resDisplayBufferEffectMessage["buffId"] = input.readVarInt(false); //buff配置id
                    resDisplayBufferEffectMessage["targetId"] = input.readLong(); //目标id
                    this.sendNotif(cmd, resDisplayBufferEffectMessage);
                    break;
            }
        };
        return BufferModel;
    }(ModelBase));
    net.BufferModel = BufferModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:197
     */
    var CampModel = /** @class */ (function (_super) {
        __extends(CampModel, _super);
        function CampModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(197002 /* CampModelCMD.CMDResCampMissionMessage */);
            thisObj.reg(197004 /* CampModelCMD.CMDResUpdateCampMessage */);
            thisObj.reg(197006 /* CampModelCMD.CMDResCampExchangeInfoMessage */);
            return _this;
        }
        CampModel.ins = function () {
            if (!this._ins)
                this._ins = new CampModel();
            return this._ins;
        };
        /**
         *
         * 请求训练营信息
         *
         * sendReqCampMissionMessage  197001
         */
        CampModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(197001 /* CampModelCMD.CMDReqCampMissionMessage */, output, s);
        };
        /**
         *
         * 领取训练营奖励
         * @param 训练营奖励id
         *
         * sendReqGetCampRewardMessage  197003
         */
        CampModel.prototype.send3 = function (rid, s) {
            var output = this.getO();
            output.writeVarInt(rid, false);
            this.send(197003 /* CampModelCMD.CMDReqGetCampRewardMessage */, output, s);
        };
        /**
         *
         * 请求兑换信息
         *
         * sendReqCampExchangeInfoMessage  197005
         */
        CampModel.prototype.send5 = function (s) {
            var output = this.getO();
            this.send(197005 /* CampModelCMD.CMDReqCampExchangeInfoMessage */, output, s);
        };
        /**
         *
         * 请求兑换
         * @param 兑换id
         * @param 兑换数量
         *
         * sendReqCampExchangeMessage  197007
         */
        CampModel.prototype.send7 = function (cid, num, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            output.writeVarInt(num, false);
            this.send(197007 /* CampModelCMD.CMDReqCampExchangeMessage */, output, s);
        };
        /**
         *
         * 请求提交训练营任务
         * @param 训练营id
         *
         * sendReqSubmitCampMissionMessage  197008
         */
        CampModel.prototype.send8 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(197008 /* CampModelCMD.CMDReqSubmitCampMissionMessage */, output, s);
        };
        /**
         *
         * 请求购买训练营礼包
         * @param 1-精英礼包 2-购买等级
         * @param 参数
         *
         * sendReqBuyCampGiftMessage  197009
         */
        CampModel.prototype.send9 = function (buyType, param, s) {
            var output = this.getO();
            output.writeVarInt(buyType, false);
            output.writeVarInt(param, false);
            this.send(197009 /* CampModelCMD.CMDReqBuyCampGiftMessage */, output, s);
        };
        CampModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 197002 /* CampModelCMD.CMDResCampMissionMessage */:
                    var resCampMissionMessage = {};
                    var missionListLength1 = input.readShort();
                    resCampMissionMessage["missionList"] = [];
                    for (var missionListi1 = 0; missionListi1 < missionListLength1; missionListi1++) {
                        if (input.readByte() != 0) {
                            var temp708 = resCampMissionMessage["missionList"][missionListi1] = {}; //任务信息
                            temp708["mid"] = input.readVarInt(false); //任务id
                            temp708["count"] = input.readVarInt(false); //完成次数
                            temp708["group"] = input.readVarInt(false); //完成次数
                            temp708["state"] = input.readVarInt(false); //状态
                        }
                        else {
                            resCampMissionMessage["missionList"][missionListi1] = null;
                        }
                    }
                    var rewardListLength1 = input.readShort();
                    resCampMissionMessage["rewardList"] = [];
                    for (var rewardListi1 = 0; rewardListi1 < rewardListLength1; rewardListi1++) {
                        if (input.readByte() != 0) {
                            var temp709 = resCampMissionMessage["rewardList"][rewardListi1] = {}; //奖励信息
                            temp709["rid"] = input.readVarInt(false); //奖励id
                            temp709["state"] = input.readBoolean(); //是否已领取 T:已领取 F:未领取
                        }
                        else {
                            resCampMissionMessage["rewardList"][rewardListi1] = null;
                        }
                    }
                    var rechargeTypeLength1 = input.readShort();
                    resCampMissionMessage["rechargeType"] = new Array(rechargeTypeLength1);
                    for (var rechargeTypei1 = 0; rechargeTypei1 < rechargeTypeLength1; rechargeTypei1++) {
                        resCampMissionMessage["rechargeType"][rechargeTypei1] = input.readVarInt(false); //计费点id
                    }
                    resCampMissionMessage["level"] = input.readVarInt(false); //成长等级
                    resCampMissionMessage["endTime"] = input.readVarInt(false); //本轮结束时间
                    resCampMissionMessage["param"] = input.readVarInt(false); //是否主动返回
                    this.sendNotif(cmd, resCampMissionMessage);
                    break;
                case 197004 /* CampModelCMD.CMDResUpdateCampMessage */:
                    var resUpdateCampMessage = {};
                    var missionListLength2 = input.readShort();
                    resUpdateCampMessage["missionList"] = [];
                    for (var missionListi2 = 0; missionListi2 < missionListLength2; missionListi2++) {
                        if (input.readByte() != 0) {
                            var temp710 = resUpdateCampMessage["missionList"][missionListi2] = {}; //任务信息
                            temp710["mid"] = input.readVarInt(false); //任务id
                            temp710["count"] = input.readVarInt(false); //完成次数
                            temp710["group"] = input.readVarInt(false); //完成次数
                            temp710["state"] = input.readVarInt(false); //状态
                        }
                        else {
                            resUpdateCampMessage["missionList"][missionListi2] = null;
                        }
                    }
                    var rewardListLength2 = input.readShort();
                    resUpdateCampMessage["rewardList"] = [];
                    for (var rewardListi2 = 0; rewardListi2 < rewardListLength2; rewardListi2++) {
                        if (input.readByte() != 0) {
                            var temp711 = resUpdateCampMessage["rewardList"][rewardListi2] = {}; //奖励信息
                            temp711["rid"] = input.readVarInt(false); //奖励id
                            temp711["state"] = input.readBoolean(); //是否已领取 T:已领取 F:未领取
                        }
                        else {
                            resUpdateCampMessage["rewardList"][rewardListi2] = null;
                        }
                    }
                    resUpdateCampMessage["level"] = input.readVarInt(false); //成长等级
                    var rechargeTypeLength2 = input.readShort();
                    resUpdateCampMessage["rechargeType"] = new Array(rechargeTypeLength2);
                    for (var rechargeTypei2 = 0; rechargeTypei2 < rechargeTypeLength2; rechargeTypei2++) {
                        resUpdateCampMessage["rechargeType"][rechargeTypei2] = input.readVarInt(false); //计费点id
                    }
                    this.sendNotif(cmd, resUpdateCampMessage);
                    break;
                case 197006 /* CampModelCMD.CMDResCampExchangeInfoMessage */:
                    var resCampExchangeInfoMessage = {};
                    var challengeBeanLength1 = input.readShort();
                    resCampExchangeInfoMessage["challengeBean"] = [];
                    for (var challengeBeani1 = 0; challengeBeani1 < challengeBeanLength1; challengeBeani1++) {
                        if (input.readByte() != 0) {
                            var temp712 = resCampExchangeInfoMessage["challengeBean"][challengeBeani1] = {}; //剩余兑换信息
                            temp712["cfgId"] = input.readVarInt(false); //兑换表id
                            temp712["leftCount"] = input.readVarInt(false); //剩余次数
                        }
                        else {
                            resCampExchangeInfoMessage["challengeBean"][challengeBeani1] = null;
                        }
                    }
                    resCampExchangeInfoMessage["update"] = input.readVarInt(false); //是否是更新
                    this.sendNotif(cmd, resCampExchangeInfoMessage);
                    break;
            }
        };
        return CampModel;
    }(ModelBase));
    net.CampModel = CampModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:6
     */
    var ChatModel = /** @class */ (function (_super) {
        __extends(ChatModel, _super);
        function ChatModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(6002 /* ChatModelCMD.CMDResChatMessage */);
            thisObj.reg(6006 /* ChatModelCMD.CMDResGMCommandMessage */);
            thisObj.reg(6007 /* ChatModelCMD.CMDResChatRecallMessage */);
            thisObj.reg(6009 /* ChatModelCMD.CMDResChatTimesMessage */);
            return _this;
        }
        ChatModel.ins = function () {
            if (!this._ins)
                this._ins = new ChatModel();
            return this._ins;
        };
        /**
         *
         * 请求聊天
         * @param 聊天频道
         * @param 聊天对象（仅私聊时有效）
         * @param 内容
         * @param
         *
         * sendReqChatMessage  6001
         */
        ChatModel.prototype.send1 = function (channel, target, content, items, coord, s) {
            var output = this.getO();
            output.writeVarInt(channel, false);
            output.writeLong(target);
            output.writeString(content);
            output.writeShort(items.length);
            for (var itemsi1 = 0; itemsi1 < items.length; itemsi1++) {
                output.writeLong(items[itemsi1]);
            }
            if (coord != null) {
                output.writeByte(1);
                output.writeVarInt(coord.mapID, false);
                output.writeVarInt(coord.x, false);
                output.writeVarInt(coord.y, false);
            }
            else {
                output.writeByte(0);
            }
            this.send(6001 /* ChatModelCMD.CMDReqChatMessage */, output, s);
        };
        /**
         *
         * GM命令
         * @param
         *
         * sendReqGMCommandMessage  6005
         */
        ChatModel.prototype.send5 = function (command, s) {
            var output = this.getO();
            output.writeString(command);
            this.send(6005 /* ChatModelCMD.CMDReqGMCommandMessage */, output, s);
        };
        /**
         *
         * 请求聊天次数信息
         *
         * sendReqChatTimesMessage  6008
         */
        ChatModel.prototype.send8 = function (s) {
            var output = this.getO();
            this.send(6008 /* ChatModelCMD.CMDReqChatTimesMessage */, output, s);
        };
        ChatModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 6002 /* ChatModelCMD.CMDResChatMessage */:
                    var chatLength1 = input.readByte();
                    if (chatLength1 != 0) {
                        var resChatMessage = {}; //
                        resChatMessage["channel"] = input.readVarInt(false); //聊天频道
                        resChatMessage["subChannel"] = input.readVarInt(false); //子分类(系统公告时会用到)
                        var sourceLength1 = input.readByte();
                        if (sourceLength1 != 0) {
                            var temp830 = resChatMessage["source"] = {}; //发送者信息
                            temp830["server"] = input.readVarInt(false); //服务器id
                            temp830["force"] = input.readVarInt(false); //势力
                            temp830["sendUid"] = input.readLong(); //发送者id
                            temp830["sendName"] = input.readString(); //发送者名字
                            var infosLength1 = input.readShort();
                            temp830["infos"] = [];
                            for (var infosi1 = 0; infosi1 < infosLength1; infosi1++) {
                                if (input.readByte() != 0) {
                                    var temp831 = temp830["infos"][infosi1] = {}; //平台信息
                                    temp831["key"] = input.readVarInt(false); //约定标识
                                    temp831["value"] = input.readVarInt(false); //值
                                }
                                else {
                                    temp830["infos"][infosi1] = null;
                                }
                            }
                        }
                        resChatMessage["target"] = input.readLong(); //聊天对象（仅私聊时有效）
                        resChatMessage["content"] = input.readString(); //聊天内容
                        var itemsLength1 = input.readShort();
                        resChatMessage["items"] = [];
                        for (var itemsi1 = 0; itemsi1 < itemsLength1; itemsi1++) {
                            if (input.readByte() != 0) {
                                var temp832 = resChatMessage["items"][itemsi1] = {}; //道具信息列表
                                temp832["uid"] = input.readLong(); //道具唯一id
                                temp832["cid"] = input.readVarInt(false); //道具配置id
                            }
                            else {
                                resChatMessage["items"][itemsi1] = null;
                            }
                        }
                        var coordLength1 = input.readByte();
                        if (coordLength1 != 0) {
                            var temp833 = resChatMessage["coord"] = {}; //坐标
                            temp833["mapID"] = input.readVarInt(false); //
                            temp833["x"] = input.readVarInt(false); //
                            temp833["y"] = input.readVarInt(false); //
                        }
                    }
                    this.sendNotif(cmd, resChatMessage);
                    break;
                case 6006 /* ChatModelCMD.CMDResGMCommandMessage */:
                    var resGMCommandMessage = input.readString(); //执行结果
                    this.sendNotif(cmd, resGMCommandMessage);
                    break;
                case 6007 /* ChatModelCMD.CMDResChatRecallMessage */:
                    var resChatRecallMessage = {};
                    resChatRecallMessage["senderUid"] = input.readLong(); //发送者uid
                    resChatRecallMessage["content"] = input.readString(); //消息内容
                    this.sendNotif(cmd, resChatRecallMessage);
                    break;
                case 6009 /* ChatModelCMD.CMDResChatTimesMessage */:
                    var timesLength1 = input.readShort();
                    var resChatTimesMessage = [];
                    for (var timesi1 = 0; timesi1 < timesLength1; timesi1++) {
                        if (input.readByte() != 0) {
                            var temp834 = resChatTimesMessage[timesi1] = {}; //次数  频道-次数
                            temp834["id"] = input.readVarInt(false); //
                            temp834["value"] = input.readVarInt(false); //
                        }
                        else {
                            resChatTimesMessage[timesi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resChatTimesMessage);
                    break;
            }
        };
        return ChatModel;
    }(ModelBase));
    net.ChatModel = ChatModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:192
     */
    var CollectModel = /** @class */ (function (_super) {
        __extends(CollectModel, _super);
        function CollectModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(192002 /* CollectModelCMD.CMDResCollectMessage */);
            thisObj.reg(192004 /* CollectModelCMD.CMDResCollectInfoMessage */);
            thisObj.reg(192005 /* CollectModelCMD.CMDResCollectAcquiredMessage */);
            return _this;
        }
        CollectModel.ins = function () {
            if (!this._ins)
                this._ins = new CollectModel();
            return this._ins;
        };
        /**
         *
         * null
         * @param
         * @param 选择花费
         *
         * sendReqCollectMessage  192001
         */
        CollectModel.prototype.send1 = function (uid, cost, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(cost, false);
            this.send(192001 /* CollectModelCMD.CMDReqCollectMessage */, output, s);
        };
        /**
         *
         * 请求采集次数
         *
         * sendReqCollectInfoMessage  192003
         */
        CollectModel.prototype.send3 = function (s) {
            var output = this.getO();
            this.send(192003 /* CollectModelCMD.CMDReqCollectInfoMessage */, output, s);
        };
        CollectModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 192002 /* CollectModelCMD.CMDResCollectMessage */:
                    var resCollectMessage = {};
                    resCollectMessage["mid"] = input.readVarInt(false); //采集的怪物id
                    resCollectMessage["uid"] = input.readLong(); //采集对象唯一id
                    resCollectMessage["timeBegin"] = input.readVarInt(false); //
                    resCollectMessage["timeEnd"] = input.readVarInt(false); //采集结束时间
                    resCollectMessage["success"] = input.readBoolean(); //是否采集成功
                    var acquiresLength1 = input.readShort();
                    resCollectMessage["acquires"] = [];
                    for (var acquiresi1 = 0; acquiresi1 < acquiresLength1; acquiresi1++) {
                        if (input.readByte() != 0) {
                            var temp844 = resCollectMessage["acquires"][acquiresi1] = {}; //成功后的奖励展示
                            temp844["itemId"] = input.readVarInt(false); //config id
                            temp844["itemCount"] = input.readVarInt(false); //item count
                        }
                        else {
                            resCollectMessage["acquires"][acquiresi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resCollectMessage);
                    break;
                case 192004 /* CollectModelCMD.CMDResCollectInfoMessage */:
                    var collectedLength1 = input.readShort();
                    var resCollectInfoMessage = [];
                    for (var collectedi1 = 0; collectedi1 < collectedLength1; collectedi1++) {
                        if (input.readByte() != 0) {
                            var temp845 = resCollectInfoMessage[collectedi1] = {}; //
                            temp845["cate"] = input.readVarInt(false); //类型
                            temp845["times"] = input.readVarInt(false); //已经采集的次数
                        }
                        else {
                            resCollectInfoMessage[collectedi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resCollectInfoMessage);
                    break;
                case 192005 /* CollectModelCMD.CMDResCollectAcquiredMessage */:
                    var resCollectAcquiredMessage = {};
                    resCollectAcquiredMessage["type"] = input.readVarInt(false); //0收 1抢
                    var acquiredLength1 = input.readShort();
                    resCollectAcquiredMessage["acquired"] = [];
                    for (var acquiredi1 = 0; acquiredi1 < acquiredLength1; acquiredi1++) {
                        if (input.readByte() != 0) {
                            var temp846 = resCollectAcquiredMessage["acquired"][acquiredi1] = {}; //
                            temp846["itemId"] = input.readVarInt(false); //config id
                            temp846["itemCount"] = input.readVarInt(false); //item count
                        }
                        else {
                            resCollectAcquiredMessage["acquired"][acquiredi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resCollectAcquiredMessage);
                    break;
            }
        };
        return CollectModel;
    }(ModelBase));
    net.CollectModel = CollectModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:31
     */
    var CompoundModel = /** @class */ (function (_super) {
        __extends(CompoundModel, _super);
        function CompoundModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(31002 /* CompoundModelCMD.CMDResCompoundMessage */);
            thisObj.reg(31004 /* CompoundModelCMD.CMDResBagComPoundResultMessage */);
            thisObj.reg(31007 /* CompoundModelCMD.CMDResGossipCompoundResultMessage */);
            thisObj.reg(31008 /* CompoundModelCMD.CMDResCompoundSpecialItemInfosMessage */);
            thisObj.reg(31011 /* CompoundModelCMD.CMDResCompoundTimesMessage */);
            thisObj.reg(31013 /* CompoundModelCMD.CMDResShieldCompoundResultMessage */);
            thisObj.reg(31015 /* CompoundModelCMD.CMDResShieldCompoundTimesMessage */);
            thisObj.reg(31017 /* CompoundModelCMD.CMDResAutoDecomposeTimeMessage */);
            return _this;
        }
        CompoundModel.ins = function () {
            if (!this._ins)
                this._ins = new CompoundModel();
            return this._ins;
        };
        /**
         *
         * 请求合成道具
         * @param cfg_compose配置id
         *
         * sendReqCompoundMessage  31001
         */
        CompoundModel.prototype.send1 = function (configId, itemIdList, s) {
            var output = this.getO();
            output.writeVarInt(configId, false);
            output.writeShort(itemIdList.length);
            for (var itemIdListi1 = 0; itemIdListi1 < itemIdList.length; itemIdListi1++) {
                output.writeVarInt(itemIdList[itemIdListi1], false);
            }
            this.send(31001 /* CompoundModelCMD.CMDReqCompoundMessage */, output, s);
        };
        /**
         *
         * 背包合成
         * @param cfg_compound配置id
         * @param 一次合成的数量
         * @param 1 快捷合成
         * @param 选中角色  1主角 2元神
         *
         * sendReqBagCompoundMessage  31003
         */
        CompoundModel.prototype.send3 = function (configId, count, borrow, where, s) {
            var output = this.getO();
            output.writeVarInt(configId, false);
            output.writeVarInt(count, false);
            output.writeVarInt(borrow, false);
            output.writeVarInt(where, false);
            this.send(31003 /* CompoundModelCMD.CMDReqBagCompoundMessage */, output, s);
        };
        /**
         *
         * 八卦装备合成
         * @param cfg_compose配置id
         *
         * sendReqGossipCompoundMessage  31006
         */
        CompoundModel.prototype.send6 = function (configId, itemIdList, s) {
            var output = this.getO();
            output.writeVarInt(configId, false);
            output.writeShort(itemIdList.length);
            for (var itemIdListi2 = 0; itemIdListi2 < itemIdList.length; itemIdListi2++) {
                output.writeLong(itemIdList[itemIdListi2]);
            }
            this.send(31006 /* CompoundModelCMD.CMDReqGossipCompoundMessage */, output, s);
        };
        /**
         *
         * 请求特殊道具合成信息
         *
         * sendReqCompoundSpecialItemInfosMessage  31009
         */
        CompoundModel.prototype.send9 = function (s) {
            var output = this.getO();
            this.send(31009 /* CompoundModelCMD.CMDReqCompoundSpecialItemInfosMessage */, output, s);
        };
        /**
         *
         * 查询合成次数
         * @param 合成配置id
         *
         * sendReqCompoundTimesMessage  31010
         */
        CompoundModel.prototype.send10 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(31010 /* CompoundModelCMD.CMDReqCompoundTimesMessage */, output, s);
        };
        /**
         *
         * 请求盾牌合成
         * @param cfg_compose配置id
         *
         * sendReqShieldCompoundMessage  31012
         */
        CompoundModel.prototype.send12 = function (configId, addItemList, s) {
            var output = this.getO();
            output.writeVarInt(configId, false);
            output.writeShort(addItemList.length);
            for (var addItemListi1 = 0; addItemListi1 < addItemList.length; addItemListi1++) {
                output.writeLong(addItemList[addItemListi1]);
            }
            this.send(31012 /* CompoundModelCMD.CMDReqShieldCompoundMessage */, output, s);
        };
        /**
         *
         * 查询合成次数
         * @param 合成配置id
         *
         * sendReqShieldCompoundTimesMessage  31014
         */
        CompoundModel.prototype.send14 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(31014 /* CompoundModelCMD.CMDReqShieldCompoundTimesMessage */, output, s);
        };
        /**
         *
         * 查询自动分解时间
         *
         * sendReqAutoDecomposeTimeMessage  31016
         */
        CompoundModel.prototype.send16 = function (s) {
            var output = this.getO();
            this.send(31016 /* CompoundModelCMD.CMDReqAutoDecomposeTimeMessage */, output, s);
        };
        /**
         *
         * 请求自动分解
         * @param 分解itemId
         *
         * sendReqAutoDecomposeMessage  31018
         */
        CompoundModel.prototype.send18 = function (itemId, s) {
            var output = this.getO();
            output.writeVarInt(itemId, false);
            this.send(31018 /* CompoundModelCMD.CMDReqAutoDecomposeMessage */, output, s);
        };
        CompoundModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 31002 /* CompoundModelCMD.CMDResCompoundMessage */:
                    var resCompoundMessage = {};
                    resCompoundMessage["configId"] = input.readVarInt(false); //cfg_compose配置id
                    var itemIdListLength1 = input.readShort();
                    resCompoundMessage["itemIdList"] = new Array(itemIdListLength1);
                    for (var itemIdListi1 = 0; itemIdListi1 < itemIdListLength1; itemIdListi1++) {
                        resCompoundMessage["itemIdList"][itemIdListi1] = input.readVarInt(false); //合成道具id列表
                    }
                    this.sendNotif(cmd, resCompoundMessage);
                    break;
                case 31004 /* CompoundModelCMD.CMDResBagComPoundResultMessage */:
                    var resBagComPoundResultMessage = {};
                    resBagComPoundResultMessage["succedCound"] = input.readVarInt(false); //成功合成数量
                    resBagComPoundResultMessage["cfgId"] = input.readVarInt(false); //合成id
                    resBagComPoundResultMessage["times"] = input.readVarInt(false); //合成次数
                    this.sendNotif(cmd, resBagComPoundResultMessage);
                    break;
                case 31007 /* CompoundModelCMD.CMDResGossipCompoundResultMessage */:
                    var resGossipCompoundResultMessage = input.readVarInt(false); //合成后新八卦装备id
                    this.sendNotif(cmd, resGossipCompoundResultMessage);
                    break;
                case 31008 /* CompoundModelCMD.CMDResCompoundSpecialItemInfosMessage */:
                    var infoBeanLength1 = input.readShort();
                    var resCompoundSpecialItemInfosMessage = [];
                    for (var infoBeani1 = 0; infoBeani1 < infoBeanLength1; infoBeani1++) {
                        if (input.readByte() != 0) {
                            var temp601 = resCompoundSpecialItemInfosMessage[infoBeani1] = {}; //玩家合成道具信息
                            temp601["time"] = input.readVarInt(false); //合成时间(s)
                            temp601["roleName"] = input.readString(); //玩家名
                            temp601["itemId"] = input.readVarInt(false); //合成道具id
                        }
                        else {
                            resCompoundSpecialItemInfosMessage[infoBeani1] = null;
                        }
                    }
                    this.sendNotif(cmd, resCompoundSpecialItemInfosMessage);
                    break;
                case 31011 /* CompoundModelCMD.CMDResCompoundTimesMessage */:
                    var resCompoundTimesMessage = {};
                    resCompoundTimesMessage["cid"] = input.readVarInt(false); //合成配置id
                    resCompoundTimesMessage["times"] = input.readVarInt(false); //合成配置id
                    this.sendNotif(cmd, resCompoundTimesMessage);
                    break;
                case 31013 /* CompoundModelCMD.CMDResShieldCompoundResultMessage */:
                    var resShieldCompoundResultMessage = {};
                    resShieldCompoundResultMessage["configId"] = input.readVarInt(false); //配置id
                    resShieldCompoundResultMessage["times"] = input.readVarInt(false); //合成次数
                    resShieldCompoundResultMessage["isSuc"] = input.readVarInt(false); //合成结果 1-成功 0-失败
                    this.sendNotif(cmd, resShieldCompoundResultMessage);
                    break;
                case 31015 /* CompoundModelCMD.CMDResShieldCompoundTimesMessage */:
                    var resShieldCompoundTimesMessage = {};
                    resShieldCompoundTimesMessage["cid"] = input.readVarInt(false); //合成配置id
                    resShieldCompoundTimesMessage["times"] = input.readVarInt(false); //次数
                    this.sendNotif(cmd, resShieldCompoundTimesMessage);
                    break;
                case 31017 /* CompoundModelCMD.CMDResAutoDecomposeTimeMessage */:
                    var resAutoDecomposeTimeMessage = input.readLong(); //可用时间
                    this.sendNotif(cmd, resAutoDecomposeTimeMessage);
                    break;
            }
        };
        return CompoundModel;
    }(ModelBase));
    net.CompoundModel = CompoundModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:21
     */
    var CountModel = /** @class */ (function (_super) {
        __extends(CountModel, _super);
        function CountModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(21005 /* CountModelCMD.CMDResKillCountMessage */);
            return _this;
        }
        CountModel.ins = function () {
            if (!this._ins)
                this._ins = new CountModel();
            return this._ins;
        };
        CountModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 21005 /* CountModelCMD.CMDResKillCountMessage */:
                    var resKillCountMessage = input.readVarInt(false); //当前总击杀次数
                    this.sendNotif(cmd, resKillCountMessage);
                    break;
            }
        };
        return CountModel;
    }(ModelBase));
    net.CountModel = CountModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:84
     */
    var CrossModel = /** @class */ (function (_super) {
        __extends(CrossModel, _super);
        function CrossModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(84002 /* CrossModelCMD.CMDResCrossInfoMessage */);
            thisObj.reg(84003 /* CrossModelCMD.CMDResCrossTaskUpdateMessage */);
            thisObj.reg(84004 /* CrossModelCMD.CMDResCrossExpireUpdateMessage */);
            thisObj.reg(84006 /* CrossModelCMD.CMDResCrossRewardAcquireMessage */);
            thisObj.reg(84007 /* CrossModelCMD.CMDResGroupStatusChangeMessage */);
            thisObj.reg(84012 /* CrossModelCMD.CMDResCrossAssignInfoMessage */);
            return _this;
        }
        CrossModel.ins = function () {
            if (!this._ins)
                this._ins = new CrossModel();
            return this._ins;
        };
        /**
         *
         * null
         *
         * sendReqCrossInfoMessage  84001
         */
        CrossModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(84001 /* CrossModelCMD.CMDReqCrossInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取奖励
         * @param
         *
         * sendReqCrossRewardAcquireMessage  84005
         */
        CrossModel.prototype.send5 = function (taskId, s) {
            var output = this.getO();
            output.writeVarInt(taskId, false);
            this.send(84005 /* CrossModelCMD.CMDReqCrossRewardAcquireMessage */, output, s);
        };
        /**
         *
         * 请求跨服分配信息
         *
         * sendReqCrossAssignInfoMessage  84011
         */
        CrossModel.prototype.send11 = function (s) {
            var output = this.getO();
            this.send(84011 /* CrossModelCMD.CMDReqCrossAssignInfoMessage */, output, s);
        };
        /**
         *
         * 请求跨服分配信息
         * @param 选择分组
         *
         * sendReqCrossAssignAssignMessage  84013
         */
        CrossModel.prototype.send13 = function (assign, s) {
            var output = this.getO();
            output.writeVarInt(assign, false);
            this.send(84013 /* CrossModelCMD.CMDReqCrossAssignAssignMessage */, output, s);
        };
        CrossModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 84002 /* CrossModelCMD.CMDResCrossInfoMessage */:
                    var resCrossInfoMessage = {};
                    var taskLength1 = input.readByte();
                    if (taskLength1 != 0) {
                        var temp579 = resCrossInfoMessage["task"] = {}; //任务信息
                        temp579["taskId"] = input.readVarInt(false); //任务id
                        temp579["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                        temp579["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                        var goalDataListLength1 = input.readShort();
                        temp579["goalDataList"] = [];
                        for (var goalDataListi1 = 0; goalDataListi1 < goalDataListLength1; goalDataListi1++) {
                            if (input.readByte() != 0) {
                                var temp580 = temp579["goalDataList"][goalDataListi1] = {}; //目标数据
                                temp580["goalId"] = input.readVarInt(false); //目标id
                                temp580["progress"] = input.readVarInt(false); //当前完成进度
                                temp580["goalType"] = input.readVarInt(false); //目标类型
                                temp580["goalCount"] = input.readVarInt(false); //目标需求数量
                                var goalParamsLength1 = input.readShort();
                                temp580["goalParams"] = new Array(goalParamsLength1);
                                for (var goalParamsi1 = 0; goalParamsi1 < goalParamsLength1; goalParamsi1++) {
                                    temp580["goalParams"][goalParamsi1] = input.readVarInt(false); //目标参数
                                }
                            }
                            else {
                                temp579["goalDataList"][goalDataListi1] = null;
                            }
                        }
                    }
                    resCrossInfoMessage["expire"] = input.readVarInt(false); //跨服过期时间 时间戳
                    var serversLength1 = input.readShort();
                    resCrossInfoMessage["servers"] = [];
                    for (var serversi1 = 0; serversi1 < serversLength1; serversi1++) {
                        if (input.readByte() != 0) {
                            var temp581 = resCrossInfoMessage["servers"][serversi1] = {}; //服务器列表
                            temp581["serverId"] = input.readVarInt(false); //服务器id
                            temp581["time"] = input.readVarInt(false); //连接时间 时间戳
                        }
                        else {
                            resCrossInfoMessage["servers"][serversi1] = null;
                        }
                    }
                    var rewardsLength1 = input.readShort();
                    resCrossInfoMessage["rewards"] = [];
                    for (var rewardsi1 = 0; rewardsi1 < rewardsLength1; rewardsi1++) {
                        if (input.readByte() != 0) {
                            var temp582 = resCrossInfoMessage["rewards"][rewardsi1] = {}; //奖励领取状态
                            temp582["taskId"] = input.readVarInt(false); //任务id
                            temp582["status"] = input.readVarInt(false); //领取状态 0未领取
                        }
                        else {
                            resCrossInfoMessage["rewards"][rewardsi1] = null;
                        }
                    }
                    resCrossInfoMessage["group"] = input.readBoolean(); //大跨服是否开启
                    this.sendNotif(cmd, resCrossInfoMessage);
                    break;
                case 84003 /* CrossModelCMD.CMDResCrossTaskUpdateMessage */:
                    var taskLength2 = input.readByte();
                    if (taskLength2 != 0) {
                        var resCrossTaskUpdateMessage = {}; //任务信息
                        resCrossTaskUpdateMessage["taskId"] = input.readVarInt(false); //任务id
                        resCrossTaskUpdateMessage["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                        resCrossTaskUpdateMessage["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                        var goalDataListLength2 = input.readShort();
                        resCrossTaskUpdateMessage["goalDataList"] = [];
                        for (var goalDataListi2 = 0; goalDataListi2 < goalDataListLength2; goalDataListi2++) {
                            if (input.readByte() != 0) {
                                var temp583 = resCrossTaskUpdateMessage["goalDataList"][goalDataListi2] = {}; //目标数据
                                temp583["goalId"] = input.readVarInt(false); //目标id
                                temp583["progress"] = input.readVarInt(false); //当前完成进度
                                temp583["goalType"] = input.readVarInt(false); //目标类型
                                temp583["goalCount"] = input.readVarInt(false); //目标需求数量
                                var goalParamsLength2 = input.readShort();
                                temp583["goalParams"] = new Array(goalParamsLength2);
                                for (var goalParamsi2 = 0; goalParamsi2 < goalParamsLength2; goalParamsi2++) {
                                    temp583["goalParams"][goalParamsi2] = input.readVarInt(false); //目标参数
                                }
                            }
                            else {
                                resCrossTaskUpdateMessage["goalDataList"][goalDataListi2] = null;
                            }
                        }
                    }
                    this.sendNotif(cmd, resCrossTaskUpdateMessage);
                    break;
                case 84004 /* CrossModelCMD.CMDResCrossExpireUpdateMessage */:
                    var resCrossExpireUpdateMessage = input.readVarInt(false); //跨服过期时间 时间戳
                    this.sendNotif(cmd, resCrossExpireUpdateMessage);
                    break;
                case 84006 /* CrossModelCMD.CMDResCrossRewardAcquireMessage */:
                    var statusLength1 = input.readByte();
                    if (statusLength1 != 0) {
                        var resCrossRewardAcquireMessage = {}; //
                        resCrossRewardAcquireMessage["taskId"] = input.readVarInt(false); //任务id
                        resCrossRewardAcquireMessage["status"] = input.readVarInt(false); //领取状态 0未领取
                    }
                    this.sendNotif(cmd, resCrossRewardAcquireMessage);
                    break;
                case 84007 /* CrossModelCMD.CMDResGroupStatusChangeMessage */:
                    var resGroupStatusChangeMessage = input.readBoolean(); //大跨服是否开启
                    this.sendNotif(cmd, resGroupStatusChangeMessage);
                    break;
                case 84012 /* CrossModelCMD.CMDResCrossAssignInfoMessage */:
                    var serversLength2 = input.readShort();
                    var resCrossAssignInfoMessage = [];
                    for (var serversi2 = 0; serversi2 < serversLength2; serversi2++) {
                        if (input.readByte() != 0) {
                            var temp584 = resCrossAssignInfoMessage[serversi2] = {}; //服务器及选择列表
                            temp584["server"] = input.readVarInt(false); //服务器id
                            temp584["assign"] = input.readVarInt(false); //当前分配
                            temp584["time"] = input.readVarInt(false); //分配时间（时间戳）
                        }
                        else {
                            resCrossAssignInfoMessage[serversi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resCrossAssignInfoMessage);
                    break;
            }
        };
        return CrossModel;
    }(ModelBase));
    net.CrossModel = CrossModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:110
     */
    var CureModel = /** @class */ (function (_super) {
        __extends(CureModel, _super);
        function CureModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(110002 /* CureModelCMD.CMDResOpenCurePanelMessage */);
            thisObj.reg(110004 /* CureModelCMD.CMDResCureCdMessage */);
            return _this;
        }
        CureModel.ins = function () {
            if (!this._ins)
                this._ins = new CureModel();
            return this._ins;
        };
        /**
         *
         * 请求治疗面板
         *
         * sendReqOpenCurePanelMessage  110001
         */
        CureModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(110001 /* CureModelCMD.CMDReqOpenCurePanelMessage */, output, s);
        };
        /**
         *
         * 请求治疗
         * @param 治疗类型 1金币2元宝
         *
         * sendReqCureMessage  110003
         */
        CureModel.prototype.send3 = function (type, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            this.send(110003 /* CureModelCMD.CMDReqCureMessage */, output, s);
        };
        CureModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 110002 /* CureModelCMD.CMDResOpenCurePanelMessage */:
                    var cureBeansLength1 = input.readShort();
                    var resOpenCurePanelMessage = [];
                    for (var cureBeansi1 = 0; cureBeansi1 < cureBeansLength1; cureBeansi1++) {
                        if (input.readByte() != 0) {
                            var temp1051 = resOpenCurePanelMessage[cureBeansi1] = {}; //治疗信息
                            temp1051["type"] = input.readVarInt(false); //治疗类型 1金币2元宝
                            temp1051["count"] = input.readVarInt(false); //已使用次数
                            temp1051["cdEndTime"] = input.readVarInt(false); //cd结束时间(时间戳秒)
                        }
                        else {
                            resOpenCurePanelMessage[cureBeansi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resOpenCurePanelMessage);
                    break;
                case 110004 /* CureModelCMD.CMDResCureCdMessage */:
                    var cureBeanLength1 = input.readByte();
                    if (cureBeanLength1 != 0) {
                        var resCureCdMessage = {}; //治疗信息
                        resCureCdMessage["type"] = input.readVarInt(false); //治疗类型 1金币2元宝
                        resCureCdMessage["count"] = input.readVarInt(false); //已使用次数
                        resCureCdMessage["cdEndTime"] = input.readVarInt(false); //cd结束时间(时间戳秒)
                    }
                    this.sendNotif(cmd, resCureCdMessage);
                    break;
            }
        };
        return CureModel;
    }(ModelBase));
    net.CureModel = CureModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:175
     */
    var DailyModel = /** @class */ (function (_super) {
        __extends(DailyModel, _super);
        function DailyModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(175002 /* DailyModelCMD.CMDResDailyTimedScheduleMessage */);
            thisObj.reg(175004 /* DailyModelCMD.CMDResDailyTimedOpensMessage */);
            thisObj.reg(175006 /* DailyModelCMD.CMDResDailyTimesInfoMessage */);
            thisObj.reg(175008 /* DailyModelCMD.CMDResDailyTimedNextTimeMessage */);
            thisObj.reg(175009 /* DailyModelCMD.CMDResDailyTimesUpdateMessage */);
            thisObj.reg(175011 /* DailyModelCMD.CMDResDailyColorfulTaskInfoMessage */);
            thisObj.reg(175022 /* DailyModelCMD.CMDResDailyTimedSunsetRaceTipsMessage */);
            thisObj.reg(175024 /* DailyModelCMD.CMDResDailyTimedSunsetRaceRankingMessage */);
            thisObj.reg(175032 /* DailyModelCMD.CMDResDailyBossChallengeInfoMessage */);
            thisObj.reg(175041 /* DailyModelCMD.CMDResDailyTimedRingAppearanceMessage */);
            thisObj.reg(175043 /* DailyModelCMD.CMDResSevenDragonBallMessage */);
            thisObj.reg(175062 /* DailyModelCMD.CMDResDailyTimedUnionBossRankingMessage */);
            thisObj.reg(175063 /* DailyModelCMD.CMDResDailyUnionBossSettleMessage */);
            thisObj.reg(175074 /* DailyModelCMD.CMDResDailyTimedUnionTrialAssignMessage */);
            thisObj.reg(175075 /* DailyModelCMD.CMDResDailyTimedUnionTrialTipsMessage */);
            thisObj.reg(175076 /* DailyModelCMD.CMDResDailyTimedUnionTrialRankingsMessage */);
            thisObj.reg(175077 /* DailyModelCMD.CMDResDailyTimedUnionTrialScoreMessage */);
            thisObj.reg(175078 /* DailyModelCMD.CMDResDailyTimedUnionTrialSettleMessage */);
            thisObj.reg(175112 /* DailyModelCMD.CMDResDailyTimedUnionTrialAssignsMessage */);
            thisObj.reg(175114 /* DailyModelCMD.CMDResDailyTimedUnionTrialUnionsMessage */);
            thisObj.reg(175082 /* DailyModelCMD.CMDResDailyTimedUnionSnatchRankingMessage */);
            thisObj.reg(175083 /* DailyModelCMD.CMDResDailyTimedUnionSnatchTipsMessage */);
            thisObj.reg(175079 /* DailyModelCMD.CMDResDailyTimedUnionSnatchSettleMessage */);
            thisObj.reg(175084 /* DailyModelCMD.CMDResDailyTimedShaBaKeInfoMessage */);
            thisObj.reg(175086 /* DailyModelCMD.CMDResDailyTimedShaBaKeRewardMessage */);
            thisObj.reg(175087 /* DailyModelCMD.CMDResDailyTimedShaBaKeUnionChangeMessage */);
            thisObj.reg(175088 /* DailyModelCMD.CMDResDailyTimedShaBaKeRankChangeMessage */);
            thisObj.reg(175089 /* DailyModelCMD.CMDResDailyTimedShaBaKeScoreChangeMessage */);
            thisObj.reg(175091 /* DailyModelCMD.CMDResDailyTimedShaBaKePanelInfoMessage */);
            thisObj.reg(175092 /* DailyModelCMD.CMDResDailyTimedShaBaKeSettleMessage */);
            thisObj.reg(175094 /* DailyModelCMD.CMDResDailyTimedShaBaKePoolMessage */);
            thisObj.reg(175100 /* DailyModelCMD.CMDResDailyTimedQXTMTipsMessage */);
            thisObj.reg(175101 /* DailyModelCMD.CMDResDailyTimedQXTMSettleMessage */);
            thisObj.reg(175103 /* DailyModelCMD.CMDResDailyTimedQXTMDonatePanelMessage */);
            thisObj.reg(175121 /* DailyModelCMD.CMDResDailyTimedMonsterStormTipsMessage */);
            thisObj.reg(175127 /* DailyModelCMD.CMDResGoldCityUnionInfoMessage */);
            thisObj.reg(175129 /* DailyModelCMD.CMDResDailyTimedSuperGoldCityPanelInfoMessage */);
            thisObj.reg(175131 /* DailyModelCMD.CMDResDailyTimedGoldCityPanelInfoMessage */);
            thisObj.reg(175132 /* DailyModelCMD.CMDResDailyTimedGoldCityEnterMessage */);
            thisObj.reg(175133 /* DailyModelCMD.CMDResDailyTimedGoldCityUnionChangeMessage */);
            thisObj.reg(175134 /* DailyModelCMD.CMDResDailyTimedGoldCityRankingMessage */);
            thisObj.reg(175135 /* DailyModelCMD.CMDResDailyTimedGoldCityRobotChangeMessage */);
            thisObj.reg(175136 /* DailyModelCMD.CMDResGoldCityChairMessage */);
            thisObj.reg(175138 /* DailyModelCMD.CMDResGoldCityBanCountMessage */);
            thisObj.reg(175139 /* DailyModelCMD.CMDResBossTowerHpMessage */);
            thisObj.reg(175152 /* DailyModelCMD.CMDResDailyTimedAncientMazeInfoMessage */);
            thisObj.reg(175153 /* DailyModelCMD.CMDResDailyTimedAncientMazePostMessage */);
            thisObj.reg(175502 /* DailyModelCMD.CMDResDailyRetrieveInfoMessage */);
            thisObj.reg(175161 /* DailyModelCMD.CMDResDailyTimedEscortInfoMessage */);
            thisObj.reg(175162 /* DailyModelCMD.CMDResDailyTimedEscortStatusMessage */);
            thisObj.reg(175163 /* DailyModelCMD.CMDResDailyTimedEscortRewardMessage */);
            thisObj.reg(175164 /* DailyModelCMD.CMDResDailyTimedEscortBuffInfoMessage */);
            thisObj.reg(175166 /* DailyModelCMD.CMDResDailyTimedUndergroundSettleMessage */);
            thisObj.reg(175173 /* DailyModelCMD.CMDResDailySalaryInfoMessage */);
            thisObj.reg(175185 /* DailyModelCMD.CMDResDailyResonanceChallengeInfoMessage */);
            thisObj.reg(175186 /* DailyModelCMD.CMDResDailyResonanceChallengeSettleMessage */);
            thisObj.reg(175193 /* DailyModelCMD.CMDResPurgeMapInfoMessage */);
            thisObj.reg(175195 /* DailyModelCMD.CMDResPurgeInfoMessage */);
            thisObj.reg(175196 /* DailyModelCMD.CMDResPurgeEndMessage */);
            thisObj.reg(175197 /* DailyModelCMD.CMDResPurgeReadyInfoMessage */);
            thisObj.reg(175198 /* DailyModelCMD.CMDResPurgeEnterMessage */);
            thisObj.reg(175200 /* DailyModelCMD.CMDResPurgeStoreMessage */);
            thisObj.reg(175202 /* DailyModelCMD.CMDResSiegePanelInfoMessage */);
            thisObj.reg(175203 /* DailyModelCMD.CMDResSiegeReadyMessage */);
            thisObj.reg(175204 /* DailyModelCMD.CMDResSiegeFightMessage */);
            thisObj.reg(175205 /* DailyModelCMD.CMDResSiegeSettleMessage */);
            thisObj.reg(175212 /* DailyModelCMD.CMDResDailyRoleTrialInfoMessage */);
            thisObj.reg(175222 /* DailyModelCMD.CMDResDailyTimedUnionDistributeMessage */);
            thisObj.reg(175224 /* DailyModelCMD.CMDResDailyTimedUnionDistributeScoreMessage */);
            thisObj.reg(175225 /* DailyModelCMD.CMDResDailyTimedUnionDistributeSettleMessage */);
            thisObj.reg(175226 /* DailyModelCMD.CMDResDailyTimedShaBaKeCityGateHpChangeMessage */);
            thisObj.reg(175230 /* DailyModelCMD.CMDResUnionGuarderTipsMessage */);
            thisObj.reg(175231 /* DailyModelCMD.CMDResUnionGuarderSettleMessage */);
            return _this;
        }
        DailyModel.ins = function () {
            if (!this._ins)
                this._ins = new DailyModel();
            return this._ins;
        };
        /**
         *
         * 请求本周日常安排
         *
         * sendReqDailyTimedScheduleMessage  175001
         */
        DailyModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(175001 /* DailyModelCMD.CMDReqDailyTimedScheduleMessage */, output, s);
        };
        /**
         *
         * null
         *
         * sendReqDailyTimedOpensMessage  175003
         */
        DailyModel.prototype.send3 = function (s) {
            var output = this.getO();
            this.send(175003 /* DailyModelCMD.CMDReqDailyTimedOpensMessage */, output, s);
        };
        /**
         *
         * 请求日常次数信息
         *
         * sendReqDailyTimesInfoMessage  175005
         */
        DailyModel.prototype.send5 = function (s) {
            var output = this.getO();
            this.send(175005 /* DailyModelCMD.CMDReqDailyTimesInfoMessage */, output, s);
        };
        /**
         *
         * 请求日常下次开放时间
         * @param 日常类型id
         *
         * sendReqDailyTimedNextTimeMessage  175007
         */
        DailyModel.prototype.send7 = function (dailyType, s) {
            var output = this.getO();
            output.writeVarInt(dailyType, false);
            this.send(175007 /* DailyModelCMD.CMDReqDailyTimedNextTimeMessage */, output, s);
        };
        /**
         *
         * 请求任务信息
         *
         * sendReqDailyColorfulTaskInfoMessage  175012
         */
        DailyModel.prototype.send12 = function (s) {
            var output = this.getO();
            this.send(175012 /* DailyModelCMD.CMDReqDailyColorfulTaskInfoMessage */, output, s);
        };
        /**
         *
         * 请求接受任务
         * @param 请求接受的任务id
         *
         * sendReqDailyColorfulTaskTakeMessage  175014
         */
        DailyModel.prototype.send14 = function (taskID, s) {
            var output = this.getO();
            output.writeVarInt(taskID, false);
            this.send(175014 /* DailyModelCMD.CMDReqDailyColorfulTaskTakeMessage */, output, s);
        };
        /**
         *
         * 请求完成任务
         *
         * sendReqDailyColorfulTaskSubmitMessage  175015
         */
        DailyModel.prototype.send15 = function (s) {
            var output = this.getO();
            this.send(175015 /* DailyModelCMD.CMDReqDailyColorfulTaskSubmitMessage */, output, s);
        };
        /**
         *
         * 请求刷新任务
         *
         * sendReqDailyColorfulTaskRefreshMessage  175016
         */
        DailyModel.prototype.send16 = function (s) {
            var output = this.getO();
            this.send(175016 /* DailyModelCMD.CMDReqDailyColorfulTaskRefreshMessage */, output, s);
        };
        /**
         *
         * null
         *
         * sendReqDailyTimedSunsetRaceLeaveMessage  175021
         */
        DailyModel.prototype.send21 = function (s) {
            var output = this.getO();
            this.send(175021 /* DailyModelCMD.CMDReqDailyTimedSunsetRaceLeaveMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqDailyTimedSunsetRaceRankingMessage  175023
         */
        DailyModel.prototype.send23 = function (s) {
            var output = this.getO();
            this.send(175023 /* DailyModelCMD.CMDReqDailyTimedSunsetRaceRankingMessage */, output, s);
        };
        /**
         *
         * null
         *
         * sendReqDailyBossChallengeInfoMessage  175031
         */
        DailyModel.prototype.send31 = function (s) {
            var output = this.getO();
            this.send(175031 /* DailyModelCMD.CMDReqDailyBossChallengeInfoMessage */, output, s);
        };
        /**
         *
         * 扫荡
         * @param 副本id
         *
         * sendReqDailyBossChallengeFinishMessage  175033
         */
        DailyModel.prototype.send33 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(175033 /* DailyModelCMD.CMDReqDailyBossChallengeFinishMessage */, output, s);
        };
        /**
         *
         * null
         *
         * sendReqDailyTimedRingAppearanceMessage  175042
         */
        DailyModel.prototype.send42 = function (s) {
            var output = this.getO();
            this.send(175042 /* DailyModelCMD.CMDReqDailyTimedRingAppearanceMessage */, output, s);
        };
        /**
         *
         * 请求七星珠组别信息
         *
         * sendReqSevenDragonBallInfoMessage  175045
         */
        DailyModel.prototype.send45 = function (s) {
            var output = this.getO();
            this.send(175045 /* DailyModelCMD.CMDReqSevenDragonBallInfoMessage */, output, s);
        };
        /**
         *
         * 请求当前任务信息
         *
         * sendReqDailyEdictTaskInfoMessage  175051
         */
        DailyModel.prototype.send51 = function (s) {
            var output = this.getO();
            this.send(175051 /* DailyModelCMD.CMDReqDailyEdictTaskInfoMessage */, output, s);
        };
        /**
         *
         * 请求接受任务
         *
         * sendReqDailyEdictTaskTakeMessage  175052
         */
        DailyModel.prototype.send52 = function (s) {
            var output = this.getO();
            this.send(175052 /* DailyModelCMD.CMDReqDailyEdictTaskTakeMessage */, output, s);
        };
        /**
         *
         * 请求完成任务
         *
         * sendReqDailyEdictTaskSubmitMessage  175053
         */
        DailyModel.prototype.send53 = function (s) {
            var output = this.getO();
            this.send(175053 /* DailyModelCMD.CMDReqDailyEdictTaskSubmitMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqDailyTimedUnionBossRankingMessage  175061
         */
        DailyModel.prototype.send61 = function (s) {
            var output = this.getO();
            this.send(175061 /* DailyModelCMD.CMDReqDailyTimedUnionBossRankingMessage */, output, s);
        };
        /**
         *
         * 指定行会
         * @param 指定的行会id
         *
         * sendReqDailyTimedUnionTrialAssignMessage  175071
         */
        DailyModel.prototype.send71 = function (unionId, s) {
            var output = this.getO();
            output.writeLong(unionId);
            this.send(175071 /* DailyModelCMD.CMDReqDailyTimedUnionTrialAssignMessage */, output, s);
        };
        /**
         *
         * 请求个人排名
         *
         * sendReqDailyTimedUnionTrialRankingMessage  175072
         */
        DailyModel.prototype.send72 = function (s) {
            var output = this.getO();
            this.send(175072 /* DailyModelCMD.CMDReqDailyTimedUnionTrialRankingMessage */, output, s);
        };
        /**
         *
         * 请求指向信息
         *
         * sendReqDailyTimedUnionTrialAssignsMessage  175111
         */
        DailyModel.prototype.send111 = function (s) {
            var output = this.getO();
            this.send(175111 /* DailyModelCMD.CMDReqDailyTimedUnionTrialAssignsMessage */, output, s);
        };
        /**
         *
         * 请求所有行会信息
         *
         * sendReqDailyTimedUnionTrialUnionsMessage  175113
         */
        DailyModel.prototype.send113 = function (s) {
            var output = this.getO();
            this.send(175113 /* DailyModelCMD.CMDReqDailyTimedUnionTrialUnionsMessage */, output, s);
        };
        /**
         *
         * 请求排名
         *
         * sendReqDailyTimedUnionSnatchRankingMessage  175081
         */
        DailyModel.prototype.send81 = function (s) {
            var output = this.getO();
            this.send(175081 /* DailyModelCMD.CMDReqDailyTimedUnionSnatchRankingMessage */, output, s);
        };
        /**
         *
         * 请求沙巴克个人积分领奖
         *
         * sendReqDailyTimedShaBaKeRewardMessage  175085
         */
        DailyModel.prototype.send85 = function (s) {
            var output = this.getO();
            this.send(175085 /* DailyModelCMD.CMDReqDailyTimedShaBaKeRewardMessage */, output, s);
        };
        /**
         *
         * 请求沙巴克面板信息
         *
         * sendReqDailyTimedShaBaKePanelInfoMessage  175090
         */
        DailyModel.prototype.send90 = function (s) {
            var output = this.getO();
            this.send(175090 /* DailyModelCMD.CMDReqDailyTimedShaBaKePanelInfoMessage */, output, s);
        };
        /**
         *
         * 请求沙巴克奖池
         *
         * sendReqDailyTimedShaBaKePoolMessage  175093
         */
        DailyModel.prototype.send93 = function (s) {
            var output = this.getO();
            this.send(175093 /* DailyModelCMD.CMDReqDailyTimedShaBaKePoolMessage */, output, s);
        };
        /**
         *
         * 请求群雄屠魔捐献面板信息
         *
         * sendReqDailyTimedQXTMDonatePanelMessage  175102
         */
        DailyModel.prototype.send102 = function (s) {
            var output = this.getO();
            this.send(175102 /* DailyModelCMD.CMDReqDailyTimedQXTMDonatePanelMessage */, output, s);
        };
        /**
         *
         * 请求超级黄金城面板信息
         *
         * sendReqDailyTimedSuperGoldCityPanelInfoMessage  175128
         */
        DailyModel.prototype.send128 = function (s) {
            var output = this.getO();
            this.send(175128 /* DailyModelCMD.CMDReqDailyTimedSuperGoldCityPanelInfoMessage */, output, s);
        };
        /**
         *
         * 请求黄金城面板信息
         *
         * sendReqDailyTimedGoldCityPanelInfoMessage  175130
         */
        DailyModel.prototype.send130 = function (s) {
            var output = this.getO();
            this.send(175130 /* DailyModelCMD.CMDReqDailyTimedGoldCityPanelInfoMessage */, output, s);
        };
        /**
         *
         * 请求跨服禁言
         * @param 被禁言id
         * @param 时长类型
         *
         * sendReqCrossChatBanMessage  175137
         */
        DailyModel.prototype.send137 = function (targetId, type, s) {
            var output = this.getO();
            output.writeLong(targetId);
            output.writeVarInt(type, false);
            this.send(175137 /* DailyModelCMD.CMDReqCrossChatBanMessage */, output, s);
        };
        /**
         *
         * 请求boss塔信息
         *
         * sendReqBossTowerInfoMessage  175140
         */
        DailyModel.prototype.send140 = function (s) {
            var output = this.getO();
            this.send(175140 /* DailyModelCMD.CMDReqBossTowerInfoMessage */, output, s);
        };
        /**
         *
         * 请求上古迷阵领奖
         *
         * sendReqDailyTimedAncientMazeRewardMessage  175151
         */
        DailyModel.prototype.send151 = function (s) {
            var output = this.getO();
            this.send(175151 /* DailyModelCMD.CMDReqDailyTimedAncientMazeRewardMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqDailyRetrieveInfoMessage  175501
         */
        DailyModel.prototype.send501 = function (s) {
            var output = this.getO();
            this.send(175501 /* DailyModelCMD.CMDReqDailyRetrieveInfoMessage */, output, s);
        };
        /**
         *
         *
         * @param 活动id， 0表示一键回收
         *
         * sendReqDailyRetrieveAcquireMessage  175503
         */
        DailyModel.prototype.send503 = function (daily, s) {
            var output = this.getO();
            output.writeVarInt(daily, false);
            this.send(175503 /* DailyModelCMD.CMDReqDailyRetrieveAcquireMessage */, output, s);
        };
        /**
         *
         * 请求黄金城押镖购买增益
         * @param 购买id
         *
         * sendReqDailyTimedEscortBuyBuffMessage  175165
         */
        DailyModel.prototype.send165 = function (buy, s) {
            var output = this.getO();
            output.writeVarInt(buy, false);
            this.send(175165 /* DailyModelCMD.CMDReqDailyTimedEscortBuyBuffMessage */, output, s);
        };
        /**
         *
         * 领取每日工资奖励
         * @param 类型
         *
         * sendReqAcquireDailySalaryMessage  175171
         */
        DailyModel.prototype.send171 = function (type, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            this.send(175171 /* DailyModelCMD.CMDReqAcquireDailySalaryMessage */, output, s);
        };
        /**
         *
         * 请求每日工资信息
         *
         * sendReqDailySalaryInfoMessage  175172
         */
        DailyModel.prototype.send172 = function (s) {
            var output = this.getO();
            this.send(175172 /* DailyModelCMD.CMDReqDailySalaryInfoMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqDailyResonanceChallengeInfoMessage  175181
         */
        DailyModel.prototype.send181 = function (s) {
            var output = this.getO();
            this.send(175181 /* DailyModelCMD.CMDReqDailyResonanceChallengeInfoMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqDailyResonanceChallengeGainMessage  175182
         */
        DailyModel.prototype.send182 = function (s) {
            var output = this.getO();
            this.send(175182 /* DailyModelCMD.CMDReqDailyResonanceChallengeGainMessage */, output, s);
        };
        /**
         *
         * 领取3星奖励
         * @param 共鸣配置id
         *
         * sendReqDailyResonanceChallengeAcquireMessage  175183
         */
        DailyModel.prototype.send183 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(175183 /* DailyModelCMD.CMDReqDailyResonanceChallengeAcquireMessage */, output, s);
        };
        /**
         *
         * 请求进入吃鸡地图
         * @param 区域
         *
         * sendReqEnterPurgeMapMessage  175191
         */
        DailyModel.prototype.send191 = function (index, s) {
            var output = this.getO();
            output.writeVarInt(index, false);
            this.send(175191 /* DailyModelCMD.CMDReqEnterPurgeMapMessage */, output, s);
        };
        /**
         *
         * 请求吃鸡地图信息
         *
         * sendReqPurgeMapInfoMessage  175192
         */
        DailyModel.prototype.send192 = function (s) {
            var output = this.getO();
            this.send(175192 /* DailyModelCMD.CMDReqPurgeMapInfoMessage */, output, s);
        };
        /**
         *
         * 请求吃鸡活动信息信息
         *
         * sendReqPurgeInfoMessage  175194
         */
        DailyModel.prototype.send194 = function (s) {
            var output = this.getO();
            this.send(175194 /* DailyModelCMD.CMDReqPurgeInfoMessage */, output, s);
        };
        /**
         *
         * 请求商品信息/购买商品
         * @param 购买的商品 配置下标 1开始 0表示仅请求商品购买信息
         *
         * sendReqPurgeStoreMessage  175199
         */
        DailyModel.prototype.send199 = function (buy, s) {
            var output = this.getO();
            output.writeVarInt(buy, false);
            this.send(175199 /* DailyModelCMD.CMDReqPurgeStoreMessage */, output, s);
        };
        /**
         *
         * 请求攻城战面板信息
         *
         * sendReqSiegePanelInfoMessage  175201
         */
        DailyModel.prototype.send201 = function (s) {
            var output = this.getO();
            this.send(175201 /* DailyModelCMD.CMDReqSiegePanelInfoMessage */, output, s);
        };
        /**
         *
         * 请求个人试炼信息
         *
         * sendReqDailyRoleTrialInfoMessage  175211
         */
        DailyModel.prototype.send211 = function (s) {
            var output = this.getO();
            this.send(175211 /* DailyModelCMD.CMDReqDailyRoleTrialInfoMessage */, output, s);
        };
        /**
         *
         * 请求新行会试炼行会排行
         *
         * sendReqDailyTimedUnionDistributeMessage  175221
         */
        DailyModel.prototype.send221 = function (s) {
            var output = this.getO();
            this.send(175221 /* DailyModelCMD.CMDReqDailyTimedUnionDistributeMessage */, output, s);
        };
        /**
         *
         * 请求新行会试炼个人积分排名
         *
         * sendReqDailyTimedUnionDistributeScoreMessage  175223
         */
        DailyModel.prototype.send223 = function (s) {
            var output = this.getO();
            this.send(175223 /* DailyModelCMD.CMDReqDailyTimedUnionDistributeScoreMessage */, output, s);
        };
        DailyModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 175002 /* DailyModelCMD.CMDResDailyTimedScheduleMessage */:
                    var scheduleLength1 = input.readShort();
                    var resDailyTimedScheduleMessage = [];
                    for (var schedulei1 = 0; schedulei1 < scheduleLength1; schedulei1++) {
                        if (input.readByte() != 0) {
                            var temp81 = resDailyTimedScheduleMessage[schedulei1] = {}; //本周活动安排
                            temp81["weekday"] = input.readVarInt(false); //周几
                            var opensLength1 = input.readShort();
                            temp81["opens"] = new Array(opensLength1);
                            for (var opensi1 = 0; opensi1 < opensLength1; opensi1++) {
                                temp81["opens"][opensi1] = input.readVarInt(false); //本日开放的限时日常id列表
                            }
                        }
                        else {
                            resDailyTimedScheduleMessage[schedulei1] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedScheduleMessage);
                    break;
                case 175004 /* DailyModelCMD.CMDResDailyTimedOpensMessage */:
                    var opensLength2 = input.readShort();
                    var resDailyTimedOpensMessage = [];
                    for (var opensi2 = 0; opensi2 < opensLength2; opensi2++) {
                        if (input.readByte() != 0) {
                            var temp82 = resDailyTimedOpensMessage[opensi2] = {}; //活动开放列表
                            temp82["scheduleID"] = input.readVarInt(false); //日程id
                            temp82["dailyID"] = input.readVarInt(false); //日常id
                            temp82["status"] = input.readVarInt(false); //当前状态 0未开放 1准备开放 2开放中
                            temp82["beginTime"] = input.readVarInt(false); //开始时间（时间戳）
                            temp82["endTime"] = input.readVarInt(false); //结束时间（时间戳）
                        }
                        else {
                            resDailyTimedOpensMessage[opensi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedOpensMessage);
                    break;
                case 175006 /* DailyModelCMD.CMDResDailyTimesInfoMessage */:
                    var timesLength1 = input.readShort();
                    var resDailyTimesInfoMessage = [];
                    for (var timesi1 = 0; timesi1 < timesLength1; timesi1++) {
                        if (input.readByte() != 0) {
                            var temp83 = resDailyTimesInfoMessage[timesi1] = {}; //日常活动次数信息列表
                            temp83["dailyID"] = input.readVarInt(false); //日常id
                            temp83["utimes"] = input.readVarInt(false); //已经参与次数
                            temp83["etimes"] = input.readVarInt(false); //额外增加的次数
                        }
                        else {
                            resDailyTimesInfoMessage[timesi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimesInfoMessage);
                    break;
                case 175008 /* DailyModelCMD.CMDResDailyTimedNextTimeMessage */:
                    var resDailyTimedNextTimeMessage = {};
                    resDailyTimedNextTimeMessage["dailyType"] = input.readVarInt(false); //日常类型id
                    resDailyTimedNextTimeMessage["openTime"] = input.readVarInt(false); //开放时间 时间戳
                    this.sendNotif(cmd, resDailyTimedNextTimeMessage);
                    break;
                case 175009 /* DailyModelCMD.CMDResDailyTimesUpdateMessage */:
                    var timesLength2 = input.readShort();
                    var resDailyTimesUpdateMessage = [];
                    for (var timesi2 = 0; timesi2 < timesLength2; timesi2++) {
                        if (input.readByte() != 0) {
                            var temp84 = resDailyTimesUpdateMessage[timesi2] = {}; //日常活动次数信息列表
                            temp84["dailyID"] = input.readVarInt(false); //日常id
                            temp84["utimes"] = input.readVarInt(false); //已经参与次数
                            temp84["etimes"] = input.readVarInt(false); //额外增加的次数
                        }
                        else {
                            resDailyTimesUpdateMessage[timesi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimesUpdateMessage);
                    break;
                case 175011 /* DailyModelCMD.CMDResDailyColorfulTaskInfoMessage */:
                    var resDailyColorfulTaskInfoMessage = {};
                    var choicesLength1 = input.readShort();
                    resDailyColorfulTaskInfoMessage["choices"] = new Array(choicesLength1);
                    for (var choicesi1 = 0; choicesi1 < choicesLength1; choicesi1++) {
                        resDailyColorfulTaskInfoMessage["choices"][choicesi1] = input.readVarInt(false); //当前提供的任务列表
                    }
                    var completedLength1 = input.readShort();
                    resDailyColorfulTaskInfoMessage["completed"] = new Array(completedLength1);
                    for (var completedi1 = 0; completedi1 < completedLength1; completedi1++) {
                        resDailyColorfulTaskInfoMessage["completed"][completedi1] = input.readVarInt(false); //已完成列表
                    }
                    resDailyColorfulTaskInfoMessage["inProgress"] = input.readVarInt(false); //当前进行中的任务，0表示没有接受还
                    resDailyColorfulTaskInfoMessage["rtimes"] = input.readVarInt(false); //已刷新次数
                    this.sendNotif(cmd, resDailyColorfulTaskInfoMessage);
                    break;
                case 175022 /* DailyModelCMD.CMDResDailyTimedSunsetRaceTipsMessage */:
                    var resDailyTimedSunsetRaceTipsMessage = {};
                    resDailyTimedSunsetRaceTipsMessage["form"] = input.readVarInt(false); //0关闭 1打开 2更新
                    var racesLength1 = input.readShort();
                    resDailyTimedSunsetRaceTipsMessage["races"] = [];
                    for (var racesi1 = 0; racesi1 < racesLength1; racesi1++) {
                        if (input.readByte() != 0) {
                            var temp85 = resDailyTimedSunsetRaceTipsMessage["races"][racesi1] = {}; //
                            temp85["raceID"] = input.readVarInt(false); //配置id
                            temp85["treasure"] = input.readVarInt(false); //宝藏id
                            temp85["status"] = input.readVarInt(false); //当前阶段（状态） 0未刷新 1怪物已刷新 2怪物已死亡
                            temp85["endTime"] = input.readVarInt(false); //当前状态持续到的时间（时间戳）
                            temp85["occupyUid"] = input.readLong(); //占有者唯一id
                            temp85["occupyName"] = input.readString(); //占有者名字
                            temp85["occupyCX"] = input.readVarInt(false); //占有者坐标x
                            temp85["occupyCY"] = input.readVarInt(false); //占有者坐标y
                        }
                        else {
                            resDailyTimedSunsetRaceTipsMessage["races"][racesi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedSunsetRaceTipsMessage);
                    break;
                case 175024 /* DailyModelCMD.CMDResDailyTimedSunsetRaceRankingMessage */:
                    var rankingsLength1 = input.readShort();
                    var resDailyTimedSunsetRaceRankingMessage = [];
                    for (var rankingsi1 = 0; rankingsi1 < rankingsLength1; rankingsi1++) {
                        if (input.readByte() != 0) {
                            var temp86 = resDailyTimedSunsetRaceRankingMessage[rankingsi1] = {}; //排行信息
                            temp86["ranking"] = input.readVarInt(false); //
                            temp86["uid"] = input.readLong(); //
                            temp86["name"] = input.readString(); //
                            temp86["score"] = input.readLong(); //
                        }
                        else {
                            resDailyTimedSunsetRaceRankingMessage[rankingsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedSunsetRaceRankingMessage);
                    break;
                case 175032 /* DailyModelCMD.CMDResDailyBossChallengeInfoMessage */:
                    var timesLength3 = input.readShort();
                    var resDailyBossChallengeInfoMessage = [];
                    for (var timesi3 = 0; timesi3 < timesLength3; timesi3++) {
                        if (input.readByte() != 0) {
                            var temp87 = resDailyBossChallengeInfoMessage[timesi3] = {}; //次数信息
                            temp87["duplicateID"] = input.readVarInt(false); //副本id
                            temp87["uTimes"] = input.readVarInt(false); //已经挑战的次数
                            temp87["status"] = input.readVarInt(false); //挑战状态 0未成功挑战 1已成功挑战
                        }
                        else {
                            resDailyBossChallengeInfoMessage[timesi3] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyBossChallengeInfoMessage);
                    break;
                case 175041 /* DailyModelCMD.CMDResDailyTimedRingAppearanceMessage */:
                    var resDailyTimedRingAppearanceMessage = input.readVarInt(false); //提交状态 0未提交 1已提交
                    this.sendNotif(cmd, resDailyTimedRingAppearanceMessage);
                    break;
                case 175043 /* DailyModelCMD.CMDResSevenDragonBallMessage */:
                    var resSevenDragonBallMessage = input.readVarInt(false); //当前组别信息(不在活动时间内发-1)
                    this.sendNotif(cmd, resSevenDragonBallMessage);
                    break;
                case 175062 /* DailyModelCMD.CMDResDailyTimedUnionBossRankingMessage */:
                    var resDailyTimedUnionBossRankingMessage = {};
                    resDailyTimedUnionBossRankingMessage["beginAt"] = input.readVarInt(false); //
                    resDailyTimedUnionBossRankingMessage["appearanceAt"] = input.readVarInt(false); //
                    var unionRankingsLength1 = input.readShort();
                    resDailyTimedUnionBossRankingMessage["unionRankings"] = [];
                    for (var unionRankingsi1 = 0; unionRankingsi1 < unionRankingsLength1; unionRankingsi1++) {
                        if (input.readByte() != 0) {
                            var temp88 = resDailyTimedUnionBossRankingMessage["unionRankings"][unionRankingsi1] = {}; //行会排名列表
                            temp88["ranking"] = input.readVarInt(false); //
                            temp88["uid"] = input.readLong(); //
                            temp88["name"] = input.readString(); //
                            temp88["score"] = input.readLong(); //
                        }
                        else {
                            resDailyTimedUnionBossRankingMessage["unionRankings"][unionRankingsi1] = null;
                        }
                    }
                    var personalRankingsLength1 = input.readShort();
                    resDailyTimedUnionBossRankingMessage["personalRankings"] = [];
                    for (var personalRankingsi1 = 0; personalRankingsi1 < personalRankingsLength1; personalRankingsi1++) {
                        if (input.readByte() != 0) {
                            var temp89 = resDailyTimedUnionBossRankingMessage["personalRankings"][personalRankingsi1] = {}; //个人排名列表
                            temp89["ranking"] = input.readVarInt(false); //
                            temp89["uid"] = input.readLong(); //
                            temp89["name"] = input.readString(); //
                            temp89["score"] = input.readLong(); //
                        }
                        else {
                            resDailyTimedUnionBossRankingMessage["personalRankings"][personalRankingsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedUnionBossRankingMessage);
                    break;
                case 175063 /* DailyModelCMD.CMDResDailyUnionBossSettleMessage */:
                    var resDailyUnionBossSettleMessage = {};
                    var worldsLength1 = input.readShort();
                    resDailyUnionBossSettleMessage["worlds"] = [];
                    for (var worldsi1 = 0; worldsi1 < worldsLength1; worldsi1++) {
                        if (input.readByte() != 0) {
                            var temp90 = resDailyUnionBossSettleMessage["worlds"][worldsi1] = {}; //世界奖励
                            temp90["uid"] = input.readLong(); //唯一id
                            temp90["itemId"] = input.readVarInt(false); //道具配置id
                            temp90["count"] = input.readVarInt(false); //数量
                            temp90["expire"] = input.readVarInt(false); //过期时间
                            temp90["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp90["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength1 = input.readShort();
                            temp90["params"] = new Array(paramsLength1);
                            for (var paramsi1 = 0; paramsi1 < paramsLength1; paramsi1++) {
                                temp90["params"][paramsi1] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength1 = input.readByte();
                            if (equipDataLength1 != 0) {
                                var temp91 = temp90["equipData"] = {}; //装备属性（null表示没有）
                                temp91["durable"] = input.readVarInt(false); //消耗耐久
                                temp91["starLevel"] = input.readVarInt(false); //升星等级
                                temp91["starLock"] = input.readVarInt(false); //被锁星级
                                temp91["starExp"] = input.readVarInt(false); //升星祝福值
                                temp91["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp91["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp91["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp91["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp91["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp91["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp91["sign"] = input.readString(); //签名
                                var destinyAttrsLength1 = input.readShort();
                                temp91["destinyAttrs"] = [];
                                for (var destinyAttrsi1 = 0; destinyAttrsi1 < destinyAttrsLength1; destinyAttrsi1++) {
                                    if (input.readByte() != 0) {
                                        var temp92 = temp91["destinyAttrs"][destinyAttrsi1] = {}; //命运属性
                                        temp92["career"] = input.readVarInt(false); //职业限定
                                        temp92["attributeType"] = input.readVarInt(false); //属性类型
                                        temp92["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp91["destinyAttrs"][destinyAttrsi1] = null;
                                    }
                                }
                                var superAttrsLength1 = input.readShort();
                                temp91["superAttrs"] = [];
                                for (var superAttrsi1 = 0; superAttrsi1 < superAttrsLength1; superAttrsi1++) {
                                    if (input.readByte() != 0) {
                                        var temp93 = temp91["superAttrs"][superAttrsi1] = {}; //极品属性
                                        temp93["career"] = input.readVarInt(false); //职业限定
                                        temp93["attributeType"] = input.readVarInt(false); //属性类型
                                        temp93["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp91["superAttrs"][superAttrsi1] = null;
                                    }
                                }
                                var identifyAttrsLength1 = input.readShort();
                                temp91["identifyAttrs"] = [];
                                for (var identifyAttrsi1 = 0; identifyAttrsi1 < identifyAttrsLength1; identifyAttrsi1++) {
                                    if (input.readByte() != 0) {
                                        var temp94 = temp91["identifyAttrs"][identifyAttrsi1] = {}; //鉴定属性
                                        temp94["career"] = input.readVarInt(false); //职业限定
                                        temp94["attributeType"] = input.readVarInt(false); //属性类型
                                        temp94["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp91["identifyAttrs"][identifyAttrsi1] = null;
                                    }
                                }
                                var xiLianAttrsLength1 = input.readShort();
                                temp91["xiLianAttrs"] = [];
                                for (var xiLianAttrsi1 = 0; xiLianAttrsi1 < xiLianAttrsLength1; xiLianAttrsi1++) {
                                    if (input.readByte() != 0) {
                                        var temp95 = temp91["xiLianAttrs"][xiLianAttrsi1] = {}; //配饰洗练属性
                                        temp95["career"] = input.readVarInt(false); //职业限定
                                        temp95["attributeType"] = input.readVarInt(false); //属性类型
                                        temp95["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp91["xiLianAttrs"][xiLianAttrsi1] = null;
                                    }
                                }
                                temp91["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp91["growLevel"] = input.readVarInt(false); //成长等级
                                temp91["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength1 = input.readShort();
                                temp91["bestAttrs"] = new Array(bestAttrsLength1);
                                for (var bestAttrsi1 = 0; bestAttrsi1 < bestAttrsLength1; bestAttrsi1++) {
                                    temp91["bestAttrs"][bestAttrsi1] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength1 = input.readShort();
                                temp91["soulAttrs"] = new Array(soulAttrsLength1);
                                for (var soulAttrsi1 = 0; soulAttrsi1 < soulAttrsLength1; soulAttrsi1++) {
                                    temp91["soulAttrs"][soulAttrsi1] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength1 = input.readShort();
                                temp91["godsAttrs"] = new Array(godsAttrsLength1);
                                for (var godsAttrsi1 = 0; godsAttrsi1 < godsAttrsLength1; godsAttrsi1++) {
                                    temp91["godsAttrs"][godsAttrsi1] = input.readVarInt(false); //额外神级属性
                                }
                                temp91["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength1 = input.readShort();
                                temp91["specialDurable"] = [];
                                for (var specialDurablei1 = 0; specialDurablei1 < specialDurableLength1; specialDurablei1++) {
                                    if (input.readByte() != 0) {
                                        var temp96 = temp91["specialDurable"][specialDurablei1] = {}; //特殊耐久消耗值
                                        temp96["type"] = input.readVarInt(false); //类型
                                        temp96["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp91["specialDurable"][specialDurablei1] = null;
                                    }
                                }
                            }
                            var immobilizationLength1 = input.readByte();
                            if (immobilizationLength1 != 0) {
                                var temp97 = temp90["immobilization"] = {}; //固化数据
                                temp97["action"] = input.readVarInt(false); //产生行为
                                temp97["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength1 = input.readByte();
                            if (fromLength1 != 0) {
                                var temp98 = temp90["from"] = {}; //来源
                                temp98["action"] = input.readVarInt(false); //产生行为
                                temp98["firstRole"] = input.readLong(); //第一个玩家id
                                temp98["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength2 = input.readShort();
                                temp98["params"] = [];
                                for (var paramsi2 = 0; paramsi2 < paramsLength2; paramsi2++) {
                                    if (input.readByte() != 0) {
                                        var temp99 = temp98["params"][paramsi2] = {}; //
                                        temp99["key"] = input.readVarInt(false); //
                                        temp99["value"] = input.readString(); //
                                    }
                                    else {
                                        temp98["params"][paramsi2] = null;
                                    }
                                }
                            }
                            temp90["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength1 = input.readByte();
                            if (spriteDataLength1 != 0) {
                                var temp100 = temp90["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp100["level"] = input.readVarInt(false); //灵兽等级
                                temp100["exp"] = input.readVarInt(false); //灵兽经验
                                temp100["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength1 = input.readShort();
                                temp100["skills"] = [];
                                for (var skillsi1 = 0; skillsi1 < skillsLength1; skillsi1++) {
                                    if (input.readByte() != 0) {
                                        var temp101 = temp100["skills"][skillsi1] = {}; //灵兽出战技能
                                        temp101["id"] = input.readVarInt(false); //
                                        temp101["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp100["skills"][skillsi1] = null;
                                    }
                                }
                                var ownerSkillsLength1 = input.readShort();
                                temp100["ownerSkills"] = [];
                                for (var ownerSkillsi1 = 0; ownerSkillsi1 < ownerSkillsLength1; ownerSkillsi1++) {
                                    if (input.readByte() != 0) {
                                        var temp102 = temp100["ownerSkills"][ownerSkillsi1] = {}; //灵兽拥有的技能
                                        temp102["id"] = input.readVarInt(false); //
                                        temp102["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp100["ownerSkills"][ownerSkillsi1] = null;
                                    }
                                }
                                var ownerSkinsLength1 = input.readShort();
                                temp100["ownerSkins"] = [];
                                for (var ownerSkinsi1 = 0; ownerSkinsi1 < ownerSkinsLength1; ownerSkinsi1++) {
                                    if (input.readByte() != 0) {
                                        var temp103 = temp100["ownerSkins"][ownerSkinsi1] = {}; //灵兽拥有的皮肤
                                        temp103["id"] = input.readVarInt(false); //
                                        temp103["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp100["ownerSkins"][ownerSkinsi1] = null;
                                    }
                                }
                                var absorbExpLength1 = input.readShort();
                                temp100["absorbExp"] = [];
                                for (var absorbExpi1 = 0; absorbExpi1 < absorbExpLength1; absorbExpi1++) {
                                    if (input.readByte() != 0) {
                                        var temp104 = temp100["absorbExp"][absorbExpi1] = {}; //灵兽吸收经验值
                                        temp104["id"] = input.readVarInt(false); //
                                        temp104["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp100["absorbExp"][absorbExpi1] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resDailyUnionBossSettleMessage["worlds"][worldsi1] = null;
                        }
                    }
                    var unionsLength1 = input.readShort();
                    resDailyUnionBossSettleMessage["unions"] = [];
                    for (var unionsi1 = 0; unionsi1 < unionsLength1; unionsi1++) {
                        if (input.readByte() != 0) {
                            var temp105 = resDailyUnionBossSettleMessage["unions"][unionsi1] = {}; //行会奖励
                            temp105["uid"] = input.readLong(); //唯一id
                            temp105["itemId"] = input.readVarInt(false); //道具配置id
                            temp105["count"] = input.readVarInt(false); //数量
                            temp105["expire"] = input.readVarInt(false); //过期时间
                            temp105["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp105["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength3 = input.readShort();
                            temp105["params"] = new Array(paramsLength3);
                            for (var paramsi3 = 0; paramsi3 < paramsLength3; paramsi3++) {
                                temp105["params"][paramsi3] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength2 = input.readByte();
                            if (equipDataLength2 != 0) {
                                var temp106 = temp105["equipData"] = {}; //装备属性（null表示没有）
                                temp106["durable"] = input.readVarInt(false); //消耗耐久
                                temp106["starLevel"] = input.readVarInt(false); //升星等级
                                temp106["starLock"] = input.readVarInt(false); //被锁星级
                                temp106["starExp"] = input.readVarInt(false); //升星祝福值
                                temp106["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp106["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp106["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp106["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp106["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp106["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp106["sign"] = input.readString(); //签名
                                var destinyAttrsLength2 = input.readShort();
                                temp106["destinyAttrs"] = [];
                                for (var destinyAttrsi2 = 0; destinyAttrsi2 < destinyAttrsLength2; destinyAttrsi2++) {
                                    if (input.readByte() != 0) {
                                        var temp107 = temp106["destinyAttrs"][destinyAttrsi2] = {}; //命运属性
                                        temp107["career"] = input.readVarInt(false); //职业限定
                                        temp107["attributeType"] = input.readVarInt(false); //属性类型
                                        temp107["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp106["destinyAttrs"][destinyAttrsi2] = null;
                                    }
                                }
                                var superAttrsLength2 = input.readShort();
                                temp106["superAttrs"] = [];
                                for (var superAttrsi2 = 0; superAttrsi2 < superAttrsLength2; superAttrsi2++) {
                                    if (input.readByte() != 0) {
                                        var temp108 = temp106["superAttrs"][superAttrsi2] = {}; //极品属性
                                        temp108["career"] = input.readVarInt(false); //职业限定
                                        temp108["attributeType"] = input.readVarInt(false); //属性类型
                                        temp108["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp106["superAttrs"][superAttrsi2] = null;
                                    }
                                }
                                var identifyAttrsLength2 = input.readShort();
                                temp106["identifyAttrs"] = [];
                                for (var identifyAttrsi2 = 0; identifyAttrsi2 < identifyAttrsLength2; identifyAttrsi2++) {
                                    if (input.readByte() != 0) {
                                        var temp109 = temp106["identifyAttrs"][identifyAttrsi2] = {}; //鉴定属性
                                        temp109["career"] = input.readVarInt(false); //职业限定
                                        temp109["attributeType"] = input.readVarInt(false); //属性类型
                                        temp109["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp106["identifyAttrs"][identifyAttrsi2] = null;
                                    }
                                }
                                var xiLianAttrsLength2 = input.readShort();
                                temp106["xiLianAttrs"] = [];
                                for (var xiLianAttrsi2 = 0; xiLianAttrsi2 < xiLianAttrsLength2; xiLianAttrsi2++) {
                                    if (input.readByte() != 0) {
                                        var temp110 = temp106["xiLianAttrs"][xiLianAttrsi2] = {}; //配饰洗练属性
                                        temp110["career"] = input.readVarInt(false); //职业限定
                                        temp110["attributeType"] = input.readVarInt(false); //属性类型
                                        temp110["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp106["xiLianAttrs"][xiLianAttrsi2] = null;
                                    }
                                }
                                temp106["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp106["growLevel"] = input.readVarInt(false); //成长等级
                                temp106["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength2 = input.readShort();
                                temp106["bestAttrs"] = new Array(bestAttrsLength2);
                                for (var bestAttrsi2 = 0; bestAttrsi2 < bestAttrsLength2; bestAttrsi2++) {
                                    temp106["bestAttrs"][bestAttrsi2] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength2 = input.readShort();
                                temp106["soulAttrs"] = new Array(soulAttrsLength2);
                                for (var soulAttrsi2 = 0; soulAttrsi2 < soulAttrsLength2; soulAttrsi2++) {
                                    temp106["soulAttrs"][soulAttrsi2] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength2 = input.readShort();
                                temp106["godsAttrs"] = new Array(godsAttrsLength2);
                                for (var godsAttrsi2 = 0; godsAttrsi2 < godsAttrsLength2; godsAttrsi2++) {
                                    temp106["godsAttrs"][godsAttrsi2] = input.readVarInt(false); //额外神级属性
                                }
                                temp106["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength2 = input.readShort();
                                temp106["specialDurable"] = [];
                                for (var specialDurablei2 = 0; specialDurablei2 < specialDurableLength2; specialDurablei2++) {
                                    if (input.readByte() != 0) {
                                        var temp111 = temp106["specialDurable"][specialDurablei2] = {}; //特殊耐久消耗值
                                        temp111["type"] = input.readVarInt(false); //类型
                                        temp111["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp106["specialDurable"][specialDurablei2] = null;
                                    }
                                }
                            }
                            var immobilizationLength2 = input.readByte();
                            if (immobilizationLength2 != 0) {
                                var temp112 = temp105["immobilization"] = {}; //固化数据
                                temp112["action"] = input.readVarInt(false); //产生行为
                                temp112["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength2 = input.readByte();
                            if (fromLength2 != 0) {
                                var temp113 = temp105["from"] = {}; //来源
                                temp113["action"] = input.readVarInt(false); //产生行为
                                temp113["firstRole"] = input.readLong(); //第一个玩家id
                                temp113["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength4 = input.readShort();
                                temp113["params"] = [];
                                for (var paramsi4 = 0; paramsi4 < paramsLength4; paramsi4++) {
                                    if (input.readByte() != 0) {
                                        var temp114 = temp113["params"][paramsi4] = {}; //
                                        temp114["key"] = input.readVarInt(false); //
                                        temp114["value"] = input.readString(); //
                                    }
                                    else {
                                        temp113["params"][paramsi4] = null;
                                    }
                                }
                            }
                            temp105["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength2 = input.readByte();
                            if (spriteDataLength2 != 0) {
                                var temp115 = temp105["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp115["level"] = input.readVarInt(false); //灵兽等级
                                temp115["exp"] = input.readVarInt(false); //灵兽经验
                                temp115["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength2 = input.readShort();
                                temp115["skills"] = [];
                                for (var skillsi2 = 0; skillsi2 < skillsLength2; skillsi2++) {
                                    if (input.readByte() != 0) {
                                        var temp116 = temp115["skills"][skillsi2] = {}; //灵兽出战技能
                                        temp116["id"] = input.readVarInt(false); //
                                        temp116["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp115["skills"][skillsi2] = null;
                                    }
                                }
                                var ownerSkillsLength2 = input.readShort();
                                temp115["ownerSkills"] = [];
                                for (var ownerSkillsi2 = 0; ownerSkillsi2 < ownerSkillsLength2; ownerSkillsi2++) {
                                    if (input.readByte() != 0) {
                                        var temp117 = temp115["ownerSkills"][ownerSkillsi2] = {}; //灵兽拥有的技能
                                        temp117["id"] = input.readVarInt(false); //
                                        temp117["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp115["ownerSkills"][ownerSkillsi2] = null;
                                    }
                                }
                                var ownerSkinsLength2 = input.readShort();
                                temp115["ownerSkins"] = [];
                                for (var ownerSkinsi2 = 0; ownerSkinsi2 < ownerSkinsLength2; ownerSkinsi2++) {
                                    if (input.readByte() != 0) {
                                        var temp118 = temp115["ownerSkins"][ownerSkinsi2] = {}; //灵兽拥有的皮肤
                                        temp118["id"] = input.readVarInt(false); //
                                        temp118["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp115["ownerSkins"][ownerSkinsi2] = null;
                                    }
                                }
                                var absorbExpLength2 = input.readShort();
                                temp115["absorbExp"] = [];
                                for (var absorbExpi2 = 0; absorbExpi2 < absorbExpLength2; absorbExpi2++) {
                                    if (input.readByte() != 0) {
                                        var temp119 = temp115["absorbExp"][absorbExpi2] = {}; //灵兽吸收经验值
                                        temp119["id"] = input.readVarInt(false); //
                                        temp119["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp115["absorbExp"][absorbExpi2] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resDailyUnionBossSettleMessage["unions"][unionsi1] = null;
                        }
                    }
                    var globalsLength1 = input.readShort();
                    resDailyUnionBossSettleMessage["globals"] = [];
                    for (var globalsi1 = 0; globalsi1 < globalsLength1; globalsi1++) {
                        if (input.readByte() != 0) {
                            var temp120 = resDailyUnionBossSettleMessage["globals"][globalsi1] = {}; //跨服奖励
                            temp120["uid"] = input.readLong(); //唯一id
                            temp120["itemId"] = input.readVarInt(false); //道具配置id
                            temp120["count"] = input.readVarInt(false); //数量
                            temp120["expire"] = input.readVarInt(false); //过期时间
                            temp120["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp120["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength5 = input.readShort();
                            temp120["params"] = new Array(paramsLength5);
                            for (var paramsi5 = 0; paramsi5 < paramsLength5; paramsi5++) {
                                temp120["params"][paramsi5] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength3 = input.readByte();
                            if (equipDataLength3 != 0) {
                                var temp121 = temp120["equipData"] = {}; //装备属性（null表示没有）
                                temp121["durable"] = input.readVarInt(false); //消耗耐久
                                temp121["starLevel"] = input.readVarInt(false); //升星等级
                                temp121["starLock"] = input.readVarInt(false); //被锁星级
                                temp121["starExp"] = input.readVarInt(false); //升星祝福值
                                temp121["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp121["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp121["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp121["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp121["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp121["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp121["sign"] = input.readString(); //签名
                                var destinyAttrsLength3 = input.readShort();
                                temp121["destinyAttrs"] = [];
                                for (var destinyAttrsi3 = 0; destinyAttrsi3 < destinyAttrsLength3; destinyAttrsi3++) {
                                    if (input.readByte() != 0) {
                                        var temp122 = temp121["destinyAttrs"][destinyAttrsi3] = {}; //命运属性
                                        temp122["career"] = input.readVarInt(false); //职业限定
                                        temp122["attributeType"] = input.readVarInt(false); //属性类型
                                        temp122["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp121["destinyAttrs"][destinyAttrsi3] = null;
                                    }
                                }
                                var superAttrsLength3 = input.readShort();
                                temp121["superAttrs"] = [];
                                for (var superAttrsi3 = 0; superAttrsi3 < superAttrsLength3; superAttrsi3++) {
                                    if (input.readByte() != 0) {
                                        var temp123 = temp121["superAttrs"][superAttrsi3] = {}; //极品属性
                                        temp123["career"] = input.readVarInt(false); //职业限定
                                        temp123["attributeType"] = input.readVarInt(false); //属性类型
                                        temp123["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp121["superAttrs"][superAttrsi3] = null;
                                    }
                                }
                                var identifyAttrsLength3 = input.readShort();
                                temp121["identifyAttrs"] = [];
                                for (var identifyAttrsi3 = 0; identifyAttrsi3 < identifyAttrsLength3; identifyAttrsi3++) {
                                    if (input.readByte() != 0) {
                                        var temp124 = temp121["identifyAttrs"][identifyAttrsi3] = {}; //鉴定属性
                                        temp124["career"] = input.readVarInt(false); //职业限定
                                        temp124["attributeType"] = input.readVarInt(false); //属性类型
                                        temp124["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp121["identifyAttrs"][identifyAttrsi3] = null;
                                    }
                                }
                                var xiLianAttrsLength3 = input.readShort();
                                temp121["xiLianAttrs"] = [];
                                for (var xiLianAttrsi3 = 0; xiLianAttrsi3 < xiLianAttrsLength3; xiLianAttrsi3++) {
                                    if (input.readByte() != 0) {
                                        var temp125 = temp121["xiLianAttrs"][xiLianAttrsi3] = {}; //配饰洗练属性
                                        temp125["career"] = input.readVarInt(false); //职业限定
                                        temp125["attributeType"] = input.readVarInt(false); //属性类型
                                        temp125["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp121["xiLianAttrs"][xiLianAttrsi3] = null;
                                    }
                                }
                                temp121["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp121["growLevel"] = input.readVarInt(false); //成长等级
                                temp121["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength3 = input.readShort();
                                temp121["bestAttrs"] = new Array(bestAttrsLength3);
                                for (var bestAttrsi3 = 0; bestAttrsi3 < bestAttrsLength3; bestAttrsi3++) {
                                    temp121["bestAttrs"][bestAttrsi3] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength3 = input.readShort();
                                temp121["soulAttrs"] = new Array(soulAttrsLength3);
                                for (var soulAttrsi3 = 0; soulAttrsi3 < soulAttrsLength3; soulAttrsi3++) {
                                    temp121["soulAttrs"][soulAttrsi3] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength3 = input.readShort();
                                temp121["godsAttrs"] = new Array(godsAttrsLength3);
                                for (var godsAttrsi3 = 0; godsAttrsi3 < godsAttrsLength3; godsAttrsi3++) {
                                    temp121["godsAttrs"][godsAttrsi3] = input.readVarInt(false); //额外神级属性
                                }
                                temp121["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength3 = input.readShort();
                                temp121["specialDurable"] = [];
                                for (var specialDurablei3 = 0; specialDurablei3 < specialDurableLength3; specialDurablei3++) {
                                    if (input.readByte() != 0) {
                                        var temp126 = temp121["specialDurable"][specialDurablei3] = {}; //特殊耐久消耗值
                                        temp126["type"] = input.readVarInt(false); //类型
                                        temp126["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp121["specialDurable"][specialDurablei3] = null;
                                    }
                                }
                            }
                            var immobilizationLength3 = input.readByte();
                            if (immobilizationLength3 != 0) {
                                var temp127 = temp120["immobilization"] = {}; //固化数据
                                temp127["action"] = input.readVarInt(false); //产生行为
                                temp127["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength3 = input.readByte();
                            if (fromLength3 != 0) {
                                var temp128 = temp120["from"] = {}; //来源
                                temp128["action"] = input.readVarInt(false); //产生行为
                                temp128["firstRole"] = input.readLong(); //第一个玩家id
                                temp128["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength6 = input.readShort();
                                temp128["params"] = [];
                                for (var paramsi6 = 0; paramsi6 < paramsLength6; paramsi6++) {
                                    if (input.readByte() != 0) {
                                        var temp129 = temp128["params"][paramsi6] = {}; //
                                        temp129["key"] = input.readVarInt(false); //
                                        temp129["value"] = input.readString(); //
                                    }
                                    else {
                                        temp128["params"][paramsi6] = null;
                                    }
                                }
                            }
                            temp120["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength3 = input.readByte();
                            if (spriteDataLength3 != 0) {
                                var temp130 = temp120["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp130["level"] = input.readVarInt(false); //灵兽等级
                                temp130["exp"] = input.readVarInt(false); //灵兽经验
                                temp130["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength3 = input.readShort();
                                temp130["skills"] = [];
                                for (var skillsi3 = 0; skillsi3 < skillsLength3; skillsi3++) {
                                    if (input.readByte() != 0) {
                                        var temp131 = temp130["skills"][skillsi3] = {}; //灵兽出战技能
                                        temp131["id"] = input.readVarInt(false); //
                                        temp131["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp130["skills"][skillsi3] = null;
                                    }
                                }
                                var ownerSkillsLength3 = input.readShort();
                                temp130["ownerSkills"] = [];
                                for (var ownerSkillsi3 = 0; ownerSkillsi3 < ownerSkillsLength3; ownerSkillsi3++) {
                                    if (input.readByte() != 0) {
                                        var temp132 = temp130["ownerSkills"][ownerSkillsi3] = {}; //灵兽拥有的技能
                                        temp132["id"] = input.readVarInt(false); //
                                        temp132["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp130["ownerSkills"][ownerSkillsi3] = null;
                                    }
                                }
                                var ownerSkinsLength3 = input.readShort();
                                temp130["ownerSkins"] = [];
                                for (var ownerSkinsi3 = 0; ownerSkinsi3 < ownerSkinsLength3; ownerSkinsi3++) {
                                    if (input.readByte() != 0) {
                                        var temp133 = temp130["ownerSkins"][ownerSkinsi3] = {}; //灵兽拥有的皮肤
                                        temp133["id"] = input.readVarInt(false); //
                                        temp133["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp130["ownerSkins"][ownerSkinsi3] = null;
                                    }
                                }
                                var absorbExpLength3 = input.readShort();
                                temp130["absorbExp"] = [];
                                for (var absorbExpi3 = 0; absorbExpi3 < absorbExpLength3; absorbExpi3++) {
                                    if (input.readByte() != 0) {
                                        var temp134 = temp130["absorbExp"][absorbExpi3] = {}; //灵兽吸收经验值
                                        temp134["id"] = input.readVarInt(false); //
                                        temp134["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp130["absorbExp"][absorbExpi3] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resDailyUnionBossSettleMessage["globals"][globalsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyUnionBossSettleMessage);
                    break;
                case 175074 /* DailyModelCMD.CMDResDailyTimedUnionTrialAssignMessage */:
                    var resDailyTimedUnionTrialAssignMessage = input.readLong(); //当前指定的行会
                    this.sendNotif(cmd, resDailyTimedUnionTrialAssignMessage);
                    break;
                case 175075 /* DailyModelCMD.CMDResDailyTimedUnionTrialTipsMessage */:
                    var resDailyTimedUnionTrialTipsMessage = {};
                    resDailyTimedUnionTrialTipsMessage["beginAt"] = input.readVarInt(false); //开始时间
                    resDailyTimedUnionTrialTipsMessage["count"] = input.readVarInt(false); //怪物数量
                    var unionRankingsLength2 = input.readShort();
                    resDailyTimedUnionTrialTipsMessage["unionRankings"] = [];
                    for (var unionRankingsi2 = 0; unionRankingsi2 < unionRankingsLength2; unionRankingsi2++) {
                        if (input.readByte() != 0) {
                            var temp135 = resDailyTimedUnionTrialTipsMessage["unionRankings"][unionRankingsi2] = {}; //行会排名信息 积分大于约定值表示淘汰
                            temp135["ranking"] = input.readVarInt(false); //
                            temp135["uid"] = input.readLong(); //
                            temp135["name"] = input.readString(); //
                            temp135["score"] = input.readLong(); //
                        }
                        else {
                            resDailyTimedUnionTrialTipsMessage["unionRankings"][unionRankingsi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedUnionTrialTipsMessage);
                    break;
                case 175076 /* DailyModelCMD.CMDResDailyTimedUnionTrialRankingsMessage */:
                    var resDailyTimedUnionTrialRankingsMessage = {};
                    var rankingsLength2 = input.readShort();
                    resDailyTimedUnionTrialRankingsMessage["rankings"] = [];
                    for (var rankingsi2 = 0; rankingsi2 < rankingsLength2; rankingsi2++) {
                        if (input.readByte() != 0) {
                            var temp136 = resDailyTimedUnionTrialRankingsMessage["rankings"][rankingsi2] = {}; //
                            temp136["ranking"] = input.readVarInt(false); //
                            temp136["uid"] = input.readLong(); //
                            temp136["name"] = input.readString(); //
                            temp136["score"] = input.readLong(); //
                        }
                        else {
                            resDailyTimedUnionTrialRankingsMessage["rankings"][rankingsi2] = null;
                        }
                    }
                    resDailyTimedUnionTrialRankingsMessage["selfScore"] = input.readVarInt(false); //
                    this.sendNotif(cmd, resDailyTimedUnionTrialRankingsMessage);
                    break;
                case 175077 /* DailyModelCMD.CMDResDailyTimedUnionTrialScoreMessage */:
                    var resDailyTimedUnionTrialScoreMessage = input.readVarInt(false); //增加的积分
                    this.sendNotif(cmd, resDailyTimedUnionTrialScoreMessage);
                    break;
                case 175078 /* DailyModelCMD.CMDResDailyTimedUnionTrialSettleMessage */:
                    var resDailyTimedUnionTrialSettleMessage = {};
                    var worldsLength2 = input.readShort();
                    resDailyTimedUnionTrialSettleMessage["worlds"] = [];
                    for (var worldsi2 = 0; worldsi2 < worldsLength2; worldsi2++) {
                        if (input.readByte() != 0) {
                            var temp137 = resDailyTimedUnionTrialSettleMessage["worlds"][worldsi2] = {}; //世界奖励
                            temp137["uid"] = input.readLong(); //唯一id
                            temp137["itemId"] = input.readVarInt(false); //道具配置id
                            temp137["count"] = input.readVarInt(false); //数量
                            temp137["expire"] = input.readVarInt(false); //过期时间
                            temp137["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp137["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength7 = input.readShort();
                            temp137["params"] = new Array(paramsLength7);
                            for (var paramsi7 = 0; paramsi7 < paramsLength7; paramsi7++) {
                                temp137["params"][paramsi7] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength4 = input.readByte();
                            if (equipDataLength4 != 0) {
                                var temp138 = temp137["equipData"] = {}; //装备属性（null表示没有）
                                temp138["durable"] = input.readVarInt(false); //消耗耐久
                                temp138["starLevel"] = input.readVarInt(false); //升星等级
                                temp138["starLock"] = input.readVarInt(false); //被锁星级
                                temp138["starExp"] = input.readVarInt(false); //升星祝福值
                                temp138["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp138["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp138["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp138["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp138["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp138["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp138["sign"] = input.readString(); //签名
                                var destinyAttrsLength4 = input.readShort();
                                temp138["destinyAttrs"] = [];
                                for (var destinyAttrsi4 = 0; destinyAttrsi4 < destinyAttrsLength4; destinyAttrsi4++) {
                                    if (input.readByte() != 0) {
                                        var temp139 = temp138["destinyAttrs"][destinyAttrsi4] = {}; //命运属性
                                        temp139["career"] = input.readVarInt(false); //职业限定
                                        temp139["attributeType"] = input.readVarInt(false); //属性类型
                                        temp139["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp138["destinyAttrs"][destinyAttrsi4] = null;
                                    }
                                }
                                var superAttrsLength4 = input.readShort();
                                temp138["superAttrs"] = [];
                                for (var superAttrsi4 = 0; superAttrsi4 < superAttrsLength4; superAttrsi4++) {
                                    if (input.readByte() != 0) {
                                        var temp140 = temp138["superAttrs"][superAttrsi4] = {}; //极品属性
                                        temp140["career"] = input.readVarInt(false); //职业限定
                                        temp140["attributeType"] = input.readVarInt(false); //属性类型
                                        temp140["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp138["superAttrs"][superAttrsi4] = null;
                                    }
                                }
                                var identifyAttrsLength4 = input.readShort();
                                temp138["identifyAttrs"] = [];
                                for (var identifyAttrsi4 = 0; identifyAttrsi4 < identifyAttrsLength4; identifyAttrsi4++) {
                                    if (input.readByte() != 0) {
                                        var temp141 = temp138["identifyAttrs"][identifyAttrsi4] = {}; //鉴定属性
                                        temp141["career"] = input.readVarInt(false); //职业限定
                                        temp141["attributeType"] = input.readVarInt(false); //属性类型
                                        temp141["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp138["identifyAttrs"][identifyAttrsi4] = null;
                                    }
                                }
                                var xiLianAttrsLength4 = input.readShort();
                                temp138["xiLianAttrs"] = [];
                                for (var xiLianAttrsi4 = 0; xiLianAttrsi4 < xiLianAttrsLength4; xiLianAttrsi4++) {
                                    if (input.readByte() != 0) {
                                        var temp142 = temp138["xiLianAttrs"][xiLianAttrsi4] = {}; //配饰洗练属性
                                        temp142["career"] = input.readVarInt(false); //职业限定
                                        temp142["attributeType"] = input.readVarInt(false); //属性类型
                                        temp142["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp138["xiLianAttrs"][xiLianAttrsi4] = null;
                                    }
                                }
                                temp138["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp138["growLevel"] = input.readVarInt(false); //成长等级
                                temp138["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength4 = input.readShort();
                                temp138["bestAttrs"] = new Array(bestAttrsLength4);
                                for (var bestAttrsi4 = 0; bestAttrsi4 < bestAttrsLength4; bestAttrsi4++) {
                                    temp138["bestAttrs"][bestAttrsi4] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength4 = input.readShort();
                                temp138["soulAttrs"] = new Array(soulAttrsLength4);
                                for (var soulAttrsi4 = 0; soulAttrsi4 < soulAttrsLength4; soulAttrsi4++) {
                                    temp138["soulAttrs"][soulAttrsi4] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength4 = input.readShort();
                                temp138["godsAttrs"] = new Array(godsAttrsLength4);
                                for (var godsAttrsi4 = 0; godsAttrsi4 < godsAttrsLength4; godsAttrsi4++) {
                                    temp138["godsAttrs"][godsAttrsi4] = input.readVarInt(false); //额外神级属性
                                }
                                temp138["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength4 = input.readShort();
                                temp138["specialDurable"] = [];
                                for (var specialDurablei4 = 0; specialDurablei4 < specialDurableLength4; specialDurablei4++) {
                                    if (input.readByte() != 0) {
                                        var temp143 = temp138["specialDurable"][specialDurablei4] = {}; //特殊耐久消耗值
                                        temp143["type"] = input.readVarInt(false); //类型
                                        temp143["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp138["specialDurable"][specialDurablei4] = null;
                                    }
                                }
                            }
                            var immobilizationLength4 = input.readByte();
                            if (immobilizationLength4 != 0) {
                                var temp144 = temp137["immobilization"] = {}; //固化数据
                                temp144["action"] = input.readVarInt(false); //产生行为
                                temp144["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength4 = input.readByte();
                            if (fromLength4 != 0) {
                                var temp145 = temp137["from"] = {}; //来源
                                temp145["action"] = input.readVarInt(false); //产生行为
                                temp145["firstRole"] = input.readLong(); //第一个玩家id
                                temp145["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength8 = input.readShort();
                                temp145["params"] = [];
                                for (var paramsi8 = 0; paramsi8 < paramsLength8; paramsi8++) {
                                    if (input.readByte() != 0) {
                                        var temp146 = temp145["params"][paramsi8] = {}; //
                                        temp146["key"] = input.readVarInt(false); //
                                        temp146["value"] = input.readString(); //
                                    }
                                    else {
                                        temp145["params"][paramsi8] = null;
                                    }
                                }
                            }
                            temp137["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength4 = input.readByte();
                            if (spriteDataLength4 != 0) {
                                var temp147 = temp137["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp147["level"] = input.readVarInt(false); //灵兽等级
                                temp147["exp"] = input.readVarInt(false); //灵兽经验
                                temp147["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength4 = input.readShort();
                                temp147["skills"] = [];
                                for (var skillsi4 = 0; skillsi4 < skillsLength4; skillsi4++) {
                                    if (input.readByte() != 0) {
                                        var temp148 = temp147["skills"][skillsi4] = {}; //灵兽出战技能
                                        temp148["id"] = input.readVarInt(false); //
                                        temp148["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp147["skills"][skillsi4] = null;
                                    }
                                }
                                var ownerSkillsLength4 = input.readShort();
                                temp147["ownerSkills"] = [];
                                for (var ownerSkillsi4 = 0; ownerSkillsi4 < ownerSkillsLength4; ownerSkillsi4++) {
                                    if (input.readByte() != 0) {
                                        var temp149 = temp147["ownerSkills"][ownerSkillsi4] = {}; //灵兽拥有的技能
                                        temp149["id"] = input.readVarInt(false); //
                                        temp149["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp147["ownerSkills"][ownerSkillsi4] = null;
                                    }
                                }
                                var ownerSkinsLength4 = input.readShort();
                                temp147["ownerSkins"] = [];
                                for (var ownerSkinsi4 = 0; ownerSkinsi4 < ownerSkinsLength4; ownerSkinsi4++) {
                                    if (input.readByte() != 0) {
                                        var temp150 = temp147["ownerSkins"][ownerSkinsi4] = {}; //灵兽拥有的皮肤
                                        temp150["id"] = input.readVarInt(false); //
                                        temp150["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp147["ownerSkins"][ownerSkinsi4] = null;
                                    }
                                }
                                var absorbExpLength4 = input.readShort();
                                temp147["absorbExp"] = [];
                                for (var absorbExpi4 = 0; absorbExpi4 < absorbExpLength4; absorbExpi4++) {
                                    if (input.readByte() != 0) {
                                        var temp151 = temp147["absorbExp"][absorbExpi4] = {}; //灵兽吸收经验值
                                        temp151["id"] = input.readVarInt(false); //
                                        temp151["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp147["absorbExp"][absorbExpi4] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resDailyTimedUnionTrialSettleMessage["worlds"][worldsi2] = null;
                        }
                    }
                    var unionsLength2 = input.readShort();
                    resDailyTimedUnionTrialSettleMessage["unions"] = [];
                    for (var unionsi2 = 0; unionsi2 < unionsLength2; unionsi2++) {
                        if (input.readByte() != 0) {
                            var temp152 = resDailyTimedUnionTrialSettleMessage["unions"][unionsi2] = {}; //行会奖励
                            temp152["uid"] = input.readLong(); //唯一id
                            temp152["itemId"] = input.readVarInt(false); //道具配置id
                            temp152["count"] = input.readVarInt(false); //数量
                            temp152["expire"] = input.readVarInt(false); //过期时间
                            temp152["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp152["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength9 = input.readShort();
                            temp152["params"] = new Array(paramsLength9);
                            for (var paramsi9 = 0; paramsi9 < paramsLength9; paramsi9++) {
                                temp152["params"][paramsi9] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength5 = input.readByte();
                            if (equipDataLength5 != 0) {
                                var temp153 = temp152["equipData"] = {}; //装备属性（null表示没有）
                                temp153["durable"] = input.readVarInt(false); //消耗耐久
                                temp153["starLevel"] = input.readVarInt(false); //升星等级
                                temp153["starLock"] = input.readVarInt(false); //被锁星级
                                temp153["starExp"] = input.readVarInt(false); //升星祝福值
                                temp153["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp153["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp153["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp153["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp153["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp153["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp153["sign"] = input.readString(); //签名
                                var destinyAttrsLength5 = input.readShort();
                                temp153["destinyAttrs"] = [];
                                for (var destinyAttrsi5 = 0; destinyAttrsi5 < destinyAttrsLength5; destinyAttrsi5++) {
                                    if (input.readByte() != 0) {
                                        var temp154 = temp153["destinyAttrs"][destinyAttrsi5] = {}; //命运属性
                                        temp154["career"] = input.readVarInt(false); //职业限定
                                        temp154["attributeType"] = input.readVarInt(false); //属性类型
                                        temp154["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp153["destinyAttrs"][destinyAttrsi5] = null;
                                    }
                                }
                                var superAttrsLength5 = input.readShort();
                                temp153["superAttrs"] = [];
                                for (var superAttrsi5 = 0; superAttrsi5 < superAttrsLength5; superAttrsi5++) {
                                    if (input.readByte() != 0) {
                                        var temp155 = temp153["superAttrs"][superAttrsi5] = {}; //极品属性
                                        temp155["career"] = input.readVarInt(false); //职业限定
                                        temp155["attributeType"] = input.readVarInt(false); //属性类型
                                        temp155["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp153["superAttrs"][superAttrsi5] = null;
                                    }
                                }
                                var identifyAttrsLength5 = input.readShort();
                                temp153["identifyAttrs"] = [];
                                for (var identifyAttrsi5 = 0; identifyAttrsi5 < identifyAttrsLength5; identifyAttrsi5++) {
                                    if (input.readByte() != 0) {
                                        var temp156 = temp153["identifyAttrs"][identifyAttrsi5] = {}; //鉴定属性
                                        temp156["career"] = input.readVarInt(false); //职业限定
                                        temp156["attributeType"] = input.readVarInt(false); //属性类型
                                        temp156["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp153["identifyAttrs"][identifyAttrsi5] = null;
                                    }
                                }
                                var xiLianAttrsLength5 = input.readShort();
                                temp153["xiLianAttrs"] = [];
                                for (var xiLianAttrsi5 = 0; xiLianAttrsi5 < xiLianAttrsLength5; xiLianAttrsi5++) {
                                    if (input.readByte() != 0) {
                                        var temp157 = temp153["xiLianAttrs"][xiLianAttrsi5] = {}; //配饰洗练属性
                                        temp157["career"] = input.readVarInt(false); //职业限定
                                        temp157["attributeType"] = input.readVarInt(false); //属性类型
                                        temp157["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp153["xiLianAttrs"][xiLianAttrsi5] = null;
                                    }
                                }
                                temp153["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp153["growLevel"] = input.readVarInt(false); //成长等级
                                temp153["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength5 = input.readShort();
                                temp153["bestAttrs"] = new Array(bestAttrsLength5);
                                for (var bestAttrsi5 = 0; bestAttrsi5 < bestAttrsLength5; bestAttrsi5++) {
                                    temp153["bestAttrs"][bestAttrsi5] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength5 = input.readShort();
                                temp153["soulAttrs"] = new Array(soulAttrsLength5);
                                for (var soulAttrsi5 = 0; soulAttrsi5 < soulAttrsLength5; soulAttrsi5++) {
                                    temp153["soulAttrs"][soulAttrsi5] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength5 = input.readShort();
                                temp153["godsAttrs"] = new Array(godsAttrsLength5);
                                for (var godsAttrsi5 = 0; godsAttrsi5 < godsAttrsLength5; godsAttrsi5++) {
                                    temp153["godsAttrs"][godsAttrsi5] = input.readVarInt(false); //额外神级属性
                                }
                                temp153["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength5 = input.readShort();
                                temp153["specialDurable"] = [];
                                for (var specialDurablei5 = 0; specialDurablei5 < specialDurableLength5; specialDurablei5++) {
                                    if (input.readByte() != 0) {
                                        var temp158 = temp153["specialDurable"][specialDurablei5] = {}; //特殊耐久消耗值
                                        temp158["type"] = input.readVarInt(false); //类型
                                        temp158["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp153["specialDurable"][specialDurablei5] = null;
                                    }
                                }
                            }
                            var immobilizationLength5 = input.readByte();
                            if (immobilizationLength5 != 0) {
                                var temp159 = temp152["immobilization"] = {}; //固化数据
                                temp159["action"] = input.readVarInt(false); //产生行为
                                temp159["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength5 = input.readByte();
                            if (fromLength5 != 0) {
                                var temp160 = temp152["from"] = {}; //来源
                                temp160["action"] = input.readVarInt(false); //产生行为
                                temp160["firstRole"] = input.readLong(); //第一个玩家id
                                temp160["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength10 = input.readShort();
                                temp160["params"] = [];
                                for (var paramsi10 = 0; paramsi10 < paramsLength10; paramsi10++) {
                                    if (input.readByte() != 0) {
                                        var temp161 = temp160["params"][paramsi10] = {}; //
                                        temp161["key"] = input.readVarInt(false); //
                                        temp161["value"] = input.readString(); //
                                    }
                                    else {
                                        temp160["params"][paramsi10] = null;
                                    }
                                }
                            }
                            temp152["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength5 = input.readByte();
                            if (spriteDataLength5 != 0) {
                                var temp162 = temp152["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp162["level"] = input.readVarInt(false); //灵兽等级
                                temp162["exp"] = input.readVarInt(false); //灵兽经验
                                temp162["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength5 = input.readShort();
                                temp162["skills"] = [];
                                for (var skillsi5 = 0; skillsi5 < skillsLength5; skillsi5++) {
                                    if (input.readByte() != 0) {
                                        var temp163 = temp162["skills"][skillsi5] = {}; //灵兽出战技能
                                        temp163["id"] = input.readVarInt(false); //
                                        temp163["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp162["skills"][skillsi5] = null;
                                    }
                                }
                                var ownerSkillsLength5 = input.readShort();
                                temp162["ownerSkills"] = [];
                                for (var ownerSkillsi5 = 0; ownerSkillsi5 < ownerSkillsLength5; ownerSkillsi5++) {
                                    if (input.readByte() != 0) {
                                        var temp164 = temp162["ownerSkills"][ownerSkillsi5] = {}; //灵兽拥有的技能
                                        temp164["id"] = input.readVarInt(false); //
                                        temp164["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp162["ownerSkills"][ownerSkillsi5] = null;
                                    }
                                }
                                var ownerSkinsLength5 = input.readShort();
                                temp162["ownerSkins"] = [];
                                for (var ownerSkinsi5 = 0; ownerSkinsi5 < ownerSkinsLength5; ownerSkinsi5++) {
                                    if (input.readByte() != 0) {
                                        var temp165 = temp162["ownerSkins"][ownerSkinsi5] = {}; //灵兽拥有的皮肤
                                        temp165["id"] = input.readVarInt(false); //
                                        temp165["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp162["ownerSkins"][ownerSkinsi5] = null;
                                    }
                                }
                                var absorbExpLength5 = input.readShort();
                                temp162["absorbExp"] = [];
                                for (var absorbExpi5 = 0; absorbExpi5 < absorbExpLength5; absorbExpi5++) {
                                    if (input.readByte() != 0) {
                                        var temp166 = temp162["absorbExp"][absorbExpi5] = {}; //灵兽吸收经验值
                                        temp166["id"] = input.readVarInt(false); //
                                        temp166["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp162["absorbExp"][absorbExpi5] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resDailyTimedUnionTrialSettleMessage["unions"][unionsi2] = null;
                        }
                    }
                    var globalsLength2 = input.readShort();
                    resDailyTimedUnionTrialSettleMessage["globals"] = [];
                    for (var globalsi2 = 0; globalsi2 < globalsLength2; globalsi2++) {
                        if (input.readByte() != 0) {
                            var temp167 = resDailyTimedUnionTrialSettleMessage["globals"][globalsi2] = {}; //跨服奖励
                            temp167["uid"] = input.readLong(); //唯一id
                            temp167["itemId"] = input.readVarInt(false); //道具配置id
                            temp167["count"] = input.readVarInt(false); //数量
                            temp167["expire"] = input.readVarInt(false); //过期时间
                            temp167["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp167["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength11 = input.readShort();
                            temp167["params"] = new Array(paramsLength11);
                            for (var paramsi11 = 0; paramsi11 < paramsLength11; paramsi11++) {
                                temp167["params"][paramsi11] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength6 = input.readByte();
                            if (equipDataLength6 != 0) {
                                var temp168 = temp167["equipData"] = {}; //装备属性（null表示没有）
                                temp168["durable"] = input.readVarInt(false); //消耗耐久
                                temp168["starLevel"] = input.readVarInt(false); //升星等级
                                temp168["starLock"] = input.readVarInt(false); //被锁星级
                                temp168["starExp"] = input.readVarInt(false); //升星祝福值
                                temp168["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp168["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp168["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp168["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp168["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp168["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp168["sign"] = input.readString(); //签名
                                var destinyAttrsLength6 = input.readShort();
                                temp168["destinyAttrs"] = [];
                                for (var destinyAttrsi6 = 0; destinyAttrsi6 < destinyAttrsLength6; destinyAttrsi6++) {
                                    if (input.readByte() != 0) {
                                        var temp169 = temp168["destinyAttrs"][destinyAttrsi6] = {}; //命运属性
                                        temp169["career"] = input.readVarInt(false); //职业限定
                                        temp169["attributeType"] = input.readVarInt(false); //属性类型
                                        temp169["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp168["destinyAttrs"][destinyAttrsi6] = null;
                                    }
                                }
                                var superAttrsLength6 = input.readShort();
                                temp168["superAttrs"] = [];
                                for (var superAttrsi6 = 0; superAttrsi6 < superAttrsLength6; superAttrsi6++) {
                                    if (input.readByte() != 0) {
                                        var temp170 = temp168["superAttrs"][superAttrsi6] = {}; //极品属性
                                        temp170["career"] = input.readVarInt(false); //职业限定
                                        temp170["attributeType"] = input.readVarInt(false); //属性类型
                                        temp170["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp168["superAttrs"][superAttrsi6] = null;
                                    }
                                }
                                var identifyAttrsLength6 = input.readShort();
                                temp168["identifyAttrs"] = [];
                                for (var identifyAttrsi6 = 0; identifyAttrsi6 < identifyAttrsLength6; identifyAttrsi6++) {
                                    if (input.readByte() != 0) {
                                        var temp171 = temp168["identifyAttrs"][identifyAttrsi6] = {}; //鉴定属性
                                        temp171["career"] = input.readVarInt(false); //职业限定
                                        temp171["attributeType"] = input.readVarInt(false); //属性类型
                                        temp171["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp168["identifyAttrs"][identifyAttrsi6] = null;
                                    }
                                }
                                var xiLianAttrsLength6 = input.readShort();
                                temp168["xiLianAttrs"] = [];
                                for (var xiLianAttrsi6 = 0; xiLianAttrsi6 < xiLianAttrsLength6; xiLianAttrsi6++) {
                                    if (input.readByte() != 0) {
                                        var temp172 = temp168["xiLianAttrs"][xiLianAttrsi6] = {}; //配饰洗练属性
                                        temp172["career"] = input.readVarInt(false); //职业限定
                                        temp172["attributeType"] = input.readVarInt(false); //属性类型
                                        temp172["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp168["xiLianAttrs"][xiLianAttrsi6] = null;
                                    }
                                }
                                temp168["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp168["growLevel"] = input.readVarInt(false); //成长等级
                                temp168["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength6 = input.readShort();
                                temp168["bestAttrs"] = new Array(bestAttrsLength6);
                                for (var bestAttrsi6 = 0; bestAttrsi6 < bestAttrsLength6; bestAttrsi6++) {
                                    temp168["bestAttrs"][bestAttrsi6] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength6 = input.readShort();
                                temp168["soulAttrs"] = new Array(soulAttrsLength6);
                                for (var soulAttrsi6 = 0; soulAttrsi6 < soulAttrsLength6; soulAttrsi6++) {
                                    temp168["soulAttrs"][soulAttrsi6] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength6 = input.readShort();
                                temp168["godsAttrs"] = new Array(godsAttrsLength6);
                                for (var godsAttrsi6 = 0; godsAttrsi6 < godsAttrsLength6; godsAttrsi6++) {
                                    temp168["godsAttrs"][godsAttrsi6] = input.readVarInt(false); //额外神级属性
                                }
                                temp168["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength6 = input.readShort();
                                temp168["specialDurable"] = [];
                                for (var specialDurablei6 = 0; specialDurablei6 < specialDurableLength6; specialDurablei6++) {
                                    if (input.readByte() != 0) {
                                        var temp173 = temp168["specialDurable"][specialDurablei6] = {}; //特殊耐久消耗值
                                        temp173["type"] = input.readVarInt(false); //类型
                                        temp173["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp168["specialDurable"][specialDurablei6] = null;
                                    }
                                }
                            }
                            var immobilizationLength6 = input.readByte();
                            if (immobilizationLength6 != 0) {
                                var temp174 = temp167["immobilization"] = {}; //固化数据
                                temp174["action"] = input.readVarInt(false); //产生行为
                                temp174["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength6 = input.readByte();
                            if (fromLength6 != 0) {
                                var temp175 = temp167["from"] = {}; //来源
                                temp175["action"] = input.readVarInt(false); //产生行为
                                temp175["firstRole"] = input.readLong(); //第一个玩家id
                                temp175["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength12 = input.readShort();
                                temp175["params"] = [];
                                for (var paramsi12 = 0; paramsi12 < paramsLength12; paramsi12++) {
                                    if (input.readByte() != 0) {
                                        var temp176 = temp175["params"][paramsi12] = {}; //
                                        temp176["key"] = input.readVarInt(false); //
                                        temp176["value"] = input.readString(); //
                                    }
                                    else {
                                        temp175["params"][paramsi12] = null;
                                    }
                                }
                            }
                            temp167["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength6 = input.readByte();
                            if (spriteDataLength6 != 0) {
                                var temp177 = temp167["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp177["level"] = input.readVarInt(false); //灵兽等级
                                temp177["exp"] = input.readVarInt(false); //灵兽经验
                                temp177["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength6 = input.readShort();
                                temp177["skills"] = [];
                                for (var skillsi6 = 0; skillsi6 < skillsLength6; skillsi6++) {
                                    if (input.readByte() != 0) {
                                        var temp178 = temp177["skills"][skillsi6] = {}; //灵兽出战技能
                                        temp178["id"] = input.readVarInt(false); //
                                        temp178["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp177["skills"][skillsi6] = null;
                                    }
                                }
                                var ownerSkillsLength6 = input.readShort();
                                temp177["ownerSkills"] = [];
                                for (var ownerSkillsi6 = 0; ownerSkillsi6 < ownerSkillsLength6; ownerSkillsi6++) {
                                    if (input.readByte() != 0) {
                                        var temp179 = temp177["ownerSkills"][ownerSkillsi6] = {}; //灵兽拥有的技能
                                        temp179["id"] = input.readVarInt(false); //
                                        temp179["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp177["ownerSkills"][ownerSkillsi6] = null;
                                    }
                                }
                                var ownerSkinsLength6 = input.readShort();
                                temp177["ownerSkins"] = [];
                                for (var ownerSkinsi6 = 0; ownerSkinsi6 < ownerSkinsLength6; ownerSkinsi6++) {
                                    if (input.readByte() != 0) {
                                        var temp180 = temp177["ownerSkins"][ownerSkinsi6] = {}; //灵兽拥有的皮肤
                                        temp180["id"] = input.readVarInt(false); //
                                        temp180["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp177["ownerSkins"][ownerSkinsi6] = null;
                                    }
                                }
                                var absorbExpLength6 = input.readShort();
                                temp177["absorbExp"] = [];
                                for (var absorbExpi6 = 0; absorbExpi6 < absorbExpLength6; absorbExpi6++) {
                                    if (input.readByte() != 0) {
                                        var temp181 = temp177["absorbExp"][absorbExpi6] = {}; //灵兽吸收经验值
                                        temp181["id"] = input.readVarInt(false); //
                                        temp181["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp177["absorbExp"][absorbExpi6] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resDailyTimedUnionTrialSettleMessage["globals"][globalsi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedUnionTrialSettleMessage);
                    break;
                case 175112 /* DailyModelCMD.CMDResDailyTimedUnionTrialAssignsMessage */:
                    var assignsLength1 = input.readShort();
                    var resDailyTimedUnionTrialAssignsMessage = [];
                    for (var assignsi1 = 0; assignsi1 < assignsLength1; assignsi1++) {
                        if (input.readByte() != 0) {
                            var temp182 = resDailyTimedUnionTrialAssignsMessage[assignsi1] = {}; //
                            temp182["source"] = input.readLong(); //指定行会
                            temp182["target"] = input.readLong(); //指向行会
                            temp182["count"] = input.readVarInt(false); //数量
                        }
                        else {
                            resDailyTimedUnionTrialAssignsMessage[assignsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedUnionTrialAssignsMessage);
                    break;
                case 175114 /* DailyModelCMD.CMDResDailyTimedUnionTrialUnionsMessage */:
                    var unionsLength3 = input.readShort();
                    var resDailyTimedUnionTrialUnionsMessage = [];
                    for (var unionsi3 = 0; unionsi3 < unionsLength3; unionsi3++) {
                        if (input.readByte() != 0) {
                            var temp183 = resDailyTimedUnionTrialUnionsMessage[unionsi3] = {}; //行会列表
                            temp183["id"] = input.readLong(); //id
                            temp183["name"] = input.readString(); //name
                            temp183["server"] = input.readVarInt(false); //server
                        }
                        else {
                            resDailyTimedUnionTrialUnionsMessage[unionsi3] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedUnionTrialUnionsMessage);
                    break;
                case 175082 /* DailyModelCMD.CMDResDailyTimedUnionSnatchRankingMessage */:
                    var resDailyTimedUnionSnatchRankingMessage = {};
                    var unionRankingsLength3 = input.readShort();
                    resDailyTimedUnionSnatchRankingMessage["unionRankings"] = [];
                    for (var unionRankingsi3 = 0; unionRankingsi3 < unionRankingsLength3; unionRankingsi3++) {
                        if (input.readByte() != 0) {
                            var temp184 = resDailyTimedUnionSnatchRankingMessage["unionRankings"][unionRankingsi3] = {}; //行会排名
                            temp184["ranking"] = input.readVarInt(false); //
                            temp184["uid"] = input.readLong(); //
                            temp184["name"] = input.readString(); //
                            temp184["score"] = input.readLong(); //
                        }
                        else {
                            resDailyTimedUnionSnatchRankingMessage["unionRankings"][unionRankingsi3] = null;
                        }
                    }
                    var roleRankingsLength1 = input.readShort();
                    resDailyTimedUnionSnatchRankingMessage["roleRankings"] = [];
                    for (var roleRankingsi1 = 0; roleRankingsi1 < roleRankingsLength1; roleRankingsi1++) {
                        if (input.readByte() != 0) {
                            var temp185 = resDailyTimedUnionSnatchRankingMessage["roleRankings"][roleRankingsi1] = {}; //个人排名
                            temp185["ranking"] = input.readVarInt(false); //
                            temp185["uid"] = input.readLong(); //
                            temp185["name"] = input.readString(); //
                            temp185["score"] = input.readLong(); //
                        }
                        else {
                            resDailyTimedUnionSnatchRankingMessage["roleRankings"][roleRankingsi1] = null;
                        }
                    }
                    resDailyTimedUnionSnatchRankingMessage["unionScore"] = input.readVarInt(false); //行会积分
                    resDailyTimedUnionSnatchRankingMessage["roleScore"] = input.readVarInt(false); //个人积分
                    this.sendNotif(cmd, resDailyTimedUnionSnatchRankingMessage);
                    break;
                case 175083 /* DailyModelCMD.CMDResDailyTimedUnionSnatchTipsMessage */:
                    var resDailyTimedUnionSnatchTipsMessage = {};
                    resDailyTimedUnionSnatchTipsMessage["coorX"] = input.readVarInt(false); //旗帜坐标x
                    resDailyTimedUnionSnatchTipsMessage["coorY"] = input.readVarInt(false); //旗帜坐标y
                    resDailyTimedUnionSnatchTipsMessage["progress"] = input.readVarInt(false); //占领进度
                    resDailyTimedUnionSnatchTipsMessage["ownerId"] = input.readLong(); //当前占领行会
                    resDailyTimedUnionSnatchTipsMessage["ownerName"] = input.readString(); //当前占领行会名字
                    resDailyTimedUnionSnatchTipsMessage["time"] = input.readVarInt(false); //下次时间 （progress为0时为刷新时间 progress满时为占领结束时间）
                    this.sendNotif(cmd, resDailyTimedUnionSnatchTipsMessage);
                    break;
                case 175079 /* DailyModelCMD.CMDResDailyTimedUnionSnatchSettleMessage */:
                    var resDailyTimedUnionSnatchSettleMessage = {};
                    resDailyTimedUnionSnatchSettleMessage["ranking"] = input.readVarInt(false); //排名
                    var worldsLength3 = input.readShort();
                    resDailyTimedUnionSnatchSettleMessage["worlds"] = [];
                    for (var worldsi3 = 0; worldsi3 < worldsLength3; worldsi3++) {
                        if (input.readByte() != 0) {
                            var temp186 = resDailyTimedUnionSnatchSettleMessage["worlds"][worldsi3] = {}; //世界奖励
                            temp186["uid"] = input.readLong(); //唯一id
                            temp186["itemId"] = input.readVarInt(false); //道具配置id
                            temp186["count"] = input.readVarInt(false); //数量
                            temp186["expire"] = input.readVarInt(false); //过期时间
                            temp186["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp186["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength13 = input.readShort();
                            temp186["params"] = new Array(paramsLength13);
                            for (var paramsi13 = 0; paramsi13 < paramsLength13; paramsi13++) {
                                temp186["params"][paramsi13] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength7 = input.readByte();
                            if (equipDataLength7 != 0) {
                                var temp187 = temp186["equipData"] = {}; //装备属性（null表示没有）
                                temp187["durable"] = input.readVarInt(false); //消耗耐久
                                temp187["starLevel"] = input.readVarInt(false); //升星等级
                                temp187["starLock"] = input.readVarInt(false); //被锁星级
                                temp187["starExp"] = input.readVarInt(false); //升星祝福值
                                temp187["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp187["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp187["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp187["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp187["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp187["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp187["sign"] = input.readString(); //签名
                                var destinyAttrsLength7 = input.readShort();
                                temp187["destinyAttrs"] = [];
                                for (var destinyAttrsi7 = 0; destinyAttrsi7 < destinyAttrsLength7; destinyAttrsi7++) {
                                    if (input.readByte() != 0) {
                                        var temp188 = temp187["destinyAttrs"][destinyAttrsi7] = {}; //命运属性
                                        temp188["career"] = input.readVarInt(false); //职业限定
                                        temp188["attributeType"] = input.readVarInt(false); //属性类型
                                        temp188["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp187["destinyAttrs"][destinyAttrsi7] = null;
                                    }
                                }
                                var superAttrsLength7 = input.readShort();
                                temp187["superAttrs"] = [];
                                for (var superAttrsi7 = 0; superAttrsi7 < superAttrsLength7; superAttrsi7++) {
                                    if (input.readByte() != 0) {
                                        var temp189 = temp187["superAttrs"][superAttrsi7] = {}; //极品属性
                                        temp189["career"] = input.readVarInt(false); //职业限定
                                        temp189["attributeType"] = input.readVarInt(false); //属性类型
                                        temp189["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp187["superAttrs"][superAttrsi7] = null;
                                    }
                                }
                                var identifyAttrsLength7 = input.readShort();
                                temp187["identifyAttrs"] = [];
                                for (var identifyAttrsi7 = 0; identifyAttrsi7 < identifyAttrsLength7; identifyAttrsi7++) {
                                    if (input.readByte() != 0) {
                                        var temp190 = temp187["identifyAttrs"][identifyAttrsi7] = {}; //鉴定属性
                                        temp190["career"] = input.readVarInt(false); //职业限定
                                        temp190["attributeType"] = input.readVarInt(false); //属性类型
                                        temp190["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp187["identifyAttrs"][identifyAttrsi7] = null;
                                    }
                                }
                                var xiLianAttrsLength7 = input.readShort();
                                temp187["xiLianAttrs"] = [];
                                for (var xiLianAttrsi7 = 0; xiLianAttrsi7 < xiLianAttrsLength7; xiLianAttrsi7++) {
                                    if (input.readByte() != 0) {
                                        var temp191 = temp187["xiLianAttrs"][xiLianAttrsi7] = {}; //配饰洗练属性
                                        temp191["career"] = input.readVarInt(false); //职业限定
                                        temp191["attributeType"] = input.readVarInt(false); //属性类型
                                        temp191["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp187["xiLianAttrs"][xiLianAttrsi7] = null;
                                    }
                                }
                                temp187["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp187["growLevel"] = input.readVarInt(false); //成长等级
                                temp187["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength7 = input.readShort();
                                temp187["bestAttrs"] = new Array(bestAttrsLength7);
                                for (var bestAttrsi7 = 0; bestAttrsi7 < bestAttrsLength7; bestAttrsi7++) {
                                    temp187["bestAttrs"][bestAttrsi7] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength7 = input.readShort();
                                temp187["soulAttrs"] = new Array(soulAttrsLength7);
                                for (var soulAttrsi7 = 0; soulAttrsi7 < soulAttrsLength7; soulAttrsi7++) {
                                    temp187["soulAttrs"][soulAttrsi7] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength7 = input.readShort();
                                temp187["godsAttrs"] = new Array(godsAttrsLength7);
                                for (var godsAttrsi7 = 0; godsAttrsi7 < godsAttrsLength7; godsAttrsi7++) {
                                    temp187["godsAttrs"][godsAttrsi7] = input.readVarInt(false); //额外神级属性
                                }
                                temp187["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength7 = input.readShort();
                                temp187["specialDurable"] = [];
                                for (var specialDurablei7 = 0; specialDurablei7 < specialDurableLength7; specialDurablei7++) {
                                    if (input.readByte() != 0) {
                                        var temp192 = temp187["specialDurable"][specialDurablei7] = {}; //特殊耐久消耗值
                                        temp192["type"] = input.readVarInt(false); //类型
                                        temp192["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp187["specialDurable"][specialDurablei7] = null;
                                    }
                                }
                            }
                            var immobilizationLength7 = input.readByte();
                            if (immobilizationLength7 != 0) {
                                var temp193 = temp186["immobilization"] = {}; //固化数据
                                temp193["action"] = input.readVarInt(false); //产生行为
                                temp193["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength7 = input.readByte();
                            if (fromLength7 != 0) {
                                var temp194 = temp186["from"] = {}; //来源
                                temp194["action"] = input.readVarInt(false); //产生行为
                                temp194["firstRole"] = input.readLong(); //第一个玩家id
                                temp194["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength14 = input.readShort();
                                temp194["params"] = [];
                                for (var paramsi14 = 0; paramsi14 < paramsLength14; paramsi14++) {
                                    if (input.readByte() != 0) {
                                        var temp195 = temp194["params"][paramsi14] = {}; //
                                        temp195["key"] = input.readVarInt(false); //
                                        temp195["value"] = input.readString(); //
                                    }
                                    else {
                                        temp194["params"][paramsi14] = null;
                                    }
                                }
                            }
                            temp186["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength7 = input.readByte();
                            if (spriteDataLength7 != 0) {
                                var temp196 = temp186["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp196["level"] = input.readVarInt(false); //灵兽等级
                                temp196["exp"] = input.readVarInt(false); //灵兽经验
                                temp196["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength7 = input.readShort();
                                temp196["skills"] = [];
                                for (var skillsi7 = 0; skillsi7 < skillsLength7; skillsi7++) {
                                    if (input.readByte() != 0) {
                                        var temp197 = temp196["skills"][skillsi7] = {}; //灵兽出战技能
                                        temp197["id"] = input.readVarInt(false); //
                                        temp197["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp196["skills"][skillsi7] = null;
                                    }
                                }
                                var ownerSkillsLength7 = input.readShort();
                                temp196["ownerSkills"] = [];
                                for (var ownerSkillsi7 = 0; ownerSkillsi7 < ownerSkillsLength7; ownerSkillsi7++) {
                                    if (input.readByte() != 0) {
                                        var temp198 = temp196["ownerSkills"][ownerSkillsi7] = {}; //灵兽拥有的技能
                                        temp198["id"] = input.readVarInt(false); //
                                        temp198["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp196["ownerSkills"][ownerSkillsi7] = null;
                                    }
                                }
                                var ownerSkinsLength7 = input.readShort();
                                temp196["ownerSkins"] = [];
                                for (var ownerSkinsi7 = 0; ownerSkinsi7 < ownerSkinsLength7; ownerSkinsi7++) {
                                    if (input.readByte() != 0) {
                                        var temp199 = temp196["ownerSkins"][ownerSkinsi7] = {}; //灵兽拥有的皮肤
                                        temp199["id"] = input.readVarInt(false); //
                                        temp199["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp196["ownerSkins"][ownerSkinsi7] = null;
                                    }
                                }
                                var absorbExpLength7 = input.readShort();
                                temp196["absorbExp"] = [];
                                for (var absorbExpi7 = 0; absorbExpi7 < absorbExpLength7; absorbExpi7++) {
                                    if (input.readByte() != 0) {
                                        var temp200 = temp196["absorbExp"][absorbExpi7] = {}; //灵兽吸收经验值
                                        temp200["id"] = input.readVarInt(false); //
                                        temp200["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp196["absorbExp"][absorbExpi7] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resDailyTimedUnionSnatchSettleMessage["worlds"][worldsi3] = null;
                        }
                    }
                    var unionsLength4 = input.readShort();
                    resDailyTimedUnionSnatchSettleMessage["unions"] = [];
                    for (var unionsi4 = 0; unionsi4 < unionsLength4; unionsi4++) {
                        if (input.readByte() != 0) {
                            var temp201 = resDailyTimedUnionSnatchSettleMessage["unions"][unionsi4] = {}; //行会奖励
                            temp201["uid"] = input.readLong(); //唯一id
                            temp201["itemId"] = input.readVarInt(false); //道具配置id
                            temp201["count"] = input.readVarInt(false); //数量
                            temp201["expire"] = input.readVarInt(false); //过期时间
                            temp201["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp201["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength15 = input.readShort();
                            temp201["params"] = new Array(paramsLength15);
                            for (var paramsi15 = 0; paramsi15 < paramsLength15; paramsi15++) {
                                temp201["params"][paramsi15] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength8 = input.readByte();
                            if (equipDataLength8 != 0) {
                                var temp202 = temp201["equipData"] = {}; //装备属性（null表示没有）
                                temp202["durable"] = input.readVarInt(false); //消耗耐久
                                temp202["starLevel"] = input.readVarInt(false); //升星等级
                                temp202["starLock"] = input.readVarInt(false); //被锁星级
                                temp202["starExp"] = input.readVarInt(false); //升星祝福值
                                temp202["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp202["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp202["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp202["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp202["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp202["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp202["sign"] = input.readString(); //签名
                                var destinyAttrsLength8 = input.readShort();
                                temp202["destinyAttrs"] = [];
                                for (var destinyAttrsi8 = 0; destinyAttrsi8 < destinyAttrsLength8; destinyAttrsi8++) {
                                    if (input.readByte() != 0) {
                                        var temp203 = temp202["destinyAttrs"][destinyAttrsi8] = {}; //命运属性
                                        temp203["career"] = input.readVarInt(false); //职业限定
                                        temp203["attributeType"] = input.readVarInt(false); //属性类型
                                        temp203["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp202["destinyAttrs"][destinyAttrsi8] = null;
                                    }
                                }
                                var superAttrsLength8 = input.readShort();
                                temp202["superAttrs"] = [];
                                for (var superAttrsi8 = 0; superAttrsi8 < superAttrsLength8; superAttrsi8++) {
                                    if (input.readByte() != 0) {
                                        var temp204 = temp202["superAttrs"][superAttrsi8] = {}; //极品属性
                                        temp204["career"] = input.readVarInt(false); //职业限定
                                        temp204["attributeType"] = input.readVarInt(false); //属性类型
                                        temp204["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp202["superAttrs"][superAttrsi8] = null;
                                    }
                                }
                                var identifyAttrsLength8 = input.readShort();
                                temp202["identifyAttrs"] = [];
                                for (var identifyAttrsi8 = 0; identifyAttrsi8 < identifyAttrsLength8; identifyAttrsi8++) {
                                    if (input.readByte() != 0) {
                                        var temp205 = temp202["identifyAttrs"][identifyAttrsi8] = {}; //鉴定属性
                                        temp205["career"] = input.readVarInt(false); //职业限定
                                        temp205["attributeType"] = input.readVarInt(false); //属性类型
                                        temp205["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp202["identifyAttrs"][identifyAttrsi8] = null;
                                    }
                                }
                                var xiLianAttrsLength8 = input.readShort();
                                temp202["xiLianAttrs"] = [];
                                for (var xiLianAttrsi8 = 0; xiLianAttrsi8 < xiLianAttrsLength8; xiLianAttrsi8++) {
                                    if (input.readByte() != 0) {
                                        var temp206 = temp202["xiLianAttrs"][xiLianAttrsi8] = {}; //配饰洗练属性
                                        temp206["career"] = input.readVarInt(false); //职业限定
                                        temp206["attributeType"] = input.readVarInt(false); //属性类型
                                        temp206["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp202["xiLianAttrs"][xiLianAttrsi8] = null;
                                    }
                                }
                                temp202["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp202["growLevel"] = input.readVarInt(false); //成长等级
                                temp202["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength8 = input.readShort();
                                temp202["bestAttrs"] = new Array(bestAttrsLength8);
                                for (var bestAttrsi8 = 0; bestAttrsi8 < bestAttrsLength8; bestAttrsi8++) {
                                    temp202["bestAttrs"][bestAttrsi8] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength8 = input.readShort();
                                temp202["soulAttrs"] = new Array(soulAttrsLength8);
                                for (var soulAttrsi8 = 0; soulAttrsi8 < soulAttrsLength8; soulAttrsi8++) {
                                    temp202["soulAttrs"][soulAttrsi8] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength8 = input.readShort();
                                temp202["godsAttrs"] = new Array(godsAttrsLength8);
                                for (var godsAttrsi8 = 0; godsAttrsi8 < godsAttrsLength8; godsAttrsi8++) {
                                    temp202["godsAttrs"][godsAttrsi8] = input.readVarInt(false); //额外神级属性
                                }
                                temp202["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength8 = input.readShort();
                                temp202["specialDurable"] = [];
                                for (var specialDurablei8 = 0; specialDurablei8 < specialDurableLength8; specialDurablei8++) {
                                    if (input.readByte() != 0) {
                                        var temp207 = temp202["specialDurable"][specialDurablei8] = {}; //特殊耐久消耗值
                                        temp207["type"] = input.readVarInt(false); //类型
                                        temp207["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp202["specialDurable"][specialDurablei8] = null;
                                    }
                                }
                            }
                            var immobilizationLength8 = input.readByte();
                            if (immobilizationLength8 != 0) {
                                var temp208 = temp201["immobilization"] = {}; //固化数据
                                temp208["action"] = input.readVarInt(false); //产生行为
                                temp208["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength8 = input.readByte();
                            if (fromLength8 != 0) {
                                var temp209 = temp201["from"] = {}; //来源
                                temp209["action"] = input.readVarInt(false); //产生行为
                                temp209["firstRole"] = input.readLong(); //第一个玩家id
                                temp209["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength16 = input.readShort();
                                temp209["params"] = [];
                                for (var paramsi16 = 0; paramsi16 < paramsLength16; paramsi16++) {
                                    if (input.readByte() != 0) {
                                        var temp210 = temp209["params"][paramsi16] = {}; //
                                        temp210["key"] = input.readVarInt(false); //
                                        temp210["value"] = input.readString(); //
                                    }
                                    else {
                                        temp209["params"][paramsi16] = null;
                                    }
                                }
                            }
                            temp201["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength8 = input.readByte();
                            if (spriteDataLength8 != 0) {
                                var temp211 = temp201["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp211["level"] = input.readVarInt(false); //灵兽等级
                                temp211["exp"] = input.readVarInt(false); //灵兽经验
                                temp211["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength8 = input.readShort();
                                temp211["skills"] = [];
                                for (var skillsi8 = 0; skillsi8 < skillsLength8; skillsi8++) {
                                    if (input.readByte() != 0) {
                                        var temp212 = temp211["skills"][skillsi8] = {}; //灵兽出战技能
                                        temp212["id"] = input.readVarInt(false); //
                                        temp212["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp211["skills"][skillsi8] = null;
                                    }
                                }
                                var ownerSkillsLength8 = input.readShort();
                                temp211["ownerSkills"] = [];
                                for (var ownerSkillsi8 = 0; ownerSkillsi8 < ownerSkillsLength8; ownerSkillsi8++) {
                                    if (input.readByte() != 0) {
                                        var temp213 = temp211["ownerSkills"][ownerSkillsi8] = {}; //灵兽拥有的技能
                                        temp213["id"] = input.readVarInt(false); //
                                        temp213["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp211["ownerSkills"][ownerSkillsi8] = null;
                                    }
                                }
                                var ownerSkinsLength8 = input.readShort();
                                temp211["ownerSkins"] = [];
                                for (var ownerSkinsi8 = 0; ownerSkinsi8 < ownerSkinsLength8; ownerSkinsi8++) {
                                    if (input.readByte() != 0) {
                                        var temp214 = temp211["ownerSkins"][ownerSkinsi8] = {}; //灵兽拥有的皮肤
                                        temp214["id"] = input.readVarInt(false); //
                                        temp214["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp211["ownerSkins"][ownerSkinsi8] = null;
                                    }
                                }
                                var absorbExpLength8 = input.readShort();
                                temp211["absorbExp"] = [];
                                for (var absorbExpi8 = 0; absorbExpi8 < absorbExpLength8; absorbExpi8++) {
                                    if (input.readByte() != 0) {
                                        var temp215 = temp211["absorbExp"][absorbExpi8] = {}; //灵兽吸收经验值
                                        temp215["id"] = input.readVarInt(false); //
                                        temp215["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp211["absorbExp"][absorbExpi8] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resDailyTimedUnionSnatchSettleMessage["unions"][unionsi4] = null;
                        }
                    }
                    var globalsLength3 = input.readShort();
                    resDailyTimedUnionSnatchSettleMessage["globals"] = [];
                    for (var globalsi3 = 0; globalsi3 < globalsLength3; globalsi3++) {
                        if (input.readByte() != 0) {
                            var temp216 = resDailyTimedUnionSnatchSettleMessage["globals"][globalsi3] = {}; //跨服奖励
                            temp216["uid"] = input.readLong(); //唯一id
                            temp216["itemId"] = input.readVarInt(false); //道具配置id
                            temp216["count"] = input.readVarInt(false); //数量
                            temp216["expire"] = input.readVarInt(false); //过期时间
                            temp216["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp216["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength17 = input.readShort();
                            temp216["params"] = new Array(paramsLength17);
                            for (var paramsi17 = 0; paramsi17 < paramsLength17; paramsi17++) {
                                temp216["params"][paramsi17] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength9 = input.readByte();
                            if (equipDataLength9 != 0) {
                                var temp217 = temp216["equipData"] = {}; //装备属性（null表示没有）
                                temp217["durable"] = input.readVarInt(false); //消耗耐久
                                temp217["starLevel"] = input.readVarInt(false); //升星等级
                                temp217["starLock"] = input.readVarInt(false); //被锁星级
                                temp217["starExp"] = input.readVarInt(false); //升星祝福值
                                temp217["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp217["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp217["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp217["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp217["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp217["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp217["sign"] = input.readString(); //签名
                                var destinyAttrsLength9 = input.readShort();
                                temp217["destinyAttrs"] = [];
                                for (var destinyAttrsi9 = 0; destinyAttrsi9 < destinyAttrsLength9; destinyAttrsi9++) {
                                    if (input.readByte() != 0) {
                                        var temp218 = temp217["destinyAttrs"][destinyAttrsi9] = {}; //命运属性
                                        temp218["career"] = input.readVarInt(false); //职业限定
                                        temp218["attributeType"] = input.readVarInt(false); //属性类型
                                        temp218["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp217["destinyAttrs"][destinyAttrsi9] = null;
                                    }
                                }
                                var superAttrsLength9 = input.readShort();
                                temp217["superAttrs"] = [];
                                for (var superAttrsi9 = 0; superAttrsi9 < superAttrsLength9; superAttrsi9++) {
                                    if (input.readByte() != 0) {
                                        var temp219 = temp217["superAttrs"][superAttrsi9] = {}; //极品属性
                                        temp219["career"] = input.readVarInt(false); //职业限定
                                        temp219["attributeType"] = input.readVarInt(false); //属性类型
                                        temp219["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp217["superAttrs"][superAttrsi9] = null;
                                    }
                                }
                                var identifyAttrsLength9 = input.readShort();
                                temp217["identifyAttrs"] = [];
                                for (var identifyAttrsi9 = 0; identifyAttrsi9 < identifyAttrsLength9; identifyAttrsi9++) {
                                    if (input.readByte() != 0) {
                                        var temp220 = temp217["identifyAttrs"][identifyAttrsi9] = {}; //鉴定属性
                                        temp220["career"] = input.readVarInt(false); //职业限定
                                        temp220["attributeType"] = input.readVarInt(false); //属性类型
                                        temp220["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp217["identifyAttrs"][identifyAttrsi9] = null;
                                    }
                                }
                                var xiLianAttrsLength9 = input.readShort();
                                temp217["xiLianAttrs"] = [];
                                for (var xiLianAttrsi9 = 0; xiLianAttrsi9 < xiLianAttrsLength9; xiLianAttrsi9++) {
                                    if (input.readByte() != 0) {
                                        var temp221 = temp217["xiLianAttrs"][xiLianAttrsi9] = {}; //配饰洗练属性
                                        temp221["career"] = input.readVarInt(false); //职业限定
                                        temp221["attributeType"] = input.readVarInt(false); //属性类型
                                        temp221["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp217["xiLianAttrs"][xiLianAttrsi9] = null;
                                    }
                                }
                                temp217["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp217["growLevel"] = input.readVarInt(false); //成长等级
                                temp217["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength9 = input.readShort();
                                temp217["bestAttrs"] = new Array(bestAttrsLength9);
                                for (var bestAttrsi9 = 0; bestAttrsi9 < bestAttrsLength9; bestAttrsi9++) {
                                    temp217["bestAttrs"][bestAttrsi9] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength9 = input.readShort();
                                temp217["soulAttrs"] = new Array(soulAttrsLength9);
                                for (var soulAttrsi9 = 0; soulAttrsi9 < soulAttrsLength9; soulAttrsi9++) {
                                    temp217["soulAttrs"][soulAttrsi9] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength9 = input.readShort();
                                temp217["godsAttrs"] = new Array(godsAttrsLength9);
                                for (var godsAttrsi9 = 0; godsAttrsi9 < godsAttrsLength9; godsAttrsi9++) {
                                    temp217["godsAttrs"][godsAttrsi9] = input.readVarInt(false); //额外神级属性
                                }
                                temp217["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength9 = input.readShort();
                                temp217["specialDurable"] = [];
                                for (var specialDurablei9 = 0; specialDurablei9 < specialDurableLength9; specialDurablei9++) {
                                    if (input.readByte() != 0) {
                                        var temp222 = temp217["specialDurable"][specialDurablei9] = {}; //特殊耐久消耗值
                                        temp222["type"] = input.readVarInt(false); //类型
                                        temp222["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp217["specialDurable"][specialDurablei9] = null;
                                    }
                                }
                            }
                            var immobilizationLength9 = input.readByte();
                            if (immobilizationLength9 != 0) {
                                var temp223 = temp216["immobilization"] = {}; //固化数据
                                temp223["action"] = input.readVarInt(false); //产生行为
                                temp223["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength9 = input.readByte();
                            if (fromLength9 != 0) {
                                var temp224 = temp216["from"] = {}; //来源
                                temp224["action"] = input.readVarInt(false); //产生行为
                                temp224["firstRole"] = input.readLong(); //第一个玩家id
                                temp224["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength18 = input.readShort();
                                temp224["params"] = [];
                                for (var paramsi18 = 0; paramsi18 < paramsLength18; paramsi18++) {
                                    if (input.readByte() != 0) {
                                        var temp225 = temp224["params"][paramsi18] = {}; //
                                        temp225["key"] = input.readVarInt(false); //
                                        temp225["value"] = input.readString(); //
                                    }
                                    else {
                                        temp224["params"][paramsi18] = null;
                                    }
                                }
                            }
                            temp216["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength9 = input.readByte();
                            if (spriteDataLength9 != 0) {
                                var temp226 = temp216["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp226["level"] = input.readVarInt(false); //灵兽等级
                                temp226["exp"] = input.readVarInt(false); //灵兽经验
                                temp226["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength9 = input.readShort();
                                temp226["skills"] = [];
                                for (var skillsi9 = 0; skillsi9 < skillsLength9; skillsi9++) {
                                    if (input.readByte() != 0) {
                                        var temp227 = temp226["skills"][skillsi9] = {}; //灵兽出战技能
                                        temp227["id"] = input.readVarInt(false); //
                                        temp227["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp226["skills"][skillsi9] = null;
                                    }
                                }
                                var ownerSkillsLength9 = input.readShort();
                                temp226["ownerSkills"] = [];
                                for (var ownerSkillsi9 = 0; ownerSkillsi9 < ownerSkillsLength9; ownerSkillsi9++) {
                                    if (input.readByte() != 0) {
                                        var temp228 = temp226["ownerSkills"][ownerSkillsi9] = {}; //灵兽拥有的技能
                                        temp228["id"] = input.readVarInt(false); //
                                        temp228["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp226["ownerSkills"][ownerSkillsi9] = null;
                                    }
                                }
                                var ownerSkinsLength9 = input.readShort();
                                temp226["ownerSkins"] = [];
                                for (var ownerSkinsi9 = 0; ownerSkinsi9 < ownerSkinsLength9; ownerSkinsi9++) {
                                    if (input.readByte() != 0) {
                                        var temp229 = temp226["ownerSkins"][ownerSkinsi9] = {}; //灵兽拥有的皮肤
                                        temp229["id"] = input.readVarInt(false); //
                                        temp229["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp226["ownerSkins"][ownerSkinsi9] = null;
                                    }
                                }
                                var absorbExpLength9 = input.readShort();
                                temp226["absorbExp"] = [];
                                for (var absorbExpi9 = 0; absorbExpi9 < absorbExpLength9; absorbExpi9++) {
                                    if (input.readByte() != 0) {
                                        var temp230 = temp226["absorbExp"][absorbExpi9] = {}; //灵兽吸收经验值
                                        temp230["id"] = input.readVarInt(false); //
                                        temp230["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp226["absorbExp"][absorbExpi9] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resDailyTimedUnionSnatchSettleMessage["globals"][globalsi3] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedUnionSnatchSettleMessage);
                    break;
                case 175084 /* DailyModelCMD.CMDResDailyTimedShaBaKeInfoMessage */:
                    var resDailyTimedShaBaKeInfoMessage = {};
                    resDailyTimedShaBaKeInfoMessage["unionName"] = input.readString(); //当前占领行会名字
                    resDailyTimedShaBaKeInfoMessage["roleScore"] = input.readVarInt(false); //个人积分
                    resDailyTimedShaBaKeInfoMessage["rewardType"] = input.readVarInt(false); //当前待领奖类型
                    resDailyTimedShaBaKeInfoMessage["rewardId"] = input.readVarInt(false); //当前待领奖id
                    resDailyTimedShaBaKeInfoMessage["type"] = input.readVarInt(false); //排行类型
                    this.sendNotif(cmd, resDailyTimedShaBaKeInfoMessage);
                    break;
                case 175086 /* DailyModelCMD.CMDResDailyTimedShaBaKeRewardMessage */:
                    var resDailyTimedShaBaKeRewardMessage = {};
                    resDailyTimedShaBaKeRewardMessage["rewardType"] = input.readVarInt(false); //当前待领奖类型
                    resDailyTimedShaBaKeRewardMessage["rewardId"] = input.readVarInt(false); //当前待领奖id
                    this.sendNotif(cmd, resDailyTimedShaBaKeRewardMessage);
                    break;
                case 175087 /* DailyModelCMD.CMDResDailyTimedShaBaKeUnionChangeMessage */:
                    var resDailyTimedShaBaKeUnionChangeMessage = input.readString(); //当前占领行会名字
                    this.sendNotif(cmd, resDailyTimedShaBaKeUnionChangeMessage);
                    break;
                case 175088 /* DailyModelCMD.CMDResDailyTimedShaBaKeRankChangeMessage */:
                    var roleRankingsLength2 = input.readShort();
                    var resDailyTimedShaBaKeRankChangeMessage = [];
                    for (var roleRankingsi2 = 0; roleRankingsi2 < roleRankingsLength2; roleRankingsi2++) {
                        if (input.readByte() != 0) {
                            var temp231 = resDailyTimedShaBaKeRankChangeMessage[roleRankingsi2] = {}; //个人排名
                            temp231["ranking"] = input.readVarInt(false); //
                            temp231["uid"] = input.readLong(); //
                            temp231["name"] = input.readString(); //
                            temp231["score"] = input.readLong(); //
                        }
                        else {
                            resDailyTimedShaBaKeRankChangeMessage[roleRankingsi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedShaBaKeRankChangeMessage);
                    break;
                case 175089 /* DailyModelCMD.CMDResDailyTimedShaBaKeScoreChangeMessage */:
                    var resDailyTimedShaBaKeScoreChangeMessage = input.readVarInt(false); //个人积分
                    this.sendNotif(cmd, resDailyTimedShaBaKeScoreChangeMessage);
                    break;
                case 175091 /* DailyModelCMD.CMDResDailyTimedShaBaKePanelInfoMessage */:
                    var resDailyTimedShaBaKePanelInfoMessage = {};
                    resDailyTimedShaBaKePanelInfoMessage["unionName"] = input.readString(); //当前占领行会名字
                    resDailyTimedShaBaKePanelInfoMessage["time"] = input.readVarInt(false); //当前第几次活动
                    resDailyTimedShaBaKePanelInfoMessage["lastUnion"] = input.readString(); //上次占领行会名
                    var shaBaKeBeansLength1 = input.readShort();
                    resDailyTimedShaBaKePanelInfoMessage["shaBaKeBeans"] = [];
                    for (var shaBaKeBeansi1 = 0; shaBaKeBeansi1 < shaBaKeBeansLength1; shaBaKeBeansi1++) {
                        if (input.readByte() != 0) {
                            var temp232 = resDailyTimedShaBaKePanelInfoMessage["shaBaKeBeans"][shaBaKeBeansi1] = {}; //展示角色列表
                            temp232["position"] = input.readVarInt(false); //职位 1会长2副会长
                            temp232["roleId"] = input.readLong(); //id
                            temp232["roleName"] = input.readString(); //名字
                            temp232["career"] = input.readVarInt(false); //职业
                            temp232["sex"] = input.readVarInt(false); //性别
                            temp232["hair"] = input.readVarInt(false); //发型
                            var equipsLength1 = input.readShort();
                            temp232["equips"] = [];
                            for (var equipsi1 = 0; equipsi1 < equipsLength1; equipsi1++) {
                                if (input.readByte() != 0) {
                                    var temp233 = temp232["equips"][equipsi1] = {}; //装备列表
                                    var itemLength1 = input.readByte();
                                    if (itemLength1 != 0) {
                                        var temp234 = temp233["item"] = {}; //
                                        temp234["uid"] = input.readLong(); //唯一id
                                        temp234["itemId"] = input.readVarInt(false); //道具配置id
                                        temp234["count"] = input.readVarInt(false); //数量
                                        temp234["expire"] = input.readVarInt(false); //过期时间
                                        temp234["uTimes"] = input.readVarInt(false); //已经使用的次数
                                        temp234["time"] = input.readVarInt(false); //道具获得时间
                                        var paramsLength19 = input.readShort();
                                        temp234["params"] = new Array(paramsLength19);
                                        for (var paramsi19 = 0; paramsi19 < paramsLength19; paramsi19++) {
                                            temp234["params"][paramsi19] = input.readVarInt(false); //道具参数
                                        }
                                        var equipDataLength10 = input.readByte();
                                        if (equipDataLength10 != 0) {
                                            var temp235 = temp234["equipData"] = {}; //装备属性（null表示没有）
                                            temp235["durable"] = input.readVarInt(false); //消耗耐久
                                            temp235["starLevel"] = input.readVarInt(false); //升星等级
                                            temp235["starLock"] = input.readVarInt(false); //被锁星级
                                            temp235["starExp"] = input.readVarInt(false); //升星祝福值
                                            temp235["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                            temp235["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                            temp235["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                            temp235["spiritLevel"] = input.readVarInt(false); //注灵等级
                                            temp235["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                            temp235["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                            temp235["sign"] = input.readString(); //签名
                                            var destinyAttrsLength10 = input.readShort();
                                            temp235["destinyAttrs"] = [];
                                            for (var destinyAttrsi10 = 0; destinyAttrsi10 < destinyAttrsLength10; destinyAttrsi10++) {
                                                if (input.readByte() != 0) {
                                                    var temp236 = temp235["destinyAttrs"][destinyAttrsi10] = {}; //命运属性
                                                    temp236["career"] = input.readVarInt(false); //职业限定
                                                    temp236["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp236["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp235["destinyAttrs"][destinyAttrsi10] = null;
                                                }
                                            }
                                            var superAttrsLength10 = input.readShort();
                                            temp235["superAttrs"] = [];
                                            for (var superAttrsi10 = 0; superAttrsi10 < superAttrsLength10; superAttrsi10++) {
                                                if (input.readByte() != 0) {
                                                    var temp237 = temp235["superAttrs"][superAttrsi10] = {}; //极品属性
                                                    temp237["career"] = input.readVarInt(false); //职业限定
                                                    temp237["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp237["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp235["superAttrs"][superAttrsi10] = null;
                                                }
                                            }
                                            var identifyAttrsLength10 = input.readShort();
                                            temp235["identifyAttrs"] = [];
                                            for (var identifyAttrsi10 = 0; identifyAttrsi10 < identifyAttrsLength10; identifyAttrsi10++) {
                                                if (input.readByte() != 0) {
                                                    var temp238 = temp235["identifyAttrs"][identifyAttrsi10] = {}; //鉴定属性
                                                    temp238["career"] = input.readVarInt(false); //职业限定
                                                    temp238["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp238["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp235["identifyAttrs"][identifyAttrsi10] = null;
                                                }
                                            }
                                            var xiLianAttrsLength10 = input.readShort();
                                            temp235["xiLianAttrs"] = [];
                                            for (var xiLianAttrsi10 = 0; xiLianAttrsi10 < xiLianAttrsLength10; xiLianAttrsi10++) {
                                                if (input.readByte() != 0) {
                                                    var temp239 = temp235["xiLianAttrs"][xiLianAttrsi10] = {}; //配饰洗练属性
                                                    temp239["career"] = input.readVarInt(false); //职业限定
                                                    temp239["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp239["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp235["xiLianAttrs"][xiLianAttrsi10] = null;
                                                }
                                            }
                                            temp235["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                            temp235["growLevel"] = input.readVarInt(false); //成长等级
                                            temp235["growExp"] = input.readVarInt(false); //成长经验
                                            var bestAttrsLength10 = input.readShort();
                                            temp235["bestAttrs"] = new Array(bestAttrsLength10);
                                            for (var bestAttrsi10 = 0; bestAttrsi10 < bestAttrsLength10; bestAttrsi10++) {
                                                temp235["bestAttrs"][bestAttrsi10] = input.readVarInt(false); //极品属性（新）
                                            }
                                            var soulAttrsLength10 = input.readShort();
                                            temp235["soulAttrs"] = new Array(soulAttrsLength10);
                                            for (var soulAttrsi10 = 0; soulAttrsi10 < soulAttrsLength10; soulAttrsi10++) {
                                                temp235["soulAttrs"][soulAttrsi10] = input.readVarInt(false); //心魂属性
                                            }
                                            var godsAttrsLength10 = input.readShort();
                                            temp235["godsAttrs"] = new Array(godsAttrsLength10);
                                            for (var godsAttrsi10 = 0; godsAttrsi10 < godsAttrsLength10; godsAttrsi10++) {
                                                temp235["godsAttrs"][godsAttrsi10] = input.readVarInt(false); //额外神级属性
                                            }
                                            temp235["qualification"] = input.readVarInt(false); //资质
                                            var specialDurableLength10 = input.readShort();
                                            temp235["specialDurable"] = [];
                                            for (var specialDurablei10 = 0; specialDurablei10 < specialDurableLength10; specialDurablei10++) {
                                                if (input.readByte() != 0) {
                                                    var temp240 = temp235["specialDurable"][specialDurablei10] = {}; //特殊耐久消耗值
                                                    temp240["type"] = input.readVarInt(false); //类型
                                                    temp240["value"] = input.readVarInt(false); //已消耗值
                                                }
                                                else {
                                                    temp235["specialDurable"][specialDurablei10] = null;
                                                }
                                            }
                                        }
                                        var immobilizationLength10 = input.readByte();
                                        if (immobilizationLength10 != 0) {
                                            var temp241 = temp234["immobilization"] = {}; //固化数据
                                            temp241["action"] = input.readVarInt(false); //产生行为
                                            temp241["expire"] = input.readVarInt(false); //过期时间 时间戳
                                        }
                                        var fromLength10 = input.readByte();
                                        if (fromLength10 != 0) {
                                            var temp242 = temp234["from"] = {}; //来源
                                            temp242["action"] = input.readVarInt(false); //产生行为
                                            temp242["firstRole"] = input.readLong(); //第一个玩家id
                                            temp242["firstRoleName"] = input.readString(); //第一个玩家名字
                                            var paramsLength20 = input.readShort();
                                            temp242["params"] = [];
                                            for (var paramsi20 = 0; paramsi20 < paramsLength20; paramsi20++) {
                                                if (input.readByte() != 0) {
                                                    var temp243 = temp242["params"][paramsi20] = {}; //
                                                    temp243["key"] = input.readVarInt(false); //
                                                    temp243["value"] = input.readString(); //
                                                }
                                                else {
                                                    temp242["params"][paramsi20] = null;
                                                }
                                            }
                                        }
                                        temp234["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                                        var spriteDataLength10 = input.readByte();
                                        if (spriteDataLength10 != 0) {
                                            var temp244 = temp234["spriteData"] = {}; //灵兽数据（null表示没有）
                                            temp244["level"] = input.readVarInt(false); //灵兽等级
                                            temp244["exp"] = input.readVarInt(false); //灵兽经验
                                            temp244["skin"] = input.readVarInt(false); //灵兽皮肤
                                            var skillsLength10 = input.readShort();
                                            temp244["skills"] = [];
                                            for (var skillsi10 = 0; skillsi10 < skillsLength10; skillsi10++) {
                                                if (input.readByte() != 0) {
                                                    var temp245 = temp244["skills"][skillsi10] = {}; //灵兽出战技能
                                                    temp245["id"] = input.readVarInt(false); //
                                                    temp245["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp244["skills"][skillsi10] = null;
                                                }
                                            }
                                            var ownerSkillsLength10 = input.readShort();
                                            temp244["ownerSkills"] = [];
                                            for (var ownerSkillsi10 = 0; ownerSkillsi10 < ownerSkillsLength10; ownerSkillsi10++) {
                                                if (input.readByte() != 0) {
                                                    var temp246 = temp244["ownerSkills"][ownerSkillsi10] = {}; //灵兽拥有的技能
                                                    temp246["id"] = input.readVarInt(false); //
                                                    temp246["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp244["ownerSkills"][ownerSkillsi10] = null;
                                                }
                                            }
                                            var ownerSkinsLength10 = input.readShort();
                                            temp244["ownerSkins"] = [];
                                            for (var ownerSkinsi10 = 0; ownerSkinsi10 < ownerSkinsLength10; ownerSkinsi10++) {
                                                if (input.readByte() != 0) {
                                                    var temp247 = temp244["ownerSkins"][ownerSkinsi10] = {}; //灵兽拥有的皮肤
                                                    temp247["id"] = input.readVarInt(false); //
                                                    temp247["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp244["ownerSkins"][ownerSkinsi10] = null;
                                                }
                                            }
                                            var absorbExpLength10 = input.readShort();
                                            temp244["absorbExp"] = [];
                                            for (var absorbExpi10 = 0; absorbExpi10 < absorbExpLength10; absorbExpi10++) {
                                                if (input.readByte() != 0) {
                                                    var temp248 = temp244["absorbExp"][absorbExpi10] = {}; //灵兽吸收经验值
                                                    temp248["id"] = input.readVarInt(false); //
                                                    temp248["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp244["absorbExp"][absorbExpi10] = null;
                                                }
                                            }
                                        }
                                    }
                                    temp233["index"] = input.readVarInt(false); //装备位置
                                }
                                else {
                                    temp232["equips"][equipsi1] = null;
                                }
                            }
                            var appearanceWearsLength1 = input.readShort();
                            temp232["appearanceWears"] = [];
                            for (var appearanceWearsi1 = 0; appearanceWearsi1 < appearanceWearsLength1; appearanceWearsi1++) {
                                if (input.readByte() != 0) {
                                    var temp249 = temp232["appearanceWears"][appearanceWearsi1] = {}; //时装列表
                                    temp249["type"] = input.readVarInt(false); //
                                    var idLength1 = input.readShort();
                                    temp249["id"] = new Array(idLength1);
                                    for (var idi1 = 0; idi1 < idLength1; idi1++) {
                                        temp249["id"][idi1] = input.readVarInt(false); //
                                    }
                                }
                                else {
                                    temp232["appearanceWears"][appearanceWearsi1] = null;
                                }
                            }
                        }
                        else {
                            resDailyTimedShaBaKePanelInfoMessage["shaBaKeBeans"][shaBaKeBeansi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedShaBaKePanelInfoMessage);
                    break;
                case 175092 /* DailyModelCMD.CMDResDailyTimedShaBaKeSettleMessage */:
                    var resDailyTimedShaBaKeSettleMessage = {};
                    resDailyTimedShaBaKeSettleMessage["unionName"] = input.readString(); //获胜行会
                    var worldsLength4 = input.readShort();
                    resDailyTimedShaBaKeSettleMessage["worlds"] = [];
                    for (var worldsi4 = 0; worldsi4 < worldsLength4; worldsi4++) {
                        if (input.readByte() != 0) {
                            var temp250 = resDailyTimedShaBaKeSettleMessage["worlds"][worldsi4] = {}; //世界奖励
                            temp250["uid"] = input.readLong(); //唯一id
                            temp250["itemId"] = input.readVarInt(false); //道具配置id
                            temp250["count"] = input.readVarInt(false); //数量
                            temp250["expire"] = input.readVarInt(false); //过期时间
                            temp250["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp250["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength21 = input.readShort();
                            temp250["params"] = new Array(paramsLength21);
                            for (var paramsi21 = 0; paramsi21 < paramsLength21; paramsi21++) {
                                temp250["params"][paramsi21] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength11 = input.readByte();
                            if (equipDataLength11 != 0) {
                                var temp251 = temp250["equipData"] = {}; //装备属性（null表示没有）
                                temp251["durable"] = input.readVarInt(false); //消耗耐久
                                temp251["starLevel"] = input.readVarInt(false); //升星等级
                                temp251["starLock"] = input.readVarInt(false); //被锁星级
                                temp251["starExp"] = input.readVarInt(false); //升星祝福值
                                temp251["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp251["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp251["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp251["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp251["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp251["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp251["sign"] = input.readString(); //签名
                                var destinyAttrsLength11 = input.readShort();
                                temp251["destinyAttrs"] = [];
                                for (var destinyAttrsi11 = 0; destinyAttrsi11 < destinyAttrsLength11; destinyAttrsi11++) {
                                    if (input.readByte() != 0) {
                                        var temp252 = temp251["destinyAttrs"][destinyAttrsi11] = {}; //命运属性
                                        temp252["career"] = input.readVarInt(false); //职业限定
                                        temp252["attributeType"] = input.readVarInt(false); //属性类型
                                        temp252["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp251["destinyAttrs"][destinyAttrsi11] = null;
                                    }
                                }
                                var superAttrsLength11 = input.readShort();
                                temp251["superAttrs"] = [];
                                for (var superAttrsi11 = 0; superAttrsi11 < superAttrsLength11; superAttrsi11++) {
                                    if (input.readByte() != 0) {
                                        var temp253 = temp251["superAttrs"][superAttrsi11] = {}; //极品属性
                                        temp253["career"] = input.readVarInt(false); //职业限定
                                        temp253["attributeType"] = input.readVarInt(false); //属性类型
                                        temp253["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp251["superAttrs"][superAttrsi11] = null;
                                    }
                                }
                                var identifyAttrsLength11 = input.readShort();
                                temp251["identifyAttrs"] = [];
                                for (var identifyAttrsi11 = 0; identifyAttrsi11 < identifyAttrsLength11; identifyAttrsi11++) {
                                    if (input.readByte() != 0) {
                                        var temp254 = temp251["identifyAttrs"][identifyAttrsi11] = {}; //鉴定属性
                                        temp254["career"] = input.readVarInt(false); //职业限定
                                        temp254["attributeType"] = input.readVarInt(false); //属性类型
                                        temp254["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp251["identifyAttrs"][identifyAttrsi11] = null;
                                    }
                                }
                                var xiLianAttrsLength11 = input.readShort();
                                temp251["xiLianAttrs"] = [];
                                for (var xiLianAttrsi11 = 0; xiLianAttrsi11 < xiLianAttrsLength11; xiLianAttrsi11++) {
                                    if (input.readByte() != 0) {
                                        var temp255 = temp251["xiLianAttrs"][xiLianAttrsi11] = {}; //配饰洗练属性
                                        temp255["career"] = input.readVarInt(false); //职业限定
                                        temp255["attributeType"] = input.readVarInt(false); //属性类型
                                        temp255["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp251["xiLianAttrs"][xiLianAttrsi11] = null;
                                    }
                                }
                                temp251["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp251["growLevel"] = input.readVarInt(false); //成长等级
                                temp251["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength11 = input.readShort();
                                temp251["bestAttrs"] = new Array(bestAttrsLength11);
                                for (var bestAttrsi11 = 0; bestAttrsi11 < bestAttrsLength11; bestAttrsi11++) {
                                    temp251["bestAttrs"][bestAttrsi11] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength11 = input.readShort();
                                temp251["soulAttrs"] = new Array(soulAttrsLength11);
                                for (var soulAttrsi11 = 0; soulAttrsi11 < soulAttrsLength11; soulAttrsi11++) {
                                    temp251["soulAttrs"][soulAttrsi11] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength11 = input.readShort();
                                temp251["godsAttrs"] = new Array(godsAttrsLength11);
                                for (var godsAttrsi11 = 0; godsAttrsi11 < godsAttrsLength11; godsAttrsi11++) {
                                    temp251["godsAttrs"][godsAttrsi11] = input.readVarInt(false); //额外神级属性
                                }
                                temp251["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength11 = input.readShort();
                                temp251["specialDurable"] = [];
                                for (var specialDurablei11 = 0; specialDurablei11 < specialDurableLength11; specialDurablei11++) {
                                    if (input.readByte() != 0) {
                                        var temp256 = temp251["specialDurable"][specialDurablei11] = {}; //特殊耐久消耗值
                                        temp256["type"] = input.readVarInt(false); //类型
                                        temp256["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp251["specialDurable"][specialDurablei11] = null;
                                    }
                                }
                            }
                            var immobilizationLength11 = input.readByte();
                            if (immobilizationLength11 != 0) {
                                var temp257 = temp250["immobilization"] = {}; //固化数据
                                temp257["action"] = input.readVarInt(false); //产生行为
                                temp257["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength11 = input.readByte();
                            if (fromLength11 != 0) {
                                var temp258 = temp250["from"] = {}; //来源
                                temp258["action"] = input.readVarInt(false); //产生行为
                                temp258["firstRole"] = input.readLong(); //第一个玩家id
                                temp258["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength22 = input.readShort();
                                temp258["params"] = [];
                                for (var paramsi22 = 0; paramsi22 < paramsLength22; paramsi22++) {
                                    if (input.readByte() != 0) {
                                        var temp259 = temp258["params"][paramsi22] = {}; //
                                        temp259["key"] = input.readVarInt(false); //
                                        temp259["value"] = input.readString(); //
                                    }
                                    else {
                                        temp258["params"][paramsi22] = null;
                                    }
                                }
                            }
                            temp250["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength11 = input.readByte();
                            if (spriteDataLength11 != 0) {
                                var temp260 = temp250["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp260["level"] = input.readVarInt(false); //灵兽等级
                                temp260["exp"] = input.readVarInt(false); //灵兽经验
                                temp260["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength11 = input.readShort();
                                temp260["skills"] = [];
                                for (var skillsi11 = 0; skillsi11 < skillsLength11; skillsi11++) {
                                    if (input.readByte() != 0) {
                                        var temp261 = temp260["skills"][skillsi11] = {}; //灵兽出战技能
                                        temp261["id"] = input.readVarInt(false); //
                                        temp261["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp260["skills"][skillsi11] = null;
                                    }
                                }
                                var ownerSkillsLength11 = input.readShort();
                                temp260["ownerSkills"] = [];
                                for (var ownerSkillsi11 = 0; ownerSkillsi11 < ownerSkillsLength11; ownerSkillsi11++) {
                                    if (input.readByte() != 0) {
                                        var temp262 = temp260["ownerSkills"][ownerSkillsi11] = {}; //灵兽拥有的技能
                                        temp262["id"] = input.readVarInt(false); //
                                        temp262["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp260["ownerSkills"][ownerSkillsi11] = null;
                                    }
                                }
                                var ownerSkinsLength11 = input.readShort();
                                temp260["ownerSkins"] = [];
                                for (var ownerSkinsi11 = 0; ownerSkinsi11 < ownerSkinsLength11; ownerSkinsi11++) {
                                    if (input.readByte() != 0) {
                                        var temp263 = temp260["ownerSkins"][ownerSkinsi11] = {}; //灵兽拥有的皮肤
                                        temp263["id"] = input.readVarInt(false); //
                                        temp263["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp260["ownerSkins"][ownerSkinsi11] = null;
                                    }
                                }
                                var absorbExpLength11 = input.readShort();
                                temp260["absorbExp"] = [];
                                for (var absorbExpi11 = 0; absorbExpi11 < absorbExpLength11; absorbExpi11++) {
                                    if (input.readByte() != 0) {
                                        var temp264 = temp260["absorbExp"][absorbExpi11] = {}; //灵兽吸收经验值
                                        temp264["id"] = input.readVarInt(false); //
                                        temp264["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp260["absorbExp"][absorbExpi11] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resDailyTimedShaBaKeSettleMessage["worlds"][worldsi4] = null;
                        }
                    }
                    var unionsLength5 = input.readShort();
                    resDailyTimedShaBaKeSettleMessage["unions"] = [];
                    for (var unionsi5 = 0; unionsi5 < unionsLength5; unionsi5++) {
                        if (input.readByte() != 0) {
                            var temp265 = resDailyTimedShaBaKeSettleMessage["unions"][unionsi5] = {}; //行会奖励
                            temp265["uid"] = input.readLong(); //唯一id
                            temp265["itemId"] = input.readVarInt(false); //道具配置id
                            temp265["count"] = input.readVarInt(false); //数量
                            temp265["expire"] = input.readVarInt(false); //过期时间
                            temp265["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp265["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength23 = input.readShort();
                            temp265["params"] = new Array(paramsLength23);
                            for (var paramsi23 = 0; paramsi23 < paramsLength23; paramsi23++) {
                                temp265["params"][paramsi23] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength12 = input.readByte();
                            if (equipDataLength12 != 0) {
                                var temp266 = temp265["equipData"] = {}; //装备属性（null表示没有）
                                temp266["durable"] = input.readVarInt(false); //消耗耐久
                                temp266["starLevel"] = input.readVarInt(false); //升星等级
                                temp266["starLock"] = input.readVarInt(false); //被锁星级
                                temp266["starExp"] = input.readVarInt(false); //升星祝福值
                                temp266["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp266["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp266["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp266["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp266["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp266["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp266["sign"] = input.readString(); //签名
                                var destinyAttrsLength12 = input.readShort();
                                temp266["destinyAttrs"] = [];
                                for (var destinyAttrsi12 = 0; destinyAttrsi12 < destinyAttrsLength12; destinyAttrsi12++) {
                                    if (input.readByte() != 0) {
                                        var temp267 = temp266["destinyAttrs"][destinyAttrsi12] = {}; //命运属性
                                        temp267["career"] = input.readVarInt(false); //职业限定
                                        temp267["attributeType"] = input.readVarInt(false); //属性类型
                                        temp267["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp266["destinyAttrs"][destinyAttrsi12] = null;
                                    }
                                }
                                var superAttrsLength12 = input.readShort();
                                temp266["superAttrs"] = [];
                                for (var superAttrsi12 = 0; superAttrsi12 < superAttrsLength12; superAttrsi12++) {
                                    if (input.readByte() != 0) {
                                        var temp268 = temp266["superAttrs"][superAttrsi12] = {}; //极品属性
                                        temp268["career"] = input.readVarInt(false); //职业限定
                                        temp268["attributeType"] = input.readVarInt(false); //属性类型
                                        temp268["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp266["superAttrs"][superAttrsi12] = null;
                                    }
                                }
                                var identifyAttrsLength12 = input.readShort();
                                temp266["identifyAttrs"] = [];
                                for (var identifyAttrsi12 = 0; identifyAttrsi12 < identifyAttrsLength12; identifyAttrsi12++) {
                                    if (input.readByte() != 0) {
                                        var temp269 = temp266["identifyAttrs"][identifyAttrsi12] = {}; //鉴定属性
                                        temp269["career"] = input.readVarInt(false); //职业限定
                                        temp269["attributeType"] = input.readVarInt(false); //属性类型
                                        temp269["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp266["identifyAttrs"][identifyAttrsi12] = null;
                                    }
                                }
                                var xiLianAttrsLength12 = input.readShort();
                                temp266["xiLianAttrs"] = [];
                                for (var xiLianAttrsi12 = 0; xiLianAttrsi12 < xiLianAttrsLength12; xiLianAttrsi12++) {
                                    if (input.readByte() != 0) {
                                        var temp270 = temp266["xiLianAttrs"][xiLianAttrsi12] = {}; //配饰洗练属性
                                        temp270["career"] = input.readVarInt(false); //职业限定
                                        temp270["attributeType"] = input.readVarInt(false); //属性类型
                                        temp270["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp266["xiLianAttrs"][xiLianAttrsi12] = null;
                                    }
                                }
                                temp266["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp266["growLevel"] = input.readVarInt(false); //成长等级
                                temp266["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength12 = input.readShort();
                                temp266["bestAttrs"] = new Array(bestAttrsLength12);
                                for (var bestAttrsi12 = 0; bestAttrsi12 < bestAttrsLength12; bestAttrsi12++) {
                                    temp266["bestAttrs"][bestAttrsi12] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength12 = input.readShort();
                                temp266["soulAttrs"] = new Array(soulAttrsLength12);
                                for (var soulAttrsi12 = 0; soulAttrsi12 < soulAttrsLength12; soulAttrsi12++) {
                                    temp266["soulAttrs"][soulAttrsi12] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength12 = input.readShort();
                                temp266["godsAttrs"] = new Array(godsAttrsLength12);
                                for (var godsAttrsi12 = 0; godsAttrsi12 < godsAttrsLength12; godsAttrsi12++) {
                                    temp266["godsAttrs"][godsAttrsi12] = input.readVarInt(false); //额外神级属性
                                }
                                temp266["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength12 = input.readShort();
                                temp266["specialDurable"] = [];
                                for (var specialDurablei12 = 0; specialDurablei12 < specialDurableLength12; specialDurablei12++) {
                                    if (input.readByte() != 0) {
                                        var temp271 = temp266["specialDurable"][specialDurablei12] = {}; //特殊耐久消耗值
                                        temp271["type"] = input.readVarInt(false); //类型
                                        temp271["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp266["specialDurable"][specialDurablei12] = null;
                                    }
                                }
                            }
                            var immobilizationLength12 = input.readByte();
                            if (immobilizationLength12 != 0) {
                                var temp272 = temp265["immobilization"] = {}; //固化数据
                                temp272["action"] = input.readVarInt(false); //产生行为
                                temp272["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength12 = input.readByte();
                            if (fromLength12 != 0) {
                                var temp273 = temp265["from"] = {}; //来源
                                temp273["action"] = input.readVarInt(false); //产生行为
                                temp273["firstRole"] = input.readLong(); //第一个玩家id
                                temp273["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength24 = input.readShort();
                                temp273["params"] = [];
                                for (var paramsi24 = 0; paramsi24 < paramsLength24; paramsi24++) {
                                    if (input.readByte() != 0) {
                                        var temp274 = temp273["params"][paramsi24] = {}; //
                                        temp274["key"] = input.readVarInt(false); //
                                        temp274["value"] = input.readString(); //
                                    }
                                    else {
                                        temp273["params"][paramsi24] = null;
                                    }
                                }
                            }
                            temp265["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength12 = input.readByte();
                            if (spriteDataLength12 != 0) {
                                var temp275 = temp265["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp275["level"] = input.readVarInt(false); //灵兽等级
                                temp275["exp"] = input.readVarInt(false); //灵兽经验
                                temp275["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength12 = input.readShort();
                                temp275["skills"] = [];
                                for (var skillsi12 = 0; skillsi12 < skillsLength12; skillsi12++) {
                                    if (input.readByte() != 0) {
                                        var temp276 = temp275["skills"][skillsi12] = {}; //灵兽出战技能
                                        temp276["id"] = input.readVarInt(false); //
                                        temp276["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp275["skills"][skillsi12] = null;
                                    }
                                }
                                var ownerSkillsLength12 = input.readShort();
                                temp275["ownerSkills"] = [];
                                for (var ownerSkillsi12 = 0; ownerSkillsi12 < ownerSkillsLength12; ownerSkillsi12++) {
                                    if (input.readByte() != 0) {
                                        var temp277 = temp275["ownerSkills"][ownerSkillsi12] = {}; //灵兽拥有的技能
                                        temp277["id"] = input.readVarInt(false); //
                                        temp277["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp275["ownerSkills"][ownerSkillsi12] = null;
                                    }
                                }
                                var ownerSkinsLength12 = input.readShort();
                                temp275["ownerSkins"] = [];
                                for (var ownerSkinsi12 = 0; ownerSkinsi12 < ownerSkinsLength12; ownerSkinsi12++) {
                                    if (input.readByte() != 0) {
                                        var temp278 = temp275["ownerSkins"][ownerSkinsi12] = {}; //灵兽拥有的皮肤
                                        temp278["id"] = input.readVarInt(false); //
                                        temp278["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp275["ownerSkins"][ownerSkinsi12] = null;
                                    }
                                }
                                var absorbExpLength12 = input.readShort();
                                temp275["absorbExp"] = [];
                                for (var absorbExpi12 = 0; absorbExpi12 < absorbExpLength12; absorbExpi12++) {
                                    if (input.readByte() != 0) {
                                        var temp279 = temp275["absorbExp"][absorbExpi12] = {}; //灵兽吸收经验值
                                        temp279["id"] = input.readVarInt(false); //
                                        temp279["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp275["absorbExp"][absorbExpi12] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resDailyTimedShaBaKeSettleMessage["unions"][unionsi5] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedShaBaKeSettleMessage);
                    break;
                case 175094 /* DailyModelCMD.CMDResDailyTimedShaBaKePoolMessage */:
                    var resDailyTimedShaBaKePoolMessage = input.readVarInt(false); //额度
                    this.sendNotif(cmd, resDailyTimedShaBaKePoolMessage);
                    break;
                case 175100 /* DailyModelCMD.CMDResDailyTimedQXTMTipsMessage */:
                    var resDailyTimedQXTMTipsMessage = {};
                    resDailyTimedQXTMTipsMessage["beginAt"] = input.readVarInt(false); //刷怪时间
                    var hurtRankLength1 = input.readShort();
                    resDailyTimedQXTMTipsMessage["hurtRank"] = [];
                    for (var hurtRanki1 = 0; hurtRanki1 < hurtRankLength1; hurtRanki1++) {
                        if (input.readByte() != 0) {
                            var temp280 = resDailyTimedQXTMTipsMessage["hurtRank"][hurtRanki1] = {}; //伤害输出排行
                            temp280["ranking"] = input.readVarInt(false); //
                            temp280["uid"] = input.readLong(); //
                            temp280["name"] = input.readString(); //
                            temp280["score"] = input.readLong(); //
                        }
                        else {
                            resDailyTimedQXTMTipsMessage["hurtRank"][hurtRanki1] = null;
                        }
                    }
                    resDailyTimedQXTMTipsMessage["selfRank"] = input.readVarInt(false); //我的排名
                    resDailyTimedQXTMTipsMessage["selfHurt"] = input.readVarInt(false); //我的伤害
                    this.sendNotif(cmd, resDailyTimedQXTMTipsMessage);
                    break;
                case 175101 /* DailyModelCMD.CMDResDailyTimedQXTMSettleMessage */:
                    var resDailyTimedQXTMSettleMessage = {};
                    resDailyTimedQXTMSettleMessage["type"] = input.readVarInt(false); //类型
                    var worldsLength5 = input.readShort();
                    resDailyTimedQXTMSettleMessage["worlds"] = [];
                    for (var worldsi5 = 0; worldsi5 < worldsLength5; worldsi5++) {
                        if (input.readByte() != 0) {
                            var temp281 = resDailyTimedQXTMSettleMessage["worlds"][worldsi5] = {}; //世界奖励
                            temp281["uid"] = input.readLong(); //唯一id
                            temp281["itemId"] = input.readVarInt(false); //道具配置id
                            temp281["count"] = input.readVarInt(false); //数量
                            temp281["expire"] = input.readVarInt(false); //过期时间
                            temp281["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp281["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength25 = input.readShort();
                            temp281["params"] = new Array(paramsLength25);
                            for (var paramsi25 = 0; paramsi25 < paramsLength25; paramsi25++) {
                                temp281["params"][paramsi25] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength13 = input.readByte();
                            if (equipDataLength13 != 0) {
                                var temp282 = temp281["equipData"] = {}; //装备属性（null表示没有）
                                temp282["durable"] = input.readVarInt(false); //消耗耐久
                                temp282["starLevel"] = input.readVarInt(false); //升星等级
                                temp282["starLock"] = input.readVarInt(false); //被锁星级
                                temp282["starExp"] = input.readVarInt(false); //升星祝福值
                                temp282["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp282["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp282["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp282["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp282["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp282["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp282["sign"] = input.readString(); //签名
                                var destinyAttrsLength13 = input.readShort();
                                temp282["destinyAttrs"] = [];
                                for (var destinyAttrsi13 = 0; destinyAttrsi13 < destinyAttrsLength13; destinyAttrsi13++) {
                                    if (input.readByte() != 0) {
                                        var temp283 = temp282["destinyAttrs"][destinyAttrsi13] = {}; //命运属性
                                        temp283["career"] = input.readVarInt(false); //职业限定
                                        temp283["attributeType"] = input.readVarInt(false); //属性类型
                                        temp283["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp282["destinyAttrs"][destinyAttrsi13] = null;
                                    }
                                }
                                var superAttrsLength13 = input.readShort();
                                temp282["superAttrs"] = [];
                                for (var superAttrsi13 = 0; superAttrsi13 < superAttrsLength13; superAttrsi13++) {
                                    if (input.readByte() != 0) {
                                        var temp284 = temp282["superAttrs"][superAttrsi13] = {}; //极品属性
                                        temp284["career"] = input.readVarInt(false); //职业限定
                                        temp284["attributeType"] = input.readVarInt(false); //属性类型
                                        temp284["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp282["superAttrs"][superAttrsi13] = null;
                                    }
                                }
                                var identifyAttrsLength13 = input.readShort();
                                temp282["identifyAttrs"] = [];
                                for (var identifyAttrsi13 = 0; identifyAttrsi13 < identifyAttrsLength13; identifyAttrsi13++) {
                                    if (input.readByte() != 0) {
                                        var temp285 = temp282["identifyAttrs"][identifyAttrsi13] = {}; //鉴定属性
                                        temp285["career"] = input.readVarInt(false); //职业限定
                                        temp285["attributeType"] = input.readVarInt(false); //属性类型
                                        temp285["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp282["identifyAttrs"][identifyAttrsi13] = null;
                                    }
                                }
                                var xiLianAttrsLength13 = input.readShort();
                                temp282["xiLianAttrs"] = [];
                                for (var xiLianAttrsi13 = 0; xiLianAttrsi13 < xiLianAttrsLength13; xiLianAttrsi13++) {
                                    if (input.readByte() != 0) {
                                        var temp286 = temp282["xiLianAttrs"][xiLianAttrsi13] = {}; //配饰洗练属性
                                        temp286["career"] = input.readVarInt(false); //职业限定
                                        temp286["attributeType"] = input.readVarInt(false); //属性类型
                                        temp286["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp282["xiLianAttrs"][xiLianAttrsi13] = null;
                                    }
                                }
                                temp282["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp282["growLevel"] = input.readVarInt(false); //成长等级
                                temp282["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength13 = input.readShort();
                                temp282["bestAttrs"] = new Array(bestAttrsLength13);
                                for (var bestAttrsi13 = 0; bestAttrsi13 < bestAttrsLength13; bestAttrsi13++) {
                                    temp282["bestAttrs"][bestAttrsi13] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength13 = input.readShort();
                                temp282["soulAttrs"] = new Array(soulAttrsLength13);
                                for (var soulAttrsi13 = 0; soulAttrsi13 < soulAttrsLength13; soulAttrsi13++) {
                                    temp282["soulAttrs"][soulAttrsi13] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength13 = input.readShort();
                                temp282["godsAttrs"] = new Array(godsAttrsLength13);
                                for (var godsAttrsi13 = 0; godsAttrsi13 < godsAttrsLength13; godsAttrsi13++) {
                                    temp282["godsAttrs"][godsAttrsi13] = input.readVarInt(false); //额外神级属性
                                }
                                temp282["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength13 = input.readShort();
                                temp282["specialDurable"] = [];
                                for (var specialDurablei13 = 0; specialDurablei13 < specialDurableLength13; specialDurablei13++) {
                                    if (input.readByte() != 0) {
                                        var temp287 = temp282["specialDurable"][specialDurablei13] = {}; //特殊耐久消耗值
                                        temp287["type"] = input.readVarInt(false); //类型
                                        temp287["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp282["specialDurable"][specialDurablei13] = null;
                                    }
                                }
                            }
                            var immobilizationLength13 = input.readByte();
                            if (immobilizationLength13 != 0) {
                                var temp288 = temp281["immobilization"] = {}; //固化数据
                                temp288["action"] = input.readVarInt(false); //产生行为
                                temp288["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength13 = input.readByte();
                            if (fromLength13 != 0) {
                                var temp289 = temp281["from"] = {}; //来源
                                temp289["action"] = input.readVarInt(false); //产生行为
                                temp289["firstRole"] = input.readLong(); //第一个玩家id
                                temp289["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength26 = input.readShort();
                                temp289["params"] = [];
                                for (var paramsi26 = 0; paramsi26 < paramsLength26; paramsi26++) {
                                    if (input.readByte() != 0) {
                                        var temp290 = temp289["params"][paramsi26] = {}; //
                                        temp290["key"] = input.readVarInt(false); //
                                        temp290["value"] = input.readString(); //
                                    }
                                    else {
                                        temp289["params"][paramsi26] = null;
                                    }
                                }
                            }
                            temp281["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength13 = input.readByte();
                            if (spriteDataLength13 != 0) {
                                var temp291 = temp281["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp291["level"] = input.readVarInt(false); //灵兽等级
                                temp291["exp"] = input.readVarInt(false); //灵兽经验
                                temp291["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength13 = input.readShort();
                                temp291["skills"] = [];
                                for (var skillsi13 = 0; skillsi13 < skillsLength13; skillsi13++) {
                                    if (input.readByte() != 0) {
                                        var temp292 = temp291["skills"][skillsi13] = {}; //灵兽出战技能
                                        temp292["id"] = input.readVarInt(false); //
                                        temp292["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp291["skills"][skillsi13] = null;
                                    }
                                }
                                var ownerSkillsLength13 = input.readShort();
                                temp291["ownerSkills"] = [];
                                for (var ownerSkillsi13 = 0; ownerSkillsi13 < ownerSkillsLength13; ownerSkillsi13++) {
                                    if (input.readByte() != 0) {
                                        var temp293 = temp291["ownerSkills"][ownerSkillsi13] = {}; //灵兽拥有的技能
                                        temp293["id"] = input.readVarInt(false); //
                                        temp293["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp291["ownerSkills"][ownerSkillsi13] = null;
                                    }
                                }
                                var ownerSkinsLength13 = input.readShort();
                                temp291["ownerSkins"] = [];
                                for (var ownerSkinsi13 = 0; ownerSkinsi13 < ownerSkinsLength13; ownerSkinsi13++) {
                                    if (input.readByte() != 0) {
                                        var temp294 = temp291["ownerSkins"][ownerSkinsi13] = {}; //灵兽拥有的皮肤
                                        temp294["id"] = input.readVarInt(false); //
                                        temp294["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp291["ownerSkins"][ownerSkinsi13] = null;
                                    }
                                }
                                var absorbExpLength13 = input.readShort();
                                temp291["absorbExp"] = [];
                                for (var absorbExpi13 = 0; absorbExpi13 < absorbExpLength13; absorbExpi13++) {
                                    if (input.readByte() != 0) {
                                        var temp295 = temp291["absorbExp"][absorbExpi13] = {}; //灵兽吸收经验值
                                        temp295["id"] = input.readVarInt(false); //
                                        temp295["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp291["absorbExp"][absorbExpi13] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resDailyTimedQXTMSettleMessage["worlds"][worldsi5] = null;
                        }
                    }
                    var unionsLength6 = input.readShort();
                    resDailyTimedQXTMSettleMessage["unions"] = [];
                    for (var unionsi6 = 0; unionsi6 < unionsLength6; unionsi6++) {
                        if (input.readByte() != 0) {
                            var temp296 = resDailyTimedQXTMSettleMessage["unions"][unionsi6] = {}; //本行会奖励
                            temp296["uid"] = input.readLong(); //唯一id
                            temp296["itemId"] = input.readVarInt(false); //道具配置id
                            temp296["count"] = input.readVarInt(false); //数量
                            temp296["expire"] = input.readVarInt(false); //过期时间
                            temp296["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp296["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength27 = input.readShort();
                            temp296["params"] = new Array(paramsLength27);
                            for (var paramsi27 = 0; paramsi27 < paramsLength27; paramsi27++) {
                                temp296["params"][paramsi27] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength14 = input.readByte();
                            if (equipDataLength14 != 0) {
                                var temp297 = temp296["equipData"] = {}; //装备属性（null表示没有）
                                temp297["durable"] = input.readVarInt(false); //消耗耐久
                                temp297["starLevel"] = input.readVarInt(false); //升星等级
                                temp297["starLock"] = input.readVarInt(false); //被锁星级
                                temp297["starExp"] = input.readVarInt(false); //升星祝福值
                                temp297["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp297["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp297["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp297["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp297["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp297["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp297["sign"] = input.readString(); //签名
                                var destinyAttrsLength14 = input.readShort();
                                temp297["destinyAttrs"] = [];
                                for (var destinyAttrsi14 = 0; destinyAttrsi14 < destinyAttrsLength14; destinyAttrsi14++) {
                                    if (input.readByte() != 0) {
                                        var temp298 = temp297["destinyAttrs"][destinyAttrsi14] = {}; //命运属性
                                        temp298["career"] = input.readVarInt(false); //职业限定
                                        temp298["attributeType"] = input.readVarInt(false); //属性类型
                                        temp298["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp297["destinyAttrs"][destinyAttrsi14] = null;
                                    }
                                }
                                var superAttrsLength14 = input.readShort();
                                temp297["superAttrs"] = [];
                                for (var superAttrsi14 = 0; superAttrsi14 < superAttrsLength14; superAttrsi14++) {
                                    if (input.readByte() != 0) {
                                        var temp299 = temp297["superAttrs"][superAttrsi14] = {}; //极品属性
                                        temp299["career"] = input.readVarInt(false); //职业限定
                                        temp299["attributeType"] = input.readVarInt(false); //属性类型
                                        temp299["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp297["superAttrs"][superAttrsi14] = null;
                                    }
                                }
                                var identifyAttrsLength14 = input.readShort();
                                temp297["identifyAttrs"] = [];
                                for (var identifyAttrsi14 = 0; identifyAttrsi14 < identifyAttrsLength14; identifyAttrsi14++) {
                                    if (input.readByte() != 0) {
                                        var temp300 = temp297["identifyAttrs"][identifyAttrsi14] = {}; //鉴定属性
                                        temp300["career"] = input.readVarInt(false); //职业限定
                                        temp300["attributeType"] = input.readVarInt(false); //属性类型
                                        temp300["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp297["identifyAttrs"][identifyAttrsi14] = null;
                                    }
                                }
                                var xiLianAttrsLength14 = input.readShort();
                                temp297["xiLianAttrs"] = [];
                                for (var xiLianAttrsi14 = 0; xiLianAttrsi14 < xiLianAttrsLength14; xiLianAttrsi14++) {
                                    if (input.readByte() != 0) {
                                        var temp301 = temp297["xiLianAttrs"][xiLianAttrsi14] = {}; //配饰洗练属性
                                        temp301["career"] = input.readVarInt(false); //职业限定
                                        temp301["attributeType"] = input.readVarInt(false); //属性类型
                                        temp301["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp297["xiLianAttrs"][xiLianAttrsi14] = null;
                                    }
                                }
                                temp297["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp297["growLevel"] = input.readVarInt(false); //成长等级
                                temp297["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength14 = input.readShort();
                                temp297["bestAttrs"] = new Array(bestAttrsLength14);
                                for (var bestAttrsi14 = 0; bestAttrsi14 < bestAttrsLength14; bestAttrsi14++) {
                                    temp297["bestAttrs"][bestAttrsi14] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength14 = input.readShort();
                                temp297["soulAttrs"] = new Array(soulAttrsLength14);
                                for (var soulAttrsi14 = 0; soulAttrsi14 < soulAttrsLength14; soulAttrsi14++) {
                                    temp297["soulAttrs"][soulAttrsi14] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength14 = input.readShort();
                                temp297["godsAttrs"] = new Array(godsAttrsLength14);
                                for (var godsAttrsi14 = 0; godsAttrsi14 < godsAttrsLength14; godsAttrsi14++) {
                                    temp297["godsAttrs"][godsAttrsi14] = input.readVarInt(false); //额外神级属性
                                }
                                temp297["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength14 = input.readShort();
                                temp297["specialDurable"] = [];
                                for (var specialDurablei14 = 0; specialDurablei14 < specialDurableLength14; specialDurablei14++) {
                                    if (input.readByte() != 0) {
                                        var temp302 = temp297["specialDurable"][specialDurablei14] = {}; //特殊耐久消耗值
                                        temp302["type"] = input.readVarInt(false); //类型
                                        temp302["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp297["specialDurable"][specialDurablei14] = null;
                                    }
                                }
                            }
                            var immobilizationLength14 = input.readByte();
                            if (immobilizationLength14 != 0) {
                                var temp303 = temp296["immobilization"] = {}; //固化数据
                                temp303["action"] = input.readVarInt(false); //产生行为
                                temp303["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength14 = input.readByte();
                            if (fromLength14 != 0) {
                                var temp304 = temp296["from"] = {}; //来源
                                temp304["action"] = input.readVarInt(false); //产生行为
                                temp304["firstRole"] = input.readLong(); //第一个玩家id
                                temp304["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength28 = input.readShort();
                                temp304["params"] = [];
                                for (var paramsi28 = 0; paramsi28 < paramsLength28; paramsi28++) {
                                    if (input.readByte() != 0) {
                                        var temp305 = temp304["params"][paramsi28] = {}; //
                                        temp305["key"] = input.readVarInt(false); //
                                        temp305["value"] = input.readString(); //
                                    }
                                    else {
                                        temp304["params"][paramsi28] = null;
                                    }
                                }
                            }
                            temp296["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength14 = input.readByte();
                            if (spriteDataLength14 != 0) {
                                var temp306 = temp296["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp306["level"] = input.readVarInt(false); //灵兽等级
                                temp306["exp"] = input.readVarInt(false); //灵兽经验
                                temp306["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength14 = input.readShort();
                                temp306["skills"] = [];
                                for (var skillsi14 = 0; skillsi14 < skillsLength14; skillsi14++) {
                                    if (input.readByte() != 0) {
                                        var temp307 = temp306["skills"][skillsi14] = {}; //灵兽出战技能
                                        temp307["id"] = input.readVarInt(false); //
                                        temp307["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp306["skills"][skillsi14] = null;
                                    }
                                }
                                var ownerSkillsLength14 = input.readShort();
                                temp306["ownerSkills"] = [];
                                for (var ownerSkillsi14 = 0; ownerSkillsi14 < ownerSkillsLength14; ownerSkillsi14++) {
                                    if (input.readByte() != 0) {
                                        var temp308 = temp306["ownerSkills"][ownerSkillsi14] = {}; //灵兽拥有的技能
                                        temp308["id"] = input.readVarInt(false); //
                                        temp308["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp306["ownerSkills"][ownerSkillsi14] = null;
                                    }
                                }
                                var ownerSkinsLength14 = input.readShort();
                                temp306["ownerSkins"] = [];
                                for (var ownerSkinsi14 = 0; ownerSkinsi14 < ownerSkinsLength14; ownerSkinsi14++) {
                                    if (input.readByte() != 0) {
                                        var temp309 = temp306["ownerSkins"][ownerSkinsi14] = {}; //灵兽拥有的皮肤
                                        temp309["id"] = input.readVarInt(false); //
                                        temp309["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp306["ownerSkins"][ownerSkinsi14] = null;
                                    }
                                }
                                var absorbExpLength14 = input.readShort();
                                temp306["absorbExp"] = [];
                                for (var absorbExpi14 = 0; absorbExpi14 < absorbExpLength14; absorbExpi14++) {
                                    if (input.readByte() != 0) {
                                        var temp310 = temp306["absorbExp"][absorbExpi14] = {}; //灵兽吸收经验值
                                        temp310["id"] = input.readVarInt(false); //
                                        temp310["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp306["absorbExp"][absorbExpi14] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resDailyTimedQXTMSettleMessage["unions"][unionsi6] = null;
                        }
                    }
                    resDailyTimedQXTMSettleMessage["firstName"] = input.readString(); //第一名
                    var firstLength1 = input.readShort();
                    resDailyTimedQXTMSettleMessage["first"] = [];
                    for (var firsti1 = 0; firsti1 < firstLength1; firsti1++) {
                        if (input.readByte() != 0) {
                            var temp311 = resDailyTimedQXTMSettleMessage["first"][firsti1] = {}; //第一名奖励
                            temp311["uid"] = input.readLong(); //唯一id
                            temp311["itemId"] = input.readVarInt(false); //道具配置id
                            temp311["count"] = input.readVarInt(false); //数量
                            temp311["expire"] = input.readVarInt(false); //过期时间
                            temp311["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp311["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength29 = input.readShort();
                            temp311["params"] = new Array(paramsLength29);
                            for (var paramsi29 = 0; paramsi29 < paramsLength29; paramsi29++) {
                                temp311["params"][paramsi29] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength15 = input.readByte();
                            if (equipDataLength15 != 0) {
                                var temp312 = temp311["equipData"] = {}; //装备属性（null表示没有）
                                temp312["durable"] = input.readVarInt(false); //消耗耐久
                                temp312["starLevel"] = input.readVarInt(false); //升星等级
                                temp312["starLock"] = input.readVarInt(false); //被锁星级
                                temp312["starExp"] = input.readVarInt(false); //升星祝福值
                                temp312["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp312["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp312["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp312["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp312["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp312["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp312["sign"] = input.readString(); //签名
                                var destinyAttrsLength15 = input.readShort();
                                temp312["destinyAttrs"] = [];
                                for (var destinyAttrsi15 = 0; destinyAttrsi15 < destinyAttrsLength15; destinyAttrsi15++) {
                                    if (input.readByte() != 0) {
                                        var temp313 = temp312["destinyAttrs"][destinyAttrsi15] = {}; //命运属性
                                        temp313["career"] = input.readVarInt(false); //职业限定
                                        temp313["attributeType"] = input.readVarInt(false); //属性类型
                                        temp313["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp312["destinyAttrs"][destinyAttrsi15] = null;
                                    }
                                }
                                var superAttrsLength15 = input.readShort();
                                temp312["superAttrs"] = [];
                                for (var superAttrsi15 = 0; superAttrsi15 < superAttrsLength15; superAttrsi15++) {
                                    if (input.readByte() != 0) {
                                        var temp314 = temp312["superAttrs"][superAttrsi15] = {}; //极品属性
                                        temp314["career"] = input.readVarInt(false); //职业限定
                                        temp314["attributeType"] = input.readVarInt(false); //属性类型
                                        temp314["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp312["superAttrs"][superAttrsi15] = null;
                                    }
                                }
                                var identifyAttrsLength15 = input.readShort();
                                temp312["identifyAttrs"] = [];
                                for (var identifyAttrsi15 = 0; identifyAttrsi15 < identifyAttrsLength15; identifyAttrsi15++) {
                                    if (input.readByte() != 0) {
                                        var temp315 = temp312["identifyAttrs"][identifyAttrsi15] = {}; //鉴定属性
                                        temp315["career"] = input.readVarInt(false); //职业限定
                                        temp315["attributeType"] = input.readVarInt(false); //属性类型
                                        temp315["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp312["identifyAttrs"][identifyAttrsi15] = null;
                                    }
                                }
                                var xiLianAttrsLength15 = input.readShort();
                                temp312["xiLianAttrs"] = [];
                                for (var xiLianAttrsi15 = 0; xiLianAttrsi15 < xiLianAttrsLength15; xiLianAttrsi15++) {
                                    if (input.readByte() != 0) {
                                        var temp316 = temp312["xiLianAttrs"][xiLianAttrsi15] = {}; //配饰洗练属性
                                        temp316["career"] = input.readVarInt(false); //职业限定
                                        temp316["attributeType"] = input.readVarInt(false); //属性类型
                                        temp316["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp312["xiLianAttrs"][xiLianAttrsi15] = null;
                                    }
                                }
                                temp312["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp312["growLevel"] = input.readVarInt(false); //成长等级
                                temp312["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength15 = input.readShort();
                                temp312["bestAttrs"] = new Array(bestAttrsLength15);
                                for (var bestAttrsi15 = 0; bestAttrsi15 < bestAttrsLength15; bestAttrsi15++) {
                                    temp312["bestAttrs"][bestAttrsi15] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength15 = input.readShort();
                                temp312["soulAttrs"] = new Array(soulAttrsLength15);
                                for (var soulAttrsi15 = 0; soulAttrsi15 < soulAttrsLength15; soulAttrsi15++) {
                                    temp312["soulAttrs"][soulAttrsi15] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength15 = input.readShort();
                                temp312["godsAttrs"] = new Array(godsAttrsLength15);
                                for (var godsAttrsi15 = 0; godsAttrsi15 < godsAttrsLength15; godsAttrsi15++) {
                                    temp312["godsAttrs"][godsAttrsi15] = input.readVarInt(false); //额外神级属性
                                }
                                temp312["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength15 = input.readShort();
                                temp312["specialDurable"] = [];
                                for (var specialDurablei15 = 0; specialDurablei15 < specialDurableLength15; specialDurablei15++) {
                                    if (input.readByte() != 0) {
                                        var temp317 = temp312["specialDurable"][specialDurablei15] = {}; //特殊耐久消耗值
                                        temp317["type"] = input.readVarInt(false); //类型
                                        temp317["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp312["specialDurable"][specialDurablei15] = null;
                                    }
                                }
                            }
                            var immobilizationLength15 = input.readByte();
                            if (immobilizationLength15 != 0) {
                                var temp318 = temp311["immobilization"] = {}; //固化数据
                                temp318["action"] = input.readVarInt(false); //产生行为
                                temp318["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength15 = input.readByte();
                            if (fromLength15 != 0) {
                                var temp319 = temp311["from"] = {}; //来源
                                temp319["action"] = input.readVarInt(false); //产生行为
                                temp319["firstRole"] = input.readLong(); //第一个玩家id
                                temp319["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength30 = input.readShort();
                                temp319["params"] = [];
                                for (var paramsi30 = 0; paramsi30 < paramsLength30; paramsi30++) {
                                    if (input.readByte() != 0) {
                                        var temp320 = temp319["params"][paramsi30] = {}; //
                                        temp320["key"] = input.readVarInt(false); //
                                        temp320["value"] = input.readString(); //
                                    }
                                    else {
                                        temp319["params"][paramsi30] = null;
                                    }
                                }
                            }
                            temp311["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength15 = input.readByte();
                            if (spriteDataLength15 != 0) {
                                var temp321 = temp311["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp321["level"] = input.readVarInt(false); //灵兽等级
                                temp321["exp"] = input.readVarInt(false); //灵兽经验
                                temp321["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength15 = input.readShort();
                                temp321["skills"] = [];
                                for (var skillsi15 = 0; skillsi15 < skillsLength15; skillsi15++) {
                                    if (input.readByte() != 0) {
                                        var temp322 = temp321["skills"][skillsi15] = {}; //灵兽出战技能
                                        temp322["id"] = input.readVarInt(false); //
                                        temp322["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp321["skills"][skillsi15] = null;
                                    }
                                }
                                var ownerSkillsLength15 = input.readShort();
                                temp321["ownerSkills"] = [];
                                for (var ownerSkillsi15 = 0; ownerSkillsi15 < ownerSkillsLength15; ownerSkillsi15++) {
                                    if (input.readByte() != 0) {
                                        var temp323 = temp321["ownerSkills"][ownerSkillsi15] = {}; //灵兽拥有的技能
                                        temp323["id"] = input.readVarInt(false); //
                                        temp323["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp321["ownerSkills"][ownerSkillsi15] = null;
                                    }
                                }
                                var ownerSkinsLength15 = input.readShort();
                                temp321["ownerSkins"] = [];
                                for (var ownerSkinsi15 = 0; ownerSkinsi15 < ownerSkinsLength15; ownerSkinsi15++) {
                                    if (input.readByte() != 0) {
                                        var temp324 = temp321["ownerSkins"][ownerSkinsi15] = {}; //灵兽拥有的皮肤
                                        temp324["id"] = input.readVarInt(false); //
                                        temp324["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp321["ownerSkins"][ownerSkinsi15] = null;
                                    }
                                }
                                var absorbExpLength15 = input.readShort();
                                temp321["absorbExp"] = [];
                                for (var absorbExpi15 = 0; absorbExpi15 < absorbExpLength15; absorbExpi15++) {
                                    if (input.readByte() != 0) {
                                        var temp325 = temp321["absorbExp"][absorbExpi15] = {}; //灵兽吸收经验值
                                        temp325["id"] = input.readVarInt(false); //
                                        temp325["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp321["absorbExp"][absorbExpi15] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resDailyTimedQXTMSettleMessage["first"][firsti1] = null;
                        }
                    }
                    resDailyTimedQXTMSettleMessage["secondName"] = input.readString(); //第二名
                    var secondLength1 = input.readShort();
                    resDailyTimedQXTMSettleMessage["second"] = [];
                    for (var secondi1 = 0; secondi1 < secondLength1; secondi1++) {
                        if (input.readByte() != 0) {
                            var temp326 = resDailyTimedQXTMSettleMessage["second"][secondi1] = {}; //第二名奖励
                            temp326["uid"] = input.readLong(); //唯一id
                            temp326["itemId"] = input.readVarInt(false); //道具配置id
                            temp326["count"] = input.readVarInt(false); //数量
                            temp326["expire"] = input.readVarInt(false); //过期时间
                            temp326["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp326["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength31 = input.readShort();
                            temp326["params"] = new Array(paramsLength31);
                            for (var paramsi31 = 0; paramsi31 < paramsLength31; paramsi31++) {
                                temp326["params"][paramsi31] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength16 = input.readByte();
                            if (equipDataLength16 != 0) {
                                var temp327 = temp326["equipData"] = {}; //装备属性（null表示没有）
                                temp327["durable"] = input.readVarInt(false); //消耗耐久
                                temp327["starLevel"] = input.readVarInt(false); //升星等级
                                temp327["starLock"] = input.readVarInt(false); //被锁星级
                                temp327["starExp"] = input.readVarInt(false); //升星祝福值
                                temp327["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp327["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp327["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp327["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp327["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp327["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp327["sign"] = input.readString(); //签名
                                var destinyAttrsLength16 = input.readShort();
                                temp327["destinyAttrs"] = [];
                                for (var destinyAttrsi16 = 0; destinyAttrsi16 < destinyAttrsLength16; destinyAttrsi16++) {
                                    if (input.readByte() != 0) {
                                        var temp328 = temp327["destinyAttrs"][destinyAttrsi16] = {}; //命运属性
                                        temp328["career"] = input.readVarInt(false); //职业限定
                                        temp328["attributeType"] = input.readVarInt(false); //属性类型
                                        temp328["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp327["destinyAttrs"][destinyAttrsi16] = null;
                                    }
                                }
                                var superAttrsLength16 = input.readShort();
                                temp327["superAttrs"] = [];
                                for (var superAttrsi16 = 0; superAttrsi16 < superAttrsLength16; superAttrsi16++) {
                                    if (input.readByte() != 0) {
                                        var temp329 = temp327["superAttrs"][superAttrsi16] = {}; //极品属性
                                        temp329["career"] = input.readVarInt(false); //职业限定
                                        temp329["attributeType"] = input.readVarInt(false); //属性类型
                                        temp329["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp327["superAttrs"][superAttrsi16] = null;
                                    }
                                }
                                var identifyAttrsLength16 = input.readShort();
                                temp327["identifyAttrs"] = [];
                                for (var identifyAttrsi16 = 0; identifyAttrsi16 < identifyAttrsLength16; identifyAttrsi16++) {
                                    if (input.readByte() != 0) {
                                        var temp330 = temp327["identifyAttrs"][identifyAttrsi16] = {}; //鉴定属性
                                        temp330["career"] = input.readVarInt(false); //职业限定
                                        temp330["attributeType"] = input.readVarInt(false); //属性类型
                                        temp330["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp327["identifyAttrs"][identifyAttrsi16] = null;
                                    }
                                }
                                var xiLianAttrsLength16 = input.readShort();
                                temp327["xiLianAttrs"] = [];
                                for (var xiLianAttrsi16 = 0; xiLianAttrsi16 < xiLianAttrsLength16; xiLianAttrsi16++) {
                                    if (input.readByte() != 0) {
                                        var temp331 = temp327["xiLianAttrs"][xiLianAttrsi16] = {}; //配饰洗练属性
                                        temp331["career"] = input.readVarInt(false); //职业限定
                                        temp331["attributeType"] = input.readVarInt(false); //属性类型
                                        temp331["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp327["xiLianAttrs"][xiLianAttrsi16] = null;
                                    }
                                }
                                temp327["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp327["growLevel"] = input.readVarInt(false); //成长等级
                                temp327["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength16 = input.readShort();
                                temp327["bestAttrs"] = new Array(bestAttrsLength16);
                                for (var bestAttrsi16 = 0; bestAttrsi16 < bestAttrsLength16; bestAttrsi16++) {
                                    temp327["bestAttrs"][bestAttrsi16] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength16 = input.readShort();
                                temp327["soulAttrs"] = new Array(soulAttrsLength16);
                                for (var soulAttrsi16 = 0; soulAttrsi16 < soulAttrsLength16; soulAttrsi16++) {
                                    temp327["soulAttrs"][soulAttrsi16] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength16 = input.readShort();
                                temp327["godsAttrs"] = new Array(godsAttrsLength16);
                                for (var godsAttrsi16 = 0; godsAttrsi16 < godsAttrsLength16; godsAttrsi16++) {
                                    temp327["godsAttrs"][godsAttrsi16] = input.readVarInt(false); //额外神级属性
                                }
                                temp327["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength16 = input.readShort();
                                temp327["specialDurable"] = [];
                                for (var specialDurablei16 = 0; specialDurablei16 < specialDurableLength16; specialDurablei16++) {
                                    if (input.readByte() != 0) {
                                        var temp332 = temp327["specialDurable"][specialDurablei16] = {}; //特殊耐久消耗值
                                        temp332["type"] = input.readVarInt(false); //类型
                                        temp332["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp327["specialDurable"][specialDurablei16] = null;
                                    }
                                }
                            }
                            var immobilizationLength16 = input.readByte();
                            if (immobilizationLength16 != 0) {
                                var temp333 = temp326["immobilization"] = {}; //固化数据
                                temp333["action"] = input.readVarInt(false); //产生行为
                                temp333["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength16 = input.readByte();
                            if (fromLength16 != 0) {
                                var temp334 = temp326["from"] = {}; //来源
                                temp334["action"] = input.readVarInt(false); //产生行为
                                temp334["firstRole"] = input.readLong(); //第一个玩家id
                                temp334["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength32 = input.readShort();
                                temp334["params"] = [];
                                for (var paramsi32 = 0; paramsi32 < paramsLength32; paramsi32++) {
                                    if (input.readByte() != 0) {
                                        var temp335 = temp334["params"][paramsi32] = {}; //
                                        temp335["key"] = input.readVarInt(false); //
                                        temp335["value"] = input.readString(); //
                                    }
                                    else {
                                        temp334["params"][paramsi32] = null;
                                    }
                                }
                            }
                            temp326["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength16 = input.readByte();
                            if (spriteDataLength16 != 0) {
                                var temp336 = temp326["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp336["level"] = input.readVarInt(false); //灵兽等级
                                temp336["exp"] = input.readVarInt(false); //灵兽经验
                                temp336["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength16 = input.readShort();
                                temp336["skills"] = [];
                                for (var skillsi16 = 0; skillsi16 < skillsLength16; skillsi16++) {
                                    if (input.readByte() != 0) {
                                        var temp337 = temp336["skills"][skillsi16] = {}; //灵兽出战技能
                                        temp337["id"] = input.readVarInt(false); //
                                        temp337["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp336["skills"][skillsi16] = null;
                                    }
                                }
                                var ownerSkillsLength16 = input.readShort();
                                temp336["ownerSkills"] = [];
                                for (var ownerSkillsi16 = 0; ownerSkillsi16 < ownerSkillsLength16; ownerSkillsi16++) {
                                    if (input.readByte() != 0) {
                                        var temp338 = temp336["ownerSkills"][ownerSkillsi16] = {}; //灵兽拥有的技能
                                        temp338["id"] = input.readVarInt(false); //
                                        temp338["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp336["ownerSkills"][ownerSkillsi16] = null;
                                    }
                                }
                                var ownerSkinsLength16 = input.readShort();
                                temp336["ownerSkins"] = [];
                                for (var ownerSkinsi16 = 0; ownerSkinsi16 < ownerSkinsLength16; ownerSkinsi16++) {
                                    if (input.readByte() != 0) {
                                        var temp339 = temp336["ownerSkins"][ownerSkinsi16] = {}; //灵兽拥有的皮肤
                                        temp339["id"] = input.readVarInt(false); //
                                        temp339["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp336["ownerSkins"][ownerSkinsi16] = null;
                                    }
                                }
                                var absorbExpLength16 = input.readShort();
                                temp336["absorbExp"] = [];
                                for (var absorbExpi16 = 0; absorbExpi16 < absorbExpLength16; absorbExpi16++) {
                                    if (input.readByte() != 0) {
                                        var temp340 = temp336["absorbExp"][absorbExpi16] = {}; //灵兽吸收经验值
                                        temp340["id"] = input.readVarInt(false); //
                                        temp340["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp336["absorbExp"][absorbExpi16] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resDailyTimedQXTMSettleMessage["second"][secondi1] = null;
                        }
                    }
                    var globalsLength4 = input.readShort();
                    resDailyTimedQXTMSettleMessage["globals"] = [];
                    for (var globalsi4 = 0; globalsi4 < globalsLength4; globalsi4++) {
                        if (input.readByte() != 0) {
                            var temp341 = resDailyTimedQXTMSettleMessage["globals"][globalsi4] = {}; //跨服奖励
                            temp341["uid"] = input.readLong(); //唯一id
                            temp341["itemId"] = input.readVarInt(false); //道具配置id
                            temp341["count"] = input.readVarInt(false); //数量
                            temp341["expire"] = input.readVarInt(false); //过期时间
                            temp341["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp341["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength33 = input.readShort();
                            temp341["params"] = new Array(paramsLength33);
                            for (var paramsi33 = 0; paramsi33 < paramsLength33; paramsi33++) {
                                temp341["params"][paramsi33] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength17 = input.readByte();
                            if (equipDataLength17 != 0) {
                                var temp342 = temp341["equipData"] = {}; //装备属性（null表示没有）
                                temp342["durable"] = input.readVarInt(false); //消耗耐久
                                temp342["starLevel"] = input.readVarInt(false); //升星等级
                                temp342["starLock"] = input.readVarInt(false); //被锁星级
                                temp342["starExp"] = input.readVarInt(false); //升星祝福值
                                temp342["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp342["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp342["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp342["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp342["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp342["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp342["sign"] = input.readString(); //签名
                                var destinyAttrsLength17 = input.readShort();
                                temp342["destinyAttrs"] = [];
                                for (var destinyAttrsi17 = 0; destinyAttrsi17 < destinyAttrsLength17; destinyAttrsi17++) {
                                    if (input.readByte() != 0) {
                                        var temp343 = temp342["destinyAttrs"][destinyAttrsi17] = {}; //命运属性
                                        temp343["career"] = input.readVarInt(false); //职业限定
                                        temp343["attributeType"] = input.readVarInt(false); //属性类型
                                        temp343["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp342["destinyAttrs"][destinyAttrsi17] = null;
                                    }
                                }
                                var superAttrsLength17 = input.readShort();
                                temp342["superAttrs"] = [];
                                for (var superAttrsi17 = 0; superAttrsi17 < superAttrsLength17; superAttrsi17++) {
                                    if (input.readByte() != 0) {
                                        var temp344 = temp342["superAttrs"][superAttrsi17] = {}; //极品属性
                                        temp344["career"] = input.readVarInt(false); //职业限定
                                        temp344["attributeType"] = input.readVarInt(false); //属性类型
                                        temp344["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp342["superAttrs"][superAttrsi17] = null;
                                    }
                                }
                                var identifyAttrsLength17 = input.readShort();
                                temp342["identifyAttrs"] = [];
                                for (var identifyAttrsi17 = 0; identifyAttrsi17 < identifyAttrsLength17; identifyAttrsi17++) {
                                    if (input.readByte() != 0) {
                                        var temp345 = temp342["identifyAttrs"][identifyAttrsi17] = {}; //鉴定属性
                                        temp345["career"] = input.readVarInt(false); //职业限定
                                        temp345["attributeType"] = input.readVarInt(false); //属性类型
                                        temp345["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp342["identifyAttrs"][identifyAttrsi17] = null;
                                    }
                                }
                                var xiLianAttrsLength17 = input.readShort();
                                temp342["xiLianAttrs"] = [];
                                for (var xiLianAttrsi17 = 0; xiLianAttrsi17 < xiLianAttrsLength17; xiLianAttrsi17++) {
                                    if (input.readByte() != 0) {
                                        var temp346 = temp342["xiLianAttrs"][xiLianAttrsi17] = {}; //配饰洗练属性
                                        temp346["career"] = input.readVarInt(false); //职业限定
                                        temp346["attributeType"] = input.readVarInt(false); //属性类型
                                        temp346["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp342["xiLianAttrs"][xiLianAttrsi17] = null;
                                    }
                                }
                                temp342["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp342["growLevel"] = input.readVarInt(false); //成长等级
                                temp342["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength17 = input.readShort();
                                temp342["bestAttrs"] = new Array(bestAttrsLength17);
                                for (var bestAttrsi17 = 0; bestAttrsi17 < bestAttrsLength17; bestAttrsi17++) {
                                    temp342["bestAttrs"][bestAttrsi17] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength17 = input.readShort();
                                temp342["soulAttrs"] = new Array(soulAttrsLength17);
                                for (var soulAttrsi17 = 0; soulAttrsi17 < soulAttrsLength17; soulAttrsi17++) {
                                    temp342["soulAttrs"][soulAttrsi17] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength17 = input.readShort();
                                temp342["godsAttrs"] = new Array(godsAttrsLength17);
                                for (var godsAttrsi17 = 0; godsAttrsi17 < godsAttrsLength17; godsAttrsi17++) {
                                    temp342["godsAttrs"][godsAttrsi17] = input.readVarInt(false); //额外神级属性
                                }
                                temp342["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength17 = input.readShort();
                                temp342["specialDurable"] = [];
                                for (var specialDurablei17 = 0; specialDurablei17 < specialDurableLength17; specialDurablei17++) {
                                    if (input.readByte() != 0) {
                                        var temp347 = temp342["specialDurable"][specialDurablei17] = {}; //特殊耐久消耗值
                                        temp347["type"] = input.readVarInt(false); //类型
                                        temp347["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp342["specialDurable"][specialDurablei17] = null;
                                    }
                                }
                            }
                            var immobilizationLength17 = input.readByte();
                            if (immobilizationLength17 != 0) {
                                var temp348 = temp341["immobilization"] = {}; //固化数据
                                temp348["action"] = input.readVarInt(false); //产生行为
                                temp348["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength17 = input.readByte();
                            if (fromLength17 != 0) {
                                var temp349 = temp341["from"] = {}; //来源
                                temp349["action"] = input.readVarInt(false); //产生行为
                                temp349["firstRole"] = input.readLong(); //第一个玩家id
                                temp349["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength34 = input.readShort();
                                temp349["params"] = [];
                                for (var paramsi34 = 0; paramsi34 < paramsLength34; paramsi34++) {
                                    if (input.readByte() != 0) {
                                        var temp350 = temp349["params"][paramsi34] = {}; //
                                        temp350["key"] = input.readVarInt(false); //
                                        temp350["value"] = input.readString(); //
                                    }
                                    else {
                                        temp349["params"][paramsi34] = null;
                                    }
                                }
                            }
                            temp341["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength17 = input.readByte();
                            if (spriteDataLength17 != 0) {
                                var temp351 = temp341["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp351["level"] = input.readVarInt(false); //灵兽等级
                                temp351["exp"] = input.readVarInt(false); //灵兽经验
                                temp351["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength17 = input.readShort();
                                temp351["skills"] = [];
                                for (var skillsi17 = 0; skillsi17 < skillsLength17; skillsi17++) {
                                    if (input.readByte() != 0) {
                                        var temp352 = temp351["skills"][skillsi17] = {}; //灵兽出战技能
                                        temp352["id"] = input.readVarInt(false); //
                                        temp352["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp351["skills"][skillsi17] = null;
                                    }
                                }
                                var ownerSkillsLength17 = input.readShort();
                                temp351["ownerSkills"] = [];
                                for (var ownerSkillsi17 = 0; ownerSkillsi17 < ownerSkillsLength17; ownerSkillsi17++) {
                                    if (input.readByte() != 0) {
                                        var temp353 = temp351["ownerSkills"][ownerSkillsi17] = {}; //灵兽拥有的技能
                                        temp353["id"] = input.readVarInt(false); //
                                        temp353["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp351["ownerSkills"][ownerSkillsi17] = null;
                                    }
                                }
                                var ownerSkinsLength17 = input.readShort();
                                temp351["ownerSkins"] = [];
                                for (var ownerSkinsi17 = 0; ownerSkinsi17 < ownerSkinsLength17; ownerSkinsi17++) {
                                    if (input.readByte() != 0) {
                                        var temp354 = temp351["ownerSkins"][ownerSkinsi17] = {}; //灵兽拥有的皮肤
                                        temp354["id"] = input.readVarInt(false); //
                                        temp354["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp351["ownerSkins"][ownerSkinsi17] = null;
                                    }
                                }
                                var absorbExpLength17 = input.readShort();
                                temp351["absorbExp"] = [];
                                for (var absorbExpi17 = 0; absorbExpi17 < absorbExpLength17; absorbExpi17++) {
                                    if (input.readByte() != 0) {
                                        var temp355 = temp351["absorbExp"][absorbExpi17] = {}; //灵兽吸收经验值
                                        temp355["id"] = input.readVarInt(false); //
                                        temp355["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp351["absorbExp"][absorbExpi17] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resDailyTimedQXTMSettleMessage["globals"][globalsi4] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedQXTMSettleMessage);
                    break;
                case 175103 /* DailyModelCMD.CMDResDailyTimedQXTMDonatePanelMessage */:
                    var resDailyTimedQXTMDonatePanelMessage = {};
                    var godRankLength1 = input.readShort();
                    resDailyTimedQXTMDonatePanelMessage["godRank"] = [];
                    for (var godRanki1 = 0; godRanki1 < godRankLength1; godRanki1++) {
                        if (input.readByte() != 0) {
                            var temp356 = resDailyTimedQXTMDonatePanelMessage["godRank"][godRanki1] = {}; //魔神榜
                            temp356["ranking"] = input.readVarInt(false); //
                            temp356["uid"] = input.readLong(); //
                            temp356["name"] = input.readString(); //
                            temp356["score"] = input.readLong(); //
                        }
                        else {
                            resDailyTimedQXTMDonatePanelMessage["godRank"][godRanki1] = null;
                        }
                    }
                    var kingRankLength1 = input.readShort();
                    resDailyTimedQXTMDonatePanelMessage["kingRank"] = [];
                    for (var kingRanki1 = 0; kingRanki1 < kingRankLength1; kingRanki1++) {
                        if (input.readByte() != 0) {
                            var temp357 = resDailyTimedQXTMDonatePanelMessage["kingRank"][kingRanki1] = {}; //魔王榜
                            temp357["ranking"] = input.readVarInt(false); //
                            temp357["uid"] = input.readLong(); //
                            temp357["name"] = input.readString(); //
                            temp357["score"] = input.readLong(); //
                        }
                        else {
                            resDailyTimedQXTMDonatePanelMessage["kingRank"][kingRanki1] = null;
                        }
                    }
                    var donateRankLength1 = input.readShort();
                    resDailyTimedQXTMDonatePanelMessage["donateRank"] = [];
                    for (var donateRanki1 = 0; donateRanki1 < donateRankLength1; donateRanki1++) {
                        if (input.readByte() != 0) {
                            var temp358 = resDailyTimedQXTMDonatePanelMessage["donateRank"][donateRanki1] = {}; //捐献榜
                            temp358["ranking"] = input.readVarInt(false); //
                            temp358["uid"] = input.readLong(); //
                            temp358["name"] = input.readString(); //
                            temp358["godDonate"] = input.readVarInt(false); //魔神
                            temp358["kingDonate"] = input.readVarInt(false); //魔王
                            temp358["knightDonate"] = input.readVarInt(false); //骑士
                        }
                        else {
                            resDailyTimedQXTMDonatePanelMessage["donateRank"][donateRanki1] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedQXTMDonatePanelMessage);
                    break;
                case 175121 /* DailyModelCMD.CMDResDailyTimedMonsterStormTipsMessage */:
                    var timeLength1 = input.readShort();
                    var resDailyTimedMonsterStormTipsMessage = new Array(timeLength1);
                    for (var timei1 = 0; timei1 < timeLength1; timei1++) {
                        resDailyTimedMonsterStormTipsMessage[timei1] = input.readVarInt(false); //刷新时间列表
                    }
                    this.sendNotif(cmd, resDailyTimedMonsterStormTipsMessage);
                    break;
                case 175127 /* DailyModelCMD.CMDResGoldCityUnionInfoMessage */:
                    var resGoldCityUnionInfoMessage = {};
                    resGoldCityUnionInfoMessage["gold"] = input.readLong(); //黄金城行会id
                    resGoldCityUnionInfoMessage["superGold"] = input.readLong(); //超级黄金城行会id
                    resGoldCityUnionInfoMessage["superSilver"] = input.readLong(); //超级白银城
                    this.sendNotif(cmd, resGoldCityUnionInfoMessage);
                    break;
                case 175129 /* DailyModelCMD.CMDResDailyTimedSuperGoldCityPanelInfoMessage */:
                    var resDailyTimedSuperGoldCityPanelInfoMessage = {};
                    var serversLength1 = input.readShort();
                    resDailyTimedSuperGoldCityPanelInfoMessage["servers"] = [];
                    for (var serversi1 = 0; serversi1 < serversLength1; serversi1++) {
                        if (input.readByte() != 0) {
                            var temp359 = resDailyTimedSuperGoldCityPanelInfoMessage["servers"][serversi1] = {}; //小跨服组
                            var hostsLength1 = input.readShort();
                            temp359["hosts"] = new Array(hostsLength1);
                            for (var hostsi1 = 0; hostsi1 < hostsLength1; hostsi1++) {
                                temp359["hosts"][hostsi1] = input.readVarInt(false); //区服host
                            }
                            var unionNamesLength = input.readShort();
                            temp359["unionNames"] = new Array(unionNamesLength);
                            for (var unionNamesi1 = 0; unionNamesi1 < unionNamesLength; unionNamesi1++) {
                                temp359["unionNames"][unionNamesi1] = input.readString(); //小跨服黄金城行会名
                            }
                        }
                        else {
                            resDailyTimedSuperGoldCityPanelInfoMessage["servers"][serversi1] = null;
                        }
                    }
                    var goldLength = input.readShort();
                    resDailyTimedSuperGoldCityPanelInfoMessage["gold"] = new Array(goldLength);
                    for (var goldi1 = 0; goldi1 < goldLength; goldi1++) {
                        resDailyTimedSuperGoldCityPanelInfoMessage["gold"][goldi1] = input.readString(); //超级黄金城行会名
                    }
                    var silverLength = input.readShort();
                    resDailyTimedSuperGoldCityPanelInfoMessage["silver"] = new Array(silverLength);
                    for (var silveri1 = 0; silveri1 < silverLength; silveri1++) {
                        resDailyTimedSuperGoldCityPanelInfoMessage["silver"][silveri1] = input.readString(); //超级白银城行会名
                    }
                    var showBeansLength1 = input.readByte();
                    if (showBeansLength1 != 0) {
                        var temp360 = resDailyTimedSuperGoldCityPanelInfoMessage["showBeans"] = {}; //超级黄金城主展示
                        temp360["position"] = input.readVarInt(false); //职位 1会长2副会长
                        temp360["roleId"] = input.readLong(); //id
                        temp360["roleName"] = input.readString(); //名字
                        temp360["career"] = input.readVarInt(false); //职业
                        temp360["sex"] = input.readVarInt(false); //性别
                        temp360["hair"] = input.readVarInt(false); //发型
                        var equipsLength2 = input.readShort();
                        temp360["equips"] = [];
                        for (var equipsi2 = 0; equipsi2 < equipsLength2; equipsi2++) {
                            if (input.readByte() != 0) {
                                var temp361 = temp360["equips"][equipsi2] = {}; //装备列表
                                var itemLength2 = input.readByte();
                                if (itemLength2 != 0) {
                                    var temp362 = temp361["item"] = {}; //
                                    temp362["uid"] = input.readLong(); //唯一id
                                    temp362["itemId"] = input.readVarInt(false); //道具配置id
                                    temp362["count"] = input.readVarInt(false); //数量
                                    temp362["expire"] = input.readVarInt(false); //过期时间
                                    temp362["uTimes"] = input.readVarInt(false); //已经使用的次数
                                    temp362["time"] = input.readVarInt(false); //道具获得时间
                                    var paramsLength35 = input.readShort();
                                    temp362["params"] = new Array(paramsLength35);
                                    for (var paramsi35 = 0; paramsi35 < paramsLength35; paramsi35++) {
                                        temp362["params"][paramsi35] = input.readVarInt(false); //道具参数
                                    }
                                    var equipDataLength18 = input.readByte();
                                    if (equipDataLength18 != 0) {
                                        var temp363 = temp362["equipData"] = {}; //装备属性（null表示没有）
                                        temp363["durable"] = input.readVarInt(false); //消耗耐久
                                        temp363["starLevel"] = input.readVarInt(false); //升星等级
                                        temp363["starLock"] = input.readVarInt(false); //被锁星级
                                        temp363["starExp"] = input.readVarInt(false); //升星祝福值
                                        temp363["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                        temp363["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                        temp363["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                        temp363["spiritLevel"] = input.readVarInt(false); //注灵等级
                                        temp363["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                        temp363["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                        temp363["sign"] = input.readString(); //签名
                                        var destinyAttrsLength18 = input.readShort();
                                        temp363["destinyAttrs"] = [];
                                        for (var destinyAttrsi18 = 0; destinyAttrsi18 < destinyAttrsLength18; destinyAttrsi18++) {
                                            if (input.readByte() != 0) {
                                                var temp364 = temp363["destinyAttrs"][destinyAttrsi18] = {}; //命运属性
                                                temp364["career"] = input.readVarInt(false); //职业限定
                                                temp364["attributeType"] = input.readVarInt(false); //属性类型
                                                temp364["attributeValue"] = input.readLong(); //属性值
                                            }
                                            else {
                                                temp363["destinyAttrs"][destinyAttrsi18] = null;
                                            }
                                        }
                                        var superAttrsLength18 = input.readShort();
                                        temp363["superAttrs"] = [];
                                        for (var superAttrsi18 = 0; superAttrsi18 < superAttrsLength18; superAttrsi18++) {
                                            if (input.readByte() != 0) {
                                                var temp365 = temp363["superAttrs"][superAttrsi18] = {}; //极品属性
                                                temp365["career"] = input.readVarInt(false); //职业限定
                                                temp365["attributeType"] = input.readVarInt(false); //属性类型
                                                temp365["attributeValue"] = input.readLong(); //属性值
                                            }
                                            else {
                                                temp363["superAttrs"][superAttrsi18] = null;
                                            }
                                        }
                                        var identifyAttrsLength18 = input.readShort();
                                        temp363["identifyAttrs"] = [];
                                        for (var identifyAttrsi18 = 0; identifyAttrsi18 < identifyAttrsLength18; identifyAttrsi18++) {
                                            if (input.readByte() != 0) {
                                                var temp366 = temp363["identifyAttrs"][identifyAttrsi18] = {}; //鉴定属性
                                                temp366["career"] = input.readVarInt(false); //职业限定
                                                temp366["attributeType"] = input.readVarInt(false); //属性类型
                                                temp366["attributeValue"] = input.readLong(); //属性值
                                            }
                                            else {
                                                temp363["identifyAttrs"][identifyAttrsi18] = null;
                                            }
                                        }
                                        var xiLianAttrsLength18 = input.readShort();
                                        temp363["xiLianAttrs"] = [];
                                        for (var xiLianAttrsi18 = 0; xiLianAttrsi18 < xiLianAttrsLength18; xiLianAttrsi18++) {
                                            if (input.readByte() != 0) {
                                                var temp367 = temp363["xiLianAttrs"][xiLianAttrsi18] = {}; //配饰洗练属性
                                                temp367["career"] = input.readVarInt(false); //职业限定
                                                temp367["attributeType"] = input.readVarInt(false); //属性类型
                                                temp367["attributeValue"] = input.readLong(); //属性值
                                            }
                                            else {
                                                temp363["xiLianAttrs"][xiLianAttrsi18] = null;
                                            }
                                        }
                                        temp363["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                        temp363["growLevel"] = input.readVarInt(false); //成长等级
                                        temp363["growExp"] = input.readVarInt(false); //成长经验
                                        var bestAttrsLength18 = input.readShort();
                                        temp363["bestAttrs"] = new Array(bestAttrsLength18);
                                        for (var bestAttrsi18 = 0; bestAttrsi18 < bestAttrsLength18; bestAttrsi18++) {
                                            temp363["bestAttrs"][bestAttrsi18] = input.readVarInt(false); //极品属性（新）
                                        }
                                        var soulAttrsLength18 = input.readShort();
                                        temp363["soulAttrs"] = new Array(soulAttrsLength18);
                                        for (var soulAttrsi18 = 0; soulAttrsi18 < soulAttrsLength18; soulAttrsi18++) {
                                            temp363["soulAttrs"][soulAttrsi18] = input.readVarInt(false); //心魂属性
                                        }
                                        var godsAttrsLength18 = input.readShort();
                                        temp363["godsAttrs"] = new Array(godsAttrsLength18);
                                        for (var godsAttrsi18 = 0; godsAttrsi18 < godsAttrsLength18; godsAttrsi18++) {
                                            temp363["godsAttrs"][godsAttrsi18] = input.readVarInt(false); //额外神级属性
                                        }
                                        temp363["qualification"] = input.readVarInt(false); //资质
                                        var specialDurableLength18 = input.readShort();
                                        temp363["specialDurable"] = [];
                                        for (var specialDurablei18 = 0; specialDurablei18 < specialDurableLength18; specialDurablei18++) {
                                            if (input.readByte() != 0) {
                                                var temp368 = temp363["specialDurable"][specialDurablei18] = {}; //特殊耐久消耗值
                                                temp368["type"] = input.readVarInt(false); //类型
                                                temp368["value"] = input.readVarInt(false); //已消耗值
                                            }
                                            else {
                                                temp363["specialDurable"][specialDurablei18] = null;
                                            }
                                        }
                                    }
                                    var immobilizationLength18 = input.readByte();
                                    if (immobilizationLength18 != 0) {
                                        var temp369 = temp362["immobilization"] = {}; //固化数据
                                        temp369["action"] = input.readVarInt(false); //产生行为
                                        temp369["expire"] = input.readVarInt(false); //过期时间 时间戳
                                    }
                                    var fromLength18 = input.readByte();
                                    if (fromLength18 != 0) {
                                        var temp370 = temp362["from"] = {}; //来源
                                        temp370["action"] = input.readVarInt(false); //产生行为
                                        temp370["firstRole"] = input.readLong(); //第一个玩家id
                                        temp370["firstRoleName"] = input.readString(); //第一个玩家名字
                                        var paramsLength36 = input.readShort();
                                        temp370["params"] = [];
                                        for (var paramsi36 = 0; paramsi36 < paramsLength36; paramsi36++) {
                                            if (input.readByte() != 0) {
                                                var temp371 = temp370["params"][paramsi36] = {}; //
                                                temp371["key"] = input.readVarInt(false); //
                                                temp371["value"] = input.readString(); //
                                            }
                                            else {
                                                temp370["params"][paramsi36] = null;
                                            }
                                        }
                                    }
                                    temp362["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                                    var spriteDataLength18 = input.readByte();
                                    if (spriteDataLength18 != 0) {
                                        var temp372 = temp362["spriteData"] = {}; //灵兽数据（null表示没有）
                                        temp372["level"] = input.readVarInt(false); //灵兽等级
                                        temp372["exp"] = input.readVarInt(false); //灵兽经验
                                        temp372["skin"] = input.readVarInt(false); //灵兽皮肤
                                        var skillsLength18 = input.readShort();
                                        temp372["skills"] = [];
                                        for (var skillsi18 = 0; skillsi18 < skillsLength18; skillsi18++) {
                                            if (input.readByte() != 0) {
                                                var temp373 = temp372["skills"][skillsi18] = {}; //灵兽出战技能
                                                temp373["id"] = input.readVarInt(false); //
                                                temp373["value"] = input.readVarInt(false); //
                                            }
                                            else {
                                                temp372["skills"][skillsi18] = null;
                                            }
                                        }
                                        var ownerSkillsLength18 = input.readShort();
                                        temp372["ownerSkills"] = [];
                                        for (var ownerSkillsi18 = 0; ownerSkillsi18 < ownerSkillsLength18; ownerSkillsi18++) {
                                            if (input.readByte() != 0) {
                                                var temp374 = temp372["ownerSkills"][ownerSkillsi18] = {}; //灵兽拥有的技能
                                                temp374["id"] = input.readVarInt(false); //
                                                temp374["value"] = input.readVarInt(false); //
                                            }
                                            else {
                                                temp372["ownerSkills"][ownerSkillsi18] = null;
                                            }
                                        }
                                        var ownerSkinsLength18 = input.readShort();
                                        temp372["ownerSkins"] = [];
                                        for (var ownerSkinsi18 = 0; ownerSkinsi18 < ownerSkinsLength18; ownerSkinsi18++) {
                                            if (input.readByte() != 0) {
                                                var temp375 = temp372["ownerSkins"][ownerSkinsi18] = {}; //灵兽拥有的皮肤
                                                temp375["id"] = input.readVarInt(false); //
                                                temp375["value"] = input.readVarInt(false); //
                                            }
                                            else {
                                                temp372["ownerSkins"][ownerSkinsi18] = null;
                                            }
                                        }
                                        var absorbExpLength18 = input.readShort();
                                        temp372["absorbExp"] = [];
                                        for (var absorbExpi18 = 0; absorbExpi18 < absorbExpLength18; absorbExpi18++) {
                                            if (input.readByte() != 0) {
                                                var temp376 = temp372["absorbExp"][absorbExpi18] = {}; //灵兽吸收经验值
                                                temp376["id"] = input.readVarInt(false); //
                                                temp376["value"] = input.readVarInt(false); //
                                            }
                                            else {
                                                temp372["absorbExp"][absorbExpi18] = null;
                                            }
                                        }
                                    }
                                }
                                temp361["index"] = input.readVarInt(false); //装备位置
                            }
                            else {
                                temp360["equips"][equipsi2] = null;
                            }
                        }
                        var appearanceWearsLength2 = input.readShort();
                        temp360["appearanceWears"] = [];
                        for (var appearanceWearsi2 = 0; appearanceWearsi2 < appearanceWearsLength2; appearanceWearsi2++) {
                            if (input.readByte() != 0) {
                                var temp377 = temp360["appearanceWears"][appearanceWearsi2] = {}; //时装列表
                                temp377["type"] = input.readVarInt(false); //
                                var idLength2 = input.readShort();
                                temp377["id"] = new Array(idLength2);
                                for (var idi2 = 0; idi2 < idLength2; idi2++) {
                                    temp377["id"][idi2] = input.readVarInt(false); //
                                }
                            }
                            else {
                                temp360["appearanceWears"][appearanceWearsi2] = null;
                            }
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedSuperGoldCityPanelInfoMessage);
                    break;
                case 175131 /* DailyModelCMD.CMDResDailyTimedGoldCityPanelInfoMessage */:
                    var resDailyTimedGoldCityPanelInfoMessage = {};
                    resDailyTimedGoldCityPanelInfoMessage["unionName"] = input.readString(); //当前占领行会名字
                    var showBeansLength2 = input.readShort();
                    resDailyTimedGoldCityPanelInfoMessage["showBeans"] = [];
                    for (var showBeansi2 = 0; showBeansi2 < showBeansLength2; showBeansi2++) {
                        if (input.readByte() != 0) {
                            var temp378 = resDailyTimedGoldCityPanelInfoMessage["showBeans"][showBeansi2] = {}; //展示角色列表
                            temp378["position"] = input.readVarInt(false); //职位 1会长2副会长
                            temp378["roleId"] = input.readLong(); //id
                            temp378["roleName"] = input.readString(); //名字
                            temp378["career"] = input.readVarInt(false); //职业
                            temp378["sex"] = input.readVarInt(false); //性别
                            temp378["hair"] = input.readVarInt(false); //发型
                            var equipsLength3 = input.readShort();
                            temp378["equips"] = [];
                            for (var equipsi3 = 0; equipsi3 < equipsLength3; equipsi3++) {
                                if (input.readByte() != 0) {
                                    var temp379 = temp378["equips"][equipsi3] = {}; //装备列表
                                    var itemLength3 = input.readByte();
                                    if (itemLength3 != 0) {
                                        var temp380 = temp379["item"] = {}; //
                                        temp380["uid"] = input.readLong(); //唯一id
                                        temp380["itemId"] = input.readVarInt(false); //道具配置id
                                        temp380["count"] = input.readVarInt(false); //数量
                                        temp380["expire"] = input.readVarInt(false); //过期时间
                                        temp380["uTimes"] = input.readVarInt(false); //已经使用的次数
                                        temp380["time"] = input.readVarInt(false); //道具获得时间
                                        var paramsLength37 = input.readShort();
                                        temp380["params"] = new Array(paramsLength37);
                                        for (var paramsi37 = 0; paramsi37 < paramsLength37; paramsi37++) {
                                            temp380["params"][paramsi37] = input.readVarInt(false); //道具参数
                                        }
                                        var equipDataLength19 = input.readByte();
                                        if (equipDataLength19 != 0) {
                                            var temp381 = temp380["equipData"] = {}; //装备属性（null表示没有）
                                            temp381["durable"] = input.readVarInt(false); //消耗耐久
                                            temp381["starLevel"] = input.readVarInt(false); //升星等级
                                            temp381["starLock"] = input.readVarInt(false); //被锁星级
                                            temp381["starExp"] = input.readVarInt(false); //升星祝福值
                                            temp381["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                            temp381["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                            temp381["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                            temp381["spiritLevel"] = input.readVarInt(false); //注灵等级
                                            temp381["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                            temp381["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                            temp381["sign"] = input.readString(); //签名
                                            var destinyAttrsLength19 = input.readShort();
                                            temp381["destinyAttrs"] = [];
                                            for (var destinyAttrsi19 = 0; destinyAttrsi19 < destinyAttrsLength19; destinyAttrsi19++) {
                                                if (input.readByte() != 0) {
                                                    var temp382 = temp381["destinyAttrs"][destinyAttrsi19] = {}; //命运属性
                                                    temp382["career"] = input.readVarInt(false); //职业限定
                                                    temp382["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp382["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp381["destinyAttrs"][destinyAttrsi19] = null;
                                                }
                                            }
                                            var superAttrsLength19 = input.readShort();
                                            temp381["superAttrs"] = [];
                                            for (var superAttrsi19 = 0; superAttrsi19 < superAttrsLength19; superAttrsi19++) {
                                                if (input.readByte() != 0) {
                                                    var temp383 = temp381["superAttrs"][superAttrsi19] = {}; //极品属性
                                                    temp383["career"] = input.readVarInt(false); //职业限定
                                                    temp383["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp383["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp381["superAttrs"][superAttrsi19] = null;
                                                }
                                            }
                                            var identifyAttrsLength19 = input.readShort();
                                            temp381["identifyAttrs"] = [];
                                            for (var identifyAttrsi19 = 0; identifyAttrsi19 < identifyAttrsLength19; identifyAttrsi19++) {
                                                if (input.readByte() != 0) {
                                                    var temp384 = temp381["identifyAttrs"][identifyAttrsi19] = {}; //鉴定属性
                                                    temp384["career"] = input.readVarInt(false); //职业限定
                                                    temp384["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp384["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp381["identifyAttrs"][identifyAttrsi19] = null;
                                                }
                                            }
                                            var xiLianAttrsLength19 = input.readShort();
                                            temp381["xiLianAttrs"] = [];
                                            for (var xiLianAttrsi19 = 0; xiLianAttrsi19 < xiLianAttrsLength19; xiLianAttrsi19++) {
                                                if (input.readByte() != 0) {
                                                    var temp385 = temp381["xiLianAttrs"][xiLianAttrsi19] = {}; //配饰洗练属性
                                                    temp385["career"] = input.readVarInt(false); //职业限定
                                                    temp385["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp385["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp381["xiLianAttrs"][xiLianAttrsi19] = null;
                                                }
                                            }
                                            temp381["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                            temp381["growLevel"] = input.readVarInt(false); //成长等级
                                            temp381["growExp"] = input.readVarInt(false); //成长经验
                                            var bestAttrsLength19 = input.readShort();
                                            temp381["bestAttrs"] = new Array(bestAttrsLength19);
                                            for (var bestAttrsi19 = 0; bestAttrsi19 < bestAttrsLength19; bestAttrsi19++) {
                                                temp381["bestAttrs"][bestAttrsi19] = input.readVarInt(false); //极品属性（新）
                                            }
                                            var soulAttrsLength19 = input.readShort();
                                            temp381["soulAttrs"] = new Array(soulAttrsLength19);
                                            for (var soulAttrsi19 = 0; soulAttrsi19 < soulAttrsLength19; soulAttrsi19++) {
                                                temp381["soulAttrs"][soulAttrsi19] = input.readVarInt(false); //心魂属性
                                            }
                                            var godsAttrsLength19 = input.readShort();
                                            temp381["godsAttrs"] = new Array(godsAttrsLength19);
                                            for (var godsAttrsi19 = 0; godsAttrsi19 < godsAttrsLength19; godsAttrsi19++) {
                                                temp381["godsAttrs"][godsAttrsi19] = input.readVarInt(false); //额外神级属性
                                            }
                                            temp381["qualification"] = input.readVarInt(false); //资质
                                            var specialDurableLength19 = input.readShort();
                                            temp381["specialDurable"] = [];
                                            for (var specialDurablei19 = 0; specialDurablei19 < specialDurableLength19; specialDurablei19++) {
                                                if (input.readByte() != 0) {
                                                    var temp386 = temp381["specialDurable"][specialDurablei19] = {}; //特殊耐久消耗值
                                                    temp386["type"] = input.readVarInt(false); //类型
                                                    temp386["value"] = input.readVarInt(false); //已消耗值
                                                }
                                                else {
                                                    temp381["specialDurable"][specialDurablei19] = null;
                                                }
                                            }
                                        }
                                        var immobilizationLength19 = input.readByte();
                                        if (immobilizationLength19 != 0) {
                                            var temp387 = temp380["immobilization"] = {}; //固化数据
                                            temp387["action"] = input.readVarInt(false); //产生行为
                                            temp387["expire"] = input.readVarInt(false); //过期时间 时间戳
                                        }
                                        var fromLength19 = input.readByte();
                                        if (fromLength19 != 0) {
                                            var temp388 = temp380["from"] = {}; //来源
                                            temp388["action"] = input.readVarInt(false); //产生行为
                                            temp388["firstRole"] = input.readLong(); //第一个玩家id
                                            temp388["firstRoleName"] = input.readString(); //第一个玩家名字
                                            var paramsLength38 = input.readShort();
                                            temp388["params"] = [];
                                            for (var paramsi38 = 0; paramsi38 < paramsLength38; paramsi38++) {
                                                if (input.readByte() != 0) {
                                                    var temp389 = temp388["params"][paramsi38] = {}; //
                                                    temp389["key"] = input.readVarInt(false); //
                                                    temp389["value"] = input.readString(); //
                                                }
                                                else {
                                                    temp388["params"][paramsi38] = null;
                                                }
                                            }
                                        }
                                        temp380["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                                        var spriteDataLength19 = input.readByte();
                                        if (spriteDataLength19 != 0) {
                                            var temp390 = temp380["spriteData"] = {}; //灵兽数据（null表示没有）
                                            temp390["level"] = input.readVarInt(false); //灵兽等级
                                            temp390["exp"] = input.readVarInt(false); //灵兽经验
                                            temp390["skin"] = input.readVarInt(false); //灵兽皮肤
                                            var skillsLength19 = input.readShort();
                                            temp390["skills"] = [];
                                            for (var skillsi19 = 0; skillsi19 < skillsLength19; skillsi19++) {
                                                if (input.readByte() != 0) {
                                                    var temp391 = temp390["skills"][skillsi19] = {}; //灵兽出战技能
                                                    temp391["id"] = input.readVarInt(false); //
                                                    temp391["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp390["skills"][skillsi19] = null;
                                                }
                                            }
                                            var ownerSkillsLength19 = input.readShort();
                                            temp390["ownerSkills"] = [];
                                            for (var ownerSkillsi19 = 0; ownerSkillsi19 < ownerSkillsLength19; ownerSkillsi19++) {
                                                if (input.readByte() != 0) {
                                                    var temp392 = temp390["ownerSkills"][ownerSkillsi19] = {}; //灵兽拥有的技能
                                                    temp392["id"] = input.readVarInt(false); //
                                                    temp392["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp390["ownerSkills"][ownerSkillsi19] = null;
                                                }
                                            }
                                            var ownerSkinsLength19 = input.readShort();
                                            temp390["ownerSkins"] = [];
                                            for (var ownerSkinsi19 = 0; ownerSkinsi19 < ownerSkinsLength19; ownerSkinsi19++) {
                                                if (input.readByte() != 0) {
                                                    var temp393 = temp390["ownerSkins"][ownerSkinsi19] = {}; //灵兽拥有的皮肤
                                                    temp393["id"] = input.readVarInt(false); //
                                                    temp393["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp390["ownerSkins"][ownerSkinsi19] = null;
                                                }
                                            }
                                            var absorbExpLength19 = input.readShort();
                                            temp390["absorbExp"] = [];
                                            for (var absorbExpi19 = 0; absorbExpi19 < absorbExpLength19; absorbExpi19++) {
                                                if (input.readByte() != 0) {
                                                    var temp394 = temp390["absorbExp"][absorbExpi19] = {}; //灵兽吸收经验值
                                                    temp394["id"] = input.readVarInt(false); //
                                                    temp394["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp390["absorbExp"][absorbExpi19] = null;
                                                }
                                            }
                                        }
                                    }
                                    temp379["index"] = input.readVarInt(false); //装备位置
                                }
                                else {
                                    temp378["equips"][equipsi3] = null;
                                }
                            }
                            var appearanceWearsLength3 = input.readShort();
                            temp378["appearanceWears"] = [];
                            for (var appearanceWearsi3 = 0; appearanceWearsi3 < appearanceWearsLength3; appearanceWearsi3++) {
                                if (input.readByte() != 0) {
                                    var temp395 = temp378["appearanceWears"][appearanceWearsi3] = {}; //时装列表
                                    temp395["type"] = input.readVarInt(false); //
                                    var idLength3 = input.readShort();
                                    temp395["id"] = new Array(idLength3);
                                    for (var idi3 = 0; idi3 < idLength3; idi3++) {
                                        temp395["id"][idi3] = input.readVarInt(false); //
                                    }
                                }
                                else {
                                    temp378["appearanceWears"][appearanceWearsi3] = null;
                                }
                            }
                        }
                        else {
                            resDailyTimedGoldCityPanelInfoMessage["showBeans"][showBeansi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedGoldCityPanelInfoMessage);
                    break;
                case 175132 /* DailyModelCMD.CMDResDailyTimedGoldCityEnterMessage */:
                    var resDailyTimedGoldCityEnterMessage = {};
                    resDailyTimedGoldCityEnterMessage["dailyType"] = input.readVarInt(false); //日常类型，132黄金152大黄金153大白银
                    resDailyTimedGoldCityEnterMessage["unionName"] = input.readString(); //当前占领行会名字
                    var unionRankingsLength4 = input.readShort();
                    resDailyTimedGoldCityEnterMessage["unionRankings"] = [];
                    for (var unionRankingsi4 = 0; unionRankingsi4 < unionRankingsLength4; unionRankingsi4++) {
                        if (input.readByte() != 0) {
                            var temp396 = resDailyTimedGoldCityEnterMessage["unionRankings"][unionRankingsi4] = {}; //行会排名
                            temp396["ranking"] = input.readVarInt(false); //
                            temp396["uid"] = input.readLong(); //
                            temp396["name"] = input.readString(); //
                            temp396["score"] = input.readLong(); //
                        }
                        else {
                            resDailyTimedGoldCityEnterMessage["unionRankings"][unionRankingsi4] = null;
                        }
                    }
                    var roleRankingsLength3 = input.readShort();
                    resDailyTimedGoldCityEnterMessage["roleRankings"] = [];
                    for (var roleRankingsi3 = 0; roleRankingsi3 < roleRankingsLength3; roleRankingsi3++) {
                        if (input.readByte() != 0) {
                            var temp397 = resDailyTimedGoldCityEnterMessage["roleRankings"][roleRankingsi3] = {}; //行会个人排名
                            temp397["ranking"] = input.readVarInt(false); //
                            temp397["uid"] = input.readLong(); //
                            temp397["name"] = input.readString(); //
                            temp397["score"] = input.readLong(); //
                        }
                        else {
                            resDailyTimedGoldCityEnterMessage["roleRankings"][roleRankingsi3] = null;
                        }
                    }
                    var robotOwnsLength1 = input.readShort();
                    resDailyTimedGoldCityEnterMessage["robotOwns"] = [];
                    for (var robotOwnsi1 = 0; robotOwnsi1 < robotOwnsLength1; robotOwnsi1++) {
                        if (input.readByte() != 0) {
                            var temp398 = resDailyTimedGoldCityEnterMessage["robotOwns"][robotOwnsi1] = {}; //机器人归属，monsterId对应行会名
                            temp398["cfgId"] = input.readVarInt(false); //怪物配置id
                            temp398["name"] = input.readString(); //行会名
                            temp398["unionId"] = input.readLong(); //行会id
                        }
                        else {
                            resDailyTimedGoldCityEnterMessage["robotOwns"][robotOwnsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedGoldCityEnterMessage);
                    break;
                case 175133 /* DailyModelCMD.CMDResDailyTimedGoldCityUnionChangeMessage */:
                    var resDailyTimedGoldCityUnionChangeMessage = {};
                    resDailyTimedGoldCityUnionChangeMessage["dailyType"] = input.readVarInt(false); //日常类型，132黄金152大黄金153大白银
                    resDailyTimedGoldCityUnionChangeMessage["unionName"] = input.readString(); //当前占领行会名字
                    this.sendNotif(cmd, resDailyTimedGoldCityUnionChangeMessage);
                    break;
                case 175134 /* DailyModelCMD.CMDResDailyTimedGoldCityRankingMessage */:
                    var resDailyTimedGoldCityRankingMessage = {};
                    resDailyTimedGoldCityRankingMessage["dailyType"] = input.readVarInt(false); //日常类型，132黄金152大黄金153大白银
                    var unionRankingsLength5 = input.readShort();
                    resDailyTimedGoldCityRankingMessage["unionRankings"] = [];
                    for (var unionRankingsi5 = 0; unionRankingsi5 < unionRankingsLength5; unionRankingsi5++) {
                        if (input.readByte() != 0) {
                            var temp399 = resDailyTimedGoldCityRankingMessage["unionRankings"][unionRankingsi5] = {}; //行会排名
                            temp399["ranking"] = input.readVarInt(false); //
                            temp399["uid"] = input.readLong(); //
                            temp399["name"] = input.readString(); //
                            temp399["score"] = input.readLong(); //
                        }
                        else {
                            resDailyTimedGoldCityRankingMessage["unionRankings"][unionRankingsi5] = null;
                        }
                    }
                    var roleRankingsLength4 = input.readShort();
                    resDailyTimedGoldCityRankingMessage["roleRankings"] = [];
                    for (var roleRankingsi4 = 0; roleRankingsi4 < roleRankingsLength4; roleRankingsi4++) {
                        if (input.readByte() != 0) {
                            var temp400 = resDailyTimedGoldCityRankingMessage["roleRankings"][roleRankingsi4] = {}; //行会个人排名
                            temp400["ranking"] = input.readVarInt(false); //
                            temp400["uid"] = input.readLong(); //
                            temp400["name"] = input.readString(); //
                            temp400["score"] = input.readLong(); //
                        }
                        else {
                            resDailyTimedGoldCityRankingMessage["roleRankings"][roleRankingsi4] = null;
                        }
                    }
                    var killRankingsLength1 = input.readShort();
                    resDailyTimedGoldCityRankingMessage["killRankings"] = [];
                    for (var killRankingsi1 = 0; killRankingsi1 < killRankingsLength1; killRankingsi1++) {
                        if (input.readByte() != 0) {
                            var temp401 = resDailyTimedGoldCityRankingMessage["killRankings"][killRankingsi1] = {}; //击杀排名
                            temp401["ranking"] = input.readVarInt(false); //
                            temp401["uid"] = input.readLong(); //
                            temp401["name"] = input.readString(); //
                            temp401["score"] = input.readLong(); //
                        }
                        else {
                            resDailyTimedGoldCityRankingMessage["killRankings"][killRankingsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedGoldCityRankingMessage);
                    break;
                case 175135 /* DailyModelCMD.CMDResDailyTimedGoldCityRobotChangeMessage */:
                    var resDailyTimedGoldCityRobotChangeMessage = {};
                    resDailyTimedGoldCityRobotChangeMessage["dailyType"] = input.readVarInt(false); //日常类型，132黄金152大黄金153大白银
                    var robotOwnsLength2 = input.readShort();
                    resDailyTimedGoldCityRobotChangeMessage["robotOwns"] = [];
                    for (var robotOwnsi2 = 0; robotOwnsi2 < robotOwnsLength2; robotOwnsi2++) {
                        if (input.readByte() != 0) {
                            var temp402 = resDailyTimedGoldCityRobotChangeMessage["robotOwns"][robotOwnsi2] = {}; //机器人归属，monsterId对应行会名
                            temp402["cfgId"] = input.readVarInt(false); //怪物配置id
                            temp402["name"] = input.readString(); //行会名
                            temp402["unionId"] = input.readLong(); //行会id
                        }
                        else {
                            resDailyTimedGoldCityRobotChangeMessage["robotOwns"][robotOwnsi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedGoldCityRobotChangeMessage);
                    break;
                case 175136 /* DailyModelCMD.CMDResGoldCityChairMessage */:
                    var resGoldCityChairMessage = input.readLong(); //当前黄金城会长id
                    this.sendNotif(cmd, resGoldCityChairMessage);
                    break;
                case 175138 /* DailyModelCMD.CMDResGoldCityBanCountMessage */:
                    var resGoldCityBanCountMessage = input.readVarInt(false); //次数
                    this.sendNotif(cmd, resGoldCityBanCountMessage);
                    break;
                case 175139 /* DailyModelCMD.CMDResBossTowerHpMessage */:
                    var resBossTowerHpMessage = {};
                    resBossTowerHpMessage["stage"] = input.readVarInt(false); //关卡
                    resBossTowerHpMessage["mid"] = input.readVarInt(false); //怪物ID
                    resBossTowerHpMessage["hp"] = input.readLong(); //血量
                    resBossTowerHpMessage["hpMax"] = input.readLong(); //血量上限
                    this.sendNotif(cmd, resBossTowerHpMessage);
                    break;
                case 175152 /* DailyModelCMD.CMDResDailyTimedAncientMazeInfoMessage */:
                    var resDailyTimedAncientMazeInfoMessage = {};
                    resDailyTimedAncientMazeInfoMessage["killBoss"] = input.readVarInt(false); //1-已击杀 0-未击杀
                    resDailyTimedAncientMazeInfoMessage["direction"] = input.readVarInt(false); //0-未知 1-右上 2-右下 3-左下 4-左上
                    resDailyTimedAncientMazeInfoMessage["reward"] = input.readVarInt(false); //1-已领奖 0-未领奖
                    this.sendNotif(cmd, resDailyTimedAncientMazeInfoMessage);
                    break;
                case 175153 /* DailyModelCMD.CMDResDailyTimedAncientMazePostMessage */:
                    var resDailyTimedAncientMazePostMessage = {};
                    resDailyTimedAncientMazePostMessage["success"] = input.readBoolean(); //是否成功
                    resDailyTimedAncientMazePostMessage["floor"] = input.readVarInt(false); //层数
                    this.sendNotif(cmd, resDailyTimedAncientMazePostMessage);
                    break;
                case 175502 /* DailyModelCMD.CMDResDailyRetrieveInfoMessage */:
                    var retrievesLength1 = input.readShort();
                    var resDailyRetrieveInfoMessage = [];
                    for (var retrievesi1 = 0; retrievesi1 < retrievesLength1; retrievesi1++) {
                        if (input.readByte() != 0) {
                            var temp403 = resDailyRetrieveInfoMessage[retrievesi1] = {}; //回收次数
                            temp403["daily"] = input.readVarInt(false); //活动id
                            temp403["times"] = input.readVarInt(false); //剩余找回次数
                        }
                        else {
                            resDailyRetrieveInfoMessage[retrievesi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyRetrieveInfoMessage);
                    break;
                case 175161 /* DailyModelCMD.CMDResDailyTimedEscortInfoMessage */:
                    var resDailyTimedEscortInfoMessage = {};
                    resDailyTimedEscortInfoMessage["start"] = input.readVarInt(false); //开始运镖时间戳(ms)
                    resDailyTimedEscortInfoMessage["unionId"] = input.readLong(); //行会id
                    resDailyTimedEscortInfoMessage["unionName"] = input.readString(); //行会名
                    this.sendNotif(cmd, resDailyTimedEscortInfoMessage);
                    break;
                case 175162 /* DailyModelCMD.CMDResDailyTimedEscortStatusMessage */:
                    var resDailyTimedEscortStatusMessage = {};
                    resDailyTimedEscortStatusMessage["hpPer"] = input.readVarInt(false); //血量百分比
                    resDailyTimedEscortStatusMessage["x"] = input.readVarInt(false); //坐标x
                    resDailyTimedEscortStatusMessage["y"] = input.readVarInt(false); //坐标y
                    resDailyTimedEscortStatusMessage["status"] = input.readVarInt(false); //1中途被杀 2成功到达
                    this.sendNotif(cmd, resDailyTimedEscortStatusMessage);
                    break;
                case 175163 /* DailyModelCMD.CMDResDailyTimedEscortRewardMessage */:
                    var resDailyTimedEscortRewardMessage = input.readVarInt(false); //剩余物资总量
                    this.sendNotif(cmd, resDailyTimedEscortRewardMessage);
                    break;
                case 175164 /* DailyModelCMD.CMDResDailyTimedEscortBuffInfoMessage */:
                    var beansLength1 = input.readShort();
                    var resDailyTimedEscortBuffInfoMessage = [];
                    for (var beansi1 = 0; beansi1 < beansLength1; beansi1++) {
                        if (input.readByte() != 0) {
                            var temp404 = resDailyTimedEscortBuffInfoMessage[beansi1] = {}; //增益购买状态
                            temp404["id"] = input.readVarInt(false); //
                            temp404["value"] = input.readVarInt(false); //
                        }
                        else {
                            resDailyTimedEscortBuffInfoMessage[beansi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedEscortBuffInfoMessage);
                    break;
                case 175166 /* DailyModelCMD.CMDResDailyTimedUndergroundSettleMessage */:
                    var resDailyTimedUndergroundSettleMessage = {};
                    resDailyTimedUndergroundSettleMessage["unionRank"] = input.readVarInt(false); //本行会名次
                    var worldsLength6 = input.readShort();
                    resDailyTimedUndergroundSettleMessage["worlds"] = [];
                    for (var worldsi6 = 0; worldsi6 < worldsLength6; worldsi6++) {
                        if (input.readByte() != 0) {
                            var temp405 = resDailyTimedUndergroundSettleMessage["worlds"][worldsi6] = {}; //世界奖励
                            temp405["uid"] = input.readLong(); //唯一id
                            temp405["itemId"] = input.readVarInt(false); //道具配置id
                            temp405["count"] = input.readVarInt(false); //数量
                            temp405["expire"] = input.readVarInt(false); //过期时间
                            temp405["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp405["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength39 = input.readShort();
                            temp405["params"] = new Array(paramsLength39);
                            for (var paramsi39 = 0; paramsi39 < paramsLength39; paramsi39++) {
                                temp405["params"][paramsi39] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength20 = input.readByte();
                            if (equipDataLength20 != 0) {
                                var temp406 = temp405["equipData"] = {}; //装备属性（null表示没有）
                                temp406["durable"] = input.readVarInt(false); //消耗耐久
                                temp406["starLevel"] = input.readVarInt(false); //升星等级
                                temp406["starLock"] = input.readVarInt(false); //被锁星级
                                temp406["starExp"] = input.readVarInt(false); //升星祝福值
                                temp406["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp406["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp406["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp406["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp406["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp406["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp406["sign"] = input.readString(); //签名
                                var destinyAttrsLength20 = input.readShort();
                                temp406["destinyAttrs"] = [];
                                for (var destinyAttrsi20 = 0; destinyAttrsi20 < destinyAttrsLength20; destinyAttrsi20++) {
                                    if (input.readByte() != 0) {
                                        var temp407 = temp406["destinyAttrs"][destinyAttrsi20] = {}; //命运属性
                                        temp407["career"] = input.readVarInt(false); //职业限定
                                        temp407["attributeType"] = input.readVarInt(false); //属性类型
                                        temp407["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp406["destinyAttrs"][destinyAttrsi20] = null;
                                    }
                                }
                                var superAttrsLength20 = input.readShort();
                                temp406["superAttrs"] = [];
                                for (var superAttrsi20 = 0; superAttrsi20 < superAttrsLength20; superAttrsi20++) {
                                    if (input.readByte() != 0) {
                                        var temp408 = temp406["superAttrs"][superAttrsi20] = {}; //极品属性
                                        temp408["career"] = input.readVarInt(false); //职业限定
                                        temp408["attributeType"] = input.readVarInt(false); //属性类型
                                        temp408["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp406["superAttrs"][superAttrsi20] = null;
                                    }
                                }
                                var identifyAttrsLength20 = input.readShort();
                                temp406["identifyAttrs"] = [];
                                for (var identifyAttrsi20 = 0; identifyAttrsi20 < identifyAttrsLength20; identifyAttrsi20++) {
                                    if (input.readByte() != 0) {
                                        var temp409 = temp406["identifyAttrs"][identifyAttrsi20] = {}; //鉴定属性
                                        temp409["career"] = input.readVarInt(false); //职业限定
                                        temp409["attributeType"] = input.readVarInt(false); //属性类型
                                        temp409["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp406["identifyAttrs"][identifyAttrsi20] = null;
                                    }
                                }
                                var xiLianAttrsLength20 = input.readShort();
                                temp406["xiLianAttrs"] = [];
                                for (var xiLianAttrsi20 = 0; xiLianAttrsi20 < xiLianAttrsLength20; xiLianAttrsi20++) {
                                    if (input.readByte() != 0) {
                                        var temp410 = temp406["xiLianAttrs"][xiLianAttrsi20] = {}; //配饰洗练属性
                                        temp410["career"] = input.readVarInt(false); //职业限定
                                        temp410["attributeType"] = input.readVarInt(false); //属性类型
                                        temp410["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp406["xiLianAttrs"][xiLianAttrsi20] = null;
                                    }
                                }
                                temp406["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp406["growLevel"] = input.readVarInt(false); //成长等级
                                temp406["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength20 = input.readShort();
                                temp406["bestAttrs"] = new Array(bestAttrsLength20);
                                for (var bestAttrsi20 = 0; bestAttrsi20 < bestAttrsLength20; bestAttrsi20++) {
                                    temp406["bestAttrs"][bestAttrsi20] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength20 = input.readShort();
                                temp406["soulAttrs"] = new Array(soulAttrsLength20);
                                for (var soulAttrsi20 = 0; soulAttrsi20 < soulAttrsLength20; soulAttrsi20++) {
                                    temp406["soulAttrs"][soulAttrsi20] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength20 = input.readShort();
                                temp406["godsAttrs"] = new Array(godsAttrsLength20);
                                for (var godsAttrsi20 = 0; godsAttrsi20 < godsAttrsLength20; godsAttrsi20++) {
                                    temp406["godsAttrs"][godsAttrsi20] = input.readVarInt(false); //额外神级属性
                                }
                                temp406["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength20 = input.readShort();
                                temp406["specialDurable"] = [];
                                for (var specialDurablei20 = 0; specialDurablei20 < specialDurableLength20; specialDurablei20++) {
                                    if (input.readByte() != 0) {
                                        var temp411 = temp406["specialDurable"][specialDurablei20] = {}; //特殊耐久消耗值
                                        temp411["type"] = input.readVarInt(false); //类型
                                        temp411["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp406["specialDurable"][specialDurablei20] = null;
                                    }
                                }
                            }
                            var immobilizationLength20 = input.readByte();
                            if (immobilizationLength20 != 0) {
                                var temp412 = temp405["immobilization"] = {}; //固化数据
                                temp412["action"] = input.readVarInt(false); //产生行为
                                temp412["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength20 = input.readByte();
                            if (fromLength20 != 0) {
                                var temp413 = temp405["from"] = {}; //来源
                                temp413["action"] = input.readVarInt(false); //产生行为
                                temp413["firstRole"] = input.readLong(); //第一个玩家id
                                temp413["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength40 = input.readShort();
                                temp413["params"] = [];
                                for (var paramsi40 = 0; paramsi40 < paramsLength40; paramsi40++) {
                                    if (input.readByte() != 0) {
                                        var temp414 = temp413["params"][paramsi40] = {}; //
                                        temp414["key"] = input.readVarInt(false); //
                                        temp414["value"] = input.readString(); //
                                    }
                                    else {
                                        temp413["params"][paramsi40] = null;
                                    }
                                }
                            }
                            temp405["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength20 = input.readByte();
                            if (spriteDataLength20 != 0) {
                                var temp415 = temp405["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp415["level"] = input.readVarInt(false); //灵兽等级
                                temp415["exp"] = input.readVarInt(false); //灵兽经验
                                temp415["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength20 = input.readShort();
                                temp415["skills"] = [];
                                for (var skillsi20 = 0; skillsi20 < skillsLength20; skillsi20++) {
                                    if (input.readByte() != 0) {
                                        var temp416 = temp415["skills"][skillsi20] = {}; //灵兽出战技能
                                        temp416["id"] = input.readVarInt(false); //
                                        temp416["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp415["skills"][skillsi20] = null;
                                    }
                                }
                                var ownerSkillsLength20 = input.readShort();
                                temp415["ownerSkills"] = [];
                                for (var ownerSkillsi20 = 0; ownerSkillsi20 < ownerSkillsLength20; ownerSkillsi20++) {
                                    if (input.readByte() != 0) {
                                        var temp417 = temp415["ownerSkills"][ownerSkillsi20] = {}; //灵兽拥有的技能
                                        temp417["id"] = input.readVarInt(false); //
                                        temp417["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp415["ownerSkills"][ownerSkillsi20] = null;
                                    }
                                }
                                var ownerSkinsLength20 = input.readShort();
                                temp415["ownerSkins"] = [];
                                for (var ownerSkinsi20 = 0; ownerSkinsi20 < ownerSkinsLength20; ownerSkinsi20++) {
                                    if (input.readByte() != 0) {
                                        var temp418 = temp415["ownerSkins"][ownerSkinsi20] = {}; //灵兽拥有的皮肤
                                        temp418["id"] = input.readVarInt(false); //
                                        temp418["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp415["ownerSkins"][ownerSkinsi20] = null;
                                    }
                                }
                                var absorbExpLength20 = input.readShort();
                                temp415["absorbExp"] = [];
                                for (var absorbExpi20 = 0; absorbExpi20 < absorbExpLength20; absorbExpi20++) {
                                    if (input.readByte() != 0) {
                                        var temp419 = temp415["absorbExp"][absorbExpi20] = {}; //灵兽吸收经验值
                                        temp419["id"] = input.readVarInt(false); //
                                        temp419["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp415["absorbExp"][absorbExpi20] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resDailyTimedUndergroundSettleMessage["worlds"][worldsi6] = null;
                        }
                    }
                    var unionsLength7 = input.readShort();
                    resDailyTimedUndergroundSettleMessage["unions"] = [];
                    for (var unionsi7 = 0; unionsi7 < unionsLength7; unionsi7++) {
                        if (input.readByte() != 0) {
                            var temp420 = resDailyTimedUndergroundSettleMessage["unions"][unionsi7] = {}; //行会奖励
                            temp420["uid"] = input.readLong(); //唯一id
                            temp420["itemId"] = input.readVarInt(false); //道具配置id
                            temp420["count"] = input.readVarInt(false); //数量
                            temp420["expire"] = input.readVarInt(false); //过期时间
                            temp420["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp420["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength41 = input.readShort();
                            temp420["params"] = new Array(paramsLength41);
                            for (var paramsi41 = 0; paramsi41 < paramsLength41; paramsi41++) {
                                temp420["params"][paramsi41] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength21 = input.readByte();
                            if (equipDataLength21 != 0) {
                                var temp421 = temp420["equipData"] = {}; //装备属性（null表示没有）
                                temp421["durable"] = input.readVarInt(false); //消耗耐久
                                temp421["starLevel"] = input.readVarInt(false); //升星等级
                                temp421["starLock"] = input.readVarInt(false); //被锁星级
                                temp421["starExp"] = input.readVarInt(false); //升星祝福值
                                temp421["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp421["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp421["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp421["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp421["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp421["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp421["sign"] = input.readString(); //签名
                                var destinyAttrsLength21 = input.readShort();
                                temp421["destinyAttrs"] = [];
                                for (var destinyAttrsi21 = 0; destinyAttrsi21 < destinyAttrsLength21; destinyAttrsi21++) {
                                    if (input.readByte() != 0) {
                                        var temp422 = temp421["destinyAttrs"][destinyAttrsi21] = {}; //命运属性
                                        temp422["career"] = input.readVarInt(false); //职业限定
                                        temp422["attributeType"] = input.readVarInt(false); //属性类型
                                        temp422["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp421["destinyAttrs"][destinyAttrsi21] = null;
                                    }
                                }
                                var superAttrsLength21 = input.readShort();
                                temp421["superAttrs"] = [];
                                for (var superAttrsi21 = 0; superAttrsi21 < superAttrsLength21; superAttrsi21++) {
                                    if (input.readByte() != 0) {
                                        var temp423 = temp421["superAttrs"][superAttrsi21] = {}; //极品属性
                                        temp423["career"] = input.readVarInt(false); //职业限定
                                        temp423["attributeType"] = input.readVarInt(false); //属性类型
                                        temp423["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp421["superAttrs"][superAttrsi21] = null;
                                    }
                                }
                                var identifyAttrsLength21 = input.readShort();
                                temp421["identifyAttrs"] = [];
                                for (var identifyAttrsi21 = 0; identifyAttrsi21 < identifyAttrsLength21; identifyAttrsi21++) {
                                    if (input.readByte() != 0) {
                                        var temp424 = temp421["identifyAttrs"][identifyAttrsi21] = {}; //鉴定属性
                                        temp424["career"] = input.readVarInt(false); //职业限定
                                        temp424["attributeType"] = input.readVarInt(false); //属性类型
                                        temp424["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp421["identifyAttrs"][identifyAttrsi21] = null;
                                    }
                                }
                                var xiLianAttrsLength21 = input.readShort();
                                temp421["xiLianAttrs"] = [];
                                for (var xiLianAttrsi21 = 0; xiLianAttrsi21 < xiLianAttrsLength21; xiLianAttrsi21++) {
                                    if (input.readByte() != 0) {
                                        var temp425 = temp421["xiLianAttrs"][xiLianAttrsi21] = {}; //配饰洗练属性
                                        temp425["career"] = input.readVarInt(false); //职业限定
                                        temp425["attributeType"] = input.readVarInt(false); //属性类型
                                        temp425["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp421["xiLianAttrs"][xiLianAttrsi21] = null;
                                    }
                                }
                                temp421["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp421["growLevel"] = input.readVarInt(false); //成长等级
                                temp421["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength21 = input.readShort();
                                temp421["bestAttrs"] = new Array(bestAttrsLength21);
                                for (var bestAttrsi21 = 0; bestAttrsi21 < bestAttrsLength21; bestAttrsi21++) {
                                    temp421["bestAttrs"][bestAttrsi21] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength21 = input.readShort();
                                temp421["soulAttrs"] = new Array(soulAttrsLength21);
                                for (var soulAttrsi21 = 0; soulAttrsi21 < soulAttrsLength21; soulAttrsi21++) {
                                    temp421["soulAttrs"][soulAttrsi21] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength21 = input.readShort();
                                temp421["godsAttrs"] = new Array(godsAttrsLength21);
                                for (var godsAttrsi21 = 0; godsAttrsi21 < godsAttrsLength21; godsAttrsi21++) {
                                    temp421["godsAttrs"][godsAttrsi21] = input.readVarInt(false); //额外神级属性
                                }
                                temp421["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength21 = input.readShort();
                                temp421["specialDurable"] = [];
                                for (var specialDurablei21 = 0; specialDurablei21 < specialDurableLength21; specialDurablei21++) {
                                    if (input.readByte() != 0) {
                                        var temp426 = temp421["specialDurable"][specialDurablei21] = {}; //特殊耐久消耗值
                                        temp426["type"] = input.readVarInt(false); //类型
                                        temp426["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp421["specialDurable"][specialDurablei21] = null;
                                    }
                                }
                            }
                            var immobilizationLength21 = input.readByte();
                            if (immobilizationLength21 != 0) {
                                var temp427 = temp420["immobilization"] = {}; //固化数据
                                temp427["action"] = input.readVarInt(false); //产生行为
                                temp427["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength21 = input.readByte();
                            if (fromLength21 != 0) {
                                var temp428 = temp420["from"] = {}; //来源
                                temp428["action"] = input.readVarInt(false); //产生行为
                                temp428["firstRole"] = input.readLong(); //第一个玩家id
                                temp428["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength42 = input.readShort();
                                temp428["params"] = [];
                                for (var paramsi42 = 0; paramsi42 < paramsLength42; paramsi42++) {
                                    if (input.readByte() != 0) {
                                        var temp429 = temp428["params"][paramsi42] = {}; //
                                        temp429["key"] = input.readVarInt(false); //
                                        temp429["value"] = input.readString(); //
                                    }
                                    else {
                                        temp428["params"][paramsi42] = null;
                                    }
                                }
                            }
                            temp420["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength21 = input.readByte();
                            if (spriteDataLength21 != 0) {
                                var temp430 = temp420["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp430["level"] = input.readVarInt(false); //灵兽等级
                                temp430["exp"] = input.readVarInt(false); //灵兽经验
                                temp430["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength21 = input.readShort();
                                temp430["skills"] = [];
                                for (var skillsi21 = 0; skillsi21 < skillsLength21; skillsi21++) {
                                    if (input.readByte() != 0) {
                                        var temp431 = temp430["skills"][skillsi21] = {}; //灵兽出战技能
                                        temp431["id"] = input.readVarInt(false); //
                                        temp431["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp430["skills"][skillsi21] = null;
                                    }
                                }
                                var ownerSkillsLength21 = input.readShort();
                                temp430["ownerSkills"] = [];
                                for (var ownerSkillsi21 = 0; ownerSkillsi21 < ownerSkillsLength21; ownerSkillsi21++) {
                                    if (input.readByte() != 0) {
                                        var temp432 = temp430["ownerSkills"][ownerSkillsi21] = {}; //灵兽拥有的技能
                                        temp432["id"] = input.readVarInt(false); //
                                        temp432["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp430["ownerSkills"][ownerSkillsi21] = null;
                                    }
                                }
                                var ownerSkinsLength21 = input.readShort();
                                temp430["ownerSkins"] = [];
                                for (var ownerSkinsi21 = 0; ownerSkinsi21 < ownerSkinsLength21; ownerSkinsi21++) {
                                    if (input.readByte() != 0) {
                                        var temp433 = temp430["ownerSkins"][ownerSkinsi21] = {}; //灵兽拥有的皮肤
                                        temp433["id"] = input.readVarInt(false); //
                                        temp433["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp430["ownerSkins"][ownerSkinsi21] = null;
                                    }
                                }
                                var absorbExpLength21 = input.readShort();
                                temp430["absorbExp"] = [];
                                for (var absorbExpi21 = 0; absorbExpi21 < absorbExpLength21; absorbExpi21++) {
                                    if (input.readByte() != 0) {
                                        var temp434 = temp430["absorbExp"][absorbExpi21] = {}; //灵兽吸收经验值
                                        temp434["id"] = input.readVarInt(false); //
                                        temp434["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp430["absorbExp"][absorbExpi21] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resDailyTimedUndergroundSettleMessage["unions"][unionsi7] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedUndergroundSettleMessage);
                    break;
                case 175173 /* DailyModelCMD.CMDResDailySalaryInfoMessage */:
                    var beansLength2 = input.readShort();
                    var resDailySalaryInfoMessage = [];
                    for (var beansi2 = 0; beansi2 < beansLength2; beansi2++) {
                        if (input.readByte() != 0) {
                            var temp435 = resDailySalaryInfoMessage[beansi2] = {}; //增益购买状态
                            temp435["id"] = input.readVarInt(false); //
                            temp435["value"] = input.readVarInt(false); //
                        }
                        else {
                            resDailySalaryInfoMessage[beansi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailySalaryInfoMessage);
                    break;
                case 175185 /* DailyModelCMD.CMDResDailyResonanceChallengeInfoMessage */:
                    var resDailyResonanceChallengeInfoMessage = {};
                    resDailyResonanceChallengeInfoMessage["offers"] = input.readVarInt(false); //可购买次数
                    var statusLength1 = input.readShort();
                    resDailyResonanceChallengeInfoMessage["status"] = [];
                    for (var statusi1 = 0; statusi1 < statusLength1; statusi1++) {
                        if (input.readByte() != 0) {
                            var temp436 = resDailyResonanceChallengeInfoMessage["status"][statusi1] = {}; //3星通关状态
                            temp436["id"] = input.readVarInt(false); //
                            temp436["value"] = input.readVarInt(false); //
                        }
                        else {
                            resDailyResonanceChallengeInfoMessage["status"][statusi1] = null;
                        }
                    }
                    var rankingLength1 = input.readShort();
                    resDailyResonanceChallengeInfoMessage["ranking"] = [];
                    for (var rankingi1 = 0; rankingi1 < rankingLength1; rankingi1++) {
                        if (input.readByte() != 0) {
                            var temp437 = resDailyResonanceChallengeInfoMessage["ranking"][rankingi1] = {}; //排名
                            temp437["grade"] = input.readVarInt(false); //等级
                            temp437["career"] = input.readVarInt(false); //职业
                            var rankingsLength3 = input.readShort();
                            temp437["rankings"] = [];
                            for (var rankingsi3 = 0; rankingsi3 < rankingsLength3; rankingsi3++) {
                                if (input.readByte() != 0) {
                                    var temp438 = temp437["rankings"][rankingsi3] = {}; //排名
                                    temp438["ranking"] = input.readVarInt(false); //
                                    temp438["uid"] = input.readLong(); //
                                    temp438["name"] = input.readString(); //
                                    temp438["score"] = input.readLong(); //
                                }
                                else {
                                    temp437["rankings"][rankingsi3] = null;
                                }
                            }
                        }
                        else {
                            resDailyResonanceChallengeInfoMessage["ranking"][rankingi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyResonanceChallengeInfoMessage);
                    break;
                case 175186 /* DailyModelCMD.CMDResDailyResonanceChallengeSettleMessage */:
                    var resDailyResonanceChallengeSettleMessage = {};
                    resDailyResonanceChallengeSettleMessage["grade"] = input.readVarInt(false); //
                    resDailyResonanceChallengeSettleMessage["time"] = input.readVarInt(false); //通关时间（秒）
                    resDailyResonanceChallengeSettleMessage["rate"] = input.readVarInt(false); //评级
                    resDailyResonanceChallengeSettleMessage["oRanking"] = input.readVarInt(false); //
                    resDailyResonanceChallengeSettleMessage["nRanking"] = input.readVarInt(false); //
                    var rewardsLength1 = input.readShort();
                    resDailyResonanceChallengeSettleMessage["rewards"] = [];
                    for (var rewardsi1 = 0; rewardsi1 < rewardsLength1; rewardsi1++) {
                        if (input.readByte() != 0) {
                            var temp439 = resDailyResonanceChallengeSettleMessage["rewards"][rewardsi1] = {}; //奖励
                            temp439["itemId"] = input.readVarInt(false); //config id
                            temp439["itemCount"] = input.readVarInt(false); //item count
                        }
                        else {
                            resDailyResonanceChallengeSettleMessage["rewards"][rewardsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyResonanceChallengeSettleMessage);
                    break;
                case 175193 /* DailyModelCMD.CMDResPurgeMapInfoMessage */:
                    var purgeMapInfoBeanLength1 = input.readShort();
                    var resPurgeMapInfoMessage = [];
                    for (var purgeMapInfoBeani1 = 0; purgeMapInfoBeani1 < purgeMapInfoBeanLength1; purgeMapInfoBeani1++) {
                        if (input.readByte() != 0) {
                            var temp440 = resPurgeMapInfoMessage[purgeMapInfoBeani1] = {}; //地图信息
                            temp440["index"] = input.readVarInt(false); //区域编号
                            temp440["num"] = input.readVarInt(false); //进入人数
                        }
                        else {
                            resPurgeMapInfoMessage[purgeMapInfoBeani1] = null;
                        }
                    }
                    this.sendNotif(cmd, resPurgeMapInfoMessage);
                    break;
                case 175195 /* DailyModelCMD.CMDResPurgeInfoMessage */:
                    var resPurgeInfoMessage = {};
                    resPurgeInfoMessage["num"] = input.readVarInt(false); //剩余玩家人数
                    var rankBeansLength1 = input.readShort();
                    resPurgeInfoMessage["rankBeans"] = [];
                    for (var rankBeansi1 = 0; rankBeansi1 < rankBeansLength1; rankBeansi1++) {
                        if (input.readByte() != 0) {
                            var temp441 = resPurgeInfoMessage["rankBeans"][rankBeansi1] = {}; //排名
                            temp441["ranking"] = input.readVarInt(false); //
                            temp441["uid"] = input.readLong(); //
                            temp441["name"] = input.readString(); //
                            temp441["score"] = input.readLong(); //
                        }
                        else {
                            resPurgeInfoMessage["rankBeans"][rankBeansi1] = null;
                        }
                    }
                    var monstersLength1 = input.readShort();
                    resPurgeInfoMessage["monsters"] = [];
                    for (var monstersi1 = 0; monstersi1 < monstersLength1; monstersi1++) {
                        if (input.readByte() != 0) {
                            var temp442 = resPurgeInfoMessage["monsters"][monstersi1] = {}; //补给包
                            temp442["cfgId"] = input.readVarInt(false); //
                            temp442["x"] = input.readVarInt(false); //
                            temp442["y"] = input.readVarInt(false); //
                        }
                        else {
                            resPurgeInfoMessage["monsters"][monstersi1] = null;
                        }
                    }
                    var bossLength1 = input.readShort();
                    resPurgeInfoMessage["boss"] = [];
                    for (var bossi1 = 0; bossi1 < bossLength1; bossi1++) {
                        if (input.readByte() != 0) {
                            var temp443 = resPurgeInfoMessage["boss"][bossi1] = {}; //
                            temp443["cfgId"] = input.readVarInt(false); //
                            temp443["x"] = input.readVarInt(false); //
                            temp443["y"] = input.readVarInt(false); //
                        }
                        else {
                            resPurgeInfoMessage["boss"][bossi1] = null;
                        }
                    }
                    resPurgeInfoMessage["time"] = input.readVarInt(false); //下波补给包刷新时间戳
                    resPurgeInfoMessage["allCount"] = input.readVarInt(false); //补给包总数量
                    resPurgeInfoMessage["kill"] = input.readVarInt(false); //我淘汰玩家数
                    this.sendNotif(cmd, resPurgeInfoMessage);
                    break;
                case 175196 /* DailyModelCMD.CMDResPurgeEndMessage */:
                    var resPurgeEndMessage = {};
                    resPurgeEndMessage["rank"] = input.readVarInt(false); //我的职业排名
                    resPurgeEndMessage["allRank"] = input.readVarInt(false); //我的总排名
                    resPurgeEndMessage["kill"] = input.readVarInt(false); //淘汰玩家人数
                    resPurgeEndMessage["time"] = input.readVarInt(false); //存活时间
                    this.sendNotif(cmd, resPurgeEndMessage);
                    break;
                case 175197 /* DailyModelCMD.CMDResPurgeReadyInfoMessage */:
                    var resPurgeReadyInfoMessage = input.readVarInt(false); //剩余准备时间
                    this.sendNotif(cmd, resPurgeReadyInfoMessage);
                    break;
                case 175198 /* DailyModelCMD.CMDResPurgeEnterMessage */:
                    var resPurgeEnterMessage = {};
                    resPurgeEnterMessage["cfgId"] = input.readVarInt(false); //
                    resPurgeEnterMessage["time"] = input.readVarInt(false); //
                    this.sendNotif(cmd, resPurgeEnterMessage);
                    break;
                case 175200 /* DailyModelCMD.CMDResPurgeStoreMessage */:
                    var resPurgeStoreMessage = input.readVarInt(false); //购买的商品 配置下标 1开始 0表示未购买
                    this.sendNotif(cmd, resPurgeStoreMessage);
                    break;
                case 175202 /* DailyModelCMD.CMDResSiegePanelInfoMessage */:
                    var resSiegePanelInfoMessage = {};
                    resSiegePanelInfoMessage["group"] = input.readVarInt(false); //自己行会所在组，1战神2勇士
                    var siegeRecordGroupsLength1 = input.readShort();
                    resSiegePanelInfoMessage["siegeRecordGroups"] = [];
                    for (var siegeRecordGroupsi1 = 0; siegeRecordGroupsi1 < siegeRecordGroupsLength1; siegeRecordGroupsi1++) {
                        if (input.readByte() != 0) {
                            var temp444 = resSiegePanelInfoMessage["siegeRecordGroups"][siegeRecordGroupsi1] = {}; //组记录
                            temp444["group"] = input.readVarInt(false); //组，1战神2勇士
                            temp444["rank"] = input.readVarInt(false); //组评级 0未参与 1S 2A 3B 4C
                            var siegeRecordsLength1 = input.readShort();
                            temp444["siegeRecords"] = [];
                            for (var siegeRecordsi1 = 0; siegeRecordsi1 < siegeRecordsLength1; siegeRecordsi1++) {
                                if (input.readByte() != 0) {
                                    var temp445 = temp444["siegeRecords"][siegeRecordsi1] = {}; //组战局记录
                                    temp445["time"] = input.readVarInt(false); //日期(s)
                                    var unionRecordsLength1 = input.readShort();
                                    temp445["unionRecords"] = [];
                                    for (var unionRecordsi1 = 0; unionRecordsi1 < unionRecordsLength1; unionRecordsi1++) {
                                        if (input.readByte() != 0) {
                                            var temp446 = temp445["unionRecords"][unionRecordsi1] = {}; //攻城战行会记录
                                            temp446["unionName"] = input.readString(); //行会名
                                            temp446["rank"] = input.readVarInt(false); //行会排行
                                            temp446["score"] = input.readVarInt(false); //行会积分
                                            var playerRecordsLength1 = input.readShort();
                                            temp446["playerRecords"] = [];
                                            for (var playerRecordsi1 = 0; playerRecordsi1 < playerRecordsLength1; playerRecordsi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp447 = temp446["playerRecords"][playerRecordsi1] = {}; //攻城战玩家记录
                                                    temp447["rank"] = input.readVarInt(false); //排名
                                                    temp447["name"] = input.readString(); //姓名
                                                    temp447["career"] = input.readVarInt(false); //职业
                                                    temp447["score"] = input.readVarInt(false); //积分
                                                    temp447["kill"] = input.readVarInt(false); //击杀
                                                    temp447["dFlag"] = input.readVarInt(false); //摧毁旗帜
                                                    temp447["fFlag"] = input.readVarInt(false); //修复旗帜
                                                    temp447["dWall"] = input.readVarInt(false); //摧毁城墙
                                                    temp447["dHeart"] = input.readVarInt(false); //摧毁水晶
                                                }
                                                else {
                                                    temp446["playerRecords"][playerRecordsi1] = null;
                                                }
                                            }
                                        }
                                        else {
                                            temp445["unionRecords"][unionRecordsi1] = null;
                                        }
                                    }
                                }
                                else {
                                    temp444["siegeRecords"][siegeRecordsi1] = null;
                                }
                            }
                        }
                        else {
                            resSiegePanelInfoMessage["siegeRecordGroups"][siegeRecordGroupsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resSiegePanelInfoMessage);
                    break;
                case 175203 /* DailyModelCMD.CMDResSiegeReadyMessage */:
                    var resSiegeReadyMessage = {};
                    resSiegeReadyMessage["TimeEnd"] = input.readVarInt(false); //倒计时结束时间(s)
                    resSiegeReadyMessage["defUnion"] = input.readString(); //防守行会名
                    var atkUnionsLength = input.readShort();
                    resSiegeReadyMessage["atkUnions"] = new Array(atkUnionsLength);
                    for (var atkUnionsi1 = 0; atkUnionsi1 < atkUnionsLength; atkUnionsi1++) {
                        resSiegeReadyMessage["atkUnions"][atkUnionsi1] = input.readString(); //进攻行会名
                    }
                    this.sendNotif(cmd, resSiegeReadyMessage);
                    break;
                case 175204 /* DailyModelCMD.CMDResSiegeFightMessage */:
                    var resSiegeFightMessage = {};
                    resSiegeFightMessage["type"] = input.readVarInt(false); //0攻击方 1防守方
                    var monstersLength2 = input.readShort();
                    resSiegeFightMessage["monsters"] = [];
                    for (var monstersi2 = 0; monstersi2 < monstersLength2; monstersi2++) {
                        if (input.readByte() != 0) {
                            var temp448 = resSiegeFightMessage["monsters"][monstersi2] = {}; //怪物信息
                            temp448["cfgId"] = input.readVarInt(false); //配置id
                            temp448["hp"] = input.readLong(); //怪物血量
                            temp448["maxHp"] = input.readLong(); //怪物总血量
                        }
                        else {
                            resSiegeFightMessage["monsters"][monstersi2] = null;
                        }
                    }
                    var playerRanksLength1 = input.readShort();
                    resSiegeFightMessage["playerRanks"] = [];
                    for (var playerRanksi1 = 0; playerRanksi1 < playerRanksLength1; playerRanksi1++) {
                        if (input.readByte() != 0) {
                            var temp449 = resSiegeFightMessage["playerRanks"][playerRanksi1] = {}; //个人积分排行
                            temp449["ranking"] = input.readVarInt(false); //
                            temp449["uid"] = input.readLong(); //
                            temp449["name"] = input.readString(); //
                            temp449["score"] = input.readLong(); //
                        }
                        else {
                            resSiegeFightMessage["playerRanks"][playerRanksi1] = null;
                        }
                    }
                    resSiegeFightMessage["kill"] = input.readVarInt(false); //个人击杀
                    var unionRanksLength1 = input.readShort();
                    resSiegeFightMessage["unionRanks"] = [];
                    for (var unionRanksi1 = 0; unionRanksi1 < unionRanksLength1; unionRanksi1++) {
                        if (input.readByte() != 0) {
                            var temp450 = resSiegeFightMessage["unionRanks"][unionRanksi1] = {}; //行会输出排行
                            temp450["ranking"] = input.readVarInt(false); //
                            temp450["uid"] = input.readLong(); //
                            temp450["name"] = input.readString(); //
                            temp450["score"] = input.readLong(); //
                        }
                        else {
                            resSiegeFightMessage["unionRanks"][unionRanksi1] = null;
                        }
                    }
                    var unionScoreRanksLength1 = input.readShort();
                    resSiegeFightMessage["unionScoreRanks"] = [];
                    for (var unionScoreRanksi1 = 0; unionScoreRanksi1 < unionScoreRanksLength1; unionScoreRanksi1++) {
                        if (input.readByte() != 0) {
                            var temp451 = resSiegeFightMessage["unionScoreRanks"][unionScoreRanksi1] = {}; //行会积分排行
                            temp451["ranking"] = input.readVarInt(false); //
                            temp451["uid"] = input.readLong(); //
                            temp451["name"] = input.readString(); //
                            temp451["score"] = input.readLong(); //
                        }
                        else {
                            resSiegeFightMessage["unionScoreRanks"][unionScoreRanksi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resSiegeFightMessage);
                    break;
                case 175205 /* DailyModelCMD.CMDResSiegeSettleMessage */:
                    var resSiegeSettleMessage = {};
                    resSiegeSettleMessage["type"] = input.readVarInt(false); //活动类型
                    resSiegeSettleMessage["unionRank"] = input.readVarInt(false); //行会排行
                    var selfLength1 = input.readShort();
                    resSiegeSettleMessage["self"] = [];
                    for (var selfi1 = 0; selfi1 < selfLength1; selfi1++) {
                        if (input.readByte() != 0) {
                            var temp452 = resSiegeSettleMessage["self"][selfi1] = {}; //个人奖励
                            temp452["uid"] = input.readLong(); //唯一id
                            temp452["itemId"] = input.readVarInt(false); //道具配置id
                            temp452["count"] = input.readVarInt(false); //数量
                            temp452["expire"] = input.readVarInt(false); //过期时间
                            temp452["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp452["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength43 = input.readShort();
                            temp452["params"] = new Array(paramsLength43);
                            for (var paramsi43 = 0; paramsi43 < paramsLength43; paramsi43++) {
                                temp452["params"][paramsi43] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength22 = input.readByte();
                            if (equipDataLength22 != 0) {
                                var temp453 = temp452["equipData"] = {}; //装备属性（null表示没有）
                                temp453["durable"] = input.readVarInt(false); //消耗耐久
                                temp453["starLevel"] = input.readVarInt(false); //升星等级
                                temp453["starLock"] = input.readVarInt(false); //被锁星级
                                temp453["starExp"] = input.readVarInt(false); //升星祝福值
                                temp453["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp453["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp453["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp453["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp453["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp453["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp453["sign"] = input.readString(); //签名
                                var destinyAttrsLength22 = input.readShort();
                                temp453["destinyAttrs"] = [];
                                for (var destinyAttrsi22 = 0; destinyAttrsi22 < destinyAttrsLength22; destinyAttrsi22++) {
                                    if (input.readByte() != 0) {
                                        var temp454 = temp453["destinyAttrs"][destinyAttrsi22] = {}; //命运属性
                                        temp454["career"] = input.readVarInt(false); //职业限定
                                        temp454["attributeType"] = input.readVarInt(false); //属性类型
                                        temp454["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp453["destinyAttrs"][destinyAttrsi22] = null;
                                    }
                                }
                                var superAttrsLength22 = input.readShort();
                                temp453["superAttrs"] = [];
                                for (var superAttrsi22 = 0; superAttrsi22 < superAttrsLength22; superAttrsi22++) {
                                    if (input.readByte() != 0) {
                                        var temp455 = temp453["superAttrs"][superAttrsi22] = {}; //极品属性
                                        temp455["career"] = input.readVarInt(false); //职业限定
                                        temp455["attributeType"] = input.readVarInt(false); //属性类型
                                        temp455["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp453["superAttrs"][superAttrsi22] = null;
                                    }
                                }
                                var identifyAttrsLength22 = input.readShort();
                                temp453["identifyAttrs"] = [];
                                for (var identifyAttrsi22 = 0; identifyAttrsi22 < identifyAttrsLength22; identifyAttrsi22++) {
                                    if (input.readByte() != 0) {
                                        var temp456 = temp453["identifyAttrs"][identifyAttrsi22] = {}; //鉴定属性
                                        temp456["career"] = input.readVarInt(false); //职业限定
                                        temp456["attributeType"] = input.readVarInt(false); //属性类型
                                        temp456["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp453["identifyAttrs"][identifyAttrsi22] = null;
                                    }
                                }
                                var xiLianAttrsLength22 = input.readShort();
                                temp453["xiLianAttrs"] = [];
                                for (var xiLianAttrsi22 = 0; xiLianAttrsi22 < xiLianAttrsLength22; xiLianAttrsi22++) {
                                    if (input.readByte() != 0) {
                                        var temp457 = temp453["xiLianAttrs"][xiLianAttrsi22] = {}; //配饰洗练属性
                                        temp457["career"] = input.readVarInt(false); //职业限定
                                        temp457["attributeType"] = input.readVarInt(false); //属性类型
                                        temp457["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp453["xiLianAttrs"][xiLianAttrsi22] = null;
                                    }
                                }
                                temp453["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp453["growLevel"] = input.readVarInt(false); //成长等级
                                temp453["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength22 = input.readShort();
                                temp453["bestAttrs"] = new Array(bestAttrsLength22);
                                for (var bestAttrsi22 = 0; bestAttrsi22 < bestAttrsLength22; bestAttrsi22++) {
                                    temp453["bestAttrs"][bestAttrsi22] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength22 = input.readShort();
                                temp453["soulAttrs"] = new Array(soulAttrsLength22);
                                for (var soulAttrsi22 = 0; soulAttrsi22 < soulAttrsLength22; soulAttrsi22++) {
                                    temp453["soulAttrs"][soulAttrsi22] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength22 = input.readShort();
                                temp453["godsAttrs"] = new Array(godsAttrsLength22);
                                for (var godsAttrsi22 = 0; godsAttrsi22 < godsAttrsLength22; godsAttrsi22++) {
                                    temp453["godsAttrs"][godsAttrsi22] = input.readVarInt(false); //额外神级属性
                                }
                                temp453["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength22 = input.readShort();
                                temp453["specialDurable"] = [];
                                for (var specialDurablei22 = 0; specialDurablei22 < specialDurableLength22; specialDurablei22++) {
                                    if (input.readByte() != 0) {
                                        var temp458 = temp453["specialDurable"][specialDurablei22] = {}; //特殊耐久消耗值
                                        temp458["type"] = input.readVarInt(false); //类型
                                        temp458["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp453["specialDurable"][specialDurablei22] = null;
                                    }
                                }
                            }
                            var immobilizationLength22 = input.readByte();
                            if (immobilizationLength22 != 0) {
                                var temp459 = temp452["immobilization"] = {}; //固化数据
                                temp459["action"] = input.readVarInt(false); //产生行为
                                temp459["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength22 = input.readByte();
                            if (fromLength22 != 0) {
                                var temp460 = temp452["from"] = {}; //来源
                                temp460["action"] = input.readVarInt(false); //产生行为
                                temp460["firstRole"] = input.readLong(); //第一个玩家id
                                temp460["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength44 = input.readShort();
                                temp460["params"] = [];
                                for (var paramsi44 = 0; paramsi44 < paramsLength44; paramsi44++) {
                                    if (input.readByte() != 0) {
                                        var temp461 = temp460["params"][paramsi44] = {}; //
                                        temp461["key"] = input.readVarInt(false); //
                                        temp461["value"] = input.readString(); //
                                    }
                                    else {
                                        temp460["params"][paramsi44] = null;
                                    }
                                }
                            }
                            temp452["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength22 = input.readByte();
                            if (spriteDataLength22 != 0) {
                                var temp462 = temp452["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp462["level"] = input.readVarInt(false); //灵兽等级
                                temp462["exp"] = input.readVarInt(false); //灵兽经验
                                temp462["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength22 = input.readShort();
                                temp462["skills"] = [];
                                for (var skillsi22 = 0; skillsi22 < skillsLength22; skillsi22++) {
                                    if (input.readByte() != 0) {
                                        var temp463 = temp462["skills"][skillsi22] = {}; //灵兽出战技能
                                        temp463["id"] = input.readVarInt(false); //
                                        temp463["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp462["skills"][skillsi22] = null;
                                    }
                                }
                                var ownerSkillsLength22 = input.readShort();
                                temp462["ownerSkills"] = [];
                                for (var ownerSkillsi22 = 0; ownerSkillsi22 < ownerSkillsLength22; ownerSkillsi22++) {
                                    if (input.readByte() != 0) {
                                        var temp464 = temp462["ownerSkills"][ownerSkillsi22] = {}; //灵兽拥有的技能
                                        temp464["id"] = input.readVarInt(false); //
                                        temp464["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp462["ownerSkills"][ownerSkillsi22] = null;
                                    }
                                }
                                var ownerSkinsLength22 = input.readShort();
                                temp462["ownerSkins"] = [];
                                for (var ownerSkinsi22 = 0; ownerSkinsi22 < ownerSkinsLength22; ownerSkinsi22++) {
                                    if (input.readByte() != 0) {
                                        var temp465 = temp462["ownerSkins"][ownerSkinsi22] = {}; //灵兽拥有的皮肤
                                        temp465["id"] = input.readVarInt(false); //
                                        temp465["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp462["ownerSkins"][ownerSkinsi22] = null;
                                    }
                                }
                                var absorbExpLength22 = input.readShort();
                                temp462["absorbExp"] = [];
                                for (var absorbExpi22 = 0; absorbExpi22 < absorbExpLength22; absorbExpi22++) {
                                    if (input.readByte() != 0) {
                                        var temp466 = temp462["absorbExp"][absorbExpi22] = {}; //灵兽吸收经验值
                                        temp466["id"] = input.readVarInt(false); //
                                        temp466["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp462["absorbExp"][absorbExpi22] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resSiegeSettleMessage["self"][selfi1] = null;
                        }
                    }
                    var unionLength1 = input.readShort();
                    resSiegeSettleMessage["union"] = [];
                    for (var unioni1 = 0; unioni1 < unionLength1; unioni1++) {
                        if (input.readByte() != 0) {
                            var temp467 = resSiegeSettleMessage["union"][unioni1] = {}; //行会奖励
                            temp467["uid"] = input.readLong(); //唯一id
                            temp467["itemId"] = input.readVarInt(false); //道具配置id
                            temp467["count"] = input.readVarInt(false); //数量
                            temp467["expire"] = input.readVarInt(false); //过期时间
                            temp467["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp467["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength45 = input.readShort();
                            temp467["params"] = new Array(paramsLength45);
                            for (var paramsi45 = 0; paramsi45 < paramsLength45; paramsi45++) {
                                temp467["params"][paramsi45] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength23 = input.readByte();
                            if (equipDataLength23 != 0) {
                                var temp468 = temp467["equipData"] = {}; //装备属性（null表示没有）
                                temp468["durable"] = input.readVarInt(false); //消耗耐久
                                temp468["starLevel"] = input.readVarInt(false); //升星等级
                                temp468["starLock"] = input.readVarInt(false); //被锁星级
                                temp468["starExp"] = input.readVarInt(false); //升星祝福值
                                temp468["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp468["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp468["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp468["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp468["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp468["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp468["sign"] = input.readString(); //签名
                                var destinyAttrsLength23 = input.readShort();
                                temp468["destinyAttrs"] = [];
                                for (var destinyAttrsi23 = 0; destinyAttrsi23 < destinyAttrsLength23; destinyAttrsi23++) {
                                    if (input.readByte() != 0) {
                                        var temp469 = temp468["destinyAttrs"][destinyAttrsi23] = {}; //命运属性
                                        temp469["career"] = input.readVarInt(false); //职业限定
                                        temp469["attributeType"] = input.readVarInt(false); //属性类型
                                        temp469["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp468["destinyAttrs"][destinyAttrsi23] = null;
                                    }
                                }
                                var superAttrsLength23 = input.readShort();
                                temp468["superAttrs"] = [];
                                for (var superAttrsi23 = 0; superAttrsi23 < superAttrsLength23; superAttrsi23++) {
                                    if (input.readByte() != 0) {
                                        var temp470 = temp468["superAttrs"][superAttrsi23] = {}; //极品属性
                                        temp470["career"] = input.readVarInt(false); //职业限定
                                        temp470["attributeType"] = input.readVarInt(false); //属性类型
                                        temp470["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp468["superAttrs"][superAttrsi23] = null;
                                    }
                                }
                                var identifyAttrsLength23 = input.readShort();
                                temp468["identifyAttrs"] = [];
                                for (var identifyAttrsi23 = 0; identifyAttrsi23 < identifyAttrsLength23; identifyAttrsi23++) {
                                    if (input.readByte() != 0) {
                                        var temp471 = temp468["identifyAttrs"][identifyAttrsi23] = {}; //鉴定属性
                                        temp471["career"] = input.readVarInt(false); //职业限定
                                        temp471["attributeType"] = input.readVarInt(false); //属性类型
                                        temp471["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp468["identifyAttrs"][identifyAttrsi23] = null;
                                    }
                                }
                                var xiLianAttrsLength23 = input.readShort();
                                temp468["xiLianAttrs"] = [];
                                for (var xiLianAttrsi23 = 0; xiLianAttrsi23 < xiLianAttrsLength23; xiLianAttrsi23++) {
                                    if (input.readByte() != 0) {
                                        var temp472 = temp468["xiLianAttrs"][xiLianAttrsi23] = {}; //配饰洗练属性
                                        temp472["career"] = input.readVarInt(false); //职业限定
                                        temp472["attributeType"] = input.readVarInt(false); //属性类型
                                        temp472["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp468["xiLianAttrs"][xiLianAttrsi23] = null;
                                    }
                                }
                                temp468["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp468["growLevel"] = input.readVarInt(false); //成长等级
                                temp468["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength23 = input.readShort();
                                temp468["bestAttrs"] = new Array(bestAttrsLength23);
                                for (var bestAttrsi23 = 0; bestAttrsi23 < bestAttrsLength23; bestAttrsi23++) {
                                    temp468["bestAttrs"][bestAttrsi23] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength23 = input.readShort();
                                temp468["soulAttrs"] = new Array(soulAttrsLength23);
                                for (var soulAttrsi23 = 0; soulAttrsi23 < soulAttrsLength23; soulAttrsi23++) {
                                    temp468["soulAttrs"][soulAttrsi23] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength23 = input.readShort();
                                temp468["godsAttrs"] = new Array(godsAttrsLength23);
                                for (var godsAttrsi23 = 0; godsAttrsi23 < godsAttrsLength23; godsAttrsi23++) {
                                    temp468["godsAttrs"][godsAttrsi23] = input.readVarInt(false); //额外神级属性
                                }
                                temp468["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength23 = input.readShort();
                                temp468["specialDurable"] = [];
                                for (var specialDurablei23 = 0; specialDurablei23 < specialDurableLength23; specialDurablei23++) {
                                    if (input.readByte() != 0) {
                                        var temp473 = temp468["specialDurable"][specialDurablei23] = {}; //特殊耐久消耗值
                                        temp473["type"] = input.readVarInt(false); //类型
                                        temp473["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp468["specialDurable"][specialDurablei23] = null;
                                    }
                                }
                            }
                            var immobilizationLength23 = input.readByte();
                            if (immobilizationLength23 != 0) {
                                var temp474 = temp467["immobilization"] = {}; //固化数据
                                temp474["action"] = input.readVarInt(false); //产生行为
                                temp474["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength23 = input.readByte();
                            if (fromLength23 != 0) {
                                var temp475 = temp467["from"] = {}; //来源
                                temp475["action"] = input.readVarInt(false); //产生行为
                                temp475["firstRole"] = input.readLong(); //第一个玩家id
                                temp475["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength46 = input.readShort();
                                temp475["params"] = [];
                                for (var paramsi46 = 0; paramsi46 < paramsLength46; paramsi46++) {
                                    if (input.readByte() != 0) {
                                        var temp476 = temp475["params"][paramsi46] = {}; //
                                        temp476["key"] = input.readVarInt(false); //
                                        temp476["value"] = input.readString(); //
                                    }
                                    else {
                                        temp475["params"][paramsi46] = null;
                                    }
                                }
                            }
                            temp467["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength23 = input.readByte();
                            if (spriteDataLength23 != 0) {
                                var temp477 = temp467["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp477["level"] = input.readVarInt(false); //灵兽等级
                                temp477["exp"] = input.readVarInt(false); //灵兽经验
                                temp477["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength23 = input.readShort();
                                temp477["skills"] = [];
                                for (var skillsi23 = 0; skillsi23 < skillsLength23; skillsi23++) {
                                    if (input.readByte() != 0) {
                                        var temp478 = temp477["skills"][skillsi23] = {}; //灵兽出战技能
                                        temp478["id"] = input.readVarInt(false); //
                                        temp478["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp477["skills"][skillsi23] = null;
                                    }
                                }
                                var ownerSkillsLength23 = input.readShort();
                                temp477["ownerSkills"] = [];
                                for (var ownerSkillsi23 = 0; ownerSkillsi23 < ownerSkillsLength23; ownerSkillsi23++) {
                                    if (input.readByte() != 0) {
                                        var temp479 = temp477["ownerSkills"][ownerSkillsi23] = {}; //灵兽拥有的技能
                                        temp479["id"] = input.readVarInt(false); //
                                        temp479["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp477["ownerSkills"][ownerSkillsi23] = null;
                                    }
                                }
                                var ownerSkinsLength23 = input.readShort();
                                temp477["ownerSkins"] = [];
                                for (var ownerSkinsi23 = 0; ownerSkinsi23 < ownerSkinsLength23; ownerSkinsi23++) {
                                    if (input.readByte() != 0) {
                                        var temp480 = temp477["ownerSkins"][ownerSkinsi23] = {}; //灵兽拥有的皮肤
                                        temp480["id"] = input.readVarInt(false); //
                                        temp480["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp477["ownerSkins"][ownerSkinsi23] = null;
                                    }
                                }
                                var absorbExpLength23 = input.readShort();
                                temp477["absorbExp"] = [];
                                for (var absorbExpi23 = 0; absorbExpi23 < absorbExpLength23; absorbExpi23++) {
                                    if (input.readByte() != 0) {
                                        var temp481 = temp477["absorbExp"][absorbExpi23] = {}; //灵兽吸收经验值
                                        temp481["id"] = input.readVarInt(false); //
                                        temp481["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp477["absorbExp"][absorbExpi23] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resSiegeSettleMessage["union"][unioni1] = null;
                        }
                    }
                    resSiegeSettleMessage["mvpName"] = input.readString(); //mvp名
                    resSiegeSettleMessage["mvpCareer"] = input.readVarInt(false); //mvp职业
                    resSiegeSettleMessage["mvpSex"] = input.readVarInt(false); //mvp性别
                    resSiegeSettleMessage["mvpUnion"] = input.readString(); //mvp行会名
                    resSiegeSettleMessage["mvpScore"] = input.readVarInt(false); //mvp积分
                    var recordLength1 = input.readByte();
                    if (recordLength1 != 0) {
                        var temp482 = resSiegeSettleMessage["record"] = {}; //本次战局记录
                        temp482["time"] = input.readVarInt(false); //日期(s)
                        var unionRecordsLength2 = input.readShort();
                        temp482["unionRecords"] = [];
                        for (var unionRecordsi2 = 0; unionRecordsi2 < unionRecordsLength2; unionRecordsi2++) {
                            if (input.readByte() != 0) {
                                var temp483 = temp482["unionRecords"][unionRecordsi2] = {}; //攻城战行会记录
                                temp483["unionName"] = input.readString(); //行会名
                                temp483["rank"] = input.readVarInt(false); //行会排行
                                temp483["score"] = input.readVarInt(false); //行会积分
                                var playerRecordsLength2 = input.readShort();
                                temp483["playerRecords"] = [];
                                for (var playerRecordsi2 = 0; playerRecordsi2 < playerRecordsLength2; playerRecordsi2++) {
                                    if (input.readByte() != 0) {
                                        var temp484 = temp483["playerRecords"][playerRecordsi2] = {}; //攻城战玩家记录
                                        temp484["rank"] = input.readVarInt(false); //排名
                                        temp484["name"] = input.readString(); //姓名
                                        temp484["career"] = input.readVarInt(false); //职业
                                        temp484["score"] = input.readVarInt(false); //积分
                                        temp484["kill"] = input.readVarInt(false); //击杀
                                        temp484["dFlag"] = input.readVarInt(false); //摧毁旗帜
                                        temp484["fFlag"] = input.readVarInt(false); //修复旗帜
                                        temp484["dWall"] = input.readVarInt(false); //摧毁城墙
                                        temp484["dHeart"] = input.readVarInt(false); //摧毁水晶
                                    }
                                    else {
                                        temp483["playerRecords"][playerRecordsi2] = null;
                                    }
                                }
                            }
                            else {
                                temp482["unionRecords"][unionRecordsi2] = null;
                            }
                        }
                    }
                    this.sendNotif(cmd, resSiegeSettleMessage);
                    break;
                case 175212 /* DailyModelCMD.CMDResDailyRoleTrialInfoMessage */:
                    var resDailyRoleTrialInfoMessage = input.readVarInt(false); //当前完成到多少层
                    this.sendNotif(cmd, resDailyRoleTrialInfoMessage);
                    break;
                case 175222 /* DailyModelCMD.CMDResDailyTimedUnionDistributeMessage */:
                    var resDailyTimedUnionDistributeMessage = {};
                    resDailyTimedUnionDistributeMessage["beginAt"] = input.readVarInt(false); //开始时间
                    var unionRankingsLength6 = input.readShort();
                    resDailyTimedUnionDistributeMessage["unionRankings"] = [];
                    for (var unionRankingsi6 = 0; unionRankingsi6 < unionRankingsLength6; unionRankingsi6++) {
                        if (input.readByte() != 0) {
                            var temp485 = resDailyTimedUnionDistributeMessage["unionRankings"][unionRankingsi6] = {}; //排名 积分大于约定值表示淘汰
                            temp485["ranking"] = input.readVarInt(false); //
                            temp485["uid"] = input.readLong(); //
                            temp485["name"] = input.readString(); //
                            temp485["score"] = input.readLong(); //
                        }
                        else {
                            resDailyTimedUnionDistributeMessage["unionRankings"][unionRankingsi6] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedUnionDistributeMessage);
                    break;
                case 175224 /* DailyModelCMD.CMDResDailyTimedUnionDistributeScoreMessage */:
                    var rankingLength2 = input.readShort();
                    var resDailyTimedUnionDistributeScoreMessage = [];
                    for (var rankingi2 = 0; rankingi2 < rankingLength2; rankingi2++) {
                        if (input.readByte() != 0) {
                            var temp486 = resDailyTimedUnionDistributeScoreMessage[rankingi2] = {}; //排行
                            temp486["ranking"] = input.readVarInt(false); //
                            temp486["uid"] = input.readLong(); //
                            temp486["name"] = input.readString(); //
                            temp486["score"] = input.readLong(); //
                        }
                        else {
                            resDailyTimedUnionDistributeScoreMessage[rankingi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedUnionDistributeScoreMessage);
                    break;
                case 175225 /* DailyModelCMD.CMDResDailyTimedUnionDistributeSettleMessage */:
                    var resDailyTimedUnionDistributeSettleMessage = {};
                    var worldsLength7 = input.readShort();
                    resDailyTimedUnionDistributeSettleMessage["worlds"] = [];
                    for (var worldsi7 = 0; worldsi7 < worldsLength7; worldsi7++) {
                        if (input.readByte() != 0) {
                            var temp487 = resDailyTimedUnionDistributeSettleMessage["worlds"][worldsi7] = {}; //世界奖励
                            temp487["uid"] = input.readLong(); //唯一id
                            temp487["itemId"] = input.readVarInt(false); //道具配置id
                            temp487["count"] = input.readVarInt(false); //数量
                            temp487["expire"] = input.readVarInt(false); //过期时间
                            temp487["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp487["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength47 = input.readShort();
                            temp487["params"] = new Array(paramsLength47);
                            for (var paramsi47 = 0; paramsi47 < paramsLength47; paramsi47++) {
                                temp487["params"][paramsi47] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength24 = input.readByte();
                            if (equipDataLength24 != 0) {
                                var temp488 = temp487["equipData"] = {}; //装备属性（null表示没有）
                                temp488["durable"] = input.readVarInt(false); //消耗耐久
                                temp488["starLevel"] = input.readVarInt(false); //升星等级
                                temp488["starLock"] = input.readVarInt(false); //被锁星级
                                temp488["starExp"] = input.readVarInt(false); //升星祝福值
                                temp488["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp488["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp488["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp488["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp488["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp488["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp488["sign"] = input.readString(); //签名
                                var destinyAttrsLength24 = input.readShort();
                                temp488["destinyAttrs"] = [];
                                for (var destinyAttrsi24 = 0; destinyAttrsi24 < destinyAttrsLength24; destinyAttrsi24++) {
                                    if (input.readByte() != 0) {
                                        var temp489 = temp488["destinyAttrs"][destinyAttrsi24] = {}; //命运属性
                                        temp489["career"] = input.readVarInt(false); //职业限定
                                        temp489["attributeType"] = input.readVarInt(false); //属性类型
                                        temp489["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp488["destinyAttrs"][destinyAttrsi24] = null;
                                    }
                                }
                                var superAttrsLength24 = input.readShort();
                                temp488["superAttrs"] = [];
                                for (var superAttrsi24 = 0; superAttrsi24 < superAttrsLength24; superAttrsi24++) {
                                    if (input.readByte() != 0) {
                                        var temp490 = temp488["superAttrs"][superAttrsi24] = {}; //极品属性
                                        temp490["career"] = input.readVarInt(false); //职业限定
                                        temp490["attributeType"] = input.readVarInt(false); //属性类型
                                        temp490["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp488["superAttrs"][superAttrsi24] = null;
                                    }
                                }
                                var identifyAttrsLength24 = input.readShort();
                                temp488["identifyAttrs"] = [];
                                for (var identifyAttrsi24 = 0; identifyAttrsi24 < identifyAttrsLength24; identifyAttrsi24++) {
                                    if (input.readByte() != 0) {
                                        var temp491 = temp488["identifyAttrs"][identifyAttrsi24] = {}; //鉴定属性
                                        temp491["career"] = input.readVarInt(false); //职业限定
                                        temp491["attributeType"] = input.readVarInt(false); //属性类型
                                        temp491["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp488["identifyAttrs"][identifyAttrsi24] = null;
                                    }
                                }
                                var xiLianAttrsLength24 = input.readShort();
                                temp488["xiLianAttrs"] = [];
                                for (var xiLianAttrsi24 = 0; xiLianAttrsi24 < xiLianAttrsLength24; xiLianAttrsi24++) {
                                    if (input.readByte() != 0) {
                                        var temp492 = temp488["xiLianAttrs"][xiLianAttrsi24] = {}; //配饰洗练属性
                                        temp492["career"] = input.readVarInt(false); //职业限定
                                        temp492["attributeType"] = input.readVarInt(false); //属性类型
                                        temp492["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp488["xiLianAttrs"][xiLianAttrsi24] = null;
                                    }
                                }
                                temp488["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp488["growLevel"] = input.readVarInt(false); //成长等级
                                temp488["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength24 = input.readShort();
                                temp488["bestAttrs"] = new Array(bestAttrsLength24);
                                for (var bestAttrsi24 = 0; bestAttrsi24 < bestAttrsLength24; bestAttrsi24++) {
                                    temp488["bestAttrs"][bestAttrsi24] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength24 = input.readShort();
                                temp488["soulAttrs"] = new Array(soulAttrsLength24);
                                for (var soulAttrsi24 = 0; soulAttrsi24 < soulAttrsLength24; soulAttrsi24++) {
                                    temp488["soulAttrs"][soulAttrsi24] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength24 = input.readShort();
                                temp488["godsAttrs"] = new Array(godsAttrsLength24);
                                for (var godsAttrsi24 = 0; godsAttrsi24 < godsAttrsLength24; godsAttrsi24++) {
                                    temp488["godsAttrs"][godsAttrsi24] = input.readVarInt(false); //额外神级属性
                                }
                                temp488["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength24 = input.readShort();
                                temp488["specialDurable"] = [];
                                for (var specialDurablei24 = 0; specialDurablei24 < specialDurableLength24; specialDurablei24++) {
                                    if (input.readByte() != 0) {
                                        var temp493 = temp488["specialDurable"][specialDurablei24] = {}; //特殊耐久消耗值
                                        temp493["type"] = input.readVarInt(false); //类型
                                        temp493["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp488["specialDurable"][specialDurablei24] = null;
                                    }
                                }
                            }
                            var immobilizationLength24 = input.readByte();
                            if (immobilizationLength24 != 0) {
                                var temp494 = temp487["immobilization"] = {}; //固化数据
                                temp494["action"] = input.readVarInt(false); //产生行为
                                temp494["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength24 = input.readByte();
                            if (fromLength24 != 0) {
                                var temp495 = temp487["from"] = {}; //来源
                                temp495["action"] = input.readVarInt(false); //产生行为
                                temp495["firstRole"] = input.readLong(); //第一个玩家id
                                temp495["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength48 = input.readShort();
                                temp495["params"] = [];
                                for (var paramsi48 = 0; paramsi48 < paramsLength48; paramsi48++) {
                                    if (input.readByte() != 0) {
                                        var temp496 = temp495["params"][paramsi48] = {}; //
                                        temp496["key"] = input.readVarInt(false); //
                                        temp496["value"] = input.readString(); //
                                    }
                                    else {
                                        temp495["params"][paramsi48] = null;
                                    }
                                }
                            }
                            temp487["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength24 = input.readByte();
                            if (spriteDataLength24 != 0) {
                                var temp497 = temp487["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp497["level"] = input.readVarInt(false); //灵兽等级
                                temp497["exp"] = input.readVarInt(false); //灵兽经验
                                temp497["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength24 = input.readShort();
                                temp497["skills"] = [];
                                for (var skillsi24 = 0; skillsi24 < skillsLength24; skillsi24++) {
                                    if (input.readByte() != 0) {
                                        var temp498 = temp497["skills"][skillsi24] = {}; //灵兽出战技能
                                        temp498["id"] = input.readVarInt(false); //
                                        temp498["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp497["skills"][skillsi24] = null;
                                    }
                                }
                                var ownerSkillsLength24 = input.readShort();
                                temp497["ownerSkills"] = [];
                                for (var ownerSkillsi24 = 0; ownerSkillsi24 < ownerSkillsLength24; ownerSkillsi24++) {
                                    if (input.readByte() != 0) {
                                        var temp499 = temp497["ownerSkills"][ownerSkillsi24] = {}; //灵兽拥有的技能
                                        temp499["id"] = input.readVarInt(false); //
                                        temp499["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp497["ownerSkills"][ownerSkillsi24] = null;
                                    }
                                }
                                var ownerSkinsLength24 = input.readShort();
                                temp497["ownerSkins"] = [];
                                for (var ownerSkinsi24 = 0; ownerSkinsi24 < ownerSkinsLength24; ownerSkinsi24++) {
                                    if (input.readByte() != 0) {
                                        var temp500 = temp497["ownerSkins"][ownerSkinsi24] = {}; //灵兽拥有的皮肤
                                        temp500["id"] = input.readVarInt(false); //
                                        temp500["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp497["ownerSkins"][ownerSkinsi24] = null;
                                    }
                                }
                                var absorbExpLength24 = input.readShort();
                                temp497["absorbExp"] = [];
                                for (var absorbExpi24 = 0; absorbExpi24 < absorbExpLength24; absorbExpi24++) {
                                    if (input.readByte() != 0) {
                                        var temp501 = temp497["absorbExp"][absorbExpi24] = {}; //灵兽吸收经验值
                                        temp501["id"] = input.readVarInt(false); //
                                        temp501["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp497["absorbExp"][absorbExpi24] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resDailyTimedUnionDistributeSettleMessage["worlds"][worldsi7] = null;
                        }
                    }
                    var unionsLength8 = input.readShort();
                    resDailyTimedUnionDistributeSettleMessage["unions"] = [];
                    for (var unionsi8 = 0; unionsi8 < unionsLength8; unionsi8++) {
                        if (input.readByte() != 0) {
                            var temp502 = resDailyTimedUnionDistributeSettleMessage["unions"][unionsi8] = {}; //行会奖励
                            temp502["uid"] = input.readLong(); //唯一id
                            temp502["itemId"] = input.readVarInt(false); //道具配置id
                            temp502["count"] = input.readVarInt(false); //数量
                            temp502["expire"] = input.readVarInt(false); //过期时间
                            temp502["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp502["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength49 = input.readShort();
                            temp502["params"] = new Array(paramsLength49);
                            for (var paramsi49 = 0; paramsi49 < paramsLength49; paramsi49++) {
                                temp502["params"][paramsi49] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength25 = input.readByte();
                            if (equipDataLength25 != 0) {
                                var temp503 = temp502["equipData"] = {}; //装备属性（null表示没有）
                                temp503["durable"] = input.readVarInt(false); //消耗耐久
                                temp503["starLevel"] = input.readVarInt(false); //升星等级
                                temp503["starLock"] = input.readVarInt(false); //被锁星级
                                temp503["starExp"] = input.readVarInt(false); //升星祝福值
                                temp503["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp503["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp503["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp503["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp503["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp503["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp503["sign"] = input.readString(); //签名
                                var destinyAttrsLength25 = input.readShort();
                                temp503["destinyAttrs"] = [];
                                for (var destinyAttrsi25 = 0; destinyAttrsi25 < destinyAttrsLength25; destinyAttrsi25++) {
                                    if (input.readByte() != 0) {
                                        var temp504 = temp503["destinyAttrs"][destinyAttrsi25] = {}; //命运属性
                                        temp504["career"] = input.readVarInt(false); //职业限定
                                        temp504["attributeType"] = input.readVarInt(false); //属性类型
                                        temp504["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp503["destinyAttrs"][destinyAttrsi25] = null;
                                    }
                                }
                                var superAttrsLength25 = input.readShort();
                                temp503["superAttrs"] = [];
                                for (var superAttrsi25 = 0; superAttrsi25 < superAttrsLength25; superAttrsi25++) {
                                    if (input.readByte() != 0) {
                                        var temp505 = temp503["superAttrs"][superAttrsi25] = {}; //极品属性
                                        temp505["career"] = input.readVarInt(false); //职业限定
                                        temp505["attributeType"] = input.readVarInt(false); //属性类型
                                        temp505["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp503["superAttrs"][superAttrsi25] = null;
                                    }
                                }
                                var identifyAttrsLength25 = input.readShort();
                                temp503["identifyAttrs"] = [];
                                for (var identifyAttrsi25 = 0; identifyAttrsi25 < identifyAttrsLength25; identifyAttrsi25++) {
                                    if (input.readByte() != 0) {
                                        var temp506 = temp503["identifyAttrs"][identifyAttrsi25] = {}; //鉴定属性
                                        temp506["career"] = input.readVarInt(false); //职业限定
                                        temp506["attributeType"] = input.readVarInt(false); //属性类型
                                        temp506["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp503["identifyAttrs"][identifyAttrsi25] = null;
                                    }
                                }
                                var xiLianAttrsLength25 = input.readShort();
                                temp503["xiLianAttrs"] = [];
                                for (var xiLianAttrsi25 = 0; xiLianAttrsi25 < xiLianAttrsLength25; xiLianAttrsi25++) {
                                    if (input.readByte() != 0) {
                                        var temp507 = temp503["xiLianAttrs"][xiLianAttrsi25] = {}; //配饰洗练属性
                                        temp507["career"] = input.readVarInt(false); //职业限定
                                        temp507["attributeType"] = input.readVarInt(false); //属性类型
                                        temp507["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp503["xiLianAttrs"][xiLianAttrsi25] = null;
                                    }
                                }
                                temp503["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp503["growLevel"] = input.readVarInt(false); //成长等级
                                temp503["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength25 = input.readShort();
                                temp503["bestAttrs"] = new Array(bestAttrsLength25);
                                for (var bestAttrsi25 = 0; bestAttrsi25 < bestAttrsLength25; bestAttrsi25++) {
                                    temp503["bestAttrs"][bestAttrsi25] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength25 = input.readShort();
                                temp503["soulAttrs"] = new Array(soulAttrsLength25);
                                for (var soulAttrsi25 = 0; soulAttrsi25 < soulAttrsLength25; soulAttrsi25++) {
                                    temp503["soulAttrs"][soulAttrsi25] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength25 = input.readShort();
                                temp503["godsAttrs"] = new Array(godsAttrsLength25);
                                for (var godsAttrsi25 = 0; godsAttrsi25 < godsAttrsLength25; godsAttrsi25++) {
                                    temp503["godsAttrs"][godsAttrsi25] = input.readVarInt(false); //额外神级属性
                                }
                                temp503["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength25 = input.readShort();
                                temp503["specialDurable"] = [];
                                for (var specialDurablei25 = 0; specialDurablei25 < specialDurableLength25; specialDurablei25++) {
                                    if (input.readByte() != 0) {
                                        var temp508 = temp503["specialDurable"][specialDurablei25] = {}; //特殊耐久消耗值
                                        temp508["type"] = input.readVarInt(false); //类型
                                        temp508["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp503["specialDurable"][specialDurablei25] = null;
                                    }
                                }
                            }
                            var immobilizationLength25 = input.readByte();
                            if (immobilizationLength25 != 0) {
                                var temp509 = temp502["immobilization"] = {}; //固化数据
                                temp509["action"] = input.readVarInt(false); //产生行为
                                temp509["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength25 = input.readByte();
                            if (fromLength25 != 0) {
                                var temp510 = temp502["from"] = {}; //来源
                                temp510["action"] = input.readVarInt(false); //产生行为
                                temp510["firstRole"] = input.readLong(); //第一个玩家id
                                temp510["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength50 = input.readShort();
                                temp510["params"] = [];
                                for (var paramsi50 = 0; paramsi50 < paramsLength50; paramsi50++) {
                                    if (input.readByte() != 0) {
                                        var temp511 = temp510["params"][paramsi50] = {}; //
                                        temp511["key"] = input.readVarInt(false); //
                                        temp511["value"] = input.readString(); //
                                    }
                                    else {
                                        temp510["params"][paramsi50] = null;
                                    }
                                }
                            }
                            temp502["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength25 = input.readByte();
                            if (spriteDataLength25 != 0) {
                                var temp512 = temp502["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp512["level"] = input.readVarInt(false); //灵兽等级
                                temp512["exp"] = input.readVarInt(false); //灵兽经验
                                temp512["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength25 = input.readShort();
                                temp512["skills"] = [];
                                for (var skillsi25 = 0; skillsi25 < skillsLength25; skillsi25++) {
                                    if (input.readByte() != 0) {
                                        var temp513 = temp512["skills"][skillsi25] = {}; //灵兽出战技能
                                        temp513["id"] = input.readVarInt(false); //
                                        temp513["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp512["skills"][skillsi25] = null;
                                    }
                                }
                                var ownerSkillsLength25 = input.readShort();
                                temp512["ownerSkills"] = [];
                                for (var ownerSkillsi25 = 0; ownerSkillsi25 < ownerSkillsLength25; ownerSkillsi25++) {
                                    if (input.readByte() != 0) {
                                        var temp514 = temp512["ownerSkills"][ownerSkillsi25] = {}; //灵兽拥有的技能
                                        temp514["id"] = input.readVarInt(false); //
                                        temp514["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp512["ownerSkills"][ownerSkillsi25] = null;
                                    }
                                }
                                var ownerSkinsLength25 = input.readShort();
                                temp512["ownerSkins"] = [];
                                for (var ownerSkinsi25 = 0; ownerSkinsi25 < ownerSkinsLength25; ownerSkinsi25++) {
                                    if (input.readByte() != 0) {
                                        var temp515 = temp512["ownerSkins"][ownerSkinsi25] = {}; //灵兽拥有的皮肤
                                        temp515["id"] = input.readVarInt(false); //
                                        temp515["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp512["ownerSkins"][ownerSkinsi25] = null;
                                    }
                                }
                                var absorbExpLength25 = input.readShort();
                                temp512["absorbExp"] = [];
                                for (var absorbExpi25 = 0; absorbExpi25 < absorbExpLength25; absorbExpi25++) {
                                    if (input.readByte() != 0) {
                                        var temp516 = temp512["absorbExp"][absorbExpi25] = {}; //灵兽吸收经验值
                                        temp516["id"] = input.readVarInt(false); //
                                        temp516["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp512["absorbExp"][absorbExpi25] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resDailyTimedUnionDistributeSettleMessage["unions"][unionsi8] = null;
                        }
                    }
                    var globalsLength5 = input.readShort();
                    resDailyTimedUnionDistributeSettleMessage["globals"] = [];
                    for (var globalsi5 = 0; globalsi5 < globalsLength5; globalsi5++) {
                        if (input.readByte() != 0) {
                            var temp517 = resDailyTimedUnionDistributeSettleMessage["globals"][globalsi5] = {}; //跨服奖励
                            temp517["uid"] = input.readLong(); //唯一id
                            temp517["itemId"] = input.readVarInt(false); //道具配置id
                            temp517["count"] = input.readVarInt(false); //数量
                            temp517["expire"] = input.readVarInt(false); //过期时间
                            temp517["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp517["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength51 = input.readShort();
                            temp517["params"] = new Array(paramsLength51);
                            for (var paramsi51 = 0; paramsi51 < paramsLength51; paramsi51++) {
                                temp517["params"][paramsi51] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength26 = input.readByte();
                            if (equipDataLength26 != 0) {
                                var temp518 = temp517["equipData"] = {}; //装备属性（null表示没有）
                                temp518["durable"] = input.readVarInt(false); //消耗耐久
                                temp518["starLevel"] = input.readVarInt(false); //升星等级
                                temp518["starLock"] = input.readVarInt(false); //被锁星级
                                temp518["starExp"] = input.readVarInt(false); //升星祝福值
                                temp518["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp518["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp518["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp518["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp518["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp518["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp518["sign"] = input.readString(); //签名
                                var destinyAttrsLength26 = input.readShort();
                                temp518["destinyAttrs"] = [];
                                for (var destinyAttrsi26 = 0; destinyAttrsi26 < destinyAttrsLength26; destinyAttrsi26++) {
                                    if (input.readByte() != 0) {
                                        var temp519 = temp518["destinyAttrs"][destinyAttrsi26] = {}; //命运属性
                                        temp519["career"] = input.readVarInt(false); //职业限定
                                        temp519["attributeType"] = input.readVarInt(false); //属性类型
                                        temp519["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp518["destinyAttrs"][destinyAttrsi26] = null;
                                    }
                                }
                                var superAttrsLength26 = input.readShort();
                                temp518["superAttrs"] = [];
                                for (var superAttrsi26 = 0; superAttrsi26 < superAttrsLength26; superAttrsi26++) {
                                    if (input.readByte() != 0) {
                                        var temp520 = temp518["superAttrs"][superAttrsi26] = {}; //极品属性
                                        temp520["career"] = input.readVarInt(false); //职业限定
                                        temp520["attributeType"] = input.readVarInt(false); //属性类型
                                        temp520["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp518["superAttrs"][superAttrsi26] = null;
                                    }
                                }
                                var identifyAttrsLength26 = input.readShort();
                                temp518["identifyAttrs"] = [];
                                for (var identifyAttrsi26 = 0; identifyAttrsi26 < identifyAttrsLength26; identifyAttrsi26++) {
                                    if (input.readByte() != 0) {
                                        var temp521 = temp518["identifyAttrs"][identifyAttrsi26] = {}; //鉴定属性
                                        temp521["career"] = input.readVarInt(false); //职业限定
                                        temp521["attributeType"] = input.readVarInt(false); //属性类型
                                        temp521["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp518["identifyAttrs"][identifyAttrsi26] = null;
                                    }
                                }
                                var xiLianAttrsLength26 = input.readShort();
                                temp518["xiLianAttrs"] = [];
                                for (var xiLianAttrsi26 = 0; xiLianAttrsi26 < xiLianAttrsLength26; xiLianAttrsi26++) {
                                    if (input.readByte() != 0) {
                                        var temp522 = temp518["xiLianAttrs"][xiLianAttrsi26] = {}; //配饰洗练属性
                                        temp522["career"] = input.readVarInt(false); //职业限定
                                        temp522["attributeType"] = input.readVarInt(false); //属性类型
                                        temp522["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp518["xiLianAttrs"][xiLianAttrsi26] = null;
                                    }
                                }
                                temp518["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp518["growLevel"] = input.readVarInt(false); //成长等级
                                temp518["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength26 = input.readShort();
                                temp518["bestAttrs"] = new Array(bestAttrsLength26);
                                for (var bestAttrsi26 = 0; bestAttrsi26 < bestAttrsLength26; bestAttrsi26++) {
                                    temp518["bestAttrs"][bestAttrsi26] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength26 = input.readShort();
                                temp518["soulAttrs"] = new Array(soulAttrsLength26);
                                for (var soulAttrsi26 = 0; soulAttrsi26 < soulAttrsLength26; soulAttrsi26++) {
                                    temp518["soulAttrs"][soulAttrsi26] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength26 = input.readShort();
                                temp518["godsAttrs"] = new Array(godsAttrsLength26);
                                for (var godsAttrsi26 = 0; godsAttrsi26 < godsAttrsLength26; godsAttrsi26++) {
                                    temp518["godsAttrs"][godsAttrsi26] = input.readVarInt(false); //额外神级属性
                                }
                                temp518["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength26 = input.readShort();
                                temp518["specialDurable"] = [];
                                for (var specialDurablei26 = 0; specialDurablei26 < specialDurableLength26; specialDurablei26++) {
                                    if (input.readByte() != 0) {
                                        var temp523 = temp518["specialDurable"][specialDurablei26] = {}; //特殊耐久消耗值
                                        temp523["type"] = input.readVarInt(false); //类型
                                        temp523["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp518["specialDurable"][specialDurablei26] = null;
                                    }
                                }
                            }
                            var immobilizationLength26 = input.readByte();
                            if (immobilizationLength26 != 0) {
                                var temp524 = temp517["immobilization"] = {}; //固化数据
                                temp524["action"] = input.readVarInt(false); //产生行为
                                temp524["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength26 = input.readByte();
                            if (fromLength26 != 0) {
                                var temp525 = temp517["from"] = {}; //来源
                                temp525["action"] = input.readVarInt(false); //产生行为
                                temp525["firstRole"] = input.readLong(); //第一个玩家id
                                temp525["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength52 = input.readShort();
                                temp525["params"] = [];
                                for (var paramsi52 = 0; paramsi52 < paramsLength52; paramsi52++) {
                                    if (input.readByte() != 0) {
                                        var temp526 = temp525["params"][paramsi52] = {}; //
                                        temp526["key"] = input.readVarInt(false); //
                                        temp526["value"] = input.readString(); //
                                    }
                                    else {
                                        temp525["params"][paramsi52] = null;
                                    }
                                }
                            }
                            temp517["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength26 = input.readByte();
                            if (spriteDataLength26 != 0) {
                                var temp527 = temp517["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp527["level"] = input.readVarInt(false); //灵兽等级
                                temp527["exp"] = input.readVarInt(false); //灵兽经验
                                temp527["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength26 = input.readShort();
                                temp527["skills"] = [];
                                for (var skillsi26 = 0; skillsi26 < skillsLength26; skillsi26++) {
                                    if (input.readByte() != 0) {
                                        var temp528 = temp527["skills"][skillsi26] = {}; //灵兽出战技能
                                        temp528["id"] = input.readVarInt(false); //
                                        temp528["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp527["skills"][skillsi26] = null;
                                    }
                                }
                                var ownerSkillsLength26 = input.readShort();
                                temp527["ownerSkills"] = [];
                                for (var ownerSkillsi26 = 0; ownerSkillsi26 < ownerSkillsLength26; ownerSkillsi26++) {
                                    if (input.readByte() != 0) {
                                        var temp529 = temp527["ownerSkills"][ownerSkillsi26] = {}; //灵兽拥有的技能
                                        temp529["id"] = input.readVarInt(false); //
                                        temp529["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp527["ownerSkills"][ownerSkillsi26] = null;
                                    }
                                }
                                var ownerSkinsLength26 = input.readShort();
                                temp527["ownerSkins"] = [];
                                for (var ownerSkinsi26 = 0; ownerSkinsi26 < ownerSkinsLength26; ownerSkinsi26++) {
                                    if (input.readByte() != 0) {
                                        var temp530 = temp527["ownerSkins"][ownerSkinsi26] = {}; //灵兽拥有的皮肤
                                        temp530["id"] = input.readVarInt(false); //
                                        temp530["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp527["ownerSkins"][ownerSkinsi26] = null;
                                    }
                                }
                                var absorbExpLength26 = input.readShort();
                                temp527["absorbExp"] = [];
                                for (var absorbExpi26 = 0; absorbExpi26 < absorbExpLength26; absorbExpi26++) {
                                    if (input.readByte() != 0) {
                                        var temp531 = temp527["absorbExp"][absorbExpi26] = {}; //灵兽吸收经验值
                                        temp531["id"] = input.readVarInt(false); //
                                        temp531["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp527["absorbExp"][absorbExpi26] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resDailyTimedUnionDistributeSettleMessage["globals"][globalsi5] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTimedUnionDistributeSettleMessage);
                    break;
                case 175226 /* DailyModelCMD.CMDResDailyTimedShaBaKeCityGateHpChangeMessage */:
                    var resDailyTimedShaBaKeCityGateHpChangeMessage = {};
                    resDailyTimedShaBaKeCityGateHpChangeMessage["lid"] = input.readLong(); //唯一id
                    resDailyTimedShaBaKeCityGateHpChangeMessage["cfgId"] = input.readVarInt(false); //城门怪物配置id
                    resDailyTimedShaBaKeCityGateHpChangeMessage["hp"] = input.readLong(); //当前血量
                    resDailyTimedShaBaKeCityGateHpChangeMessage["maxHp"] = input.readLong(); //最大血量
                    this.sendNotif(cmd, resDailyTimedShaBaKeCityGateHpChangeMessage);
                    break;
                case 175230 /* DailyModelCMD.CMDResUnionGuarderTipsMessage */:
                    var resUnionGuarderTipsMessage = {};
                    resUnionGuarderTipsMessage["monsterId"] = input.readVarInt(false); //怪物id
                    resUnionGuarderTipsMessage["beginAt"] = input.readVarInt(false); //刷怪时间
                    var hurtRankLength2 = input.readShort();
                    resUnionGuarderTipsMessage["hurtRank"] = [];
                    for (var hurtRanki2 = 0; hurtRanki2 < hurtRankLength2; hurtRanki2++) {
                        if (input.readByte() != 0) {
                            var temp532 = resUnionGuarderTipsMessage["hurtRank"][hurtRanki2] = {}; //伤害输出排行
                            temp532["ranking"] = input.readVarInt(false); //
                            temp532["uid"] = input.readLong(); //
                            temp532["name"] = input.readString(); //
                            temp532["score"] = input.readLong(); //
                        }
                        else {
                            resUnionGuarderTipsMessage["hurtRank"][hurtRanki2] = null;
                        }
                    }
                    resUnionGuarderTipsMessage["selfRank"] = input.readVarInt(false); //我的排名
                    resUnionGuarderTipsMessage["selfHurt"] = input.readVarInt(false); //我的伤害
                    this.sendNotif(cmd, resUnionGuarderTipsMessage);
                    break;
                case 175231 /* DailyModelCMD.CMDResUnionGuarderSettleMessage */:
                    var resUnionGuarderSettleMessage = {};
                    resUnionGuarderSettleMessage["monsterId"] = input.readVarInt(false); //怪物id
                    var worldsLength8 = input.readShort();
                    resUnionGuarderSettleMessage["worlds"] = [];
                    for (var worldsi8 = 0; worldsi8 < worldsLength8; worldsi8++) {
                        if (input.readByte() != 0) {
                            var temp533 = resUnionGuarderSettleMessage["worlds"][worldsi8] = {}; //世界奖励
                            temp533["uid"] = input.readLong(); //唯一id
                            temp533["itemId"] = input.readVarInt(false); //道具配置id
                            temp533["count"] = input.readVarInt(false); //数量
                            temp533["expire"] = input.readVarInt(false); //过期时间
                            temp533["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp533["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength53 = input.readShort();
                            temp533["params"] = new Array(paramsLength53);
                            for (var paramsi53 = 0; paramsi53 < paramsLength53; paramsi53++) {
                                temp533["params"][paramsi53] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength27 = input.readByte();
                            if (equipDataLength27 != 0) {
                                var temp534 = temp533["equipData"] = {}; //装备属性（null表示没有）
                                temp534["durable"] = input.readVarInt(false); //消耗耐久
                                temp534["starLevel"] = input.readVarInt(false); //升星等级
                                temp534["starLock"] = input.readVarInt(false); //被锁星级
                                temp534["starExp"] = input.readVarInt(false); //升星祝福值
                                temp534["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp534["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp534["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp534["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp534["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp534["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp534["sign"] = input.readString(); //签名
                                var destinyAttrsLength27 = input.readShort();
                                temp534["destinyAttrs"] = [];
                                for (var destinyAttrsi27 = 0; destinyAttrsi27 < destinyAttrsLength27; destinyAttrsi27++) {
                                    if (input.readByte() != 0) {
                                        var temp535 = temp534["destinyAttrs"][destinyAttrsi27] = {}; //命运属性
                                        temp535["career"] = input.readVarInt(false); //职业限定
                                        temp535["attributeType"] = input.readVarInt(false); //属性类型
                                        temp535["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp534["destinyAttrs"][destinyAttrsi27] = null;
                                    }
                                }
                                var superAttrsLength27 = input.readShort();
                                temp534["superAttrs"] = [];
                                for (var superAttrsi27 = 0; superAttrsi27 < superAttrsLength27; superAttrsi27++) {
                                    if (input.readByte() != 0) {
                                        var temp536 = temp534["superAttrs"][superAttrsi27] = {}; //极品属性
                                        temp536["career"] = input.readVarInt(false); //职业限定
                                        temp536["attributeType"] = input.readVarInt(false); //属性类型
                                        temp536["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp534["superAttrs"][superAttrsi27] = null;
                                    }
                                }
                                var identifyAttrsLength27 = input.readShort();
                                temp534["identifyAttrs"] = [];
                                for (var identifyAttrsi27 = 0; identifyAttrsi27 < identifyAttrsLength27; identifyAttrsi27++) {
                                    if (input.readByte() != 0) {
                                        var temp537 = temp534["identifyAttrs"][identifyAttrsi27] = {}; //鉴定属性
                                        temp537["career"] = input.readVarInt(false); //职业限定
                                        temp537["attributeType"] = input.readVarInt(false); //属性类型
                                        temp537["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp534["identifyAttrs"][identifyAttrsi27] = null;
                                    }
                                }
                                var xiLianAttrsLength27 = input.readShort();
                                temp534["xiLianAttrs"] = [];
                                for (var xiLianAttrsi27 = 0; xiLianAttrsi27 < xiLianAttrsLength27; xiLianAttrsi27++) {
                                    if (input.readByte() != 0) {
                                        var temp538 = temp534["xiLianAttrs"][xiLianAttrsi27] = {}; //配饰洗练属性
                                        temp538["career"] = input.readVarInt(false); //职业限定
                                        temp538["attributeType"] = input.readVarInt(false); //属性类型
                                        temp538["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp534["xiLianAttrs"][xiLianAttrsi27] = null;
                                    }
                                }
                                temp534["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp534["growLevel"] = input.readVarInt(false); //成长等级
                                temp534["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength27 = input.readShort();
                                temp534["bestAttrs"] = new Array(bestAttrsLength27);
                                for (var bestAttrsi27 = 0; bestAttrsi27 < bestAttrsLength27; bestAttrsi27++) {
                                    temp534["bestAttrs"][bestAttrsi27] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength27 = input.readShort();
                                temp534["soulAttrs"] = new Array(soulAttrsLength27);
                                for (var soulAttrsi27 = 0; soulAttrsi27 < soulAttrsLength27; soulAttrsi27++) {
                                    temp534["soulAttrs"][soulAttrsi27] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength27 = input.readShort();
                                temp534["godsAttrs"] = new Array(godsAttrsLength27);
                                for (var godsAttrsi27 = 0; godsAttrsi27 < godsAttrsLength27; godsAttrsi27++) {
                                    temp534["godsAttrs"][godsAttrsi27] = input.readVarInt(false); //额外神级属性
                                }
                                temp534["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength27 = input.readShort();
                                temp534["specialDurable"] = [];
                                for (var specialDurablei27 = 0; specialDurablei27 < specialDurableLength27; specialDurablei27++) {
                                    if (input.readByte() != 0) {
                                        var temp539 = temp534["specialDurable"][specialDurablei27] = {}; //特殊耐久消耗值
                                        temp539["type"] = input.readVarInt(false); //类型
                                        temp539["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp534["specialDurable"][specialDurablei27] = null;
                                    }
                                }
                            }
                            var immobilizationLength27 = input.readByte();
                            if (immobilizationLength27 != 0) {
                                var temp540 = temp533["immobilization"] = {}; //固化数据
                                temp540["action"] = input.readVarInt(false); //产生行为
                                temp540["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength27 = input.readByte();
                            if (fromLength27 != 0) {
                                var temp541 = temp533["from"] = {}; //来源
                                temp541["action"] = input.readVarInt(false); //产生行为
                                temp541["firstRole"] = input.readLong(); //第一个玩家id
                                temp541["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength54 = input.readShort();
                                temp541["params"] = [];
                                for (var paramsi54 = 0; paramsi54 < paramsLength54; paramsi54++) {
                                    if (input.readByte() != 0) {
                                        var temp542 = temp541["params"][paramsi54] = {}; //
                                        temp542["key"] = input.readVarInt(false); //
                                        temp542["value"] = input.readString(); //
                                    }
                                    else {
                                        temp541["params"][paramsi54] = null;
                                    }
                                }
                            }
                            temp533["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength27 = input.readByte();
                            if (spriteDataLength27 != 0) {
                                var temp543 = temp533["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp543["level"] = input.readVarInt(false); //灵兽等级
                                temp543["exp"] = input.readVarInt(false); //灵兽经验
                                temp543["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength27 = input.readShort();
                                temp543["skills"] = [];
                                for (var skillsi27 = 0; skillsi27 < skillsLength27; skillsi27++) {
                                    if (input.readByte() != 0) {
                                        var temp544 = temp543["skills"][skillsi27] = {}; //灵兽出战技能
                                        temp544["id"] = input.readVarInt(false); //
                                        temp544["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp543["skills"][skillsi27] = null;
                                    }
                                }
                                var ownerSkillsLength27 = input.readShort();
                                temp543["ownerSkills"] = [];
                                for (var ownerSkillsi27 = 0; ownerSkillsi27 < ownerSkillsLength27; ownerSkillsi27++) {
                                    if (input.readByte() != 0) {
                                        var temp545 = temp543["ownerSkills"][ownerSkillsi27] = {}; //灵兽拥有的技能
                                        temp545["id"] = input.readVarInt(false); //
                                        temp545["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp543["ownerSkills"][ownerSkillsi27] = null;
                                    }
                                }
                                var ownerSkinsLength27 = input.readShort();
                                temp543["ownerSkins"] = [];
                                for (var ownerSkinsi27 = 0; ownerSkinsi27 < ownerSkinsLength27; ownerSkinsi27++) {
                                    if (input.readByte() != 0) {
                                        var temp546 = temp543["ownerSkins"][ownerSkinsi27] = {}; //灵兽拥有的皮肤
                                        temp546["id"] = input.readVarInt(false); //
                                        temp546["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp543["ownerSkins"][ownerSkinsi27] = null;
                                    }
                                }
                                var absorbExpLength27 = input.readShort();
                                temp543["absorbExp"] = [];
                                for (var absorbExpi27 = 0; absorbExpi27 < absorbExpLength27; absorbExpi27++) {
                                    if (input.readByte() != 0) {
                                        var temp547 = temp543["absorbExp"][absorbExpi27] = {}; //灵兽吸收经验值
                                        temp547["id"] = input.readVarInt(false); //
                                        temp547["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp543["absorbExp"][absorbExpi27] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resUnionGuarderSettleMessage["worlds"][worldsi8] = null;
                        }
                    }
                    var globalsLength6 = input.readShort();
                    resUnionGuarderSettleMessage["globals"] = [];
                    for (var globalsi6 = 0; globalsi6 < globalsLength6; globalsi6++) {
                        if (input.readByte() != 0) {
                            var temp548 = resUnionGuarderSettleMessage["globals"][globalsi6] = {}; //跨服奖励
                            temp548["uid"] = input.readLong(); //唯一id
                            temp548["itemId"] = input.readVarInt(false); //道具配置id
                            temp548["count"] = input.readVarInt(false); //数量
                            temp548["expire"] = input.readVarInt(false); //过期时间
                            temp548["uTimes"] = input.readVarInt(false); //已经使用的次数
                            temp548["time"] = input.readVarInt(false); //道具获得时间
                            var paramsLength55 = input.readShort();
                            temp548["params"] = new Array(paramsLength55);
                            for (var paramsi55 = 0; paramsi55 < paramsLength55; paramsi55++) {
                                temp548["params"][paramsi55] = input.readVarInt(false); //道具参数
                            }
                            var equipDataLength28 = input.readByte();
                            if (equipDataLength28 != 0) {
                                var temp549 = temp548["equipData"] = {}; //装备属性（null表示没有）
                                temp549["durable"] = input.readVarInt(false); //消耗耐久
                                temp549["starLevel"] = input.readVarInt(false); //升星等级
                                temp549["starLock"] = input.readVarInt(false); //被锁星级
                                temp549["starExp"] = input.readVarInt(false); //升星祝福值
                                temp549["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                temp549["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                temp549["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp549["spiritLevel"] = input.readVarInt(false); //注灵等级
                                temp549["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                temp549["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                temp549["sign"] = input.readString(); //签名
                                var destinyAttrsLength28 = input.readShort();
                                temp549["destinyAttrs"] = [];
                                for (var destinyAttrsi28 = 0; destinyAttrsi28 < destinyAttrsLength28; destinyAttrsi28++) {
                                    if (input.readByte() != 0) {
                                        var temp550 = temp549["destinyAttrs"][destinyAttrsi28] = {}; //命运属性
                                        temp550["career"] = input.readVarInt(false); //职业限定
                                        temp550["attributeType"] = input.readVarInt(false); //属性类型
                                        temp550["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp549["destinyAttrs"][destinyAttrsi28] = null;
                                    }
                                }
                                var superAttrsLength28 = input.readShort();
                                temp549["superAttrs"] = [];
                                for (var superAttrsi28 = 0; superAttrsi28 < superAttrsLength28; superAttrsi28++) {
                                    if (input.readByte() != 0) {
                                        var temp551 = temp549["superAttrs"][superAttrsi28] = {}; //极品属性
                                        temp551["career"] = input.readVarInt(false); //职业限定
                                        temp551["attributeType"] = input.readVarInt(false); //属性类型
                                        temp551["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp549["superAttrs"][superAttrsi28] = null;
                                    }
                                }
                                var identifyAttrsLength28 = input.readShort();
                                temp549["identifyAttrs"] = [];
                                for (var identifyAttrsi28 = 0; identifyAttrsi28 < identifyAttrsLength28; identifyAttrsi28++) {
                                    if (input.readByte() != 0) {
                                        var temp552 = temp549["identifyAttrs"][identifyAttrsi28] = {}; //鉴定属性
                                        temp552["career"] = input.readVarInt(false); //职业限定
                                        temp552["attributeType"] = input.readVarInt(false); //属性类型
                                        temp552["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp549["identifyAttrs"][identifyAttrsi28] = null;
                                    }
                                }
                                var xiLianAttrsLength28 = input.readShort();
                                temp549["xiLianAttrs"] = [];
                                for (var xiLianAttrsi28 = 0; xiLianAttrsi28 < xiLianAttrsLength28; xiLianAttrsi28++) {
                                    if (input.readByte() != 0) {
                                        var temp553 = temp549["xiLianAttrs"][xiLianAttrsi28] = {}; //配饰洗练属性
                                        temp553["career"] = input.readVarInt(false); //职业限定
                                        temp553["attributeType"] = input.readVarInt(false); //属性类型
                                        temp553["attributeValue"] = input.readLong(); //属性值
                                    }
                                    else {
                                        temp549["xiLianAttrs"][xiLianAttrsi28] = null;
                                    }
                                }
                                temp549["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                temp549["growLevel"] = input.readVarInt(false); //成长等级
                                temp549["growExp"] = input.readVarInt(false); //成长经验
                                var bestAttrsLength28 = input.readShort();
                                temp549["bestAttrs"] = new Array(bestAttrsLength28);
                                for (var bestAttrsi28 = 0; bestAttrsi28 < bestAttrsLength28; bestAttrsi28++) {
                                    temp549["bestAttrs"][bestAttrsi28] = input.readVarInt(false); //极品属性（新）
                                }
                                var soulAttrsLength28 = input.readShort();
                                temp549["soulAttrs"] = new Array(soulAttrsLength28);
                                for (var soulAttrsi28 = 0; soulAttrsi28 < soulAttrsLength28; soulAttrsi28++) {
                                    temp549["soulAttrs"][soulAttrsi28] = input.readVarInt(false); //心魂属性
                                }
                                var godsAttrsLength28 = input.readShort();
                                temp549["godsAttrs"] = new Array(godsAttrsLength28);
                                for (var godsAttrsi28 = 0; godsAttrsi28 < godsAttrsLength28; godsAttrsi28++) {
                                    temp549["godsAttrs"][godsAttrsi28] = input.readVarInt(false); //额外神级属性
                                }
                                temp549["qualification"] = input.readVarInt(false); //资质
                                var specialDurableLength28 = input.readShort();
                                temp549["specialDurable"] = [];
                                for (var specialDurablei28 = 0; specialDurablei28 < specialDurableLength28; specialDurablei28++) {
                                    if (input.readByte() != 0) {
                                        var temp554 = temp549["specialDurable"][specialDurablei28] = {}; //特殊耐久消耗值
                                        temp554["type"] = input.readVarInt(false); //类型
                                        temp554["value"] = input.readVarInt(false); //已消耗值
                                    }
                                    else {
                                        temp549["specialDurable"][specialDurablei28] = null;
                                    }
                                }
                            }
                            var immobilizationLength28 = input.readByte();
                            if (immobilizationLength28 != 0) {
                                var temp555 = temp548["immobilization"] = {}; //固化数据
                                temp555["action"] = input.readVarInt(false); //产生行为
                                temp555["expire"] = input.readVarInt(false); //过期时间 时间戳
                            }
                            var fromLength28 = input.readByte();
                            if (fromLength28 != 0) {
                                var temp556 = temp548["from"] = {}; //来源
                                temp556["action"] = input.readVarInt(false); //产生行为
                                temp556["firstRole"] = input.readLong(); //第一个玩家id
                                temp556["firstRoleName"] = input.readString(); //第一个玩家名字
                                var paramsLength56 = input.readShort();
                                temp556["params"] = [];
                                for (var paramsi56 = 0; paramsi56 < paramsLength56; paramsi56++) {
                                    if (input.readByte() != 0) {
                                        var temp557 = temp556["params"][paramsi56] = {}; //
                                        temp557["key"] = input.readVarInt(false); //
                                        temp557["value"] = input.readString(); //
                                    }
                                    else {
                                        temp556["params"][paramsi56] = null;
                                    }
                                }
                            }
                            temp548["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                            var spriteDataLength28 = input.readByte();
                            if (spriteDataLength28 != 0) {
                                var temp558 = temp548["spriteData"] = {}; //灵兽数据（null表示没有）
                                temp558["level"] = input.readVarInt(false); //灵兽等级
                                temp558["exp"] = input.readVarInt(false); //灵兽经验
                                temp558["skin"] = input.readVarInt(false); //灵兽皮肤
                                var skillsLength28 = input.readShort();
                                temp558["skills"] = [];
                                for (var skillsi28 = 0; skillsi28 < skillsLength28; skillsi28++) {
                                    if (input.readByte() != 0) {
                                        var temp559 = temp558["skills"][skillsi28] = {}; //灵兽出战技能
                                        temp559["id"] = input.readVarInt(false); //
                                        temp559["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp558["skills"][skillsi28] = null;
                                    }
                                }
                                var ownerSkillsLength28 = input.readShort();
                                temp558["ownerSkills"] = [];
                                for (var ownerSkillsi28 = 0; ownerSkillsi28 < ownerSkillsLength28; ownerSkillsi28++) {
                                    if (input.readByte() != 0) {
                                        var temp560 = temp558["ownerSkills"][ownerSkillsi28] = {}; //灵兽拥有的技能
                                        temp560["id"] = input.readVarInt(false); //
                                        temp560["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp558["ownerSkills"][ownerSkillsi28] = null;
                                    }
                                }
                                var ownerSkinsLength28 = input.readShort();
                                temp558["ownerSkins"] = [];
                                for (var ownerSkinsi28 = 0; ownerSkinsi28 < ownerSkinsLength28; ownerSkinsi28++) {
                                    if (input.readByte() != 0) {
                                        var temp561 = temp558["ownerSkins"][ownerSkinsi28] = {}; //灵兽拥有的皮肤
                                        temp561["id"] = input.readVarInt(false); //
                                        temp561["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp558["ownerSkins"][ownerSkinsi28] = null;
                                    }
                                }
                                var absorbExpLength28 = input.readShort();
                                temp558["absorbExp"] = [];
                                for (var absorbExpi28 = 0; absorbExpi28 < absorbExpLength28; absorbExpi28++) {
                                    if (input.readByte() != 0) {
                                        var temp562 = temp558["absorbExp"][absorbExpi28] = {}; //灵兽吸收经验值
                                        temp562["id"] = input.readVarInt(false); //
                                        temp562["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp558["absorbExp"][absorbExpi28] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resUnionGuarderSettleMessage["globals"][globalsi6] = null;
                        }
                    }
                    this.sendNotif(cmd, resUnionGuarderSettleMessage);
                    break;
            }
        };
        return DailyModel;
    }(ModelBase));
    net.DailyModel = DailyModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:211
     */
    var DevilInvadeModel = /** @class */ (function (_super) {
        __extends(DevilInvadeModel, _super);
        function DevilInvadeModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(211002 /* DevilInvadeModelCMD.CMDResDevilInvadeInfoMessage */);
            return _this;
        }
        DevilInvadeModel.ins = function () {
            if (!this._ins)
                this._ins = new DevilInvadeModel();
            return this._ins;
        };
        /**
         *
         * 请求魔界来袭破魔信息
         *
         * sendReqDevilInvadeInfoMessage  211001
         */
        DevilInvadeModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(211001 /* DevilInvadeModelCMD.CMDReqDevilInvadeInfoMessage */, output, s);
        };
        /**
         *
         * 请求魔界来袭破魔
         * @param 破魔类型 0-普通 1-高级 2-圣佑
         *
         * sendReqDevilInvadeUpLevelMessage  211003
         */
        DevilInvadeModel.prototype.send3 = function (typeId, s) {
            var output = this.getO();
            output.writeVarInt(typeId, false);
            this.send(211003 /* DevilInvadeModelCMD.CMDReqDevilInvadeUpLevelMessage */, output, s);
        };
        /**
         *
         * 请求魔界来袭祈福
         *
         * sendReqDevilInvadeExchangeMessage  211004
         */
        DevilInvadeModel.prototype.send4 = function (s) {
            var output = this.getO();
            this.send(211004 /* DevilInvadeModelCMD.CMDReqDevilInvadeExchangeMessage */, output, s);
        };
        DevilInvadeModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 211002 /* DevilInvadeModelCMD.CMDResDevilInvadeInfoMessage */:
                    var resDevilInvadeInfoMessage = {};
                    resDevilInvadeInfoMessage["level"] = input.readVarInt(false); //破魔等级
                    resDevilInvadeInfoMessage["exp"] = input.readLong(); //经验值
                    resDevilInvadeInfoMessage["maxRoleLevel"] = input.readVarInt(false); //封顶等级
                    this.sendNotif(cmd, resDevilInvadeInfoMessage);
                    break;
            }
        };
        return DevilInvadeModel;
    }(ModelBase));
    net.DevilInvadeModel = DevilInvadeModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:206
     */
    var DonateModel = /** @class */ (function (_super) {
        __extends(DonateModel, _super);
        function DonateModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(206002 /* DonateModelCMD.CMDResDonateMoneyPanelMessage */);
            return _this;
        }
        DonateModel.ins = function () {
            if (!this._ins)
                this._ins = new DonateModel();
            return this._ins;
        };
        /**
         *
         * 请求元宝捐献排行面板
         *
         * sendReqDonateMoneyPanelMessage  206001
         */
        DonateModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(206001 /* DonateModelCMD.CMDReqDonateMoneyPanelMessage */, output, s);
        };
        /**
         *
         * 请求捐献元宝
         * @param 捐献数量
         *
         * sendReqDonateMoneyMessage  206003
         */
        DonateModel.prototype.send3 = function (count, s) {
            var output = this.getO();
            output.writeVarInt(count, false);
            this.send(206003 /* DonateModelCMD.CMDReqDonateMoneyMessage */, output, s);
        };
        DonateModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 206002 /* DonateModelCMD.CMDResDonateMoneyPanelMessage */:
                    var resDonateMoneyPanelMessage = {};
                    var rankLength1 = input.readShort();
                    resDonateMoneyPanelMessage["rank"] = [];
                    for (var ranki1 = 0; ranki1 < rankLength1; ranki1++) {
                        if (input.readByte() != 0) {
                            var temp1302 = resDonateMoneyPanelMessage["rank"][ranki1] = {}; //排行
                            temp1302["ranking"] = input.readVarInt(false); //
                            temp1302["uid"] = input.readLong(); //
                            temp1302["name"] = input.readString(); //
                            temp1302["score"] = input.readLong(); //
                        }
                        else {
                            resDonateMoneyPanelMessage["rank"][ranki1] = null;
                        }
                    }
                    resDonateMoneyPanelMessage["selfCount"] = input.readVarInt(false); //我的捐献
                    resDonateMoneyPanelMessage["selfRank"] = input.readVarInt(false); //我的排行 0未上榜
                    resDonateMoneyPanelMessage["resType"] = input.readVarInt(false); //返回类型 0请求1捐献
                    this.sendNotif(cmd, resDonateMoneyPanelMessage);
                    break;
            }
        };
        return DonateModel;
    }(ModelBase));
    net.DonateModel = DonateModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:217
     */
    var DonateRankingModel = /** @class */ (function (_super) {
        __extends(DonateRankingModel, _super);
        function DonateRankingModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(217002 /* DonateRankingModelCMD.CMDResDonateRankingInfoMessage */);
            return _this;
        }
        DonateRankingModel.ins = function () {
            if (!this._ins)
                this._ins = new DonateRankingModel();
            return this._ins;
        };
        /**
         *
         * 请求捐献排行信息
         *
         * sendReqDonateRankingInfoMessage  217001
         */
        DonateRankingModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(217001 /* DonateRankingModelCMD.CMDReqDonateRankingInfoMessage */, output, s);
        };
        /**
         *
         * 请求捐献元宝
         * @param 捐献数量
         *
         * sendReqDonateRankingDonateMessage  217003
         */
        DonateRankingModel.prototype.send3 = function (count, s) {
            var output = this.getO();
            output.writeVarInt(count, false);
            this.send(217003 /* DonateRankingModelCMD.CMDReqDonateRankingDonateMessage */, output, s);
        };
        /**
         *
         * 请求捐献元宝
         * @param 我的捐献
         *
         * sendResDonateRankingDonateMessage  217004
         */
        DonateRankingModel.prototype.send4 = function (donated, s) {
            var output = this.getO();
            output.writeVarInt(donated, false);
            this.send(217004 /* DonateRankingModelCMD.CMDResDonateRankingDonateMessage */, output, s);
        };
        DonateRankingModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 217002 /* DonateRankingModelCMD.CMDResDonateRankingInfoMessage */:
                    var resDonateRankingInfoMessage = {};
                    var rankLength1 = input.readShort();
                    resDonateRankingInfoMessage["rank"] = [];
                    for (var ranki1 = 0; ranki1 < rankLength1; ranki1++) {
                        if (input.readByte() != 0) {
                            var temp1010 = resDonateRankingInfoMessage["rank"][ranki1] = {}; //排行
                            temp1010["ranking"] = input.readVarInt(false); //
                            temp1010["uid"] = input.readLong(); //
                            temp1010["name"] = input.readString(); //
                            temp1010["score"] = input.readLong(); //
                        }
                        else {
                            resDonateRankingInfoMessage["rank"][ranki1] = null;
                        }
                    }
                    resDonateRankingInfoMessage["donated"] = input.readVarInt(false); //我的捐献
                    this.sendNotif(cmd, resDonateRankingInfoMessage);
                    break;
            }
        };
        return DonateRankingModel;
    }(ModelBase));
    net.DonateRankingModel = DonateRankingModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:114
     */
    var DropModel = /** @class */ (function (_super) {
        __extends(DropModel, _super);
        function DropModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(114002 /* DropModelCMD.CMDResDropRecordMessage */);
            return _this;
        }
        DropModel.ins = function () {
            if (!this._ins)
                this._ins = new DropModel();
            return this._ins;
        };
        /**
         *
         * 请求掉落信息
         *
         * sendReqDropRecordMessage  114001
         */
        DropModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(114001 /* DropModelCMD.CMDReqDropRecordMessage */, output, s);
        };
        DropModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 114002 /* DropModelCMD.CMDResDropRecordMessage */:
                    var dropRecordsLength1 = input.readShort();
                    var resDropRecordMessage = [];
                    for (var dropRecordsi1 = 0; dropRecordsi1 < dropRecordsLength1; dropRecordsi1++) {
                        if (input.readByte() != 0) {
                            var temp722 = resDropRecordMessage[dropRecordsi1] = {}; //
                            temp722["time"] = input.readVarInt(false); //
                            temp722["map"] = input.readVarInt(false); //
                            temp722["monsterId"] = input.readVarInt(false); //
                            temp722["itemId"] = input.readVarInt(false); //
                            var roleLength1 = input.readByte();
                            if (roleLength1 != 0) {
                                var temp723 = temp722["role"] = {}; //
                                temp723["uid"] = input.readLong(); //玩家id
                                temp723["name"] = input.readString(); //玩家名字
                                temp723["union"] = input.readString(); //行会名字
                            }
                        }
                        else {
                            resDropRecordMessage[dropRecordsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resDropRecordMessage);
                    break;
            }
        };
        return DropModel;
    }(ModelBase));
    net.DropModel = DropModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:71
     */
    var DuplicateModel = /** @class */ (function (_super) {
        __extends(DuplicateModel, _super);
        function DuplicateModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(71001 /* DuplicateModelCMD.CMDResDuplicateBasicInfoMessage */);
            thisObj.reg(71005 /* DuplicateModelCMD.CMDResDuplicateEndMessage */);
            thisObj.reg(71006 /* DuplicateModelCMD.CMDResPerformTotalHpMessage */);
            thisObj.reg(71012 /* DuplicateModelCMD.CMDResDuplicateRewardMessage */);
            thisObj.reg(71054 /* DuplicateModelCMD.CMDResDuplicateGoalInfoMessage */);
            thisObj.reg(71057 /* DuplicateModelCMD.CMDResCastleDuplicateInfoMessage */);
            thisObj.reg(71059 /* DuplicateModelCMD.CMDResBossTowerDuplicateInfoMessage */);
            thisObj.reg(71061 /* DuplicateModelCMD.CMDResStoryInfoMessage */);
            thisObj.reg(71063 /* DuplicateModelCMD.CMDResStoryCardsMessage */);
            thisObj.reg(71065 /* DuplicateModelCMD.CMDResStorySelectCardMessage */);
            thisObj.reg(71067 /* DuplicateModelCMD.CMDResStorySpeedRankMessage */);
            thisObj.reg(71069 /* DuplicateModelCMD.CMDResGuardDemonTowerDuplicateInfoMessage */);
            thisObj.reg(71072 /* DuplicateModelCMD.CMDResUnionUndergroundRoleRankMessage */);
            thisObj.reg(71074 /* DuplicateModelCMD.CMDResUnionUndergroundUnionRankMessage */);
            thisObj.reg(71075 /* DuplicateModelCMD.CMDResUnionUndergroundUnionDuplicateMessage */);
            return _this;
        }
        DuplicateModel.ins = function () {
            if (!this._ins)
                this._ins = new DuplicateModel();
            return this._ins;
        };
        /**
         *
         * 请求退出副本
         *
         * sendReqExitDuplicateMessage  71003
         */
        DuplicateModel.prototype.send3 = function (s) {
            var output = this.getO();
            this.send(71003 /* DuplicateModelCMD.CMDReqExitDuplicateMessage */, output, s);
        };
        /**
         *
         * 请求双倍领取怪物掉落副本奖励
         * @param 副本cfgid
         *
         * sendReqDuplicateDoubleRewardMessage  71055
         */
        DuplicateModel.prototype.send55 = function (duplicateId, s) {
            var output = this.getO();
            output.writeVarInt(duplicateId, false);
            this.send(71055 /* DuplicateModelCMD.CMDReqDuplicateDoubleRewardMessage */, output, s);
        };
        /**
         *
         * 请求进入恶魔城
         *
         * sendReqEnterCastleMessage  71056
         */
        DuplicateModel.prototype.send56 = function (s) {
            var output = this.getO();
            this.send(71056 /* DuplicateModelCMD.CMDReqEnterCastleMessage */, output, s);
        };
        /**
         *
         * 请求进入boss塔
         *
         * sendReqEnterBossTowerMessage  71058
         */
        DuplicateModel.prototype.send58 = function (s) {
            var output = this.getO();
            this.send(71058 /* DuplicateModelCMD.CMDReqEnterBossTowerMessage */, output, s);
        };
        /**
         *
         * 请求传世篇章面板
         *
         * sendReqStoryInfoMessage  71060
         */
        DuplicateModel.prototype.send60 = function (s) {
            var output = this.getO();
            this.send(71060 /* DuplicateModelCMD.CMDReqStoryInfoMessage */, output, s);
        };
        /**
         *
         * 请求传世篇章进入副本或扫荡
         * @param story表id
         * @param 0进入副本 1扫荡
         * @param 难度 1普通2冒险3困难4地狱
         *
         * sendReqStoryEnterDuplicateOrSweepMessage  71062
         */
        DuplicateModel.prototype.send62 = function (storyId, type, hard, s) {
            var output = this.getO();
            output.writeVarInt(storyId, false);
            output.writeVarInt(type, false);
            output.writeVarInt(hard, false);
            this.send(71062 /* DuplicateModelCMD.CMDReqStoryEnterDuplicateOrSweepMessage */, output, s);
        };
        /**
         *
         * 请求传世篇章挑选卡牌
         * @param 挑选的状态id
         *
         * sendReqStorySelectCardMessage  71064
         */
        DuplicateModel.prototype.send64 = function (choose, s) {
            var output = this.getO();
            output.writeVarInt(choose, false);
            this.send(71064 /* DuplicateModelCMD.CMDReqStorySelectCardMessage */, output, s);
        };
        /**
         *
         * 请求传世篇章速通榜
         * @param story表id
         *
         * sendReqStorySpeedRankMessage  71066
         */
        DuplicateModel.prototype.send66 = function (storyId, s) {
            var output = this.getO();
            output.writeVarInt(storyId, false);
            this.send(71066 /* DuplicateModelCMD.CMDReqStorySpeedRankMessage */, output, s);
        };
        /**
         *
         * 请求镇妖塔副本信息
         *
         * sendReqGuardDemonTowerDuplicateInfoMessage  71068
         */
        DuplicateModel.prototype.send68 = function (s) {
            var output = this.getO();
            this.send(71068 /* DuplicateModelCMD.CMDReqGuardDemonTowerDuplicateInfoMessage */, output, s);
        };
        /**
         *
         * 请求进入镇妖塔副本
         *
         * sendReqEnterGuardDemonTowerMessage  71070
         */
        DuplicateModel.prototype.send70 = function (s) {
            var output = this.getO();
            this.send(71070 /* DuplicateModelCMD.CMDReqEnterGuardDemonTowerMessage */, output, s);
        };
        /**
         *
         * 请求行会地宫个人排名信息
         *
         * sendReqUnionUndergroundRoleRankMessage  71071
         */
        DuplicateModel.prototype.send71 = function (s) {
            var output = this.getO();
            this.send(71071 /* DuplicateModelCMD.CMDReqUnionUndergroundRoleRankMessage */, output, s);
        };
        /**
         *
         * 请求行会地宫行会排名信息
         *
         * sendReqUnionUndergroundUnionRankMessage  71073
         */
        DuplicateModel.prototype.send73 = function (s) {
            var output = this.getO();
            this.send(71073 /* DuplicateModelCMD.CMDReqUnionUndergroundUnionRankMessage */, output, s);
        };
        /**
         *
         * 请求进入行会地宫副本
         *
         * sendReqEnterUnionUndergroundUnionDuplicateMessage  71076
         */
        DuplicateModel.prototype.send76 = function (s) {
            var output = this.getO();
            this.send(71076 /* DuplicateModelCMD.CMDReqEnterUnionUndergroundUnionDuplicateMessage */, output, s);
        };
        DuplicateModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 71001 /* DuplicateModelCMD.CMDResDuplicateBasicInfoMessage */:
                    var resDuplicateBasicInfoMessage = {};
                    resDuplicateBasicInfoMessage["cfgId"] = input.readVarInt(false); //副本配置id
                    resDuplicateBasicInfoMessage["instnceId"] = input.readVarInt(false); //副本id（自增）
                    resDuplicateBasicInfoMessage["createTime"] = input.readVarInt(false); //创建时间
                    resDuplicateBasicInfoMessage["endTime"] = input.readVarInt(false); //副本结束时间
                    resDuplicateBasicInfoMessage["params"] = input.readString(); //额外参数
                    this.sendNotif(cmd, resDuplicateBasicInfoMessage);
                    break;
                case 71005 /* DuplicateModelCMD.CMDResDuplicateEndMessage */:
                    var resDuplicateEndMessage = {};
                    resDuplicateEndMessage["sucess"] = input.readVarInt(false); //副本是否完成
                    resDuplicateEndMessage["waitingTime"] = input.readVarInt(false); //等待多久自动退出
                    this.sendNotif(cmd, resDuplicateEndMessage);
                    break;
                case 71006 /* DuplicateModelCMD.CMDResPerformTotalHpMessage */:
                    var resPerformTotalHpMessage = {};
                    var monsterListLength1 = input.readShort();
                    resPerformTotalHpMessage["monsterList"] = [];
                    for (var monsterListi1 = 0; monsterListi1 < monsterListLength1; monsterListi1++) {
                        if (input.readByte() != 0) {
                            var temp1285 = resPerformTotalHpMessage["monsterList"][monsterListi1] = {}; //monster列表
                            temp1285["monsterId"] = input.readLong(); //怪物id
                            temp1285["monsterHp"] = input.readLong(); //怪物剩余血量
                            temp1285["monsterCfgId"] = input.readVarInt(false); //怪物配置id
                            temp1285["x"] = input.readVarInt(false); //坐标x
                            temp1285["y"] = input.readVarInt(false); //坐标y
                            var ownerLength1 = input.readByte();
                            if (ownerLength1 != 0) {
                                var temp1286 = temp1285["owner"] = {}; //归属玩家信息
                                temp1286["playerId"] = input.readLong(); //玩家id
                                temp1286["name"] = input.readString(); //玩家名字
                                temp1286["force"] = input.readVarInt(false); //玩家势力
                                temp1286["union"] = input.readString(); //玩家行会名字
                            }
                        }
                        else {
                            resPerformTotalHpMessage["monsterList"][monsterListi1] = null;
                        }
                    }
                    var playerListLength1 = input.readShort();
                    resPerformTotalHpMessage["playerList"] = [];
                    for (var playerListi1 = 0; playerListi1 < playerListLength1; playerListi1++) {
                        if (input.readByte() != 0) {
                            var temp1287 = resPerformTotalHpMessage["playerList"][playerListi1] = {}; //player列表
                            temp1287["playerId"] = input.readLong(); //玩家id
                            temp1287["percent"] = input.readByte(); //血条百分比
                            temp1287["percentIp"] = input.readByte(); //内功百分比
                        }
                        else {
                            resPerformTotalHpMessage["playerList"][playerListi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resPerformTotalHpMessage);
                    break;
                case 71012 /* DuplicateModelCMD.CMDResDuplicateRewardMessage */:
                    var resDuplicateRewardMessage = {};
                    resDuplicateRewardMessage["duplicateId"] = input.readVarInt(false); //副本cfgId
                    resDuplicateRewardMessage["success"] = input.readBoolean(); //是否成功
                    var itemBeanLength1 = input.readShort();
                    resDuplicateRewardMessage["itemBean"] = [];
                    for (var itemBeani1 = 0; itemBeani1 < itemBeanLength1; itemBeani1++) {
                        if (input.readByte() != 0) {
                            var temp1288 = resDuplicateRewardMessage["itemBean"][itemBeani1] = {}; //奖励列表
                            temp1288["itemId"] = input.readVarInt(false); //itemId
                            temp1288["count"] = input.readVarInt(false); //数量
                        }
                        else {
                            resDuplicateRewardMessage["itemBean"][itemBeani1] = null;
                        }
                    }
                    this.sendNotif(cmd, resDuplicateRewardMessage);
                    break;
                case 71054 /* DuplicateModelCMD.CMDResDuplicateGoalInfoMessage */:
                    var goalsLength1 = input.readShort();
                    var resDuplicateGoalInfoMessage = [];
                    for (var goalsi1 = 0; goalsi1 < goalsLength1; goalsi1++) {
                        if (input.readByte() != 0) {
                            var temp1289 = resDuplicateGoalInfoMessage[goalsi1] = {}; //副本目标数据
                            var paramsLength1 = input.readShort();
                            temp1289["params"] = new Array(paramsLength1);
                            for (var paramsi1 = 0; paramsi1 < paramsLength1; paramsi1++) {
                                temp1289["params"][paramsi1] = input.readVarInt(false); //目标参数列表
                            }
                        }
                        else {
                            resDuplicateGoalInfoMessage[goalsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resDuplicateGoalInfoMessage);
                    break;
                case 71057 /* DuplicateModelCMD.CMDResCastleDuplicateInfoMessage */:
                    var resCastleDuplicateInfoMessage = {};
                    resCastleDuplicateInfoMessage["floor"] = input.readVarInt(false); //副本层数
                    resCastleDuplicateInfoMessage["monsterId"] = input.readVarInt(false); //怪物id
                    this.sendNotif(cmd, resCastleDuplicateInfoMessage);
                    break;
                case 71059 /* DuplicateModelCMD.CMDResBossTowerDuplicateInfoMessage */:
                    var resBossTowerDuplicateInfoMessage = {};
                    resBossTowerDuplicateInfoMessage["floor"] = input.readVarInt(false); //副本层数
                    resBossTowerDuplicateInfoMessage["monsterId"] = input.readVarInt(false); //怪物id
                    this.sendNotif(cmd, resBossTowerDuplicateInfoMessage);
                    break;
                case 71061 /* DuplicateModelCMD.CMDResStoryInfoMessage */:
                    var resStoryInfoMessage = {};
                    resStoryInfoMessage["storyId"] = input.readVarInt(false); //story表id 当前层数
                    var storysLength1 = input.readShort();
                    resStoryInfoMessage["storys"] = [];
                    for (var storysi1 = 0; storysi1 < storysLength1; storysi1++) {
                        if (input.readByte() != 0) {
                            var temp1290 = resStoryInfoMessage["storys"][storysi1] = {}; //已通关层情况 id：story表id  index：1普通2冒险3困难4地狱
                            temp1290["index"] = input.readVarInt(false); //
                            temp1290["id"] = input.readVarInt(false); //
                        }
                        else {
                            resStoryInfoMessage["storys"][storysi1] = null;
                        }
                    }
                    var stateBeansLength1 = input.readShort();
                    resStoryInfoMessage["stateBeans"] = [];
                    for (var stateBeansi1 = 0; stateBeansi1 < stateBeansLength1; stateBeansi1++) {
                        if (input.readByte() != 0) {
                            var temp1291 = resStoryInfoMessage["stateBeans"][stateBeansi1] = {}; //区域状态
                            temp1291["area"] = input.readVarInt(false); //区域id
                            var stateIdsLength1 = input.readShort();
                            temp1291["stateIds"] = new Array(stateIdsLength1);
                            for (var stateIdsi1 = 0; stateIdsi1 < stateIdsLength1; stateIdsi1++) {
                                temp1291["stateIds"][stateIdsi1] = input.readVarInt(false); //所有增加状态的id
                            }
                        }
                        else {
                            resStoryInfoMessage["stateBeans"][stateBeansi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resStoryInfoMessage);
                    break;
                case 71063 /* DuplicateModelCMD.CMDResStoryCardsMessage */:
                    var stateIdsLength2 = input.readShort();
                    var resStoryCardsMessage = new Array(stateIdsLength2);
                    for (var stateIdsi2 = 0; stateIdsi2 < stateIdsLength2; stateIdsi2++) {
                        resStoryCardsMessage[stateIdsi2] = input.readVarInt(false); //待选择的状态id列表
                    }
                    this.sendNotif(cmd, resStoryCardsMessage);
                    break;
                case 71065 /* DuplicateModelCMD.CMDResStorySelectCardMessage */:
                    var resStorySelectCardMessage = input.readVarInt(false); //挑选成功的状态id，未成功返回0
                    this.sendNotif(cmd, resStorySelectCardMessage);
                    break;
                case 71067 /* DuplicateModelCMD.CMDResStorySpeedRankMessage */:
                    var resStorySpeedRankMessage = {};
                    resStorySpeedRankMessage["storyId"] = input.readVarInt(false); //story表id
                    var ranksLength1 = input.readShort();
                    resStorySpeedRankMessage["ranks"] = [];
                    for (var ranksi1 = 0; ranksi1 < ranksLength1; ranksi1++) {
                        if (input.readByte() != 0) {
                            var temp1292 = resStorySpeedRankMessage["ranks"][ranksi1] = {}; //排行榜
                            temp1292["ranking"] = input.readVarInt(false); //
                            temp1292["uid"] = input.readLong(); //
                            temp1292["name"] = input.readString(); //
                            temp1292["score"] = input.readLong(); //
                        }
                        else {
                            resStorySpeedRankMessage["ranks"][ranksi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resStorySpeedRankMessage);
                    break;
                case 71069 /* DuplicateModelCMD.CMDResGuardDemonTowerDuplicateInfoMessage */:
                    var resGuardDemonTowerDuplicateInfoMessage = {};
                    resGuardDemonTowerDuplicateInfoMessage["floor"] = input.readVarInt(false); //副本层数
                    resGuardDemonTowerDuplicateInfoMessage["reduce"] = input.readVarInt(false); //怪物血量衰减比例
                    this.sendNotif(cmd, resGuardDemonTowerDuplicateInfoMessage);
                    break;
                case 71072 /* DuplicateModelCMD.CMDResUnionUndergroundRoleRankMessage */:
                    var resUnionUndergroundRoleRankMessage = {};
                    var roleInfoLength1 = input.readShort();
                    resUnionUndergroundRoleRankMessage["roleInfo"] = [];
                    for (var roleInfoi1 = 0; roleInfoi1 < roleInfoLength1; roleInfoi1++) {
                        if (input.readByte() != 0) {
                            var temp1293 = resUnionUndergroundRoleRankMessage["roleInfo"][roleInfoi1] = {}; //排名信息
                            temp1293["rid"] = input.readLong(); //玩家id
                            temp1293["name"] = input.readString(); //玩家名称
                            temp1293["score"] = input.readVarInt(false); //玩家积分
                            temp1293["rank"] = input.readVarInt(false); //玩家排名
                        }
                        else {
                            resUnionUndergroundRoleRankMessage["roleInfo"][roleInfoi1] = null;
                        }
                    }
                    resUnionUndergroundRoleRankMessage["myScore"] = input.readVarInt(false); //我的积分
                    resUnionUndergroundRoleRankMessage["myRank"] = input.readVarInt(false); //我的排名
                    this.sendNotif(cmd, resUnionUndergroundRoleRankMessage);
                    break;
                case 71074 /* DuplicateModelCMD.CMDResUnionUndergroundUnionRankMessage */:
                    var resUnionUndergroundUnionRankMessage = {};
                    var unionInfoLength1 = input.readShort();
                    resUnionUndergroundUnionRankMessage["unionInfo"] = [];
                    for (var unionInfoi1 = 0; unionInfoi1 < unionInfoLength1; unionInfoi1++) {
                        if (input.readByte() != 0) {
                            var temp1294 = resUnionUndergroundUnionRankMessage["unionInfo"][unionInfoi1] = {}; //排名信息
                            temp1294["uid"] = input.readLong(); //行会id
                            temp1294["name"] = input.readString(); //行会名称
                            temp1294["score"] = input.readVarInt(false); //行会积分
                            temp1294["rank"] = input.readVarInt(false); //行会排名
                            temp1294["mapCfgId"] = input.readVarInt(false); //当前地图id
                        }
                        else {
                            resUnionUndergroundUnionRankMessage["unionInfo"][unionInfoi1] = null;
                        }
                    }
                    resUnionUndergroundUnionRankMessage["myScore"] = input.readVarInt(false); //我的积分
                    resUnionUndergroundUnionRankMessage["myRank"] = input.readVarInt(false); //我的排名
                    this.sendNotif(cmd, resUnionUndergroundUnionRankMessage);
                    break;
                case 71075 /* DuplicateModelCMD.CMDResUnionUndergroundUnionDuplicateMessage */:
                    var resUnionUndergroundUnionDuplicateMessage = input.readVarInt(false); //副本创建时间戳
                    this.sendNotif(cmd, resUnionUndergroundUnionDuplicateMessage);
                    break;
            }
        };
        return DuplicateModel;
    }(ModelBase));
    net.DuplicateModel = DuplicateModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:360
     */
    var EndorseGiftModel = /** @class */ (function (_super) {
        __extends(EndorseGiftModel, _super);
        function EndorseGiftModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(360002 /* EndorseGiftModelCMD.CMDResEndorseGiftInfoMessage */);
            return _this;
        }
        EndorseGiftModel.ins = function () {
            if (!this._ins)
                this._ins = new EndorseGiftModel();
            return this._ins;
        };
        /**
         *
         *
         *
         * sendReqEndorseGiftInfoMessage  360001
         */
        EndorseGiftModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(360001 /* EndorseGiftModelCMD.CMDReqEndorseGiftInfoMessage */, output, s);
        };
        /**
         *
         * 请求领奖
         * @param 领奖类型，1 为某天奖励， 2 为累登奖励
         * @param 要领的天数
         *
         * sendReqAcquireEndorseGiftRewardMessage  360003
         */
        EndorseGiftModel.prototype.send3 = function (type, days, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            output.writeVarInt(days, false);
            this.send(360003 /* EndorseGiftModelCMD.CMDReqAcquireEndorseGiftRewardMessage */, output, s);
        };
        EndorseGiftModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 360002 /* EndorseGiftModelCMD.CMDResEndorseGiftInfoMessage */:
                    var resEndorseGiftInfoMessage = {};
                    resEndorseGiftInfoMessage["loginDays"] = input.readVarInt(false); //登录天数
                    var hadAcquiredsLength1 = input.readShort();
                    resEndorseGiftInfoMessage["hadAcquireds"] = new Array(hadAcquiredsLength1);
                    for (var hadAcquiredsi1 = 0; hadAcquiredsi1 < hadAcquiredsLength1; hadAcquiredsi1++) {
                        resEndorseGiftInfoMessage["hadAcquireds"][hadAcquiredsi1] = input.readVarInt(false); //已经领了的天数
                    }
                    var hadAcquiredTotalsLength1 = input.readShort();
                    resEndorseGiftInfoMessage["hadAcquiredTotals"] = new Array(hadAcquiredTotalsLength1);
                    for (var hadAcquiredTotalsi1 = 0; hadAcquiredTotalsi1 < hadAcquiredTotalsLength1; hadAcquiredTotalsi1++) {
                        resEndorseGiftInfoMessage["hadAcquiredTotals"][hadAcquiredTotalsi1] = input.readVarInt(false); //已经领了累登的天数
                    }
                    this.sendNotif(cmd, resEndorseGiftInfoMessage);
                    break;
            }
        };
        return EndorseGiftModel;
    }(ModelBase));
    net.EndorseGiftModel = EndorseGiftModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:37
     */
    var EntranceModel = /** @class */ (function (_super) {
        __extends(EntranceModel, _super);
        function EntranceModel() {
            return _super.call(this) || this;
        }
        EntranceModel.ins = function () {
            if (!this._ins)
                this._ins = new EntranceModel();
            return this._ins;
        };
        /**
         *
         * 请求进入地图
         * @param
         * @param 1选择条件1 2选择条件2 0其他
         *
         * sendReqEntranceEnterMessage  37001
         */
        EntranceModel.prototype.send1 = function (map, entrance, s) {
            var output = this.getO();
            output.writeVarInt(map, false);
            output.writeVarInt(entrance, false);
            this.send(37001 /* EntranceModelCMD.CMDReqEntranceEnterMessage */, output, s);
        };
        EntranceModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
            }
        };
        return EntranceModel;
    }(ModelBase));
    net.EntranceModel = EntranceModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:13
     */
    var EquipModel = /** @class */ (function (_super) {
        __extends(EquipModel, _super);
        function EquipModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(13037 /* EquipModelCMD.CMDResEquipRepairMessage */);
            thisObj.reg(13048 /* EquipModelCMD.CMDResFirstGetMessage */);
            thisObj.reg(13051 /* EquipModelCMD.CMDResUpStageResultMessage */);
            thisObj.reg(13053 /* EquipModelCMD.CMDResUpStageCountMessage */);
            thisObj.reg(13055 /* EquipModelCMD.CMDResSealDevilMessage */);
            thisObj.reg(13057 /* EquipModelCMD.CMDResDragonWingStrengthPanelMessage */);
            thisObj.reg(13060 /* EquipModelCMD.CMDResJewelryAwakePanelMessage */);
            thisObj.reg(13065 /* EquipModelCMD.CMDResEquipUpStageLogMessage */);
            thisObj.reg(13067 /* EquipModelCMD.CMDResGodEquipFusionInfoMessage */);
            thisObj.reg(13073 /* EquipModelCMD.CMDResDragonSoulInfoMessage */);
            thisObj.reg(13075 /* EquipModelCMD.CMDResUnlockDragonSoulMessage */);
            thisObj.reg(13077 /* EquipModelCMD.CMDResAcquireDragonSoulRewardMessage */);
            return _this;
        }
        EquipModel.ins = function () {
            if (!this._ins)
                this._ins = new EquipModel();
            return this._ins;
        };
        /**
         *
         * 请求装备升星
         * @param 升星装备的唯一id
         * @param 是否自动购买 : 0:不买 1:自动购买
         *
         * sendReqEquipRefineMessage  13032
         */
        EquipModel.prototype.send32 = function (lid, beans, state, s) {
            var output = this.getO();
            output.writeLong(lid);
            if (beans != null) {
                output.writeShort(beans.length);
                for (var beansi1 = 0; beansi1 < beans.length; beansi1++) {
                    if (beans[beansi1] != null) {
                        output.writeByte(1);
                        output.writeVarInt(beans[beansi1].itemId, false);
                        output.writeVarInt(beans[beansi1].count, false);
                    }
                    else {
                        output.writeByte(0);
                    }
                }
            }
            else {
                output.writeShort(0);
            }
            output.writeVarInt(state, false);
            this.send(13032 /* EquipModelCMD.CMDReqEquipRefineMessage */, output, s);
        };
        /**
         *
         * 请求装备修理
         * @param 装备唯一id
         *
         * sendReqEquipRepairMessage  13035
         */
        EquipModel.prototype.send35 = function (lid, s) {
            var output = this.getO();
            output.writeLong(lid);
            this.send(13035 /* EquipModelCMD.CMDReqEquipRepairMessage */, output, s);
        };
        /**
         *
         * 请求解锁装备被上锁的星级
         * @param 装备唯一id
         *
         * sendReqOpenEquipLockMessage  13036
         */
        EquipModel.prototype.send36 = function (lid, s) {
            var output = this.getO();
            output.writeLong(lid);
            this.send(13036 /* EquipModelCMD.CMDReqOpenEquipLockMessage */, output, s);
        };
        /**
         *
         * 请求淬炼装备
         * @param 装备唯一id
         * @param 是否自动购买 : 0:不买 1:自动购买
         *
         * sendReqQuenchingEquipMessage  13038
         */
        EquipModel.prototype.send38 = function (lid, beans, state, s) {
            var output = this.getO();
            output.writeLong(lid);
            if (beans != null) {
                output.writeShort(beans.length);
                for (var beansi2 = 0; beansi2 < beans.length; beansi2++) {
                    if (beans[beansi2] != null) {
                        output.writeByte(1);
                        output.writeVarInt(beans[beansi2].itemId, false);
                        output.writeVarInt(beans[beansi2].count, false);
                    }
                    else {
                        output.writeByte(0);
                    }
                }
            }
            else {
                output.writeShort(0);
            }
            output.writeVarInt(state, false);
            this.send(13038 /* EquipModelCMD.CMDReqQuenchingEquipMessage */, output, s);
        };
        /**
         *
         * 请求觉醒装备
         * @param 装备唯一id
         *
         * sendReqAwakeEquipMessage  13041
         */
        EquipModel.prototype.send41 = function (lid, s) {
            var output = this.getO();
            output.writeLong(lid);
            this.send(13041 /* EquipModelCMD.CMDReqAwakeEquipMessage */, output, s);
        };
        /**
         *
         * 请求装备传承
         * @param 原装备唯一id
         * @param 目标装备唯一id
         *
         * sendReqInheritEquipMessage  13042
         */
        EquipModel.prototype.send42 = function (lid, targetLid, s) {
            var output = this.getO();
            output.writeLong(lid);
            output.writeLong(targetLid);
            this.send(13042 /* EquipModelCMD.CMDReqInheritEquipMessage */, output, s);
        };
        /**
         *
         * 请求首爆信息
         *
         * sendReqFirstGetMessage  13047
         */
        EquipModel.prototype.send47 = function (s) {
            var output = this.getO();
            this.send(13047 /* EquipModelCMD.CMDReqFirstGetMessage */, output, s);
        };
        /**
         *
         * 请求领取首爆奖励
         * @param 首爆表id
         *
         * sendReqFirstGetRewardMessage  13049
         */
        EquipModel.prototype.send49 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(13049 /* EquipModelCMD.CMDReqFirstGetRewardMessage */, output, s);
        };
        /**
         *
         * 请求升阶装备
         * @param 升阶类型，读表id
         *
         * sendReqUpStageMessage  13050
         */
        EquipModel.prototype.send50 = function (type, lid, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            output.writeShort(lid.length);
            for (var lidi1 = 0; lidi1 < lid.length; lidi1++) {
                output.writeLong(lid[lidi1]);
            }
            this.send(13050 /* EquipModelCMD.CMDReqUpStageMessage */, output, s);
        };
        /**
         *
         * 请求升阶次数
         * @param 升阶类型，读表id
         *
         * sendReqUpStageCountMessage  13052
         */
        EquipModel.prototype.send52 = function (type, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            this.send(13052 /* EquipModelCMD.CMDReqUpStageCountMessage */, output, s);
        };
        /**
         *
         * 请求合成封魔图
         * @param 请求参与合成的装备唯一id
         *
         * sendReqSealDevilMessage  13054
         */
        EquipModel.prototype.send54 = function (lid, s) {
            var output = this.getO();
            output.writeLong(lid);
            this.send(13054 /* EquipModelCMD.CMDReqSealDevilMessage */, output, s);
        };
        /**
         *
         * 请求神龙之魂强化面板
         *
         * sendReqDragonWingStrengthPanelMessage  13056
         */
        EquipModel.prototype.send56 = function (s) {
            var output = this.getO();
            this.send(13056 /* EquipModelCMD.CMDReqDragonWingStrengthPanelMessage */, output, s);
        };
        /**
         *
         * 请求神龙之魂强化
         * @param 强化道具id
         *
         * sendReqDragonWingStrengthMessage  13058
         */
        EquipModel.prototype.send58 = function (itemId, s) {
            var output = this.getO();
            output.writeVarInt(itemId, false);
            this.send(13058 /* EquipModelCMD.CMDReqDragonWingStrengthMessage */, output, s);
        };
        /**
         *
         * 请求饰配觉醒面板
         *
         * sendReqJewelryAwakePanelMessage  13059
         */
        EquipModel.prototype.send59 = function (s) {
            var output = this.getO();
            this.send(13059 /* EquipModelCMD.CMDReqJewelryAwakePanelMessage */, output, s);
        };
        /**
         *
         * 请求饰配觉醒升级
         * @param 部位
         *
         * sendReqJewelryAwakeUpMessage  13061
         */
        EquipModel.prototype.send61 = function (pos, s) {
            var output = this.getO();
            output.writeVarInt(pos, false);
            this.send(13061 /* EquipModelCMD.CMDReqJewelryAwakeUpMessage */, output, s);
        };
        /**
         *
         * 返回饰配觉醒升级
         * @param
         *
         * sendResJewelryAwakeUpMessage  13062
         */
        EquipModel.prototype.send62 = function (awakeBean, s) {
            var output = this.getO();
            if (awakeBean != null) {
                output.writeByte(1);
                output.writeVarInt(awakeBean.index, false);
                output.writeVarInt(awakeBean.level, false);
            }
            else {
                output.writeByte(0);
            }
            this.send(13062 /* EquipModelCMD.CMDResJewelryAwakeUpMessage */, output, s);
        };
        /**
         *
         * 请求装备注灵
         * @param 升星装备的唯一id
         *
         * sendReqEquipInfuseSpiritMessage  13063
         */
        EquipModel.prototype.send63 = function (lid, s) {
            var output = this.getO();
            output.writeLong(lid);
            this.send(13063 /* EquipModelCMD.CMDReqEquipInfuseSpiritMessage */, output, s);
        };
        /**
         *
         * 请求升阶日志
         *
         * sendReqEquipUpStageLogMessage  13064
         */
        EquipModel.prototype.send64 = function (s) {
            var output = this.getO();
            this.send(13064 /* EquipModelCMD.CMDReqEquipUpStageLogMessage */, output, s);
        };
        /**
         *
         * 请求诛仙融合信息
         *
         * sendReqGodEquipFusionInfoMessage  13066
         */
        EquipModel.prototype.send66 = function (s) {
            var output = this.getO();
            this.send(13066 /* EquipModelCMD.CMDReqGodEquipFusionInfoMessage */, output, s);
        };
        /**
         *
         * 请求融合分解诛仙装备
         * @param 部位
         * @param 消耗道具 0-分解装备 id-道具唯一id
         *
         * sendReqFusionGodEquipMessage  13068
         */
        EquipModel.prototype.send68 = function (pos, lid, s) {
            var output = this.getO();
            output.writeVarInt(pos, false);
            output.writeLong(lid);
            this.send(13068 /* EquipModelCMD.CMDReqFusionGodEquipMessage */, output, s);
        };
        /**
         *
         * 请求装备极品属性转移
         * @param 原装备唯一id
         * @param 目标装备唯一id
         *
         * sendReqTransferEquipSuperAttrsMessage  13069
         */
        EquipModel.prototype.send69 = function (lid, targetLid, superAttrIds, bestIds, s) {
            var output = this.getO();
            output.writeLong(lid);
            output.writeLong(targetLid);
            output.writeShort(superAttrIds.length);
            for (var superAttrIdsi1 = 0; superAttrIdsi1 < superAttrIds.length; superAttrIdsi1++) {
                output.writeVarInt(superAttrIds[superAttrIdsi1], false);
            }
            output.writeShort(bestIds.length);
            for (var bestIdsi1 = 0; bestIdsi1 < bestIds.length; bestIdsi1++) {
                output.writeVarInt(bestIds[bestIdsi1], false);
            }
            this.send(13069 /* EquipModelCMD.CMDReqTransferEquipSuperAttrsMessage */, output, s);
        };
        /**
         *
         * 请求心魂装备熔铸
         *
         * sendReqHeartSoulEquipCastingMessage  13070
         */
        EquipModel.prototype.send70 = function (sources, s) {
            var output = this.getO();
            output.writeShort(sources.length);
            for (var sourcesi1 = 0; sourcesi1 < sources.length; sourcesi1++) {
                output.writeLong(sources[sourcesi1]);
            }
            this.send(13070 /* EquipModelCMD.CMDReqHeartSoulEquipCastingMessage */, output, s);
        };
        /**
         *
         * 资质洗练
         * @param 装备唯一id
         *
         * sendReqEquipQualificationRefreshMessage  13071
         */
        EquipModel.prototype.send71 = function (item, s) {
            var output = this.getO();
            output.writeLong(item);
            this.send(13071 /* EquipModelCMD.CMDReqEquipQualificationRefreshMessage */, output, s);
        };
        /**
         *
         * 请求龙魂进阶信息
         *
         * sendReqDragonSoulInfoMessage  13072
         */
        EquipModel.prototype.send72 = function (s) {
            var output = this.getO();
            this.send(13072 /* EquipModelCMD.CMDReqDragonSoulInfoMessage */, output, s);
        };
        /**
         *
         * 请求解锁龙魂进阶
         *
         * sendReqUnlockDragonSoulMessage  13074
         */
        EquipModel.prototype.send74 = function (s) {
            var output = this.getO();
            this.send(13074 /* EquipModelCMD.CMDReqUnlockDragonSoulMessage */, output, s);
        };
        /**
         *
         * 请求领取龙魂进阶奖励
         *
         * sendReqAcquireDragonSoulRewardMessage  13076
         */
        EquipModel.prototype.send76 = function (s) {
            var output = this.getO();
            this.send(13076 /* EquipModelCMD.CMDReqAcquireDragonSoulRewardMessage */, output, s);
        };
        /**
         *
         * 请求获取共享龙魂经验
         *
         * sendReqAcquireSharedDragonSoulMessage  13078
         */
        EquipModel.prototype.send78 = function (s) {
            var output = this.getO();
            this.send(13078 /* EquipModelCMD.CMDReqAcquireSharedDragonSoulMessage */, output, s);
        };
        EquipModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 13037 /* EquipModelCMD.CMDResEquipRepairMessage */:
                    this.sendNotif(cmd);
                    break;
                case 13048 /* EquipModelCMD.CMDResFirstGetMessage */:
                    var beansLength1 = input.readShort();
                    var resFirstGetMessage = [];
                    for (var beansi1 = 0; beansi1 < beansLength1; beansi1++) {
                        if (input.readByte() != 0) {
                            var temp938 = resFirstGetMessage[beansi1] = {}; //首爆信息
                            temp938["cfgId"] = input.readVarInt(false); //首爆表id
                            temp938["count"] = input.readVarInt(false); //剩余名额
                            temp938["state"] = input.readVarInt(false); //0:未获取 1:可领取 2:已领取
                        }
                        else {
                            resFirstGetMessage[beansi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resFirstGetMessage);
                    break;
                case 13051 /* EquipModelCMD.CMDResUpStageResultMessage */:
                    var resUpStageResultMessage = {};
                    resUpStageResultMessage["success"] = input.readBoolean(); //是否升阶成功
                    resUpStageResultMessage["type"] = input.readVarInt(false); //升阶类型，读表id
                    resUpStageResultMessage["count"] = input.readVarInt(false); //成功合成第几次后必定极品
                    this.sendNotif(cmd, resUpStageResultMessage);
                    break;
                case 13053 /* EquipModelCMD.CMDResUpStageCountMessage */:
                    var resUpStageCountMessage = {};
                    resUpStageCountMessage["type"] = input.readVarInt(false); //升阶类型，读表id
                    resUpStageCountMessage["count"] = input.readVarInt(false); //成功合成第几次后必定极品
                    this.sendNotif(cmd, resUpStageCountMessage);
                    break;
                case 13055 /* EquipModelCMD.CMDResSealDevilMessage */:
                    var resSealDevilMessage = input.readVarInt(false); //合成id(合成失败时为0)
                    this.sendNotif(cmd, resSealDevilMessage);
                    break;
                case 13057 /* EquipModelCMD.CMDResDragonWingStrengthPanelMessage */:
                    var resDragonWingStrengthPanelMessage = {};
                    resDragonWingStrengthPanelMessage["level"] = input.readVarInt(false); //等级
                    resDragonWingStrengthPanelMessage["exp"] = input.readVarInt(false); //当前等级经验
                    this.sendNotif(cmd, resDragonWingStrengthPanelMessage);
                    break;
                case 13060 /* EquipModelCMD.CMDResJewelryAwakePanelMessage */:
                    var awakeBeansLength1 = input.readShort();
                    var resJewelryAwakePanelMessage = [];
                    for (var awakeBeansi1 = 0; awakeBeansi1 < awakeBeansLength1; awakeBeansi1++) {
                        if (input.readByte() != 0) {
                            var temp939 = resJewelryAwakePanelMessage[awakeBeansi1] = {}; //
                            temp939["index"] = input.readVarInt(false); //部位
                            temp939["level"] = input.readVarInt(false); //等级
                        }
                        else {
                            resJewelryAwakePanelMessage[awakeBeansi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resJewelryAwakePanelMessage);
                    break;
                case 13065 /* EquipModelCMD.CMDResEquipUpStageLogMessage */:
                    var logLength1 = input.readShort();
                    var resEquipUpStageLogMessage = [];
                    for (var logi1 = 0; logi1 < logLength1; logi1++) {
                        if (input.readByte() != 0) {
                            var temp940 = resEquipUpStageLogMessage[logi1] = {}; //
                            temp940["time"] = input.readVarInt(false); //
                            temp940["roleId"] = input.readLong(); //
                            temp940["roleName"] = input.readString(); //
                            temp940["itemId"] = input.readVarInt(false); //
                        }
                        else {
                            resEquipUpStageLogMessage[logi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resEquipUpStageLogMessage);
                    break;
                case 13067 /* EquipModelCMD.CMDResGodEquipFusionInfoMessage */:
                    var infoLength1 = input.readShort();
                    var resGodEquipFusionInfoMessage = [];
                    for (var infoi1 = 0; infoi1 < infoLength1; infoi1++) {
                        if (input.readByte() != 0) {
                            var temp941 = resGodEquipFusionInfoMessage[infoi1] = {}; //
                            temp941["id"] = input.readVarInt(false); //
                            temp941["value"] = input.readVarInt(false); //
                        }
                        else {
                            resGodEquipFusionInfoMessage[infoi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resGodEquipFusionInfoMessage);
                    break;
                case 13073 /* EquipModelCMD.CMDResDragonSoulInfoMessage */:
                    var resDragonSoulInfoMessage = {};
                    resDragonSoulInfoMessage["unlock"] = input.readBoolean(); //是否解锁
                    resDragonSoulInfoMessage["storageCapacity"] = input.readVarInt(false); //共享龙魂碎片存储量
                    this.sendNotif(cmd, resDragonSoulInfoMessage);
                    break;
                case 13075 /* EquipModelCMD.CMDResUnlockDragonSoulMessage */:
                    var resUnlockDragonSoulMessage = input.readBoolean(); //是否解锁
                    this.sendNotif(cmd, resUnlockDragonSoulMessage);
                    break;
                case 13077 /* EquipModelCMD.CMDResAcquireDragonSoulRewardMessage */:
                    var resAcquireDragonSoulRewardMessage = input.readBoolean(); //领取奖励是否成功
                    this.sendNotif(cmd, resAcquireDragonSoulRewardMessage);
                    break;
            }
        };
        return EquipModel;
    }(ModelBase));
    net.EquipModel = EquipModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:203
     */
    var EraModel = /** @class */ (function (_super) {
        __extends(EraModel, _super);
        function EraModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(203001 /* EraModelCMD.CMDResEraMessage */);
            thisObj.reg(203007 /* EraModelCMD.CMDResEraOpenRewardInfoMessage */);
            return _this;
        }
        EraModel.ins = function () {
            if (!this._ins)
                this._ins = new EraModel();
            return this._ins;
        };
        /**
         *
         * 请求纪元消息
         *
         * sendReqEraMessage  203002
         */
        EraModel.prototype.send2 = function (s) {
            var output = this.getO();
            this.send(203002 /* EraModelCMD.CMDReqEraMessage */, output, s);
        };
        /**
         *
         * 请求捐献纪元
         * @param 捐献数量
         *
         * sendReqEraGiveMessage  203003
         */
        EraModel.prototype.send3 = function (count, s) {
            var output = this.getO();
            output.writeVarInt(count, false);
            this.send(203003 /* EraModelCMD.CMDReqEraGiveMessage */, output, s);
        };
        /**
         *
         * 请求纪元领奖
         * @param 奖励类型 1:个人 2:全服
         * @param 奖励id
         *
         * sendReqEraGetRewardMessage  203004
         */
        EraModel.prototype.send4 = function (type, eId, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            output.writeVarInt(eId, false);
            this.send(203004 /* EraModelCMD.CMDReqEraGetRewardMessage */, output, s);
        };
        /**
         *
         * 请求纪元上缴
         *
         * sendReqEraTurnInMessage  203005
         */
        EraModel.prototype.send5 = function (s) {
            var output = this.getO();
            this.send(203005 /* EraModelCMD.CMDReqEraTurnInMessage */, output, s);
        };
        /**
         *
         * 请求纪元事件奖励信息
         *
         * sendReqEraOpenRewardInfoMessage  203006
         */
        EraModel.prototype.send6 = function (s) {
            var output = this.getO();
            this.send(203006 /* EraModelCMD.CMDReqEraOpenRewardInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取纪元事件奖励
         * @param 位置
         *
         * sendReqEraOpenRewardAcquireMessage  203008
         */
        EraModel.prototype.send8 = function (index, s) {
            var output = this.getO();
            output.writeVarInt(index, false);
            this.send(203008 /* EraModelCMD.CMDReqEraOpenRewardAcquireMessage */, output, s);
        };
        EraModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 203001 /* EraModelCMD.CMDResEraMessage */:
                    var resEraMessage = {};
                    resEraMessage["serverRate"] = input.readVarInt(false); //服务器纪元
                    resEraMessage["serverRateExp"] = input.readVarInt(false); //服务器纪元进度
                    resEraMessage["roleRateExp"] = input.readVarInt(false); //个人纪元进度
                    var serverRewardsLength1 = input.readShort();
                    resEraMessage["serverRewards"] = [];
                    for (var serverRewardsi1 = 0; serverRewardsi1 < serverRewardsLength1; serverRewardsi1++) {
                        if (input.readByte() != 0) {
                            var temp704 = resEraMessage["serverRewards"][serverRewardsi1] = {}; //全服奖励消息
                            temp704["eId"] = input.readVarInt(false); //奖励id
                            temp704["state"] = input.readBoolean(); //是否已领取
                        }
                        else {
                            resEraMessage["serverRewards"][serverRewardsi1] = null;
                        }
                    }
                    var roleRewardsLength1 = input.readShort();
                    resEraMessage["roleRewards"] = [];
                    for (var roleRewardsi1 = 0; roleRewardsi1 < roleRewardsLength1; roleRewardsi1++) {
                        if (input.readByte() != 0) {
                            var temp705 = resEraMessage["roleRewards"][roleRewardsi1] = {}; //个人奖励消息
                            temp705["eId"] = input.readVarInt(false); //奖励id
                            temp705["state"] = input.readBoolean(); //是否已领取
                        }
                        else {
                            resEraMessage["roleRewards"][roleRewardsi1] = null;
                        }
                    }
                    resEraMessage["num"] = input.readVarInt(false); //今日助力次数
                    resEraMessage["time"] = input.readVarInt(false); //下次可以助力的时间戳
                    resEraMessage["openTime"] = input.readVarInt(false); //下一纪元开启时间
                    resEraMessage["upTime"] = input.readVarInt(false); //进度满的时间
                    this.sendNotif(cmd, resEraMessage);
                    break;
                case 203007 /* EraModelCMD.CMDResEraOpenRewardInfoMessage */:
                    var rewardStatusLength1 = input.readShort();
                    var resEraOpenRewardInfoMessage = [];
                    for (var rewardStatusi1 = 0; rewardStatusi1 < rewardStatusLength1; rewardStatusi1++) {
                        if (input.readByte() != 0) {
                            var temp706 = resEraOpenRewardInfoMessage[rewardStatusi1] = {}; //奖励状态
                            temp706["taskId"] = input.readVarInt(false); //任务id
                            temp706["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp706["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength1 = input.readShort();
                            temp706["goalDataList"] = [];
                            for (var goalDataListi1 = 0; goalDataListi1 < goalDataListLength1; goalDataListi1++) {
                                if (input.readByte() != 0) {
                                    var temp707 = temp706["goalDataList"][goalDataListi1] = {}; //目标数据
                                    temp707["goalId"] = input.readVarInt(false); //目标id
                                    temp707["progress"] = input.readVarInt(false); //当前完成进度
                                    temp707["goalType"] = input.readVarInt(false); //目标类型
                                    temp707["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength1 = input.readShort();
                                    temp707["goalParams"] = new Array(goalParamsLength1);
                                    for (var goalParamsi1 = 0; goalParamsi1 < goalParamsLength1; goalParamsi1++) {
                                        temp707["goalParams"][goalParamsi1] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp706["goalDataList"][goalDataListi1] = null;
                                }
                            }
                        }
                        else {
                            resEraOpenRewardInfoMessage[rewardStatusi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resEraOpenRewardInfoMessage);
                    break;
            }
        };
        return EraModel;
    }(ModelBase));
    net.EraModel = EraModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:105
     */
    var EscortModel = /** @class */ (function (_super) {
        __extends(EscortModel, _super);
        function EscortModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(105011 /* EscortModelCMD.CMDResDailyEscortInfoMessage */);
            thisObj.reg(105012 /* EscortModelCMD.CMDResDailyEscortActorMessage */);
            thisObj.reg(105013 /* EscortModelCMD.CMDResDailyEscortAcquireMessage */);
            thisObj.reg(105022 /* EscortModelCMD.CMDResDailyEscortLevelInfoMessage */);
            return _this;
        }
        EscortModel.ins = function () {
            if (!this._ins)
                this._ins = new EscortModel();
            return this._ins;
        };
        /**
         *
         * 请求押镖信息
         *
         * sendReqDailyEscortInfoMessage  105001
         */
        EscortModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(105001 /* EscortModelCMD.CMDReqDailyEscortInfoMessage */, output, s);
        };
        /**
         *
         * 请求押镖
         * @param 请求押镖id
         *
         * sendReqDailyEscortStartMessage  105002
         */
        EscortModel.prototype.send2 = function (escortId, s) {
            var output = this.getO();
            output.writeVarInt(escortId, false);
            this.send(105002 /* EscortModelCMD.CMDReqDailyEscortStartMessage */, output, s);
        };
        /**
         *
         * 请求放弃押镖
         *
         * sendReqDailyEscortAbortMessage  105003
         */
        EscortModel.prototype.send3 = function (s) {
            var output = this.getO();
            this.send(105003 /* EscortModelCMD.CMDReqDailyEscortAbortMessage */, output, s);
        };
        /**
         *
         * 请求领奖
         * @param extra
         *
         * sendReqDailyEscortAcquireMessage  105004
         */
        EscortModel.prototype.send4 = function (extra, s) {
            var output = this.getO();
            output.writeVarInt(extra, false);
            this.send(105004 /* EscortModelCMD.CMDReqDailyEscortAcquireMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqDailyEscortLevelInfoMessage  105021
         */
        EscortModel.prototype.send21 = function (s) {
            var output = this.getO();
            this.send(105021 /* EscortModelCMD.CMDReqDailyEscortLevelInfoMessage */, output, s);
        };
        /**
         *
         *
         * @param 选择的升级id
         * @param 选择的升级方式  0普通 1直升
         *
         * sendReqDailyEscortLevelUpgradeMessage  105023
         */
        EscortModel.prototype.send23 = function (cid, way, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            output.writeVarInt(way, false);
            this.send(105023 /* EscortModelCMD.CMDReqDailyEscortLevelUpgradeMessage */, output, s);
        };
        EscortModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 105011 /* EscortModelCMD.CMDResDailyEscortInfoMessage */:
                    var resDailyEscortInfoMessage = {};
                    resDailyEscortInfoMessage["estRound"] = input.readVarInt(false); //轮次
                    resDailyEscortInfoMessage["robTimes"] = input.readVarInt(false); //劫镖次数
                    this.sendNotif(cmd, resDailyEscortInfoMessage);
                    break;
                case 105012 /* EscortModelCMD.CMDResDailyEscortActorMessage */:
                    var resDailyEscortActorMessage = {};
                    resDailyEscortActorMessage["escortingCid"] = input.readVarInt(false); //正在押送的镖车配置id
                    resDailyEscortActorMessage["escortingUid"] = input.readLong(); //正在押送的镖车唯一id
                    resDailyEscortActorMessage["status"] = input.readVarInt(false); //状态 1成功/2失败
                    resDailyEscortActorMessage["endTime"] = input.readVarInt(false); //结束时间
                    resDailyEscortActorMessage["hp"] = input.readLong(); //血量
                    resDailyEscortActorMessage["dest"] = input.readVarInt(false); //目标地图
                    resDailyEscortActorMessage["map"] = input.readVarInt(false); //地图
                    resDailyEscortActorMessage["x"] = input.readVarInt(false); //坐标x
                    resDailyEscortActorMessage["y"] = input.readVarInt(false); //坐标y
                    this.sendNotif(cmd, resDailyEscortActorMessage);
                    break;
                case 105013 /* EscortModelCMD.CMDResDailyEscortAcquireMessage */:
                    var resDailyEscortAcquireMessage = input.readVarInt(false); //押镖结果 1成功 2失败
                    this.sendNotif(cmd, resDailyEscortAcquireMessage);
                    break;
                case 105022 /* EscortModelCMD.CMDResDailyEscortLevelInfoMessage */:
                    var resDailyEscortLevelInfoMessage = {};
                    resDailyEscortLevelInfoMessage["level"] = input.readVarInt(false); //
                    resDailyEscortLevelInfoMessage["luck"] = input.readVarInt(false); //
                    this.sendNotif(cmd, resDailyEscortLevelInfoMessage);
                    break;
            }
        };
        return EscortModel;
    }(ModelBase));
    net.EscortModel = EscortModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:198
     */
    var ExchangeModel = /** @class */ (function (_super) {
        __extends(ExchangeModel, _super);
        function ExchangeModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(198001 /* ExchangeModelCMD.CMDResExchangeInfoMessage */);
            thisObj.reg(198006 /* ExchangeModelCMD.CMDResReinExchangeInfoMessage */);
            thisObj.reg(198008 /* ExchangeModelCMD.CMDResExchangeRecordMessage */);
            return _this;
        }
        ExchangeModel.ins = function () {
            if (!this._ins)
                this._ins = new ExchangeModel();
            return this._ins;
        };
        /**
         *
         * 请求兑换
         * @param 兑换id
         * @param 兑换数量
         *
         * sendReqExchangeMessage  198002
         */
        ExchangeModel.prototype.send2 = function (cid, num, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            output.writeVarInt(num, false);
            this.send(198002 /* ExchangeModelCMD.CMDReqExchangeMessage */, output, s);
        };
        /**
         *
         * 请求兑换信息
         *
         * sendReqExchangeInfoMessage  198003
         */
        ExchangeModel.prototype.send3 = function (s) {
            var output = this.getO();
            this.send(198003 /* ExchangeModelCMD.CMDReqExchangeInfoMessage */, output, s);
        };
        /**
         *
         * 请求境界兑换消息
         *
         * sendReqReinExchangeInfoMessage  198004
         */
        ExchangeModel.prototype.send4 = function (s) {
            var output = this.getO();
            this.send(198004 /* ExchangeModelCMD.CMDReqReinExchangeInfoMessage */, output, s);
        };
        /**
         *
         * 请求兑换
         * @param 兑换类型 1:2:3
         *
         * sendReqReinExchangeMessage  198005
         */
        ExchangeModel.prototype.send5 = function (type, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            this.send(198005 /* ExchangeModelCMD.CMDReqReinExchangeMessage */, output, s);
        };
        /**
         *
         * 请求兑换历史记录
         * @param 活动id 0-全部
         *
         * sendReqExchangeRecordMessage  198007
         */
        ExchangeModel.prototype.send7 = function (activityId, s) {
            var output = this.getO();
            output.writeVarInt(activityId, false);
            this.send(198007 /* ExchangeModelCMD.CMDReqExchangeRecordMessage */, output, s);
        };
        ExchangeModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 198001 /* ExchangeModelCMD.CMDResExchangeInfoMessage */:
                    var challengeBeanLength1 = input.readShort();
                    var resExchangeInfoMessage = [];
                    for (var challengeBeani1 = 0; challengeBeani1 < challengeBeanLength1; challengeBeani1++) {
                        if (input.readByte() != 0) {
                            var temp762 = resExchangeInfoMessage[challengeBeani1] = {}; //剩余兑换信息
                            temp762["group"] = input.readVarInt(false); //兑换表分组
                            temp762["leftCount"] = input.readVarInt(false); //剩余次数
                        }
                        else {
                            resExchangeInfoMessage[challengeBeani1] = null;
                        }
                    }
                    this.sendNotif(cmd, resExchangeInfoMessage);
                    break;
                case 198006 /* ExchangeModelCMD.CMDResReinExchangeInfoMessage */:
                    var resReinExchangeInfoMessage = input.readVarInt(false); //今日已兑换次数
                    this.sendNotif(cmd, resReinExchangeInfoMessage);
                    break;
                case 198008 /* ExchangeModelCMD.CMDResExchangeRecordMessage */:
                    var recordListLength1 = input.readShort();
                    var resExchangeRecordMessage = [];
                    for (var recordListi1 = 0; recordListi1 < recordListLength1; recordListi1++) {
                        if (input.readByte() != 0) {
                            var temp763 = resExchangeRecordMessage[recordListi1] = {}; //兑换历史记录
                            temp763["sid"] = input.readVarInt(false); //服务器id
                            temp763["activityId"] = input.readVarInt(false); //活动id
                            temp763["name"] = input.readString(); //角色名
                            temp763["cost"] = input.readString(); //兑换消耗
                            temp763["reward"] = input.readString(); //兑换获得
                        }
                        else {
                            resExchangeRecordMessage[recordListi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resExchangeRecordMessage);
                    break;
            }
        };
        return ExchangeModel;
    }(ModelBase));
    net.ExchangeModel = ExchangeModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:34
     */
    var FcmModel = /** @class */ (function (_super) {
        __extends(FcmModel, _super);
        function FcmModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(34001 /* FcmModelCMD.CMDResAuthorityStateMessage */);
            thisObj.reg(34003 /* FcmModelCMD.CMDResFcmStateMessage */);
            thisObj.reg(34004 /* FcmModelCMD.CMDResFcmFlagMessage */);
            thisObj.reg(34005 /* FcmModelCMD.CMDResIsAuthorityMessage */);
            thisObj.reg(34006 /* FcmModelCMD.CMDResIsAdultMessage */);
            thisObj.reg(34007 /* FcmModelCMD.CMDResShutDownGameMessage */);
            thisObj.reg(34008 /* FcmModelCMD.CMDResPlayerLoginFCM2TipMessage */);
            return _this;
        }
        FcmModel.ins = function () {
            if (!this._ins)
                this._ins = new FcmModel();
            return this._ins;
        };
        /**
         *
         * 请求认证
         * @param 名字
         * @param 身份证号
         *
         * sendReqAuthorityMessage  34002
         */
        FcmModel.prototype.send2 = function (name, idNumber, s) {
            var output = this.getO();
            output.writeString(name);
            output.writeString(idNumber);
            this.send(34002 /* FcmModelCMD.CMDReqAuthorityMessage */, output, s);
        };
        FcmModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 34001 /* FcmModelCMD.CMDResAuthorityStateMessage */:
                    var resAuthorityStateMessage = input.readBoolean(); //是否已认证
                    this.sendNotif(cmd, resAuthorityStateMessage);
                    break;
                case 34003 /* FcmModelCMD.CMDResFcmStateMessage */:
                    var resFcmStateMessage = input.readVarInt(false); //防沉迷状态
                    this.sendNotif(cmd, resFcmStateMessage);
                    break;
                case 34004 /* FcmModelCMD.CMDResFcmFlagMessage */:
                    var resFcmFlagMessage = input.readVarInt(false); //0 未开启 1 已开启
                    this.sendNotif(cmd, resFcmFlagMessage);
                    break;
                case 34005 /* FcmModelCMD.CMDResIsAuthorityMessage */:
                    var resIsAuthorityMessage = input.readVarInt(false); //0 未认证 1 已认证
                    this.sendNotif(cmd, resIsAuthorityMessage);
                    break;
                case 34006 /* FcmModelCMD.CMDResIsAdultMessage */:
                    var resIsAdultMessage = input.readVarInt(false); //0 未认证， 1已认证
                    this.sendNotif(cmd, resIsAdultMessage);
                    break;
                case 34007 /* FcmModelCMD.CMDResShutDownGameMessage */:
                    this.sendNotif(cmd);
                    break;
                case 34008 /* FcmModelCMD.CMDResPlayerLoginFCM2TipMessage */:
                    this.sendNotif(cmd);
                    break;
            }
        };
        return FcmModel;
    }(ModelBase));
    net.FcmModel = FcmModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:202
     */
    var FunctionModel = /** @class */ (function (_super) {
        __extends(FunctionModel, _super);
        function FunctionModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(202002 /* FunctionModelCMD.CMDResFunctionInfoMessage */);
            return _this;
        }
        FunctionModel.ins = function () {
            if (!this._ins)
                this._ins = new FunctionModel();
            return this._ins;
        };
        /**
         *
         * 请求神兵打造活动信息
         * @param 类型 1:神兵神甲 2:其他
         *
         * sendReqFunctionInfoMessage  202001
         */
        FunctionModel.prototype.send1 = function (type, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            this.send(202001 /* FunctionModelCMD.CMDReqFunctionInfoMessage */, output, s);
        };
        /**
         *
         * 请求神兵打造奖励领取
         * @param 类型
         * @param 打造次数
         *
         * sendReqFunctionMessage  202003
         */
        FunctionModel.prototype.send3 = function (type, count, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            output.writeVarInt(count, false);
            this.send(202003 /* FunctionModelCMD.CMDReqFunctionMessage */, output, s);
        };
        FunctionModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 202002 /* FunctionModelCMD.CMDResFunctionInfoMessage */:
                    var beanListLength1 = input.readShort();
                    var resFunctionInfoMessage = [];
                    for (var beanListi1 = 0; beanListi1 < beanListLength1; beanListi1++) {
                        if (input.readByte() != 0) {
                            var temp586 = resFunctionInfoMessage[beanListi1] = {}; //任务信息
                            temp586["count"] = input.readVarInt(false); //打造次数
                            temp586["type"] = input.readVarInt(false); //类型 1:神兵神甲 2:其他
                            var beansLength1 = input.readShort();
                            temp586["beans"] = [];
                            for (var beansi1 = 0; beansi1 < beansLength1; beansi1++) {
                                if (input.readByte() != 0) {
                                    var temp587 = temp586["beans"][beansi1] = {}; //奖励信息
                                    temp587["needCount"] = input.readVarInt(false); //需要打造次数
                                    temp587["state"] = input.readBoolean(); //T:已领 F:未领
                                }
                                else {
                                    temp586["beans"][beansi1] = null;
                                }
                            }
                            var namesLength = input.readShort();
                            temp586["names"] = new Array(namesLength);
                            for (var namesi1 = 0; namesi1 < namesLength; namesi1++) {
                                temp586["names"][namesi1] = input.readString(); //排行榜玩家
                            }
                        }
                        else {
                            resFunctionInfoMessage[beanListi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resFunctionInfoMessage);
                    break;
            }
        };
        return FunctionModel;
    }(ModelBase));
    net.FunctionModel = FunctionModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:180
     */
    var FusionModel = /** @class */ (function (_super) {
        __extends(FusionModel, _super);
        function FusionModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(180011 /* FusionModelCMD.CMDResFusionViewMessage */);
            thisObj.reg(180012 /* FusionModelCMD.CMDResFusionBuyMessage */);
            thisObj.reg(180013 /* FusionModelCMD.CMDResFusionLogMessage */);
            thisObj.reg(180014 /* FusionModelCMD.CMDResFusionSellMessage */);
            return _this;
        }
        FusionModel.ins = function () {
            if (!this._ins)
                this._ins = new FusionModel();
            return this._ins;
        };
        /**
         *
         * 请求熔炼出售
         * @param >0 销毁
         *
         * sendReqFusionSellMessage  180001
         */
        FusionModel.prototype.send1 = function (uids, destory, s) {
            var output = this.getO();
            output.writeShort(uids.length);
            for (var uidsi1 = 0; uidsi1 < uids.length; uidsi1++) {
                output.writeLong(uids[uidsi1]);
            }
            output.writeVarInt(destory, false);
            this.send(180001 /* FusionModelCMD.CMDReqFusionSellMessage */, output, s);
        };
        /**
         *
         * 请求熔炼信息
         *
         * sendReqFusionViewMessage  180002
         */
        FusionModel.prototype.send2 = function (s) {
            var output = this.getO();
            this.send(180002 /* FusionModelCMD.CMDReqFusionViewMessage */, output, s);
        };
        /**
         *
         * 请求熔炼购买
         * @param 购买uid
         *
         * sendReqFusionBuyMessage  180003
         */
        FusionModel.prototype.send3 = function (uid, s) {
            var output = this.getO();
            output.writeLong(uid);
            this.send(180003 /* FusionModelCMD.CMDReqFusionBuyMessage */, output, s);
        };
        /**
         *
         * 请求熔炼日志
         *
         * sendReqFusionLogMessage  180004
         */
        FusionModel.prototype.send4 = function (s) {
            var output = this.getO();
            this.send(180004 /* FusionModelCMD.CMDReqFusionLogMessage */, output, s);
        };
        FusionModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 180011 /* FusionModelCMD.CMDResFusionViewMessage */:
                    var resFusionViewMessage = {};
                    var itemsLength1 = input.readShort();
                    resFusionViewMessage["items"] = [];
                    for (var itemsi1 = 0; itemsi1 < itemsLength1; itemsi1++) {
                        if (input.readByte() != 0) {
                            var temp986 = resFusionViewMessage["items"][itemsi1] = {}; //fusion列表
                            temp986["type"] = input.readVarInt(false); //类型 0普通 1系统
                            temp986["guildId"] = input.readLong(); //行会id
                            var itemLength1 = input.readByte();
                            if (itemLength1 != 0) {
                                var temp987 = temp986["item"] = {}; //道具
                                temp987["uid"] = input.readLong(); //唯一id
                                temp987["itemId"] = input.readVarInt(false); //道具配置id
                                temp987["count"] = input.readVarInt(false); //数量
                                temp987["expire"] = input.readVarInt(false); //过期时间
                                temp987["uTimes"] = input.readVarInt(false); //已经使用的次数
                                temp987["time"] = input.readVarInt(false); //道具获得时间
                                var paramsLength1 = input.readShort();
                                temp987["params"] = new Array(paramsLength1);
                                for (var paramsi1 = 0; paramsi1 < paramsLength1; paramsi1++) {
                                    temp987["params"][paramsi1] = input.readVarInt(false); //道具参数
                                }
                                var equipDataLength1 = input.readByte();
                                if (equipDataLength1 != 0) {
                                    var temp988 = temp987["equipData"] = {}; //装备属性（null表示没有）
                                    temp988["durable"] = input.readVarInt(false); //消耗耐久
                                    temp988["starLevel"] = input.readVarInt(false); //升星等级
                                    temp988["starLock"] = input.readVarInt(false); //被锁星级
                                    temp988["starExp"] = input.readVarInt(false); //升星祝福值
                                    temp988["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                    temp988["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                    temp988["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                    temp988["spiritLevel"] = input.readVarInt(false); //注灵等级
                                    temp988["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                    temp988["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                    temp988["sign"] = input.readString(); //签名
                                    var destinyAttrsLength1 = input.readShort();
                                    temp988["destinyAttrs"] = [];
                                    for (var destinyAttrsi1 = 0; destinyAttrsi1 < destinyAttrsLength1; destinyAttrsi1++) {
                                        if (input.readByte() != 0) {
                                            var temp989 = temp988["destinyAttrs"][destinyAttrsi1] = {}; //命运属性
                                            temp989["career"] = input.readVarInt(false); //职业限定
                                            temp989["attributeType"] = input.readVarInt(false); //属性类型
                                            temp989["attributeValue"] = input.readLong(); //属性值
                                        }
                                        else {
                                            temp988["destinyAttrs"][destinyAttrsi1] = null;
                                        }
                                    }
                                    var superAttrsLength1 = input.readShort();
                                    temp988["superAttrs"] = [];
                                    for (var superAttrsi1 = 0; superAttrsi1 < superAttrsLength1; superAttrsi1++) {
                                        if (input.readByte() != 0) {
                                            var temp990 = temp988["superAttrs"][superAttrsi1] = {}; //极品属性
                                            temp990["career"] = input.readVarInt(false); //职业限定
                                            temp990["attributeType"] = input.readVarInt(false); //属性类型
                                            temp990["attributeValue"] = input.readLong(); //属性值
                                        }
                                        else {
                                            temp988["superAttrs"][superAttrsi1] = null;
                                        }
                                    }
                                    var identifyAttrsLength1 = input.readShort();
                                    temp988["identifyAttrs"] = [];
                                    for (var identifyAttrsi1 = 0; identifyAttrsi1 < identifyAttrsLength1; identifyAttrsi1++) {
                                        if (input.readByte() != 0) {
                                            var temp991 = temp988["identifyAttrs"][identifyAttrsi1] = {}; //鉴定属性
                                            temp991["career"] = input.readVarInt(false); //职业限定
                                            temp991["attributeType"] = input.readVarInt(false); //属性类型
                                            temp991["attributeValue"] = input.readLong(); //属性值
                                        }
                                        else {
                                            temp988["identifyAttrs"][identifyAttrsi1] = null;
                                        }
                                    }
                                    var xiLianAttrsLength1 = input.readShort();
                                    temp988["xiLianAttrs"] = [];
                                    for (var xiLianAttrsi1 = 0; xiLianAttrsi1 < xiLianAttrsLength1; xiLianAttrsi1++) {
                                        if (input.readByte() != 0) {
                                            var temp992 = temp988["xiLianAttrs"][xiLianAttrsi1] = {}; //配饰洗练属性
                                            temp992["career"] = input.readVarInt(false); //职业限定
                                            temp992["attributeType"] = input.readVarInt(false); //属性类型
                                            temp992["attributeValue"] = input.readLong(); //属性值
                                        }
                                        else {
                                            temp988["xiLianAttrs"][xiLianAttrsi1] = null;
                                        }
                                    }
                                    temp988["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                    temp988["growLevel"] = input.readVarInt(false); //成长等级
                                    temp988["growExp"] = input.readVarInt(false); //成长经验
                                    var bestAttrsLength1 = input.readShort();
                                    temp988["bestAttrs"] = new Array(bestAttrsLength1);
                                    for (var bestAttrsi1 = 0; bestAttrsi1 < bestAttrsLength1; bestAttrsi1++) {
                                        temp988["bestAttrs"][bestAttrsi1] = input.readVarInt(false); //极品属性（新）
                                    }
                                    var soulAttrsLength1 = input.readShort();
                                    temp988["soulAttrs"] = new Array(soulAttrsLength1);
                                    for (var soulAttrsi1 = 0; soulAttrsi1 < soulAttrsLength1; soulAttrsi1++) {
                                        temp988["soulAttrs"][soulAttrsi1] = input.readVarInt(false); //心魂属性
                                    }
                                    var godsAttrsLength1 = input.readShort();
                                    temp988["godsAttrs"] = new Array(godsAttrsLength1);
                                    for (var godsAttrsi1 = 0; godsAttrsi1 < godsAttrsLength1; godsAttrsi1++) {
                                        temp988["godsAttrs"][godsAttrsi1] = input.readVarInt(false); //额外神级属性
                                    }
                                    temp988["qualification"] = input.readVarInt(false); //资质
                                    var specialDurableLength1 = input.readShort();
                                    temp988["specialDurable"] = [];
                                    for (var specialDurablei1 = 0; specialDurablei1 < specialDurableLength1; specialDurablei1++) {
                                        if (input.readByte() != 0) {
                                            var temp993 = temp988["specialDurable"][specialDurablei1] = {}; //特殊耐久消耗值
                                            temp993["type"] = input.readVarInt(false); //类型
                                            temp993["value"] = input.readVarInt(false); //已消耗值
                                        }
                                        else {
                                            temp988["specialDurable"][specialDurablei1] = null;
                                        }
                                    }
                                }
                                var immobilizationLength1 = input.readByte();
                                if (immobilizationLength1 != 0) {
                                    var temp994 = temp987["immobilization"] = {}; //固化数据
                                    temp994["action"] = input.readVarInt(false); //产生行为
                                    temp994["expire"] = input.readVarInt(false); //过期时间 时间戳
                                }
                                var fromLength1 = input.readByte();
                                if (fromLength1 != 0) {
                                    var temp995 = temp987["from"] = {}; //来源
                                    temp995["action"] = input.readVarInt(false); //产生行为
                                    temp995["firstRole"] = input.readLong(); //第一个玩家id
                                    temp995["firstRoleName"] = input.readString(); //第一个玩家名字
                                    var paramsLength2 = input.readShort();
                                    temp995["params"] = [];
                                    for (var paramsi2 = 0; paramsi2 < paramsLength2; paramsi2++) {
                                        if (input.readByte() != 0) {
                                            var temp996 = temp995["params"][paramsi2] = {}; //
                                            temp996["key"] = input.readVarInt(false); //
                                            temp996["value"] = input.readString(); //
                                        }
                                        else {
                                            temp995["params"][paramsi2] = null;
                                        }
                                    }
                                }
                                temp987["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                                var spriteDataLength1 = input.readByte();
                                if (spriteDataLength1 != 0) {
                                    var temp997 = temp987["spriteData"] = {}; //灵兽数据（null表示没有）
                                    temp997["level"] = input.readVarInt(false); //灵兽等级
                                    temp997["exp"] = input.readVarInt(false); //灵兽经验
                                    temp997["skin"] = input.readVarInt(false); //灵兽皮肤
                                    var skillsLength1 = input.readShort();
                                    temp997["skills"] = [];
                                    for (var skillsi1 = 0; skillsi1 < skillsLength1; skillsi1++) {
                                        if (input.readByte() != 0) {
                                            var temp998 = temp997["skills"][skillsi1] = {}; //灵兽出战技能
                                            temp998["id"] = input.readVarInt(false); //
                                            temp998["value"] = input.readVarInt(false); //
                                        }
                                        else {
                                            temp997["skills"][skillsi1] = null;
                                        }
                                    }
                                    var ownerSkillsLength1 = input.readShort();
                                    temp997["ownerSkills"] = [];
                                    for (var ownerSkillsi1 = 0; ownerSkillsi1 < ownerSkillsLength1; ownerSkillsi1++) {
                                        if (input.readByte() != 0) {
                                            var temp999 = temp997["ownerSkills"][ownerSkillsi1] = {}; //灵兽拥有的技能
                                            temp999["id"] = input.readVarInt(false); //
                                            temp999["value"] = input.readVarInt(false); //
                                        }
                                        else {
                                            temp997["ownerSkills"][ownerSkillsi1] = null;
                                        }
                                    }
                                    var ownerSkinsLength1 = input.readShort();
                                    temp997["ownerSkins"] = [];
                                    for (var ownerSkinsi1 = 0; ownerSkinsi1 < ownerSkinsLength1; ownerSkinsi1++) {
                                        if (input.readByte() != 0) {
                                            var temp1000 = temp997["ownerSkins"][ownerSkinsi1] = {}; //灵兽拥有的皮肤
                                            temp1000["id"] = input.readVarInt(false); //
                                            temp1000["value"] = input.readVarInt(false); //
                                        }
                                        else {
                                            temp997["ownerSkins"][ownerSkinsi1] = null;
                                        }
                                    }
                                    var absorbExpLength1 = input.readShort();
                                    temp997["absorbExp"] = [];
                                    for (var absorbExpi1 = 0; absorbExpi1 < absorbExpLength1; absorbExpi1++) {
                                        if (input.readByte() != 0) {
                                            var temp1001 = temp997["absorbExp"][absorbExpi1] = {}; //灵兽吸收经验值
                                            temp1001["id"] = input.readVarInt(false); //
                                            temp1001["value"] = input.readVarInt(false); //
                                        }
                                        else {
                                            temp997["absorbExp"][absorbExpi1] = null;
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            resFusionViewMessage["items"][itemsi1] = null;
                        }
                    }
                    var timesLength1 = input.readShort();
                    resFusionViewMessage["times"] = [];
                    for (var timesi1 = 0; timesi1 < timesLength1; timesi1++) {
                        if (input.readByte() != 0) {
                            var temp1002 = resFusionViewMessage["times"][timesi1] = {}; //次数信息
                            temp1002["fType"] = input.readVarInt(false); //配置类型
                            temp1002["lType"] = input.readVarInt(false); //重置类型
                            temp1002["times"] = input.readVarInt(false); //购买次数
                        }
                        else {
                            resFusionViewMessage["times"][timesi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resFusionViewMessage);
                    break;
                case 180012 /* FusionModelCMD.CMDResFusionBuyMessage */:
                    var resFusionBuyMessage = {};
                    resFusionBuyMessage["uid"] = input.readLong(); //购买成功的uid
                    var timesLength2 = input.readShort();
                    resFusionBuyMessage["times"] = [];
                    for (var timesi2 = 0; timesi2 < timesLength2; timesi2++) {
                        if (input.readByte() != 0) {
                            var temp1003 = resFusionBuyMessage["times"][timesi2] = {}; //次数信息更新
                            temp1003["fType"] = input.readVarInt(false); //配置类型
                            temp1003["lType"] = input.readVarInt(false); //重置类型
                            temp1003["times"] = input.readVarInt(false); //购买次数
                        }
                        else {
                            resFusionBuyMessage["times"][timesi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resFusionBuyMessage);
                    break;
                case 180013 /* FusionModelCMD.CMDResFusionLogMessage */:
                    var logsLength1 = input.readShort();
                    var resFusionLogMessage = [];
                    for (var logsi1 = 0; logsi1 < logsLength1; logsi1++) {
                        if (input.readByte() != 0) {
                            var temp1004 = resFusionLogMessage[logsi1] = {}; //
                            temp1004["roleId"] = input.readLong(); //玩家id
                            temp1004["roleName"] = input.readString(); //玩家名字
                            temp1004["cost"] = input.readVarInt(false); //熔炼道具
                            temp1004["acquire"] = input.readVarInt(false); //活动道具
                        }
                        else {
                            resFusionLogMessage[logsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resFusionLogMessage);
                    break;
                case 180014 /* FusionModelCMD.CMDResFusionSellMessage */:
                    var acquiresLength1 = input.readShort();
                    var resFusionSellMessage = [];
                    for (var acquiresi1 = 0; acquiresi1 < acquiresLength1; acquiresi1++) {
                        if (input.readByte() != 0) {
                            var temp1005 = resFusionSellMessage[acquiresi1] = {}; //
                            temp1005["itemId"] = input.readVarInt(false); //config id
                            temp1005["itemCount"] = input.readVarInt(false); //item count
                        }
                        else {
                            resFusionSellMessage[acquiresi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resFusionSellMessage);
                    break;
            }
        };
        return FusionModel;
    }(ModelBase));
    net.FusionModel = FusionModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:241
     */
    var GameTargetModel = /** @class */ (function (_super) {
        __extends(GameTargetModel, _super);
        function GameTargetModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(241002 /* GameTargetModelCMD.CMDResGameTargetInfoMessage */);
            return _this;
        }
        GameTargetModel.ins = function () {
            if (!this._ins)
                this._ins = new GameTargetModel();
            return this._ins;
        };
        /**
         *
         * 游戏目标信息
         *
         * sendReqGameTargetInfoMessage  241001
         */
        GameTargetModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(241001 /* GameTargetModelCMD.CMDReqGameTargetInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取游戏目标奖励
         * @param cfgId
         * @param 1-领取大奖
         *
         * sendReqGameTargetGetRewardMessage  241003
         */
        GameTargetModel.prototype.send3 = function (cfgId, bigPrize, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            output.writeVarInt(bigPrize, false);
            this.send(241003 /* GameTargetModelCMD.CMDReqGameTargetGetRewardMessage */, output, s);
        };
        GameTargetModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 241002 /* GameTargetModelCMD.CMDResGameTargetInfoMessage */:
                    var resGameTargetInfoMessage = {};
                    resGameTargetInfoMessage["group"] = input.readVarInt(false); //groupId
                    var tasksLength1 = input.readShort();
                    resGameTargetInfoMessage["tasks"] = [];
                    for (var tasksi1 = 0; tasksi1 < tasksLength1; tasksi1++) {
                        if (input.readByte() != 0) {
                            var temp934 = resGameTargetInfoMessage["tasks"][tasksi1] = {}; //任务信息
                            temp934["taskId"] = input.readVarInt(false); //任务id
                            temp934["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp934["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength1 = input.readShort();
                            temp934["goalDataList"] = [];
                            for (var goalDataListi1 = 0; goalDataListi1 < goalDataListLength1; goalDataListi1++) {
                                if (input.readByte() != 0) {
                                    var temp935 = temp934["goalDataList"][goalDataListi1] = {}; //目标数据
                                    temp935["goalId"] = input.readVarInt(false); //目标id
                                    temp935["progress"] = input.readVarInt(false); //当前完成进度
                                    temp935["goalType"] = input.readVarInt(false); //目标类型
                                    temp935["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength1 = input.readShort();
                                    temp935["goalParams"] = new Array(goalParamsLength1);
                                    for (var goalParamsi1 = 0; goalParamsi1 < goalParamsLength1; goalParamsi1++) {
                                        temp935["goalParams"][goalParamsi1] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp934["goalDataList"][goalDataListi1] = null;
                                }
                            }
                        }
                        else {
                            resGameTargetInfoMessage["tasks"][tasksi1] = null;
                        }
                    }
                    resGameTargetInfoMessage["bigPrize"] = input.readVarInt(false); //大奖领取状态 0-未领取 1-已领取
                    this.sendNotif(cmd, resGameTargetInfoMessage);
                    break;
            }
        };
        return GameTargetModel;
    }(ModelBase));
    net.GameTargetModel = GameTargetModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:350
     */
    var GemTrialModel = /** @class */ (function (_super) {
        __extends(GemTrialModel, _super);
        function GemTrialModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(350001 /* GemTrialModelCMD.CMDResGemTrialCompleteMessage */);
            return _this;
        }
        GemTrialModel.ins = function () {
            if (!this._ins)
                this._ins = new GemTrialModel();
            return this._ins;
        };
        /**
         *
         * 请求得到奖励
         * @param 获奖配置id
         * @param 1为勾选获得额外奖励，0或者其他不额外获得
         *
         * sendReqGetRewardMessage  350002
         */
        GemTrialModel.prototype.send2 = function (cfgId, extraGet, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            output.writeVarInt(extraGet, false);
            this.send(350002 /* GemTrialModelCMD.CMDReqGetRewardMessage */, output, s);
        };
        GemTrialModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 350001 /* GemTrialModelCMD.CMDResGemTrialCompleteMessage */:
                    var resGemTrialCompleteMessage = {};
                    resGemTrialCompleteMessage["completeTime"] = input.readLong(); //通关时间
                    resGemTrialCompleteMessage["isOnDuplicate"] = input.readVarInt(false); //是否在副本
                    this.sendNotif(cmd, resGemTrialCompleteMessage);
                    break;
            }
        };
        return GemTrialModel;
    }(ModelBase));
    net.GemTrialModel = GemTrialModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:319
     */
    var GodAttrRefineModel = /** @class */ (function (_super) {
        __extends(GodAttrRefineModel, _super);
        function GodAttrRefineModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(319002 /* GodAttrRefineModelCMD.CMDResGodAttrRefineInfoMessage */);
            thisObj.reg(319004 /* GodAttrRefineModelCMD.CMDResGodAttrRefineUpdateMessage */);
            return _this;
        }
        GodAttrRefineModel.ins = function () {
            if (!this._ins)
                this._ins = new GodAttrRefineModel();
            return this._ins;
        };
        /**
         *
         * 请求神级属性精炼信息
         *
         * sendReqGodAttrRefineInfoMessage  319001
         */
        GodAttrRefineModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(319001 /* GodAttrRefineModelCMD.CMDReqGodAttrRefineInfoMessage */, output, s);
        };
        /**
         *
         * 请求神级属性精炼升级
         * @param 部位
         * @param 类型
         *
         * sendReqGodAttrRefineUpdateMessage  319003
         */
        GodAttrRefineModel.prototype.send3 = function (index, type, s) {
            var output = this.getO();
            output.writeVarInt(index, false);
            output.writeVarInt(type, false);
            this.send(319003 /* GodAttrRefineModelCMD.CMDReqGodAttrRefineUpdateMessage */, output, s);
        };
        GodAttrRefineModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 319002 /* GodAttrRefineModelCMD.CMDResGodAttrRefineInfoMessage */:
                    var infosLength1 = input.readShort();
                    var resGodAttrRefineInfoMessage = [];
                    for (var infosi1 = 0; infosi1 < infosLength1; infosi1++) {
                        if (input.readByte() != 0) {
                            var temp753 = resGodAttrRefineInfoMessage[infosi1] = {}; //
                            temp753["index"] = input.readVarInt(false); //部位
                            var levelInfoLength1 = input.readShort();
                            temp753["levelInfo"] = [];
                            for (var levelInfoi1 = 0; levelInfoi1 < levelInfoLength1; levelInfoi1++) {
                                if (input.readByte() != 0) {
                                    var temp754 = temp753["levelInfo"][levelInfoi1] = {}; //精炼等级信息
                                    temp754["type"] = input.readVarInt(false); //类型
                                    temp754["level"] = input.readVarInt(false); //精炼等级
                                }
                                else {
                                    temp753["levelInfo"][levelInfoi1] = null;
                                }
                            }
                        }
                        else {
                            resGodAttrRefineInfoMessage[infosi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resGodAttrRefineInfoMessage);
                    break;
                case 319004 /* GodAttrRefineModelCMD.CMDResGodAttrRefineUpdateMessage */:
                    var changeLength1 = input.readByte();
                    if (changeLength1 != 0) {
                        var resGodAttrRefineUpdateMessage = {}; //
                        resGodAttrRefineUpdateMessage["index"] = input.readVarInt(false); //部位
                        var levelInfoLength2 = input.readShort();
                        resGodAttrRefineUpdateMessage["levelInfo"] = [];
                        for (var levelInfoi2 = 0; levelInfoi2 < levelInfoLength2; levelInfoi2++) {
                            if (input.readByte() != 0) {
                                var temp755 = resGodAttrRefineUpdateMessage["levelInfo"][levelInfoi2] = {}; //精炼等级信息
                                temp755["type"] = input.readVarInt(false); //类型
                                temp755["level"] = input.readVarInt(false); //精炼等级
                            }
                            else {
                                resGodAttrRefineUpdateMessage["levelInfo"][levelInfoi2] = null;
                            }
                        }
                    }
                    this.sendNotif(cmd, resGodAttrRefineUpdateMessage);
                    break;
            }
        };
        return GodAttrRefineModel;
    }(ModelBase));
    net.GodAttrRefineModel = GodAttrRefineModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:101
     */
    var GroupModel = /** @class */ (function (_super) {
        __extends(GroupModel, _super);
        function GroupModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(101101 /* GroupModelCMD.CMDResPlayerNearbyApplicationListInfoMessage */);
            thisObj.reg(101102 /* GroupModelCMD.CMDResGroupDetailedInfoMessage */);
            thisObj.reg(101103 /* GroupModelCMD.CMDResGroupApplicationListInfoMessage */);
            thisObj.reg(101104 /* GroupModelCMD.CMDResPlayerGroupChangeMessage */);
            thisObj.reg(101105 /* GroupModelCMD.CMDResInvitedMessage */);
            thisObj.reg(101106 /* GroupModelCMD.CMDResAppliedListMessage */);
            thisObj.reg(101107 /* GroupModelCMD.CMDResInviteRoleInfoMessage */);
            thisObj.reg(101108 /* GroupModelCMD.CMDResGroupHpMpChangedMessage */);
            thisObj.reg(101110 /* GroupModelCMD.CMDResGroupPointMessage */);
            thisObj.reg(101113 /* GroupModelCMD.CMDResTeamSettingsMessage */);
            return _this;
        }
        GroupModel.ins = function () {
            if (!this._ins)
                this._ins = new GroupModel();
            return this._ins;
        };
        /**
         *
         * 请求附近队伍列表
         *
         * sendReqPlayerNearbyApplicationListInfoMessage  101001
         */
        GroupModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(101001 /* GroupModelCMD.CMDReqPlayerNearbyApplicationListInfoMessage */, output, s);
        };
        /**
         *
         * 请求创建队伍
         *
         * sendReqCreatGroupMessage  101002
         */
        GroupModel.prototype.send2 = function (s) {
            var output = this.getO();
            this.send(101002 /* GroupModelCMD.CMDReqCreatGroupMessage */, output, s);
        };
        /**
         *
         * 请求转移队伍队长
         * @param 新的队长rid
         *
         * sendReqChangeCaptainMessage  101004
         */
        GroupModel.prototype.send4 = function (captainId, s) {
            var output = this.getO();
            output.writeLong(captainId);
            this.send(101004 /* GroupModelCMD.CMDReqChangeCaptainMessage */, output, s);
        };
        /**
         *
         * 请求队伍踢出玩家
         * @param 被提出玩家id
         *
         * sendReqKickMemberMessage  101005
         */
        GroupModel.prototype.send5 = function (rid, s) {
            var output = this.getO();
            output.writeLong(rid);
            this.send(101005 /* GroupModelCMD.CMDReqKickMemberMessage */, output, s);
        };
        /**
         *
         * 玩家请求离开队伍
         *
         * sendReqExitGroupMessage  101006
         */
        GroupModel.prototype.send6 = function (s) {
            var output = this.getO();
            this.send(101006 /* GroupModelCMD.CMDReqExitGroupMessage */, output, s);
        };
        /**
         *
         * 请求加入队伍 可通过玩家id或者队伍id请求加入，优先判断玩家id
         * @param 玩家id
         * @param 队伍id
         *
         * sendReqJoinGroupMessage  101007
         */
        GroupModel.prototype.send7 = function (rid, groupId, s) {
            var output = this.getO();
            output.writeLong(rid);
            output.writeLong(groupId);
            this.send(101007 /* GroupModelCMD.CMDReqJoinGroupMessage */, output, s);
        };
        /**
         *
         * 接受组队申请
         * @param 接受或拒绝组队申请，1为接受，2为拒绝
         * @param 接受申请玩家id
         *
         * sendReqAcceptTeamApplicationMessage  101008
         */
        GroupModel.prototype.send8 = function (state, rid, s) {
            var output = this.getO();
            output.writeVarInt(state, false);
            output.writeLong(rid);
            this.send(101008 /* GroupModelCMD.CMDReqAcceptTeamApplicationMessage */, output, s);
        };
        /**
         *
         * 请求邀请玩家
         * @param 被邀请玩家id
         *
         * sendReqInvitationPlayerMessage  101009
         */
        GroupModel.prototype.send9 = function (rid, s) {
            var output = this.getO();
            output.writeLong(rid);
            this.send(101009 /* GroupModelCMD.CMDReqInvitationPlayerMessage */, output, s);
        };
        /**
         *
         * 玩家接受邀请
         * @param 接受或拒绝组队邀请，1为接受，2为拒绝
         * @param 接受队伍id
         *
         * sendReqAcceptInvitationMessage  101010
         */
        GroupModel.prototype.send10 = function (state, groupId, s) {
            var output = this.getO();
            output.writeVarInt(state, false);
            output.writeLong(groupId);
            this.send(101010 /* GroupModelCMD.CMDReqAcceptInvitationMessage */, output, s);
        };
        /**
         *
         * 请求自己队伍信息
         *
         * sendReqGroupInfoMessage  101012
         */
        GroupModel.prototype.send12 = function (s) {
            var output = this.getO();
            this.send(101012 /* GroupModelCMD.CMDReqGroupInfoMessage */, output, s);
        };
        /**
         *
         * 获取队友坐标
         *
         * sendReqGroupPointMessage  101109
         */
        GroupModel.prototype.send109 = function (s) {
            var output = this.getO();
            this.send(101109 /* GroupModelCMD.CMDReqGroupPointMessage */, output, s);
        };
        /**
         *
         * 请求组队设置
         *
         * sendReqTeamSettingsMessage  101111
         */
        GroupModel.prototype.send111 = function (s) {
            var output = this.getO();
            this.send(101111 /* GroupModelCMD.CMDReqTeamSettingsMessage */, output, s);
        };
        /**
         *
         * 请求修改队伍设置
         * @param 是否允许组队
         *
         * sendReqChangeTeamSettingMessage  101112
         */
        GroupModel.prototype.send112 = function (allowed, s) {
            var output = this.getO();
            output.writeVarInt(allowed, false);
            this.send(101112 /* GroupModelCMD.CMDReqChangeTeamSettingMessage */, output, s);
        };
        GroupModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 101101 /* GroupModelCMD.CMDResPlayerNearbyApplicationListInfoMessage */:
                    var groupBeansLength1 = input.readShort();
                    var resPlayerNearbyApplicationListInfoMessage = [];
                    for (var groupBeansi1 = 0; groupBeansi1 < groupBeansLength1; groupBeansi1++) {
                        if (input.readByte() != 0) {
                            var temp1025 = resPlayerNearbyApplicationListInfoMessage[groupBeansi1] = {}; //队伍列表
                            temp1025["groupId"] = input.readLong(); //队伍id
                            temp1025["unionName"] = input.readString(); //队长所在行会名字
                            temp1025["captainUid"] = input.readLong(); //队长id
                            temp1025["captainName"] = input.readString(); //队长名字
                            temp1025["number"] = input.readVarInt(false); //队伍目前人数
                        }
                        else {
                            resPlayerNearbyApplicationListInfoMessage[groupBeansi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resPlayerNearbyApplicationListInfoMessage);
                    break;
                case 101102 /* GroupModelCMD.CMDResGroupDetailedInfoMessage */:
                    var resGroupDetailedInfoMessage = {};
                    var playerBeansLength1 = input.readShort();
                    resGroupDetailedInfoMessage["playerBeans"] = [];
                    for (var playerBeansi1 = 0; playerBeansi1 < playerBeansLength1; playerBeansi1++) {
                        if (input.readByte() != 0) {
                            var temp1026 = resGroupDetailedInfoMessage["playerBeans"][playerBeansi1] = {}; //队伍内玩家详细信息
                            var basicPlayerBeanLength1 = input.readByte();
                            if (basicPlayerBeanLength1 != 0) {
                                var temp1027 = temp1026["basicPlayerBean"] = {}; //基本属性
                                temp1027["rid"] = input.readLong(); //玩家rid
                                temp1027["playerName"] = input.readString(); //玩家名称
                                temp1027["level"] = input.readVarInt(false); //玩家等级
                                temp1027["carerr"] = input.readVarInt(false); //职业
                                temp1027["sex"] = input.readVarInt(false); //性别
                            }
                            temp1026["unionName"] = input.readString(); //玩家行会名字
                            temp1026["weaponItemId"] = input.readVarInt(false); //武器itemId
                            temp1026["clothItemId"] = input.readVarInt(false); //衣服itemId
                            temp1026["weaponFashionId"] = input.readVarInt(false); //武器时装id
                            temp1026["clothFashionId"] = input.readVarInt(false); //衣服时装id
                            temp1026["curMap"] = input.readString(); //当前所在地图
                        }
                        else {
                            resGroupDetailedInfoMessage["playerBeans"][playerBeansi1] = null;
                        }
                    }
                    var groupBeanLength1 = input.readByte();
                    if (groupBeanLength1 != 0) {
                        var temp1028 = resGroupDetailedInfoMessage["groupBean"] = {}; //本队伍信息
                        temp1028["groupId"] = input.readLong(); //队伍id
                        temp1028["unionName"] = input.readString(); //队长所在行会名字
                        temp1028["captainUid"] = input.readLong(); //队长id
                        temp1028["captainName"] = input.readString(); //队长名字
                        temp1028["number"] = input.readVarInt(false); //队伍目前人数
                    }
                    resGroupDetailedInfoMessage["autoCondition"] = input.readVarInt(false); //自动加入条件
                    this.sendNotif(cmd, resGroupDetailedInfoMessage);
                    break;
                case 101103 /* GroupModelCMD.CMDResGroupApplicationListInfoMessage */:
                    var playerBeansLength2 = input.readShort();
                    var resGroupApplicationListInfoMessage = [];
                    for (var playerBeansi2 = 0; playerBeansi2 < playerBeansLength2; playerBeansi2++) {
                        if (input.readByte() != 0) {
                            var temp1029 = resGroupApplicationListInfoMessage[playerBeansi2] = {}; //申请列表中玩家详情
                            var basicPlayerBeanLength2 = input.readByte();
                            if (basicPlayerBeanLength2 != 0) {
                                var temp1030 = temp1029["basicPlayerBean"] = {}; //基本属性
                                temp1030["rid"] = input.readLong(); //玩家rid
                                temp1030["playerName"] = input.readString(); //玩家名称
                                temp1030["level"] = input.readVarInt(false); //玩家等级
                                temp1030["carerr"] = input.readVarInt(false); //职业
                                temp1030["sex"] = input.readVarInt(false); //性别
                            }
                            temp1029["unionName"] = input.readString(); //玩家行会名字
                            temp1029["weaponItemId"] = input.readVarInt(false); //武器itemId
                            temp1029["clothItemId"] = input.readVarInt(false); //衣服itemId
                            temp1029["weaponFashionId"] = input.readVarInt(false); //武器时装id
                            temp1029["clothFashionId"] = input.readVarInt(false); //衣服时装id
                            temp1029["curMap"] = input.readString(); //当前所在地图
                        }
                        else {
                            resGroupApplicationListInfoMessage[playerBeansi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resGroupApplicationListInfoMessage);
                    break;
                case 101104 /* GroupModelCMD.CMDResPlayerGroupChangeMessage */:
                    var resPlayerGroupChangeMessage = {};
                    resPlayerGroupChangeMessage["rid"] = input.readLong(); //改变队伍玩家rid
                    resPlayerGroupChangeMessage["groupId"] = input.readLong(); //玩家队伍id
                    this.sendNotif(cmd, resPlayerGroupChangeMessage);
                    break;
                case 101105 /* GroupModelCMD.CMDResInvitedMessage */:
                    var resInvitedMessage = {};
                    var inviterLength1 = input.readByte();
                    if (inviterLength1 != 0) {
                        var temp1031 = resInvitedMessage["inviter"] = {}; //邀请者信息
                        temp1031["rid"] = input.readLong(); //玩家rid
                        temp1031["playerName"] = input.readString(); //玩家名称
                        temp1031["level"] = input.readVarInt(false); //玩家等级
                        temp1031["carerr"] = input.readVarInt(false); //职业
                        temp1031["sex"] = input.readVarInt(false); //性别
                    }
                    resInvitedMessage["groupId"] = input.readLong(); //队伍id
                    resInvitedMessage["endTime"] = input.readVarInt(false); //接受结束时间，时间戳
                    this.sendNotif(cmd, resInvitedMessage);
                    break;
                case 101106 /* GroupModelCMD.CMDResAppliedListMessage */:
                    var appliedLength1 = input.readShort();
                    var resAppliedListMessage = [];
                    for (var appliedi1 = 0; appliedi1 < appliedLength1; appliedi1++) {
                        if (input.readByte() != 0) {
                            var temp1032 = resAppliedListMessage[appliedi1] = {}; //
                            temp1032["groupId"] = input.readLong(); //队伍uid
                            temp1032["expire"] = input.readVarInt(false); //过期时间
                        }
                        else {
                            resAppliedListMessage[appliedi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resAppliedListMessage);
                    break;
                case 101107 /* GroupModelCMD.CMDResInviteRoleInfoMessage */:
                    var resInviteRoleInfoMessage = {};
                    resInviteRoleInfoMessage["roleId"] = input.readLong(); //被邀请玩家id
                    resInviteRoleInfoMessage["endTime"] = input.readVarInt(false); //到期时间
                    this.sendNotif(cmd, resInviteRoleInfoMessage);
                    break;
                case 101108 /* GroupModelCMD.CMDResGroupHpMpChangedMessage */:
                    var resGroupHpMpChangedMessage = {};
                    resGroupHpMpChangedMessage["rid"] = input.readLong(); //
                    resGroupHpMpChangedMessage["hp"] = input.readLong(); //
                    resGroupHpMpChangedMessage["hpMax"] = input.readLong(); //
                    this.sendNotif(cmd, resGroupHpMpChangedMessage);
                    break;
                case 101110 /* GroupModelCMD.CMDResGroupPointMessage */:
                    var pointsLength1 = input.readShort();
                    var resGroupPointMessage = [];
                    for (var pointsi1 = 0; pointsi1 < pointsLength1; pointsi1++) {
                        if (input.readByte() != 0) {
                            var temp1033 = resGroupPointMessage[pointsi1] = {}; //
                            temp1033["rid"] = input.readLong(); //
                            temp1033["x"] = input.readVarInt(false); //
                            temp1033["y"] = input.readVarInt(false); //
                        }
                        else {
                            resGroupPointMessage[pointsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resGroupPointMessage);
                    break;
                case 101113 /* GroupModelCMD.CMDResTeamSettingsMessage */:
                    var resTeamSettingsMessage = input.readVarInt(false); //是否允许组队
                    this.sendNotif(cmd, resTeamSettingsMessage);
                    break;
            }
        };
        return GroupModel;
    }(ModelBase));
    net.GroupModel = GroupModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:183
     */
    var IdentifyModel = /** @class */ (function (_super) {
        __extends(IdentifyModel, _super);
        function IdentifyModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(183011 /* IdentifyModelCMD.CMDResIdentifyEquipMessage */);
            thisObj.reg(183012 /* IdentifyModelCMD.CMDResIdentifySaveMessage */);
            thisObj.reg(183014 /* IdentifyModelCMD.CMDResXiLianDecorateMessage */);
            return _this;
        }
        IdentifyModel.ins = function () {
            if (!this._ins)
                this._ins = new IdentifyModel();
            return this._ins;
        };
        /**
         *
         * 请求鉴定
         * @param 装备uid
         *
         * sendReqIdentifyEquipMessage  183001
         */
        IdentifyModel.prototype.send1 = function (uid, s) {
            var output = this.getO();
            output.writeLong(uid);
            this.send(183001 /* IdentifyModelCMD.CMDReqIdentifyEquipMessage */, output, s);
        };
        /**
         *
         * 请求保存鉴定结果
         * @param 装备uid
         *
         * sendReqIdentifySaveMessage  183002
         */
        IdentifyModel.prototype.send2 = function (uid, s) {
            var output = this.getO();
            output.writeLong(uid);
            this.send(183002 /* IdentifyModelCMD.CMDReqIdentifySaveMessage */, output, s);
        };
        /**
         *
         * 配饰洗练
         * @param 装备uid
         *
         * sendReqXiLianDecorateMessage  183013
         */
        IdentifyModel.prototype.send13 = function (uid, s) {
            var output = this.getO();
            output.writeLong(uid);
            this.send(183013 /* IdentifyModelCMD.CMDReqXiLianDecorateMessage */, output, s);
        };
        IdentifyModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 183011 /* IdentifyModelCMD.CMDResIdentifyEquipMessage */:
                    var resIdentifyEquipMessage = {};
                    resIdentifyEquipMessage["uid"] = input.readLong(); //装备uid
                    var attributesLength1 = input.readShort();
                    resIdentifyEquipMessage["attributes"] = [];
                    for (var attributesi1 = 0; attributesi1 < attributesLength1; attributesi1++) {
                        if (input.readByte() != 0) {
                            var temp764 = resIdentifyEquipMessage["attributes"][attributesi1] = {}; //本次鉴定结果
                            temp764["career"] = input.readVarInt(false); //职业限定
                            temp764["attributeType"] = input.readVarInt(false); //属性类型
                            temp764["attributeValue"] = input.readLong(); //属性值
                        }
                        else {
                            resIdentifyEquipMessage["attributes"][attributesi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resIdentifyEquipMessage);
                    break;
                case 183012 /* IdentifyModelCMD.CMDResIdentifySaveMessage */:
                    var resIdentifySaveMessage = input.readLong(); //装备uid
                    this.sendNotif(cmd, resIdentifySaveMessage);
                    break;
                case 183014 /* IdentifyModelCMD.CMDResXiLianDecorateMessage */:
                    var resXiLianDecorateMessage = {};
                    resXiLianDecorateMessage["uid"] = input.readLong(); //装备uid
                    var attributesLength2 = input.readShort();
                    resXiLianDecorateMessage["attributes"] = [];
                    for (var attributesi2 = 0; attributesi2 < attributesLength2; attributesi2++) {
                        if (input.readByte() != 0) {
                            var temp765 = resXiLianDecorateMessage["attributes"][attributesi2] = {}; //本次洗练结果
                            temp765["career"] = input.readVarInt(false); //职业限定
                            temp765["attributeType"] = input.readVarInt(false); //属性类型
                            temp765["attributeValue"] = input.readLong(); //属性值
                        }
                        else {
                            resXiLianDecorateMessage["attributes"][attributesi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resXiLianDecorateMessage);
                    break;
            }
        };
        return IdentifyModel;
    }(ModelBase));
    net.IdentifyModel = IdentifyModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:235
     */
    var ImageModel = /** @class */ (function (_super) {
        __extends(ImageModel, _super);
        function ImageModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(235002 /* ImageModelCMD.CMDResImageListMessage */);
            thisObj.reg(235005 /* ImageModelCMD.CMDResImageModeUpdateMessage */);
            thisObj.reg(235008 /* ImageModelCMD.CMDResImageStateUpdateMessage */);
            return _this;
        }
        ImageModel.ins = function () {
            if (!this._ins)
                this._ins = new ImageModel();
            return this._ins;
        };
        /**
         *
         *
         *
         * sendReqImageListMessage  235001
         */
        ImageModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(235001 /* ImageModelCMD.CMDReqImageListMessage */, output, s);
        };
        /**
         *
         *
         * @param
         * @param
         * @param 发型
         *
         * sendReqImageCreateMessage  235003
         */
        ImageModel.prototype.send3 = function (career, sex, hair, s) {
            var output = this.getO();
            output.writeVarInt(career, false);
            output.writeVarInt(sex, false);
            output.writeVarInt(hair, false);
            this.send(235003 /* ImageModelCMD.CMDReqImageCreateMessage */, output, s);
        };
        /**
         *
         * 修改元神战斗模式
         * @param 元神id
         * @param 战斗模式 0战斗 1休息
         *
         * sendReqImageSwitchModeMessage  235004
         */
        ImageModel.prototype.send4 = function (uid, mode, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(mode, false);
            this.send(235004 /* ImageModelCMD.CMDReqImageSwitchModeMessage */, output, s);
        };
        /**
         *
         * 指定元神锁定攻击目标
         * @param 元神id
         * @param 锁定目标id
         *
         * sendReqImageAttackLockMessage  235006
         */
        ImageModel.prototype.send6 = function (uid, target, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeLong(target);
            this.send(235006 /* ImageModelCMD.CMDReqImageAttackLockMessage */, output, s);
        };
        /**
         *
         * 修改元神出战状态
         * @param 元神id
         * @param 出战状态 0出战 1收回
         *
         * sendReqImageSwitchStateMessage  235007
         */
        ImageModel.prototype.send7 = function (uid, state, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(state, false);
            this.send(235007 /* ImageModelCMD.CMDReqImageSwitchStateMessage */, output, s);
        };
        ImageModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 235002 /* ImageModelCMD.CMDResImageListMessage */:
                    var imagesLength1 = input.readShort();
                    var resImageListMessage = [];
                    for (var imagesi1 = 0; imagesi1 < imagesLength1; imagesi1++) {
                        if (input.readByte() != 0) {
                            var temp633 = resImageListMessage[imagesi1] = {}; //
                            temp633["uid"] = input.readLong(); //唯一id
                            temp633["career"] = input.readVarInt(false); //
                            temp633["sex"] = input.readVarInt(false); //
                            temp633["hair"] = input.readVarInt(false); //发型
                            temp633["level"] = input.readVarInt(false); //
                            var attributeLength1 = input.readByte();
                            if (attributeLength1 != 0) {
                                var temp634 = temp633["attribute"] = {}; //
                                var attributeTypeLength1 = input.readShort();
                                temp634["attributeType"] = new Array(attributeTypeLength1);
                                for (var attributeTypei1 = 0; attributeTypei1 < attributeTypeLength1; attributeTypei1++) {
                                    temp634["attributeType"][attributeTypei1] = input.readVarInt(false); //属性类型
                                }
                                var attributeValueLength1 = input.readShort();
                                temp634["attributeValue"] = [];
                                for (var attributeValuei1 = 0; attributeValuei1 < attributeValueLength1; attributeValuei1++) {
                                    temp634["attributeValue"][attributeValuei1] = input.readLong(); //属性值
                                }
                            }
                            temp633["hp"] = input.readLong(); //
                            temp633["mp"] = input.readLong(); //
                            temp633["reliveTime"] = input.readLong(); //
                            temp633["mode"] = input.readVarInt(false); //战斗模式
                            temp633["state"] = input.readVarInt(false); //出战模式
                            temp633["available"] = input.readVarInt(false); //
                        }
                        else {
                            resImageListMessage[imagesi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resImageListMessage);
                    break;
                case 235005 /* ImageModelCMD.CMDResImageModeUpdateMessage */:
                    var resImageModeUpdateMessage = {};
                    resImageModeUpdateMessage["uid"] = input.readLong(); //元神id
                    resImageModeUpdateMessage["mode"] = input.readVarInt(false); //战斗模式 0战斗 1休息
                    this.sendNotif(cmd, resImageModeUpdateMessage);
                    break;
                case 235008 /* ImageModelCMD.CMDResImageStateUpdateMessage */:
                    var resImageStateUpdateMessage = {};
                    resImageStateUpdateMessage["uid"] = input.readLong(); //元神id
                    resImageStateUpdateMessage["state"] = input.readVarInt(false); //出战状态 0出战 1收回
                    resImageStateUpdateMessage["available"] = input.readVarInt(false); //下次可用时间 时间戳（冷却）
                    resImageStateUpdateMessage["cause"] = input.readVarInt(false); //原因 1死亡
                    this.sendNotif(cmd, resImageStateUpdateMessage);
                    break;
            }
        };
        return ImageModel;
    }(ModelBase));
    net.ImageModel = ImageModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:231
     */
    var IndustryModel = /** @class */ (function (_super) {
        __extends(IndustryModel, _super);
        function IndustryModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(231002 /* IndustryModelCMD.CMDResAdvanceIndustryInfoMessage */);
            return _this;
        }
        IndustryModel.ins = function () {
            if (!this._ins)
                this._ins = new IndustryModel();
            return this._ins;
        };
        /**
         *
         *
         *
         * sendReqAdvanceIndustryInfoMessage  231001
         */
        IndustryModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(231001 /* IndustryModelCMD.CMDReqAdvanceIndustryInfoMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqAdvanceIndustryUpgradeMessage  231003
         */
        IndustryModel.prototype.send3 = function (s) {
            var output = this.getO();
            this.send(231003 /* IndustryModelCMD.CMDReqAdvanceIndustryUpgradeMessage */, output, s);
        };
        /**
         *
         * 请求领奖
         * @param
         *
         * sendReqAdvanceIndustryAcquireMessage  231004
         */
        IndustryModel.prototype.send4 = function (grade, s) {
            var output = this.getO();
            output.writeVarInt(grade, false);
            this.send(231004 /* IndustryModelCMD.CMDReqAdvanceIndustryAcquireMessage */, output, s);
        };
        IndustryModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 231002 /* IndustryModelCMD.CMDResAdvanceIndustryInfoMessage */:
                    var resAdvanceIndustryInfoMessage = {};
                    resAdvanceIndustryInfoMessage["grade"] = input.readVarInt(false); //等阶
                    var levelLength1 = input.readShort();
                    resAdvanceIndustryInfoMessage["level"] = [];
                    for (var leveli1 = 0; leveli1 < levelLength1; leveli1++) {
                        if (input.readByte() != 0) {
                            var temp1297 = resAdvanceIndustryInfoMessage["level"][leveli1] = {}; //等级
                            temp1297["type"] = input.readVarInt(false); //类型
                            temp1297["level"] = input.readVarInt(false); //等级
                        }
                        else {
                            resAdvanceIndustryInfoMessage["level"][leveli1] = null;
                        }
                    }
                    var acquiredLength1 = input.readShort();
                    resAdvanceIndustryInfoMessage["acquired"] = new Array(acquiredLength1);
                    for (var acquiredi1 = 0; acquiredi1 < acquiredLength1; acquiredi1++) {
                        resAdvanceIndustryInfoMessage["acquired"][acquiredi1] = input.readVarInt(false); //已经领取的奖励
                    }
                    this.sendNotif(cmd, resAdvanceIndustryInfoMessage);
                    break;
            }
        };
        return IndustryModel;
    }(ModelBase));
    net.IndustryModel = IndustryModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:17
     */
    var InfuseModel = /** @class */ (function (_super) {
        __extends(InfuseModel, _super);
        function InfuseModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(17002 /* InfuseModelCMD.CMDResAdvanceInfuseInfoMessage */);
            thisObj.reg(17004 /* InfuseModelCMD.CMDResAdvanceInfuseUpgradeMessage */);
            return _this;
        }
        InfuseModel.ins = function () {
            if (!this._ins)
                this._ins = new InfuseModel();
            return this._ins;
        };
        /**
         *
         * 请求注魂信息
         * @param 对象id
         *
         * sendReqAdvanceInfuseInfoMessage  17001
         */
        InfuseModel.prototype.send1 = function (uid, s) {
            var output = this.getO();
            output.writeLong(uid);
            this.send(17001 /* InfuseModelCMD.CMDReqAdvanceInfuseInfoMessage */, output, s);
        };
        /**
         *
         * 请求升级
         * @param 对象id
         * @param slot
         *
         * sendReqAdvanceInfuseUpgradeMessage  17003
         */
        InfuseModel.prototype.send3 = function (uid, slot, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(slot, false);
            this.send(17003 /* InfuseModelCMD.CMDReqAdvanceInfuseUpgradeMessage */, output, s);
        };
        InfuseModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 17002 /* InfuseModelCMD.CMDResAdvanceInfuseInfoMessage */:
                    var resAdvanceInfuseInfoMessage = {};
                    resAdvanceInfuseInfoMessage["uid"] = input.readLong(); //对象id
                    var infusesLength1 = input.readShort();
                    resAdvanceInfuseInfoMessage["infuses"] = [];
                    for (var infusesi1 = 0; infusesi1 < infusesLength1; infusesi1++) {
                        if (input.readByte() != 0) {
                            var temp662 = resAdvanceInfuseInfoMessage["infuses"][infusesi1] = {}; //
                            temp662["slot"] = input.readVarInt(false); //slot
                            temp662["level"] = input.readVarInt(false); //level
                        }
                        else {
                            resAdvanceInfuseInfoMessage["infuses"][infusesi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resAdvanceInfuseInfoMessage);
                    break;
                case 17004 /* InfuseModelCMD.CMDResAdvanceInfuseUpgradeMessage */:
                    var resAdvanceInfuseUpgradeMessage = {};
                    resAdvanceInfuseUpgradeMessage["uid"] = input.readLong(); //对象id
                    var infuseLength1 = input.readByte();
                    if (infuseLength1 != 0) {
                        var temp663 = resAdvanceInfuseUpgradeMessage["infuse"] = {}; //
                        temp663["slot"] = input.readVarInt(false); //slot
                        temp663["level"] = input.readVarInt(false); //level
                    }
                    this.sendNotif(cmd, resAdvanceInfuseUpgradeMessage);
                    break;
            }
        };
        return InfuseModel;
    }(ModelBase));
    net.InfuseModel = InfuseModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:223
     */
    var InscriptionModel = /** @class */ (function (_super) {
        __extends(InscriptionModel, _super);
        function InscriptionModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(223002 /* InscriptionModelCMD.CMDResAdvanceInscriptionInfoMessage */);
            thisObj.reg(223003 /* InscriptionModelCMD.CMDResAdvanceInscriptionUpdateMessage */);
            return _this;
        }
        InscriptionModel.ins = function () {
            if (!this._ins)
                this._ins = new InscriptionModel();
            return this._ins;
        };
        /**
         *
         * 请求铭刻信息
         *
         * sendReqAdvanceInscriptionInfoMessage  223001
         */
        InscriptionModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(223001 /* InscriptionModelCMD.CMDReqAdvanceInscriptionInfoMessage */, output, s);
        };
        /**
         *
         * 升级
         * @param
         *
         * sendReqAdvanceInscriptionUpgradeMessage  223004
         */
        InscriptionModel.prototype.send4 = function (slot, s) {
            var output = this.getO();
            output.writeVarInt(slot, false);
            this.send(223004 /* InscriptionModelCMD.CMDReqAdvanceInscriptionUpgradeMessage */, output, s);
        };
        /**
         *
         * 签名
         * @param
         * @param
         *
         * sendReqAdvanceInscriptionSignMessage  223005
         */
        InscriptionModel.prototype.send5 = function (equipId, sign, s) {
            var output = this.getO();
            output.writeLong(equipId);
            output.writeString(sign);
            this.send(223005 /* InscriptionModelCMD.CMDReqAdvanceInscriptionSignMessage */, output, s);
        };
        InscriptionModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 223002 /* InscriptionModelCMD.CMDResAdvanceInscriptionInfoMessage */:
                    var inscriptionsLength1 = input.readShort();
                    var resAdvanceInscriptionInfoMessage = [];
                    for (var inscriptionsi1 = 0; inscriptionsi1 < inscriptionsLength1; inscriptionsi1++) {
                        if (input.readByte() != 0) {
                            var temp1183 = resAdvanceInscriptionInfoMessage[inscriptionsi1] = {}; //
                            temp1183["slot"] = input.readVarInt(false); //部位
                            temp1183["level"] = input.readVarInt(false); //等级
                            temp1183["sign"] = input.readString(); //签名
                        }
                        else {
                            resAdvanceInscriptionInfoMessage[inscriptionsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resAdvanceInscriptionInfoMessage);
                    break;
                case 223003 /* InscriptionModelCMD.CMDResAdvanceInscriptionUpdateMessage */:
                    var inscriptionLength1 = input.readByte();
                    if (inscriptionLength1 != 0) {
                        var resAdvanceInscriptionUpdateMessage = {}; //
                        resAdvanceInscriptionUpdateMessage["slot"] = input.readVarInt(false); //部位
                        resAdvanceInscriptionUpdateMessage["level"] = input.readVarInt(false); //等级
                        resAdvanceInscriptionUpdateMessage["sign"] = input.readString(); //签名
                    }
                    this.sendNotif(cmd, resAdvanceInscriptionUpdateMessage);
                    break;
            }
        };
        return InscriptionModel;
    }(ModelBase));
    net.InscriptionModel = InscriptionModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:324
     */
    var MagicShieldModel = /** @class */ (function (_super) {
        __extends(MagicShieldModel, _super);
        function MagicShieldModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(324002 /* MagicShieldModelCMD.CMDResMagicShieldInfoMessage */);
            thisObj.reg(324004 /* MagicShieldModelCMD.CMDResActiveMagicShieldMessage */);
            return _this;
        }
        MagicShieldModel.ins = function () {
            if (!this._ins)
                this._ins = new MagicShieldModel();
            return this._ins;
        };
        /**
         *
         * 请求魔盾信息
         * @param uid
         *
         * sendReqMagicShieldInfoMessage  324001
         */
        MagicShieldModel.prototype.send1 = function (uid, s) {
            var output = this.getO();
            output.writeLong(uid);
            this.send(324001 /* MagicShieldModelCMD.CMDReqMagicShieldInfoMessage */, output, s);
        };
        /**
         *
         * 请求激活
         * @param uid
         * @param 配置id
         *
         * sendReqActiveMagicShieldMessage  324003
         */
        MagicShieldModel.prototype.send3 = function (uid, cfgId, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(cfgId, false);
            this.send(324003 /* MagicShieldModelCMD.CMDReqActiveMagicShieldMessage */, output, s);
        };
        MagicShieldModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 324002 /* MagicShieldModelCMD.CMDResMagicShieldInfoMessage */:
                    var resMagicShieldInfoMessage = {};
                    resMagicShieldInfoMessage["uid"] = input.readLong(); //uid
                    var cfgIdsLength1 = input.readShort();
                    resMagicShieldInfoMessage["cfgIds"] = new Array(cfgIdsLength1);
                    for (var cfgIdsi1 = 0; cfgIdsi1 < cfgIdsLength1; cfgIdsi1++) {
                        resMagicShieldInfoMessage["cfgIds"][cfgIdsi1] = input.readVarInt(false); //
                    }
                    this.sendNotif(cmd, resMagicShieldInfoMessage);
                    break;
                case 324004 /* MagicShieldModelCMD.CMDResActiveMagicShieldMessage */:
                    var resActiveMagicShieldMessage = {};
                    resActiveMagicShieldMessage["uid"] = input.readLong(); //uid
                    resActiveMagicShieldMessage["cfgId"] = input.readVarInt(false); //被激活id
                    this.sendNotif(cmd, resActiveMagicShieldMessage);
                    break;
            }
        };
        return MagicShieldModel;
    }(ModelBase));
    net.MagicShieldModel = MagicShieldModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:36
     */
    var MailModel = /** @class */ (function (_super) {
        __extends(MailModel, _super);
        function MailModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(36011 /* MailModelCMD.CMDResGetMailListMessage */);
            thisObj.reg(36012 /* MailModelCMD.CMDResMailChangesMessage */);
            return _this;
        }
        MailModel.ins = function () {
            if (!this._ins)
                this._ins = new MailModel();
            return this._ins;
        };
        /**
         *
         * 请求所有邮件
         *
         * sendReqGetMailListMessage  36001
         */
        MailModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(36001 /* MailModelCMD.CMDReqGetMailListMessage */, output, s);
        };
        /**
         *
         * 标记已读邮件
         *
         * sendReqReadMailMessage  36002
         */
        MailModel.prototype.send2 = function (mails, s) {
            var output = this.getO();
            output.writeShort(mails.length);
            for (var mailsi1 = 0; mailsi1 < mails.length; mailsi1++) {
                output.writeLong(mails[mailsi1]);
            }
            this.send(36002 /* MailModelCMD.CMDReqReadMailMessage */, output, s);
        };
        /**
         *
         * 领取附件
         *
         * sendReqTakeMailMessage  36003
         */
        MailModel.prototype.send3 = function (mails, s) {
            var output = this.getO();
            output.writeShort(mails.length);
            for (var mailsi2 = 0; mailsi2 < mails.length; mailsi2++) {
                output.writeLong(mails[mailsi2]);
            }
            this.send(36003 /* MailModelCMD.CMDReqTakeMailMessage */, output, s);
        };
        /**
         *
         * 删除邮件
         *
         * sendReqDeleteMailMessage  36004
         */
        MailModel.prototype.send4 = function (mails, s) {
            var output = this.getO();
            output.writeShort(mails.length);
            for (var mailsi3 = 0; mailsi3 < mails.length; mailsi3++) {
                output.writeLong(mails[mailsi3]);
            }
            this.send(36004 /* MailModelCMD.CMDReqDeleteMailMessage */, output, s);
        };
        MailModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 36011 /* MailModelCMD.CMDResGetMailListMessage */:
                    var mailsLength1 = input.readShort();
                    var resGetMailListMessage = [];
                    for (var mailsi1 = 0; mailsi1 < mailsLength1; mailsi1++) {
                        if (input.readByte() != 0) {
                            var temp29 = resGetMailListMessage[mailsi1] = {}; //
                            temp29["mailId"] = input.readLong(); //邮件的id
                            temp29["sendTime"] = input.readVarInt(false); //邮件发送时间
                            temp29["sender"] = input.readString(); //发送者
                            temp29["title"] = input.readString(); //邮件标题
                            temp29["content"] = input.readString(); //邮件内容
                            var attachmentLength1 = input.readShort();
                            temp29["attachment"] = [];
                            for (var attachmenti1 = 0; attachmenti1 < attachmentLength1; attachmenti1++) {
                                if (input.readByte() != 0) {
                                    var temp30 = temp29["attachment"][attachmenti1] = {}; //附件
                                    temp30["uid"] = input.readLong(); //唯一id
                                    temp30["itemId"] = input.readVarInt(false); //道具配置id
                                    temp30["count"] = input.readVarInt(false); //数量
                                    temp30["expire"] = input.readVarInt(false); //过期时间
                                    temp30["uTimes"] = input.readVarInt(false); //已经使用的次数
                                    temp30["time"] = input.readVarInt(false); //道具获得时间
                                    var paramsLength1 = input.readShort();
                                    temp30["params"] = new Array(paramsLength1);
                                    for (var paramsi1 = 0; paramsi1 < paramsLength1; paramsi1++) {
                                        temp30["params"][paramsi1] = input.readVarInt(false); //道具参数
                                    }
                                    var equipDataLength1 = input.readByte();
                                    if (equipDataLength1 != 0) {
                                        var temp31 = temp30["equipData"] = {}; //装备属性（null表示没有）
                                        temp31["durable"] = input.readVarInt(false); //消耗耐久
                                        temp31["starLevel"] = input.readVarInt(false); //升星等级
                                        temp31["starLock"] = input.readVarInt(false); //被锁星级
                                        temp31["starExp"] = input.readVarInt(false); //升星祝福值
                                        temp31["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                        temp31["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                        temp31["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                        temp31["spiritLevel"] = input.readVarInt(false); //注灵等级
                                        temp31["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                        temp31["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                        temp31["sign"] = input.readString(); //签名
                                        var destinyAttrsLength1 = input.readShort();
                                        temp31["destinyAttrs"] = [];
                                        for (var destinyAttrsi1 = 0; destinyAttrsi1 < destinyAttrsLength1; destinyAttrsi1++) {
                                            if (input.readByte() != 0) {
                                                var temp32 = temp31["destinyAttrs"][destinyAttrsi1] = {}; //命运属性
                                                temp32["career"] = input.readVarInt(false); //职业限定
                                                temp32["attributeType"] = input.readVarInt(false); //属性类型
                                                temp32["attributeValue"] = input.readLong(); //属性值
                                            }
                                            else {
                                                temp31["destinyAttrs"][destinyAttrsi1] = null;
                                            }
                                        }
                                        var superAttrsLength1 = input.readShort();
                                        temp31["superAttrs"] = [];
                                        for (var superAttrsi1 = 0; superAttrsi1 < superAttrsLength1; superAttrsi1++) {
                                            if (input.readByte() != 0) {
                                                var temp33 = temp31["superAttrs"][superAttrsi1] = {}; //极品属性
                                                temp33["career"] = input.readVarInt(false); //职业限定
                                                temp33["attributeType"] = input.readVarInt(false); //属性类型
                                                temp33["attributeValue"] = input.readLong(); //属性值
                                            }
                                            else {
                                                temp31["superAttrs"][superAttrsi1] = null;
                                            }
                                        }
                                        var identifyAttrsLength1 = input.readShort();
                                        temp31["identifyAttrs"] = [];
                                        for (var identifyAttrsi1 = 0; identifyAttrsi1 < identifyAttrsLength1; identifyAttrsi1++) {
                                            if (input.readByte() != 0) {
                                                var temp34 = temp31["identifyAttrs"][identifyAttrsi1] = {}; //鉴定属性
                                                temp34["career"] = input.readVarInt(false); //职业限定
                                                temp34["attributeType"] = input.readVarInt(false); //属性类型
                                                temp34["attributeValue"] = input.readLong(); //属性值
                                            }
                                            else {
                                                temp31["identifyAttrs"][identifyAttrsi1] = null;
                                            }
                                        }
                                        var xiLianAttrsLength1 = input.readShort();
                                        temp31["xiLianAttrs"] = [];
                                        for (var xiLianAttrsi1 = 0; xiLianAttrsi1 < xiLianAttrsLength1; xiLianAttrsi1++) {
                                            if (input.readByte() != 0) {
                                                var temp35 = temp31["xiLianAttrs"][xiLianAttrsi1] = {}; //配饰洗练属性
                                                temp35["career"] = input.readVarInt(false); //职业限定
                                                temp35["attributeType"] = input.readVarInt(false); //属性类型
                                                temp35["attributeValue"] = input.readLong(); //属性值
                                            }
                                            else {
                                                temp31["xiLianAttrs"][xiLianAttrsi1] = null;
                                            }
                                        }
                                        temp31["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                        temp31["growLevel"] = input.readVarInt(false); //成长等级
                                        temp31["growExp"] = input.readVarInt(false); //成长经验
                                        var bestAttrsLength1 = input.readShort();
                                        temp31["bestAttrs"] = new Array(bestAttrsLength1);
                                        for (var bestAttrsi1 = 0; bestAttrsi1 < bestAttrsLength1; bestAttrsi1++) {
                                            temp31["bestAttrs"][bestAttrsi1] = input.readVarInt(false); //极品属性（新）
                                        }
                                        var soulAttrsLength1 = input.readShort();
                                        temp31["soulAttrs"] = new Array(soulAttrsLength1);
                                        for (var soulAttrsi1 = 0; soulAttrsi1 < soulAttrsLength1; soulAttrsi1++) {
                                            temp31["soulAttrs"][soulAttrsi1] = input.readVarInt(false); //心魂属性
                                        }
                                        var godsAttrsLength1 = input.readShort();
                                        temp31["godsAttrs"] = new Array(godsAttrsLength1);
                                        for (var godsAttrsi1 = 0; godsAttrsi1 < godsAttrsLength1; godsAttrsi1++) {
                                            temp31["godsAttrs"][godsAttrsi1] = input.readVarInt(false); //额外神级属性
                                        }
                                        temp31["qualification"] = input.readVarInt(false); //资质
                                        var specialDurableLength1 = input.readShort();
                                        temp31["specialDurable"] = [];
                                        for (var specialDurablei1 = 0; specialDurablei1 < specialDurableLength1; specialDurablei1++) {
                                            if (input.readByte() != 0) {
                                                var temp36 = temp31["specialDurable"][specialDurablei1] = {}; //特殊耐久消耗值
                                                temp36["type"] = input.readVarInt(false); //类型
                                                temp36["value"] = input.readVarInt(false); //已消耗值
                                            }
                                            else {
                                                temp31["specialDurable"][specialDurablei1] = null;
                                            }
                                        }
                                    }
                                    var immobilizationLength1 = input.readByte();
                                    if (immobilizationLength1 != 0) {
                                        var temp37 = temp30["immobilization"] = {}; //固化数据
                                        temp37["action"] = input.readVarInt(false); //产生行为
                                        temp37["expire"] = input.readVarInt(false); //过期时间 时间戳
                                    }
                                    var fromLength1 = input.readByte();
                                    if (fromLength1 != 0) {
                                        var temp38 = temp30["from"] = {}; //来源
                                        temp38["action"] = input.readVarInt(false); //产生行为
                                        temp38["firstRole"] = input.readLong(); //第一个玩家id
                                        temp38["firstRoleName"] = input.readString(); //第一个玩家名字
                                        var paramsLength2 = input.readShort();
                                        temp38["params"] = [];
                                        for (var paramsi2 = 0; paramsi2 < paramsLength2; paramsi2++) {
                                            if (input.readByte() != 0) {
                                                var temp39 = temp38["params"][paramsi2] = {}; //
                                                temp39["key"] = input.readVarInt(false); //
                                                temp39["value"] = input.readString(); //
                                            }
                                            else {
                                                temp38["params"][paramsi2] = null;
                                            }
                                        }
                                    }
                                    temp30["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                                    var spriteDataLength1 = input.readByte();
                                    if (spriteDataLength1 != 0) {
                                        var temp40 = temp30["spriteData"] = {}; //灵兽数据（null表示没有）
                                        temp40["level"] = input.readVarInt(false); //灵兽等级
                                        temp40["exp"] = input.readVarInt(false); //灵兽经验
                                        temp40["skin"] = input.readVarInt(false); //灵兽皮肤
                                        var skillsLength1 = input.readShort();
                                        temp40["skills"] = [];
                                        for (var skillsi1 = 0; skillsi1 < skillsLength1; skillsi1++) {
                                            if (input.readByte() != 0) {
                                                var temp41 = temp40["skills"][skillsi1] = {}; //灵兽出战技能
                                                temp41["id"] = input.readVarInt(false); //
                                                temp41["value"] = input.readVarInt(false); //
                                            }
                                            else {
                                                temp40["skills"][skillsi1] = null;
                                            }
                                        }
                                        var ownerSkillsLength1 = input.readShort();
                                        temp40["ownerSkills"] = [];
                                        for (var ownerSkillsi1 = 0; ownerSkillsi1 < ownerSkillsLength1; ownerSkillsi1++) {
                                            if (input.readByte() != 0) {
                                                var temp42 = temp40["ownerSkills"][ownerSkillsi1] = {}; //灵兽拥有的技能
                                                temp42["id"] = input.readVarInt(false); //
                                                temp42["value"] = input.readVarInt(false); //
                                            }
                                            else {
                                                temp40["ownerSkills"][ownerSkillsi1] = null;
                                            }
                                        }
                                        var ownerSkinsLength1 = input.readShort();
                                        temp40["ownerSkins"] = [];
                                        for (var ownerSkinsi1 = 0; ownerSkinsi1 < ownerSkinsLength1; ownerSkinsi1++) {
                                            if (input.readByte() != 0) {
                                                var temp43 = temp40["ownerSkins"][ownerSkinsi1] = {}; //灵兽拥有的皮肤
                                                temp43["id"] = input.readVarInt(false); //
                                                temp43["value"] = input.readVarInt(false); //
                                            }
                                            else {
                                                temp40["ownerSkins"][ownerSkinsi1] = null;
                                            }
                                        }
                                        var absorbExpLength1 = input.readShort();
                                        temp40["absorbExp"] = [];
                                        for (var absorbExpi1 = 0; absorbExpi1 < absorbExpLength1; absorbExpi1++) {
                                            if (input.readByte() != 0) {
                                                var temp44 = temp40["absorbExp"][absorbExpi1] = {}; //灵兽吸收经验值
                                                temp44["id"] = input.readVarInt(false); //
                                                temp44["value"] = input.readVarInt(false); //
                                            }
                                            else {
                                                temp40["absorbExp"][absorbExpi1] = null;
                                            }
                                        }
                                    }
                                }
                                else {
                                    temp29["attachment"][attachmenti1] = null;
                                }
                            }
                            temp29["state"] = input.readVarInt(false); //邮件状态0未读 1 已读 2 已提取 3已删除
                        }
                        else {
                            resGetMailListMessage[mailsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resGetMailListMessage);
                    break;
                case 36012 /* MailModelCMD.CMDResMailChangesMessage */:
                    var mailsLength2 = input.readShort();
                    var resMailChangesMessage = [];
                    for (var mailsi2 = 0; mailsi2 < mailsLength2; mailsi2++) {
                        if (input.readByte() != 0) {
                            var temp45 = resMailChangesMessage[mailsi2] = {}; //
                            temp45["mailId"] = input.readLong(); //邮件的id
                            temp45["sendTime"] = input.readVarInt(false); //邮件发送时间
                            temp45["sender"] = input.readString(); //发送者
                            temp45["title"] = input.readString(); //邮件标题
                            temp45["content"] = input.readString(); //邮件内容
                            var attachmentLength2 = input.readShort();
                            temp45["attachment"] = [];
                            for (var attachmenti2 = 0; attachmenti2 < attachmentLength2; attachmenti2++) {
                                if (input.readByte() != 0) {
                                    var temp46 = temp45["attachment"][attachmenti2] = {}; //附件
                                    temp46["uid"] = input.readLong(); //唯一id
                                    temp46["itemId"] = input.readVarInt(false); //道具配置id
                                    temp46["count"] = input.readVarInt(false); //数量
                                    temp46["expire"] = input.readVarInt(false); //过期时间
                                    temp46["uTimes"] = input.readVarInt(false); //已经使用的次数
                                    temp46["time"] = input.readVarInt(false); //道具获得时间
                                    var paramsLength3 = input.readShort();
                                    temp46["params"] = new Array(paramsLength3);
                                    for (var paramsi3 = 0; paramsi3 < paramsLength3; paramsi3++) {
                                        temp46["params"][paramsi3] = input.readVarInt(false); //道具参数
                                    }
                                    var equipDataLength2 = input.readByte();
                                    if (equipDataLength2 != 0) {
                                        var temp47 = temp46["equipData"] = {}; //装备属性（null表示没有）
                                        temp47["durable"] = input.readVarInt(false); //消耗耐久
                                        temp47["starLevel"] = input.readVarInt(false); //升星等级
                                        temp47["starLock"] = input.readVarInt(false); //被锁星级
                                        temp47["starExp"] = input.readVarInt(false); //升星祝福值
                                        temp47["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                        temp47["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                        temp47["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                        temp47["spiritLevel"] = input.readVarInt(false); //注灵等级
                                        temp47["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                        temp47["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                        temp47["sign"] = input.readString(); //签名
                                        var destinyAttrsLength2 = input.readShort();
                                        temp47["destinyAttrs"] = [];
                                        for (var destinyAttrsi2 = 0; destinyAttrsi2 < destinyAttrsLength2; destinyAttrsi2++) {
                                            if (input.readByte() != 0) {
                                                var temp48 = temp47["destinyAttrs"][destinyAttrsi2] = {}; //命运属性
                                                temp48["career"] = input.readVarInt(false); //职业限定
                                                temp48["attributeType"] = input.readVarInt(false); //属性类型
                                                temp48["attributeValue"] = input.readLong(); //属性值
                                            }
                                            else {
                                                temp47["destinyAttrs"][destinyAttrsi2] = null;
                                            }
                                        }
                                        var superAttrsLength2 = input.readShort();
                                        temp47["superAttrs"] = [];
                                        for (var superAttrsi2 = 0; superAttrsi2 < superAttrsLength2; superAttrsi2++) {
                                            if (input.readByte() != 0) {
                                                var temp49 = temp47["superAttrs"][superAttrsi2] = {}; //极品属性
                                                temp49["career"] = input.readVarInt(false); //职业限定
                                                temp49["attributeType"] = input.readVarInt(false); //属性类型
                                                temp49["attributeValue"] = input.readLong(); //属性值
                                            }
                                            else {
                                                temp47["superAttrs"][superAttrsi2] = null;
                                            }
                                        }
                                        var identifyAttrsLength2 = input.readShort();
                                        temp47["identifyAttrs"] = [];
                                        for (var identifyAttrsi2 = 0; identifyAttrsi2 < identifyAttrsLength2; identifyAttrsi2++) {
                                            if (input.readByte() != 0) {
                                                var temp50 = temp47["identifyAttrs"][identifyAttrsi2] = {}; //鉴定属性
                                                temp50["career"] = input.readVarInt(false); //职业限定
                                                temp50["attributeType"] = input.readVarInt(false); //属性类型
                                                temp50["attributeValue"] = input.readLong(); //属性值
                                            }
                                            else {
                                                temp47["identifyAttrs"][identifyAttrsi2] = null;
                                            }
                                        }
                                        var xiLianAttrsLength2 = input.readShort();
                                        temp47["xiLianAttrs"] = [];
                                        for (var xiLianAttrsi2 = 0; xiLianAttrsi2 < xiLianAttrsLength2; xiLianAttrsi2++) {
                                            if (input.readByte() != 0) {
                                                var temp51 = temp47["xiLianAttrs"][xiLianAttrsi2] = {}; //配饰洗练属性
                                                temp51["career"] = input.readVarInt(false); //职业限定
                                                temp51["attributeType"] = input.readVarInt(false); //属性类型
                                                temp51["attributeValue"] = input.readLong(); //属性值
                                            }
                                            else {
                                                temp47["xiLianAttrs"][xiLianAttrsi2] = null;
                                            }
                                        }
                                        temp47["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                        temp47["growLevel"] = input.readVarInt(false); //成长等级
                                        temp47["growExp"] = input.readVarInt(false); //成长经验
                                        var bestAttrsLength2 = input.readShort();
                                        temp47["bestAttrs"] = new Array(bestAttrsLength2);
                                        for (var bestAttrsi2 = 0; bestAttrsi2 < bestAttrsLength2; bestAttrsi2++) {
                                            temp47["bestAttrs"][bestAttrsi2] = input.readVarInt(false); //极品属性（新）
                                        }
                                        var soulAttrsLength2 = input.readShort();
                                        temp47["soulAttrs"] = new Array(soulAttrsLength2);
                                        for (var soulAttrsi2 = 0; soulAttrsi2 < soulAttrsLength2; soulAttrsi2++) {
                                            temp47["soulAttrs"][soulAttrsi2] = input.readVarInt(false); //心魂属性
                                        }
                                        var godsAttrsLength2 = input.readShort();
                                        temp47["godsAttrs"] = new Array(godsAttrsLength2);
                                        for (var godsAttrsi2 = 0; godsAttrsi2 < godsAttrsLength2; godsAttrsi2++) {
                                            temp47["godsAttrs"][godsAttrsi2] = input.readVarInt(false); //额外神级属性
                                        }
                                        temp47["qualification"] = input.readVarInt(false); //资质
                                        var specialDurableLength2 = input.readShort();
                                        temp47["specialDurable"] = [];
                                        for (var specialDurablei2 = 0; specialDurablei2 < specialDurableLength2; specialDurablei2++) {
                                            if (input.readByte() != 0) {
                                                var temp52 = temp47["specialDurable"][specialDurablei2] = {}; //特殊耐久消耗值
                                                temp52["type"] = input.readVarInt(false); //类型
                                                temp52["value"] = input.readVarInt(false); //已消耗值
                                            }
                                            else {
                                                temp47["specialDurable"][specialDurablei2] = null;
                                            }
                                        }
                                    }
                                    var immobilizationLength2 = input.readByte();
                                    if (immobilizationLength2 != 0) {
                                        var temp53 = temp46["immobilization"] = {}; //固化数据
                                        temp53["action"] = input.readVarInt(false); //产生行为
                                        temp53["expire"] = input.readVarInt(false); //过期时间 时间戳
                                    }
                                    var fromLength2 = input.readByte();
                                    if (fromLength2 != 0) {
                                        var temp54 = temp46["from"] = {}; //来源
                                        temp54["action"] = input.readVarInt(false); //产生行为
                                        temp54["firstRole"] = input.readLong(); //第一个玩家id
                                        temp54["firstRoleName"] = input.readString(); //第一个玩家名字
                                        var paramsLength4 = input.readShort();
                                        temp54["params"] = [];
                                        for (var paramsi4 = 0; paramsi4 < paramsLength4; paramsi4++) {
                                            if (input.readByte() != 0) {
                                                var temp55 = temp54["params"][paramsi4] = {}; //
                                                temp55["key"] = input.readVarInt(false); //
                                                temp55["value"] = input.readString(); //
                                            }
                                            else {
                                                temp54["params"][paramsi4] = null;
                                            }
                                        }
                                    }
                                    temp46["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                                    var spriteDataLength2 = input.readByte();
                                    if (spriteDataLength2 != 0) {
                                        var temp56 = temp46["spriteData"] = {}; //灵兽数据（null表示没有）
                                        temp56["level"] = input.readVarInt(false); //灵兽等级
                                        temp56["exp"] = input.readVarInt(false); //灵兽经验
                                        temp56["skin"] = input.readVarInt(false); //灵兽皮肤
                                        var skillsLength2 = input.readShort();
                                        temp56["skills"] = [];
                                        for (var skillsi2 = 0; skillsi2 < skillsLength2; skillsi2++) {
                                            if (input.readByte() != 0) {
                                                var temp57 = temp56["skills"][skillsi2] = {}; //灵兽出战技能
                                                temp57["id"] = input.readVarInt(false); //
                                                temp57["value"] = input.readVarInt(false); //
                                            }
                                            else {
                                                temp56["skills"][skillsi2] = null;
                                            }
                                        }
                                        var ownerSkillsLength2 = input.readShort();
                                        temp56["ownerSkills"] = [];
                                        for (var ownerSkillsi2 = 0; ownerSkillsi2 < ownerSkillsLength2; ownerSkillsi2++) {
                                            if (input.readByte() != 0) {
                                                var temp58 = temp56["ownerSkills"][ownerSkillsi2] = {}; //灵兽拥有的技能
                                                temp58["id"] = input.readVarInt(false); //
                                                temp58["value"] = input.readVarInt(false); //
                                            }
                                            else {
                                                temp56["ownerSkills"][ownerSkillsi2] = null;
                                            }
                                        }
                                        var ownerSkinsLength2 = input.readShort();
                                        temp56["ownerSkins"] = [];
                                        for (var ownerSkinsi2 = 0; ownerSkinsi2 < ownerSkinsLength2; ownerSkinsi2++) {
                                            if (input.readByte() != 0) {
                                                var temp59 = temp56["ownerSkins"][ownerSkinsi2] = {}; //灵兽拥有的皮肤
                                                temp59["id"] = input.readVarInt(false); //
                                                temp59["value"] = input.readVarInt(false); //
                                            }
                                            else {
                                                temp56["ownerSkins"][ownerSkinsi2] = null;
                                            }
                                        }
                                        var absorbExpLength2 = input.readShort();
                                        temp56["absorbExp"] = [];
                                        for (var absorbExpi2 = 0; absorbExpi2 < absorbExpLength2; absorbExpi2++) {
                                            if (input.readByte() != 0) {
                                                var temp60 = temp56["absorbExp"][absorbExpi2] = {}; //灵兽吸收经验值
                                                temp60["id"] = input.readVarInt(false); //
                                                temp60["value"] = input.readVarInt(false); //
                                            }
                                            else {
                                                temp56["absorbExp"][absorbExpi2] = null;
                                            }
                                        }
                                    }
                                }
                                else {
                                    temp45["attachment"][attachmenti2] = null;
                                }
                            }
                            temp45["state"] = input.readVarInt(false); //邮件状态0未读 1 已读 2 已提取 3已删除
                        }
                        else {
                            resMailChangesMessage[mailsi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resMailChangesMessage);
                    break;
            }
        };
        return MailModel;
    }(ModelBase));
    net.MailModel = MailModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:179
     */
    var MaterialModel = /** @class */ (function (_super) {
        __extends(MaterialModel, _super);
        function MaterialModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(179001 /* MaterialModelCMD.CMDResMaterialMessage */);
            thisObj.reg(179003 /* MaterialModelCMD.CMDResGetMaterialRewardMessage */);
            thisObj.reg(179005 /* MaterialModelCMD.CMDResOpenMaterialInfoMessage */);
            thisObj.reg(179007 /* MaterialModelCMD.CMDResWantedInfoMessage */);
            return _this;
        }
        MaterialModel.ins = function () {
            if (!this._ins)
                this._ins = new MaterialModel();
            return this._ins;
        };
        /**
         *
         * 请求领取密令任务副本奖励
         * @param 类型 0:普通领取 1:双倍领取
         * @param 副本id
         *
         * sendReqGetMaterialRewardMessage  179002
         */
        MaterialModel.prototype.send2 = function (type, duplicateId, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            output.writeVarInt(duplicateId, false);
            this.send(179002 /* MaterialModelCMD.CMDReqGetMaterialRewardMessage */, output, s);
        };
        /**
         *
         * 请求密令任务副本面板
         *
         * sendReqOpenMaterialInfoMessage  179004
         */
        MaterialModel.prototype.send4 = function (s) {
            var output = this.getO();
            this.send(179004 /* MaterialModelCMD.CMDReqOpenMaterialInfoMessage */, output, s);
        };
        /**
         *
         * 请求通缉悬赏信息
         *
         * sendReqWantedInfoMessage  179006
         */
        MaterialModel.prototype.send6 = function (s) {
            var output = this.getO();
            this.send(179006 /* MaterialModelCMD.CMDReqWantedInfoMessage */, output, s);
        };
        /**
         *
         * 请求通缉悬赏领取奖励
         * @param 类型 0:普通领取 1:双倍领取
         * @param 副本id
         *
         * sendReqWantedGetRewardMessage  179008
         */
        MaterialModel.prototype.send8 = function (type, duplicateId, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            output.writeVarInt(duplicateId, false);
            this.send(179008 /* MaterialModelCMD.CMDReqWantedGetRewardMessage */, output, s);
        };
        /**
         *
         * 请求通缉悬赏接受任务
         * @param 副本id
         *
         * sendReqWantedTaskMessage  179009
         */
        MaterialModel.prototype.send9 = function (duplicateId, s) {
            var output = this.getO();
            output.writeVarInt(duplicateId, false);
            this.send(179009 /* MaterialModelCMD.CMDReqWantedTaskMessage */, output, s);
        };
        MaterialModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 179001 /* MaterialModelCMD.CMDResMaterialMessage */:
                    var resMaterialMessage = input.readVarInt(false); //副本id
                    this.sendNotif(cmd, resMaterialMessage);
                    break;
                case 179003 /* MaterialModelCMD.CMDResGetMaterialRewardMessage */:
                    var resGetMaterialRewardMessage = input.readVarInt(false); //0:成功 1:失败
                    this.sendNotif(cmd, resGetMaterialRewardMessage);
                    break;
                case 179005 /* MaterialModelCMD.CMDResOpenMaterialInfoMessage */:
                    var materialCountBeansLength1 = input.readShort();
                    var resOpenMaterialInfoMessage = [];
                    for (var materialCountBeansi1 = 0; materialCountBeansi1 < materialCountBeansLength1; materialCountBeansi1++) {
                        if (input.readByte() != 0) {
                            var temp811 = resOpenMaterialInfoMessage[materialCountBeansi1] = {}; //密令任务信息
                            temp811["mapId"] = input.readVarInt(false); //副本id
                            temp811["count"] = input.readVarInt(false); //剩余次数
                        }
                        else {
                            resOpenMaterialInfoMessage[materialCountBeansi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resOpenMaterialInfoMessage);
                    break;
                case 179007 /* MaterialModelCMD.CMDResWantedInfoMessage */:
                    var resWantedInfoMessage = {};
                    resWantedInfoMessage["got"] = input.readBoolean(); //今日是否接取过
                    var rewardsLength1 = input.readShort();
                    resWantedInfoMessage["rewards"] = new Array(rewardsLength1);
                    for (var rewardsi1 = 0; rewardsi1 < rewardsLength1; rewardsi1++) {
                        resWantedInfoMessage["rewards"][rewardsi1] = input.readVarInt(false); //当前可领奖副本id
                    }
                    var duplicateIdLength1 = input.readShort();
                    resWantedInfoMessage["duplicateId"] = new Array(duplicateIdLength1);
                    for (var duplicateIdi1 = 0; duplicateIdi1 < duplicateIdLength1; duplicateIdi1++) {
                        resWantedInfoMessage["duplicateId"][duplicateIdi1] = input.readVarInt(false); //当前接取任务的副本id
                    }
                    this.sendNotif(cmd, resWantedInfoMessage);
                    break;
            }
        };
        return MaterialModel;
    }(ModelBase));
    net.MaterialModel = MaterialModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:269
     */
    var MergeExchangeModel = /** @class */ (function (_super) {
        __extends(MergeExchangeModel, _super);
        function MergeExchangeModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(269002 /* MergeExchangeModelCMD.CMDResMergeExchangeInfoMessage */);
            return _this;
        }
        MergeExchangeModel.ins = function () {
            if (!this._ins)
                this._ins = new MergeExchangeModel();
            return this._ins;
        };
        /**
         *
         * 请求数据
         *
         * sendReqMergeExchangeInfoMessage  269001
         */
        MergeExchangeModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(269001 /* MergeExchangeModelCMD.CMDReqMergeExchangeInfoMessage */, output, s);
        };
        /**
         *
         * 请求领奖
         * @param 领取奖励
         *
         * sendReqMergeExchangeAcquireMessage  269003
         */
        MergeExchangeModel.prototype.send3 = function (cid, s) {
            var output = this.getO();
            output.writeVarInt(cid, false);
            this.send(269003 /* MergeExchangeModelCMD.CMDReqMergeExchangeAcquireMessage */, output, s);
        };
        MergeExchangeModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 269002 /* MergeExchangeModelCMD.CMDResMergeExchangeInfoMessage */:
                    var resMergeExchangeInfoMessage = {};
                    resMergeExchangeInfoMessage["turn"] = input.readVarInt(false); //当前进行的活动次数
                    resMergeExchangeInfoMessage["time"] = input.readVarInt(false); //当前轮开始时间（时间戳）
                    resMergeExchangeInfoMessage["purchased"] = input.readVarInt(false); //充值数
                    var acquiredLength1 = input.readShort();
                    resMergeExchangeInfoMessage["acquired"] = new Array(acquiredLength1);
                    for (var acquiredi1 = 0; acquiredi1 < acquiredLength1; acquiredi1++) {
                        resMergeExchangeInfoMessage["acquired"][acquiredi1] = input.readVarInt(false); //已领取的
                    }
                    this.sendNotif(cmd, resMergeExchangeInfoMessage);
                    break;
            }
        };
        return MergeExchangeModel;
    }(ModelBase));
    net.MergeExchangeModel = MergeExchangeModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:60
     */
    var MiningModel = /** @class */ (function (_super) {
        __extends(MiningModel, _super);
        function MiningModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(60002 /* MiningModelCMD.CMDResMiningInfoMessage */);
            return _this;
        }
        MiningModel.ins = function () {
            if (!this._ins)
                this._ins = new MiningModel();
            return this._ins;
        };
        /**
         *
         * 请求当前挖矿信息
         *
         * sendReqMiningInfoMessage  60001
         */
        MiningModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(60001 /* MiningModelCMD.CMDReqMiningInfoMessage */, output, s);
        };
        /**
         *
         * 请求挖矿
         * @param 矿工选择
         * @param 选择位置
         *
         * sendReqMiningStartMessage  60003
         */
        MiningModel.prototype.send3 = function (mining, pos, s) {
            var output = this.getO();
            output.writeVarInt(mining, false);
            output.writeVarInt(pos, false);
            this.send(60003 /* MiningModelCMD.CMDReqMiningStartMessage */, output, s);
        };
        /**
         *
         * 请求收矿
         *
         * sendReqMiningHarvestMessage  60004
         */
        MiningModel.prototype.send4 = function (s) {
            var output = this.getO();
            this.send(60004 /* MiningModelCMD.CMDReqMiningHarvestMessage */, output, s);
        };
        /**
         *
         * 请求前往矿位置
         *
         * sendReqMiningHeadMessage  60005
         */
        MiningModel.prototype.send5 = function (s) {
            var output = this.getO();
            this.send(60005 /* MiningModelCMD.CMDReqMiningHeadMessage */, output, s);
        };
        MiningModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 60002 /* MiningModelCMD.CMDResMiningInfoMessage */:
                    var resMiningInfoMessage = {};
                    resMiningInfoMessage["times"] = input.readVarInt(false); //已使用次数
                    resMiningInfoMessage["mining"] = input.readVarInt(false); //矿工 0表示没有在挖矿
                    resMiningInfoMessage["pos"] = input.readVarInt(false); //位置id
                    resMiningInfoMessage["harvest"] = input.readVarInt(false); //收获时间（时间戳）
                    this.sendNotif(cmd, resMiningInfoMessage);
                    break;
            }
        };
        return MiningModel;
    }(ModelBase));
    net.MiningModel = MiningModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:186
     */
    var MixModel = /** @class */ (function (_super) {
        __extends(MixModel, _super);
        function MixModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(186011 /* MixModelCMD.CMDResMixResultMessage */);
            thisObj.reg(186012 /* MixModelCMD.CMDResMixInfoMessage */);
            return _this;
        }
        MixModel.ins = function () {
            if (!this._ins)
                this._ins = new MixModel();
            return this._ins;
        };
        /**
         *
         * 请求融合装备
         * @param
         * @param 部位
         * @param 材料装备id
         *
         * sendReqMixMergeMessage  186001
         */
        MixModel.prototype.send1 = function (uid, index, itemId, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(index, false);
            output.writeLong(itemId);
            this.send(186001 /* MixModelCMD.CMDReqMixMergeMessage */, output, s);
        };
        /**
         *
         * 请求分解装备
         * @param
         * @param 部位
         * @param 待分解的装备id
         *
         * sendReqMixBreakMessage  186002
         */
        MixModel.prototype.send2 = function (uid, index, itemId, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(index, false);
            output.writeVarInt(itemId, false);
            this.send(186002 /* MixModelCMD.CMDReqMixBreakMessage */, output, s);
        };
        /**
         *
         * 请求部位融合信息
         * @param
         *
         * sendReqMixInfoMessage  186003
         */
        MixModel.prototype.send3 = function (uid, s) {
            var output = this.getO();
            output.writeLong(uid);
            this.send(186003 /* MixModelCMD.CMDReqMixInfoMessage */, output, s);
        };
        /**
         *
         * 请求凝练
         * @param
         * @param 类型
         * @param 部位
         *
         * sendReqMixUpgradeMessage  186004
         */
        MixModel.prototype.send4 = function (uid, type, index, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(type, false);
            output.writeVarInt(index, false);
            this.send(186004 /* MixModelCMD.CMDReqMixUpgradeMessage */, output, s);
        };
        MixModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 186011 /* MixModelCMD.CMDResMixResultMessage */:
                    var resMixResultMessage = {};
                    resMixResultMessage["uid"] = input.readLong(); //
                    var mixLength1 = input.readByte();
                    if (mixLength1 != 0) {
                        var temp590 = resMixResultMessage["mix"] = {}; //变化
                        temp590["index"] = input.readVarInt(false); //部位
                        var idLength1 = input.readShort();
                        temp590["id"] = new Array(idLength1);
                        for (var idi1 = 0; idi1 < idLength1; idi1++) {
                            temp590["id"][idi1] = input.readVarInt(false); //道具id列表
                        }
                        var godsLength1 = input.readShort();
                        temp590["gods"] = [];
                        for (var godsi1 = 0; godsi1 < godsLength1; godsi1++) {
                            if (input.readByte() != 0) {
                                var temp591 = temp590["gods"][godsi1] = {}; //神级属性列表
                                temp591["id"] = input.readVarInt(false); //道具id
                                var godsLength2 = input.readShort();
                                temp591["gods"] = new Array(godsLength2);
                                for (var godsi2 = 0; godsi2 < godsLength2; godsi2++) {
                                    temp591["gods"][godsi2] = input.readVarInt(false); //神级属性列表
                                }
                            }
                            else {
                                temp590["gods"][godsi1] = null;
                            }
                        }
                    }
                    this.sendNotif(cmd, resMixResultMessage);
                    break;
                case 186012 /* MixModelCMD.CMDResMixInfoMessage */:
                    var resMixInfoMessage = {};
                    resMixInfoMessage["uid"] = input.readLong(); //
                    var mixLength2 = input.readShort();
                    resMixInfoMessage["mix"] = [];
                    for (var mixi2 = 0; mixi2 < mixLength2; mixi2++) {
                        if (input.readByte() != 0) {
                            var temp592 = resMixInfoMessage["mix"][mixi2] = {}; //
                            temp592["index"] = input.readVarInt(false); //部位
                            var idLength2 = input.readShort();
                            temp592["id"] = new Array(idLength2);
                            for (var idi2 = 0; idi2 < idLength2; idi2++) {
                                temp592["id"][idi2] = input.readVarInt(false); //道具id列表
                            }
                            var godsLength3 = input.readShort();
                            temp592["gods"] = [];
                            for (var godsi3 = 0; godsi3 < godsLength3; godsi3++) {
                                if (input.readByte() != 0) {
                                    var temp593 = temp592["gods"][godsi3] = {}; //神级属性列表
                                    temp593["id"] = input.readVarInt(false); //道具id
                                    var godsLength4 = input.readShort();
                                    temp593["gods"] = new Array(godsLength4);
                                    for (var godsi4 = 0; godsi4 < godsLength4; godsi4++) {
                                        temp593["gods"][godsi4] = input.readVarInt(false); //神级属性列表
                                    }
                                }
                                else {
                                    temp592["gods"][godsi3] = null;
                                }
                            }
                        }
                        else {
                            resMixInfoMessage["mix"][mixi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resMixInfoMessage);
                    break;
            }
        };
        return MixModel;
    }(ModelBase));
    net.MixModel = MixModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:191
     */
    var MonsterModel = /** @class */ (function (_super) {
        __extends(MonsterModel, _super);
        function MonsterModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(191011 /* MonsterModelCMD.CMDResMonsterStateMessage */);
            thisObj.reg(191012 /* MonsterModelCMD.CMDResMonsterCountMessage */);
            thisObj.reg(191022 /* MonsterModelCMD.CMDResMapNpcPositionMessage */);
            return _this;
        }
        MonsterModel.ins = function () {
            if (!this._ins)
                this._ins = new MonsterModel();
            return this._ins;
        };
        /**
         *
         * 请求怪物状态
         *
         * sendReqMonsterStateMessage  191001
         */
        MonsterModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(191001 /* MonsterModelCMD.CMDReqMonsterStateMessage */, output, s);
        };
        /**
         *
         * 请求怪物数量
         * @param 请求类型 0表示所有 1表示当前地图
         *
         * sendReqMonsterCountMessage  191002
         */
        MonsterModel.prototype.send2 = function (type, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            this.send(191002 /* MonsterModelCMD.CMDReqMonsterCountMessage */, output, s);
        };
        /**
         *
         * 请求npc刷新位置
         *
         * sendReqMapNpcPositionMessage  191021
         */
        MonsterModel.prototype.send21 = function (s) {
            var output = this.getO();
            this.send(191021 /* MonsterModelCMD.CMDReqMapNpcPositionMessage */, output, s);
        };
        MonsterModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 191011 /* MonsterModelCMD.CMDResMonsterStateMessage */:
                    var monstersLength1 = input.readShort();
                    var resMonsterStateMessage = [];
                    for (var monstersi1 = 0; monstersi1 < monstersLength1; monstersi1++) {
                        if (input.readByte() != 0) {
                            var temp1278 = resMonsterStateMessage[monstersi1] = {}; //
                            temp1278["mapId"] = input.readVarInt(false); //
                            temp1278["monsterId"] = input.readVarInt(false); //
                            temp1278["param"] = input.readVarInt(false); //
                            temp1278["killer"] = input.readString(); //
                        }
                        else {
                            resMonsterStateMessage[monstersi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resMonsterStateMessage);
                    break;
                case 191012 /* MonsterModelCMD.CMDResMonsterCountMessage */:
                    var monstersLength2 = input.readShort();
                    var resMonsterCountMessage = [];
                    for (var monstersi2 = 0; monstersi2 < monstersLength2; monstersi2++) {
                        if (input.readByte() != 0) {
                            var temp1279 = resMonsterCountMessage[monstersi2] = {}; //
                            temp1279["mapId"] = input.readVarInt(false); //
                            temp1279["monsterId"] = input.readVarInt(false); //
                            temp1279["param"] = input.readVarInt(false); //
                            temp1279["killer"] = input.readString(); //
                        }
                        else {
                            resMonsterCountMessage[monstersi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resMonsterCountMessage);
                    break;
                case 191022 /* MonsterModelCMD.CMDResMapNpcPositionMessage */:
                    var npcsLength1 = input.readShort();
                    var resMapNpcPositionMessage = [];
                    for (var npcsi1 = 0; npcsi1 < npcsLength1; npcsi1++) {
                        if (input.readByte() != 0) {
                            var temp1280 = resMapNpcPositionMessage[npcsi1] = {}; //npc位置信息列表
                            temp1280["id"] = input.readVarInt(false); //map_npc id
                            temp1280["x"] = input.readVarInt(false); //
                            temp1280["y"] = input.readVarInt(false); //
                        }
                        else {
                            resMapNpcPositionMessage[npcsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resMapNpcPositionMessage);
                    break;
            }
        };
        return MonsterModel;
    }(ModelBase));
    net.MonsterModel = MonsterModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:265
     */
    var MountMatrixModel = /** @class */ (function (_super) {
        __extends(MountMatrixModel, _super);
        function MountMatrixModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(265002 /* MountMatrixModelCMD.CMDResMountMatrixInfoMessage */);
            thisObj.reg(265006 /* MountMatrixModelCMD.CMDResMountMatrixLeadMessage */);
            return _this;
        }
        MountMatrixModel.ins = function () {
            if (!this._ins)
                this._ins = new MountMatrixModel();
            return this._ins;
        };
        /**
         *
         * 请求坐骑阵法信息
         * @param 玩家/元神 元神的话传元神id
         *
         * sendReqMountMatrixInfoMessage  265001
         */
        MountMatrixModel.prototype.send1 = function (uid, s) {
            var output = this.getO();
            output.writeLong(uid);
            this.send(265001 /* MountMatrixModelCMD.CMDReqMountMatrixInfoMessage */, output, s);
        };
        /**
         *
         * 喂养
         * @param 玩家/元神 元神的话传元神id
         * @param 部位
         *
         * sendReqMountMatrixFeedMessage  265003
         */
        MountMatrixModel.prototype.send3 = function (uid, pos, items, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(pos, false);
            if (items != null) {
                output.writeShort(items.length);
                for (var itemsi1 = 0; itemsi1 < items.length; itemsi1++) {
                    if (items[itemsi1] != null) {
                        output.writeByte(1);
                        output.writeLong(items[itemsi1].id);
                        output.writeVarInt(items[itemsi1].count, false);
                    }
                    else {
                        output.writeByte(0);
                    }
                }
            }
            else {
                output.writeShort(0);
            }
            this.send(265003 /* MountMatrixModelCMD.CMDReqMountMatrixFeedMessage */, output, s);
        };
        /**
         *
         * 升级
         * @param 玩家/元神 元神的话传元神id
         * @param 部位
         *
         * sendReqMountMatrixUpgradeMessage  265004
         */
        MountMatrixModel.prototype.send4 = function (uid, pos, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(pos, false);
            this.send(265004 /* MountMatrixModelCMD.CMDReqMountMatrixUpgradeMessage */, output, s);
        };
        /**
         *
         * 选择骑乘
         * @param 玩家/元神 元神的话传元神id
         * @param 部位  0表示取消骑乘
         *
         * sendReqMountMatrixLeadMessage  265005
         */
        MountMatrixModel.prototype.send5 = function (uid, pos, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(pos, false);
            this.send(265005 /* MountMatrixModelCMD.CMDReqMountMatrixLeadMessage */, output, s);
        };
        MountMatrixModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 265002 /* MountMatrixModelCMD.CMDResMountMatrixInfoMessage */:
                    var resMountMatrixInfoMessage = {};
                    resMountMatrixInfoMessage["uid"] = input.readLong(); //玩家/元神 元神的话传元神id
                    var matrixLength1 = input.readShort();
                    resMountMatrixInfoMessage["matrix"] = [];
                    for (var matrixi1 = 0; matrixi1 < matrixLength1; matrixi1++) {
                        if (input.readByte() != 0) {
                            var temp640 = resMountMatrixInfoMessage["matrix"][matrixi1] = {}; //阵法等级信息
                            temp640["pos"] = input.readVarInt(false); //部位
                            temp640["level"] = input.readVarInt(false); //等级
                            temp640["exp"] = input.readVarInt(false); //经验
                        }
                        else {
                            resMountMatrixInfoMessage["matrix"][matrixi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resMountMatrixInfoMessage);
                    break;
                case 265006 /* MountMatrixModelCMD.CMDResMountMatrixLeadMessage */:
                    var resMountMatrixLeadMessage = {};
                    resMountMatrixLeadMessage["uid"] = input.readLong(); //玩家/元神 元神的话传元神id
                    resMountMatrixLeadMessage["pos"] = input.readVarInt(false); //部位
                    resMountMatrixLeadMessage["mount"] = input.readVarInt(false); //坐骑id
                    this.sendNotif(cmd, resMountMatrixLeadMessage);
                    break;
            }
        };
        return MountMatrixModel;
    }(ModelBase));
    net.MountMatrixModel = MountMatrixModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:195
     */
    var MountsModel = /** @class */ (function (_super) {
        __extends(MountsModel, _super);
        function MountsModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(195011 /* MountsModelCMD.CMDResMountsLeadMessage */);
            thisObj.reg(195012 /* MountsModelCMD.CMDResMountsListMessage */);
            thisObj.reg(195013 /* MountsModelCMD.CMDResMountsUpdateMessage */);
            return _this;
        }
        MountsModel.ins = function () {
            if (!this._ins)
                this._ins = new MountsModel();
            return this._ins;
        };
        /**
         *
         * 请求马匹信息
         *
         * sendReqMountsInfoMessage  195001
         */
        MountsModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(195001 /* MountsModelCMD.CMDReqMountsInfoMessage */, output, s);
        };
        /**
         *
         * 解锁
         * @param 道具唯一id
         *
         * sendReqMountsUnlockMessage  195002
         */
        MountsModel.prototype.send2 = function (itemId, s) {
            var output = this.getO();
            output.writeLong(itemId);
            this.send(195002 /* MountsModelCMD.CMDReqMountsUnlockMessage */, output, s);
        };
        /**
         *
         * 强化
         *
         * sendReqMountsReinforceMessage  195003
         */
        MountsModel.prototype.send3 = function (itemId, s) {
            var output = this.getO();
            output.writeShort(itemId.length);
            for (var itemIdi1 = 0; itemIdi1 < itemId.length; itemIdi1++) {
                output.writeLong(itemId[itemIdi1]);
            }
            this.send(195003 /* MountsModelCMD.CMDReqMountsReinforceMessage */, output, s);
        };
        /**
         *
         * 升品
         * @param 马匹配置id
         *
         * sendReqMountsUpgradeMessage  195004
         */
        MountsModel.prototype.send4 = function (mount, s) {
            var output = this.getO();
            output.writeVarInt(mount, false);
            this.send(195004 /* MountsModelCMD.CMDReqMountsUpgradeMessage */, output, s);
        };
        /**
         *
         * 牵马
         * @param 马匹配置id
         *
         * sendReqMountsLeadMessage  195005
         */
        MountsModel.prototype.send5 = function (mount, s) {
            var output = this.getO();
            output.writeVarInt(mount, false);
            this.send(195005 /* MountsModelCMD.CMDReqMountsLeadMessage */, output, s);
        };
        /**
         *
         * 上马
         *
         * sendReqMountsMountMessage  195006
         */
        MountsModel.prototype.send6 = function (s) {
            var output = this.getO();
            this.send(195006 /* MountsModelCMD.CMDReqMountsMountMessage */, output, s);
        };
        /**
         *
         * 下马
         *
         * sendReqMountsDismountMessage  195007
         */
        MountsModel.prototype.send7 = function (s) {
            var output = this.getO();
            this.send(195007 /* MountsModelCMD.CMDReqMountsDismountMessage */, output, s);
        };
        /**
         *
         * 请求马匹穿戴坐骑装备
         * @param 马匹配置id
         * @param 道具id
         *
         * sendReqMountsWearEquipMessage  195014
         */
        MountsModel.prototype.send14 = function (mount, itemId, s) {
            var output = this.getO();
            output.writeVarInt(mount, false);
            output.writeVarInt(itemId, false);
            this.send(195014 /* MountsModelCMD.CMDReqMountsWearEquipMessage */, output, s);
        };
        /**
         *
         * 回收坐骑
         * @param 坐骑类型
         *
         * sendReqMountsRetrieveMessage  195015
         */
        MountsModel.prototype.send15 = function (type, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            this.send(195015 /* MountsModelCMD.CMDReqMountsRetrieveMessage */, output, s);
        };
        MountsModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 195011 /* MountsModelCMD.CMDResMountsLeadMessage */:
                    var resMountsLeadMessage = input.readVarInt(false); //
                    this.sendNotif(cmd, resMountsLeadMessage);
                    break;
                case 195012 /* MountsModelCMD.CMDResMountsListMessage */:
                    var resMountsListMessage = {};
                    resMountsListMessage["mount"] = input.readVarInt(false); //
                    var mountsLength1 = input.readShort();
                    resMountsListMessage["mounts"] = [];
                    for (var mountsi1 = 0; mountsi1 < mountsLength1; mountsi1++) {
                        if (input.readByte() != 0) {
                            var temp1322 = resMountsListMessage["mounts"][mountsi1] = {}; //
                            temp1322["type"] = input.readVarInt(false); //类型
                            temp1322["mount"] = input.readVarInt(false); //马匹id
                            temp1322["level"] = input.readVarInt(false); //强化等级
                            var itemIdLength1 = input.readShort();
                            temp1322["itemId"] = new Array(itemIdLength1);
                            for (var itemIdi1 = 0; itemIdi1 < itemIdLength1; itemIdi1++) {
                                temp1322["itemId"][itemIdi1] = input.readVarInt(false); //当前已穿戴道具id
                            }
                        }
                        else {
                            resMountsListMessage["mounts"][mountsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resMountsListMessage);
                    break;
                case 195013 /* MountsModelCMD.CMDResMountsUpdateMessage */:
                    var resMountsUpdateMessage = {};
                    resMountsUpdateMessage["action"] = input.readVarInt(false); //行为
                    var mountLength1 = input.readByte();
                    if (mountLength1 != 0) {
                        var temp1323 = resMountsUpdateMessage["mount"] = {}; //
                        temp1323["type"] = input.readVarInt(false); //类型
                        temp1323["mount"] = input.readVarInt(false); //马匹id
                        temp1323["level"] = input.readVarInt(false); //强化等级
                        var itemIdLength2 = input.readShort();
                        temp1323["itemId"] = new Array(itemIdLength2);
                        for (var itemIdi2 = 0; itemIdi2 < itemIdLength2; itemIdi2++) {
                            temp1323["itemId"][itemIdi2] = input.readVarInt(false); //当前已穿戴道具id
                        }
                    }
                    this.sendNotif(cmd, resMountsUpdateMessage);
                    break;
            }
        };
        return MountsModel;
    }(ModelBase));
    net.MountsModel = MountsModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:348
     */
    var NewIdentifyModel = /** @class */ (function (_super) {
        __extends(NewIdentifyModel, _super);
        function NewIdentifyModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(348002 /* NewIdentifyModelCMD.CMDResNewIdentifyInfoMessage */);
            thisObj.reg(348004 /* NewIdentifyModelCMD.CMDResNewIdentifyMessage */);
            thisObj.reg(348008 /* NewIdentifyModelCMD.CMDResAllNewIdentifyInfoMessage */);
            return _this;
        }
        NewIdentifyModel.ins = function () {
            if (!this._ins)
                this._ins = new NewIdentifyModel();
            return this._ins;
        };
        /**
         *
         * 请求鉴定信息
         * @param
         * @param 部位
         *
         * sendReqNewIdentifyInfoMessage  348001
         */
        NewIdentifyModel.prototype.send1 = function (uid, pos, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(pos, false);
            this.send(348001 /* NewIdentifyModelCMD.CMDReqNewIdentifyInfoMessage */, output, s);
        };
        /**
         *
         * 请求鉴定
         * @param
         * @param 部位
         * @param 是否完美鉴定，1表示是
         *
         * sendReqNewIdentifyMessage  348003
         */
        NewIdentifyModel.prototype.send3 = function (uid, pos, perfect, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(pos, false);
            output.writeVarInt(perfect, false);
            this.send(348003 /* NewIdentifyModelCMD.CMDReqNewIdentifyMessage */, output, s);
        };
        /**
         *
         * 请求保存鉴定结果
         * @param 装备uid
         * @param 部位id
         *
         * sendReqNewIdentifySaveMessage  348005
         */
        NewIdentifyModel.prototype.send5 = function (uid, pos, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(pos, false);
            this.send(348005 /* NewIdentifyModelCMD.CMDReqNewIdentifySaveMessage */, output, s);
        };
        /**
         *
         * 请求重置鉴定
         * @param
         * @param 部位
         *
         * sendReqNewIdentifyResetMessage  348006
         */
        NewIdentifyModel.prototype.send6 = function (uid, pos, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(pos, false);
            this.send(348006 /* NewIdentifyModelCMD.CMDReqNewIdentifyResetMessage */, output, s);
        };
        /**
         *
         * 请求补全鉴定
         * @param
         * @param 部位
         *
         * sendReqNewIdentifyCompleteMessage  348007
         */
        NewIdentifyModel.prototype.send7 = function (uid, pos, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(pos, false);
            this.send(348007 /* NewIdentifyModelCMD.CMDReqNewIdentifyCompleteMessage */, output, s);
        };
        /**
         *
         * 请求所有鉴定信息
         * @param
         *
         * sendReqAllNewIdentifyInfoMessage  348009
         */
        NewIdentifyModel.prototype.send9 = function (uid, s) {
            var output = this.getO();
            output.writeLong(uid);
            this.send(348009 /* NewIdentifyModelCMD.CMDReqAllNewIdentifyInfoMessage */, output, s);
        };
        NewIdentifyModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 348002 /* NewIdentifyModelCMD.CMDResNewIdentifyInfoMessage */:
                    var resNewIdentifyInfoMessage = {};
                    resNewIdentifyInfoMessage["uid"] = input.readLong(); //
                    resNewIdentifyInfoMessage["pos"] = input.readVarInt(false); //配置id
                    var identityAttrLength1 = input.readShort();
                    resNewIdentifyInfoMessage["identityAttr"] = [];
                    for (var identityAttri1 = 0; identityAttri1 < identityAttrLength1; identityAttri1++) {
                        if (input.readByte() != 0) {
                            var temp1018 = resNewIdentifyInfoMessage["identityAttr"][identityAttri1] = {}; //鉴定属性
                            temp1018["cfgId"] = input.readVarInt(false); //配置id
                            var attrLength1 = input.readByte();
                            if (attrLength1 != 0) {
                                var temp1019 = temp1018["attr"] = {}; //鉴定注入属性
                                var attributeTypeLength1 = input.readShort();
                                temp1019["attributeType"] = new Array(attributeTypeLength1);
                                for (var attributeTypei1 = 0; attributeTypei1 < attributeTypeLength1; attributeTypei1++) {
                                    temp1019["attributeType"][attributeTypei1] = input.readVarInt(false); //属性类型
                                }
                                var attributeValueLength1 = input.readShort();
                                temp1019["attributeValue"] = [];
                                for (var attributeValuei1 = 0; attributeValuei1 < attributeValueLength1; attributeValuei1++) {
                                    temp1019["attributeValue"][attributeValuei1] = input.readLong(); //属性值
                                }
                            }
                        }
                        else {
                            resNewIdentifyInfoMessage["identityAttr"][identityAttri1] = null;
                        }
                    }
                    this.sendNotif(cmd, resNewIdentifyInfoMessage);
                    break;
                case 348004 /* NewIdentifyModelCMD.CMDResNewIdentifyMessage */:
                    var resNewIdentifyMessage = {};
                    resNewIdentifyMessage["uid"] = input.readLong(); //
                    resNewIdentifyMessage["pos"] = input.readVarInt(false); //配置id
                    var attrLength2 = input.readByte();
                    if (attrLength2 != 0) {
                        var temp1020 = resNewIdentifyMessage["attr"] = {}; //鉴定返回
                        temp1020["cfgId"] = input.readVarInt(false); //配置id
                        var attrLength3 = input.readByte();
                        if (attrLength3 != 0) {
                            var temp1021 = temp1020["attr"] = {}; //鉴定注入属性
                            var attributeTypeLength2 = input.readShort();
                            temp1021["attributeType"] = new Array(attributeTypeLength2);
                            for (var attributeTypei2 = 0; attributeTypei2 < attributeTypeLength2; attributeTypei2++) {
                                temp1021["attributeType"][attributeTypei2] = input.readVarInt(false); //属性类型
                            }
                            var attributeValueLength2 = input.readShort();
                            temp1021["attributeValue"] = [];
                            for (var attributeValuei2 = 0; attributeValuei2 < attributeValueLength2; attributeValuei2++) {
                                temp1021["attributeValue"][attributeValuei2] = input.readLong(); //属性值
                            }
                        }
                    }
                    this.sendNotif(cmd, resNewIdentifyMessage);
                    break;
                case 348008 /* NewIdentifyModelCMD.CMDResAllNewIdentifyInfoMessage */:
                    var resAllNewIdentifyInfoMessage = {};
                    resAllNewIdentifyInfoMessage["uid"] = input.readLong(); //
                    var posIdentifyLength1 = input.readShort();
                    resAllNewIdentifyInfoMessage["posIdentify"] = [];
                    for (var posIdentifyi1 = 0; posIdentifyi1 < posIdentifyLength1; posIdentifyi1++) {
                        if (input.readByte() != 0) {
                            var temp1022 = resAllNewIdentifyInfoMessage["posIdentify"][posIdentifyi1] = {}; //
                            temp1022["pos"] = input.readVarInt(false); //配置id
                            var identifyLength1 = input.readShort();
                            temp1022["identify"] = [];
                            for (var identifyi1 = 0; identifyi1 < identifyLength1; identifyi1++) {
                                if (input.readByte() != 0) {
                                    var temp1023 = temp1022["identify"][identifyi1] = {}; //鉴定注入属性
                                    temp1023["cfgId"] = input.readVarInt(false); //配置id
                                    var attrLength4 = input.readByte();
                                    if (attrLength4 != 0) {
                                        var temp1024 = temp1023["attr"] = {}; //鉴定注入属性
                                        var attributeTypeLength3 = input.readShort();
                                        temp1024["attributeType"] = new Array(attributeTypeLength3);
                                        for (var attributeTypei3 = 0; attributeTypei3 < attributeTypeLength3; attributeTypei3++) {
                                            temp1024["attributeType"][attributeTypei3] = input.readVarInt(false); //属性类型
                                        }
                                        var attributeValueLength3 = input.readShort();
                                        temp1024["attributeValue"] = [];
                                        for (var attributeValuei3 = 0; attributeValuei3 < attributeValueLength3; attributeValuei3++) {
                                            temp1024["attributeValue"][attributeValuei3] = input.readLong(); //属性值
                                        }
                                    }
                                }
                                else {
                                    temp1022["identify"][identifyi1] = null;
                                }
                            }
                        }
                        else {
                            resAllNewIdentifyInfoMessage["posIdentify"][posIdentifyi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resAllNewIdentifyInfoMessage);
                    break;
            }
        };
        return NewIdentifyModel;
    }(ModelBase));
    net.NewIdentifyModel = NewIdentifyModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:339
     */
    var NewTitleModel = /** @class */ (function (_super) {
        __extends(NewTitleModel, _super);
        function NewTitleModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(339005 /* NewTitleModelCMD.CMDResNewTitleMessage */);
            return _this;
        }
        NewTitleModel.ins = function () {
            if (!this._ins)
                this._ins = new NewTitleModel();
            return this._ins;
        };
        /**
         *
         * 请求军衔封号信息
         * @param 玩家或者元神唯一id
         *
         * sendReqNewTitleMessage  339004
         */
        NewTitleModel.prototype.send4 = function (uId, s) {
            var output = this.getO();
            output.writeLong(uId);
            this.send(339004 /* NewTitleModelCMD.CMDReqNewTitleMessage */, output, s);
        };
        /**
         *
         * 请求升级军衔封号
         * @param 玩家或者元神唯一id
         *
         * sendReqLevelUpNewTitleMessage  339006
         */
        NewTitleModel.prototype.send6 = function (uId, s) {
            var output = this.getO();
            output.writeLong(uId);
            this.send(339006 /* NewTitleModelCMD.CMDReqLevelUpNewTitleMessage */, output, s);
        };
        NewTitleModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 339005 /* NewTitleModelCMD.CMDResNewTitleMessage */:
                    var resNewTitleMessage = {};
                    resNewTitleMessage["uId"] = input.readLong(); //玩家或者元神唯一id
                    resNewTitleMessage["level"] = input.readVarInt(false); //封号等级
                    resNewTitleMessage["schedule"] = input.readVarInt(false); //进度值
                    this.sendNotif(cmd, resNewTitleMessage);
                    break;
            }
        };
        return NewTitleModel;
    }(ModelBase));
    net.NewTitleModel = NewTitleModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:244
     */
    var PickupModel = /** @class */ (function (_super) {
        __extends(PickupModel, _super);
        function PickupModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(244002 /* PickupModelCMD.CMDResRolePickingSettingMessage */);
            thisObj.reg(244004 /* PickupModelCMD.CMDResRolePickingSettingUpdateMessage */);
            return _this;
        }
        PickupModel.ins = function () {
            if (!this._ins)
                this._ins = new PickupModel();
            return this._ins;
        };
        /**
         *
         * 请求拾取设置信息
         *
         * sendReqRolePickingSettingMessage  244001
         */
        PickupModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(244001 /* PickupModelCMD.CMDReqRolePickingSettingMessage */, output, s);
        };
        /**
         *
         * 修改设置
         * @param 类型 0的话只设置单个 否则设置对应类型的所有
         * @param 配置id type非0时，用来表示设置那一位的值
         * @param value type非0时，只有1位，用来表示勾选（1）或者取消（0）
         *
         * sendReqRolePickingSettingAlterMessage  244003
         */
        PickupModel.prototype.send3 = function (type, cid, value, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            output.writeVarInt(cid, false);
            output.writeVarInt(value, false);
            this.send(244003 /* PickupModelCMD.CMDReqRolePickingSettingAlterMessage */, output, s);
        };
        PickupModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 244002 /* PickupModelCMD.CMDResRolePickingSettingMessage */:
                    var settingsLength1 = input.readShort();
                    var resRolePickingSettingMessage = [];
                    for (var settingsi1 = 0; settingsi1 < settingsLength1; settingsi1++) {
                        if (input.readByte() != 0) {
                            var temp1273 = resRolePickingSettingMessage[settingsi1] = {}; //element中id为配置id，value为各个设置位的二进制数据转成的int  FYI:0表示使用配置数据 1表示使用配置相反数据
                            temp1273["id"] = input.readVarInt(false); //
                            temp1273["value"] = input.readVarInt(false); //
                        }
                        else {
                            resRolePickingSettingMessage[settingsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resRolePickingSettingMessage);
                    break;
                case 244004 /* PickupModelCMD.CMDResRolePickingSettingUpdateMessage */:
                    var settingLength1 = input.readShort();
                    var resRolePickingSettingUpdateMessage = [];
                    for (var settingi1 = 0; settingi1 < settingLength1; settingi1++) {
                        if (input.readByte() != 0) {
                            var temp1274 = resRolePickingSettingUpdateMessage[settingi1] = {}; //update
                            temp1274["id"] = input.readVarInt(false); //
                            temp1274["value"] = input.readVarInt(false); //
                        }
                        else {
                            resRolePickingSettingUpdateMessage[settingi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resRolePickingSettingUpdateMessage);
                    break;
            }
        };
        return PickupModel;
    }(ModelBase));
    net.PickupModel = PickupModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:73
     */
    var PlayModel = /** @class */ (function (_super) {
        __extends(PlayModel, _super);
        function PlayModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(73012 /* PlayModelCMD.CMDResUseFightItemMessage */);
            thisObj.reg(73016 /* PlayModelCMD.CMDResBossRemindToRoleMessage */);
            thisObj.reg(73019 /* PlayModelCMD.CMDResMapBossDeathMessage */);
            thisObj.reg(73025 /* PlayModelCMD.CMDResMapBossHpMessage */);
            thisObj.reg(73039 /* PlayModelCMD.CMDResBossInspireMessage */);
            return _this;
        }
        PlayModel.ins = function () {
            if (!this._ins)
                this._ins = new PlayModel();
            return this._ins;
        };
        /**
         *
         * 请求地图boss血量信息
         * @param 地图id
         *
         * sendReqMapBossHpMessage  73002
         */
        PlayModel.prototype.send2 = function (mapId, s) {
            var output = this.getO();
            output.writeVarInt(mapId, false);
            this.send(73002 /* PlayModelCMD.CMDReqMapBossHpMessage */, output, s);
        };
        /**
         *
         * 请求使用道具次数信息
         *
         * sendReqUseFightItemInfosMessage  73017
         */
        PlayModel.prototype.send17 = function (s) {
            var output = this.getO();
            this.send(73017 /* PlayModelCMD.CMDReqUseFightItemInfosMessage */, output, s);
        };
        /**
         *
         * 请求boss基本状态
         * @param boss类型
         *
         * sendReqBossBasicStateMessage  73030
         */
        PlayModel.prototype.send30 = function (mapType, s) {
            var output = this.getO();
            output.writeVarInt(mapType, false);
            this.send(73030 /* PlayModelCMD.CMDReqBossBasicStateMessage */, output, s);
        };
        /**
         *
         * 请求Boss鼓舞
         * @param 鼓舞类型 1：金币 2：元宝
         *
         * sendReqBossInspireMessage  73038
         */
        PlayModel.prototype.send38 = function (type, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            this.send(73038 /* PlayModelCMD.CMDReqBossInspireMessage */, output, s);
        };
        PlayModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 73012 /* PlayModelCMD.CMDResUseFightItemMessage */:
                    this.sendNotif(cmd);
                    break;
                case 73016 /* PlayModelCMD.CMDResBossRemindToRoleMessage */:
                    var resBossRemindToRoleMessage = input.readVarInt(false); //boss地图id
                    this.sendNotif(cmd, resBossRemindToRoleMessage);
                    break;
                case 73019 /* PlayModelCMD.CMDResMapBossDeathMessage */:
                    var resMapBossDeathMessage = input.readVarInt(false); //boss地图id
                    this.sendNotif(cmd, resMapBossDeathMessage);
                    break;
                case 73025 /* PlayModelCMD.CMDResMapBossHpMessage */:
                    var resMapBossHpMessage = {};
                    resMapBossHpMessage["mapId"] = input.readVarInt(false); //地图id
                    resMapBossHpMessage["hp"] = input.readLong(); //当前Boss血量
                    resMapBossHpMessage["totalHp"] = input.readLong(); //Boss总血量
                    this.sendNotif(cmd, resMapBossHpMessage);
                    break;
                case 73039 /* PlayModelCMD.CMDResBossInspireMessage */:
                    var resBossInspireMessage = {};
                    resBossInspireMessage["gCount"] = input.readVarInt(false); //金币鼓舞总次数
                    resBossInspireMessage["dCount"] = input.readVarInt(false); //元宝鼓舞总次数
                    resBossInspireMessage["myGCount"] = input.readVarInt(false); //自己金币鼓舞总次数
                    resBossInspireMessage["myDCount"] = input.readVarInt(false); //自己元宝鼓舞总次数
                    resBossInspireMessage["cfgId"] = input.readVarInt(false); //cfgId
                    this.sendNotif(cmd, resBossInspireMessage);
                    break;
            }
        };
        return PlayModel;
    }(ModelBase));
    net.PlayModel = PlayModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:210
     */
    var PrayModel = /** @class */ (function (_super) {
        __extends(PrayModel, _super);
        function PrayModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(210002 /* PrayModelCMD.CMDResPrayInfoMessage */);
            return _this;
        }
        PrayModel.ins = function () {
            if (!this._ins)
                this._ins = new PrayModel();
            return this._ins;
        };
        /**
         *
         * 请求祈福信息
         *
         * sendReqPrayInfoMessage  210001
         */
        PrayModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(210001 /* PrayModelCMD.CMDReqPrayInfoMessage */, output, s);
        };
        /**
         *
         * 请求祈福
         * @param 祈福类型
         *
         * sendReqPrayMessage  210003
         */
        PrayModel.prototype.send3 = function (type, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            this.send(210003 /* PrayModelCMD.CMDReqPrayMessage */, output, s);
        };
        PrayModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 210002 /* PrayModelCMD.CMDResPrayInfoMessage */:
                    var resPrayInfoMessage = {};
                    resPrayInfoMessage["type"] = input.readVarInt(false); //请求类型 0请求面板 1祈福成功 2祈福失败 3暴击
                    var praysLength1 = input.readShort();
                    resPrayInfoMessage["prays"] = [];
                    for (var praysi1 = 0; praysi1 < praysLength1; praysi1++) {
                        if (input.readByte() != 0) {
                            var temp699 = resPrayInfoMessage["prays"][praysi1] = {}; //祈福信息
                            temp699["type"] = input.readVarInt(false); //类型
                            temp699["count"] = input.readVarInt(false); //已祈福次数
                            temp699["addTime"] = input.readVarInt(false); //已加成次数
                        }
                        else {
                            resPrayInfoMessage["prays"][praysi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resPrayInfoMessage);
                    break;
            }
        };
        return PrayModel;
    }(ModelBase));
    net.PrayModel = PrayModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:193
     */
    var PrincessModel = /** @class */ (function (_super) {
        __extends(PrincessModel, _super);
        function PrincessModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(193003 /* PrincessModelCMD.CMDResPrincessInfoMessage */);
            return _this;
        }
        PrincessModel.ins = function () {
            if (!this._ins)
                this._ins = new PrincessModel();
            return this._ins;
        };
        /**
         *
         * 请求邀请公主
         * @param 公主唯一怪物id
         *
         * sendReqInvitePrincessMessage  193001
         */
        PrincessModel.prototype.send1 = function (mid, s) {
            var output = this.getO();
            output.writeLong(mid);
            this.send(193001 /* PrincessModelCMD.CMDReqInvitePrincessMessage */, output, s);
        };
        /**
         *
         * 请求送达公主
         * @param 公主唯一怪物id
         *
         * sendReqSentPrincessMessage  193002
         */
        PrincessModel.prototype.send2 = function (mid, s) {
            var output = this.getO();
            output.writeLong(mid);
            this.send(193002 /* PrincessModelCMD.CMDReqSentPrincessMessage */, output, s);
        };
        /**
         *
         * 请求抢公主兑换
         *
         * sendReqPrincessExchangeMessage  193004
         */
        PrincessModel.prototype.send4 = function (s) {
            var output = this.getO();
            this.send(193004 /* PrincessModelCMD.CMDReqPrincessExchangeMessage */, output, s);
        };
        PrincessModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 193003 /* PrincessModelCMD.CMDResPrincessInfoMessage */:
                    var resPrincessInfoMessage = {};
                    var beansLength1 = input.readShort();
                    resPrincessInfoMessage["beans"] = [];
                    for (var beansi1 = 0; beansi1 < beansLength1; beansi1++) {
                        if (input.readByte() != 0) {
                            var temp713 = resPrincessInfoMessage["beans"][beansi1] = {}; //公主信息
                            temp713["mid"] = input.readLong(); //公主唯一怪物id
                            temp713["cfgId"] = input.readVarInt(false); //怪物id
                            temp713["state"] = input.readVarInt(false); //0:未刷新 1:已刷新 2:护送中 3:已送达
                            temp713["time"] = input.readVarInt(false); //刷新时间
                            temp713["x"] = input.readVarInt(false); //x
                            temp713["y"] = input.readVarInt(false); //y
                            temp713["owner"] = input.readLong(); //归属id
                        }
                        else {
                            resPrincessInfoMessage["beans"][beansi1] = null;
                        }
                    }
                    var unionBeansLength1 = input.readShort();
                    resPrincessInfoMessage["unionBeans"] = [];
                    for (var unionBeansi1 = 0; unionBeansi1 < unionBeansLength1; unionBeansi1++) {
                        if (input.readByte() != 0) {
                            var temp714 = resPrincessInfoMessage["unionBeans"][unionBeansi1] = {}; //行会排名信息
                            temp714["uid"] = input.readLong(); //行会id
                            temp714["name"] = input.readString(); //行会名称
                            temp714["score"] = input.readVarInt(false); //行会积分
                            temp714["rank"] = input.readVarInt(false); //行会排名
                            temp714["mapCfgId"] = input.readVarInt(false); //当前地图id
                        }
                        else {
                            resPrincessInfoMessage["unionBeans"][unionBeansi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resPrincessInfoMessage);
                    break;
            }
        };
        return PrincessModel;
    }(ModelBase));
    net.PrincessModel = PrincessModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:187
     */
    var PrivilegeModel = /** @class */ (function (_super) {
        __extends(PrivilegeModel, _super);
        function PrivilegeModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(187002 /* PrivilegeModelCMD.CMDResPrivilegeInfoMessage */);
            thisObj.reg(187004 /* PrivilegeModelCMD.CMDResPrivilegeUpdateMessage */);
            thisObj.reg(187006 /* PrivilegeModelCMD.CMDResPrivilegeAcquireDailyMessage */);
            thisObj.reg(187012 /* PrivilegeModelCMD.CMDResPrivilegeBuffInfoMessage */);
            return _this;
        }
        PrivilegeModel.ins = function () {
            if (!this._ins)
                this._ins = new PrivilegeModel();
            return this._ins;
        };
        /**
         *
         * 发送玩家特权信息
         *
         * sendReqPrivilegeInfoMessage  187001
         */
        PrivilegeModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(187001 /* PrivilegeModelCMD.CMDReqPrivilegeInfoMessage */, output, s);
        };
        /**
         *
         * 特权购买/升级
         * @param 特权类型
         *
         * sendReqPrivilegeUpgradeMessage  187003
         */
        PrivilegeModel.prototype.send3 = function (type, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            this.send(187003 /* PrivilegeModelCMD.CMDReqPrivilegeUpgradeMessage */, output, s);
        };
        /**
         *
         * 领取特权每日奖励
         * @param 领取类型
         *
         * sendReqPrivilegeAcquireDailyMessage  187005
         */
        PrivilegeModel.prototype.send5 = function (type, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            this.send(187005 /* PrivilegeModelCMD.CMDReqPrivilegeAcquireDailyMessage */, output, s);
        };
        /**
         *
         * 领取特权激活奖励
         * @param 特权类型
         * @param
         *
         * sendReqPrivilegeAcquireActiveMessage  187007
         */
        PrivilegeModel.prototype.send7 = function (type, level, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            output.writeVarInt(level, false);
            this.send(187007 /* PrivilegeModelCMD.CMDReqPrivilegeAcquireActiveMessage */, output, s);
        };
        /**
         *
         * 请求信息
         *
         * sendReqPrivilegeBuffInfoMessage  187011
         */
        PrivilegeModel.prototype.send11 = function (s) {
            var output = this.getO();
            this.send(187011 /* PrivilegeModelCMD.CMDReqPrivilegeBuffInfoMessage */, output, s);
        };
        /**
         *
         * 请求升级
         *
         * sendReqPrivilegeBuffUpgradeMessage  187013
         */
        PrivilegeModel.prototype.send13 = function (s) {
            var output = this.getO();
            this.send(187013 /* PrivilegeModelCMD.CMDReqPrivilegeBuffUpgradeMessage */, output, s);
        };
        PrivilegeModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 187002 /* PrivilegeModelCMD.CMDResPrivilegeInfoMessage */:
                    var resPrivilegeInfoMessage = {};
                    var acquiredLength1 = input.readShort();
                    resPrivilegeInfoMessage["acquired"] = new Array(acquiredLength1);
                    for (var acquiredi1 = 0; acquiredi1 < acquiredLength1; acquiredi1++) {
                        resPrivilegeInfoMessage["acquired"][acquiredi1] = input.readVarInt(false); //每日已领取
                    }
                    var beanListLength1 = input.readShort();
                    resPrivilegeInfoMessage["beanList"] = [];
                    for (var beanListi1 = 0; beanListi1 < beanListLength1; beanListi1++) {
                        if (input.readByte() != 0) {
                            var temp70 = resPrivilegeInfoMessage["beanList"][beanListi1] = {}; //特权信息
                            temp70["type"] = input.readVarInt(false); //特权类型
                            temp70["time"] = input.readVarInt(false); //到期时间戳,为0就是没有特权 -1永久
                            temp70["level"] = input.readVarInt(false); //当前等级
                            temp70["status"] = input.readVarInt(false); //激活奖励状态 0:不可领 1:可领 2:已领
                        }
                        else {
                            resPrivilegeInfoMessage["beanList"][beanListi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resPrivilegeInfoMessage);
                    break;
                case 187004 /* PrivilegeModelCMD.CMDResPrivilegeUpdateMessage */:
                    var privilegeLength1 = input.readByte();
                    if (privilegeLength1 != 0) {
                        var resPrivilegeUpdateMessage = {}; //特权
                        resPrivilegeUpdateMessage["type"] = input.readVarInt(false); //特权类型
                        resPrivilegeUpdateMessage["time"] = input.readVarInt(false); //到期时间戳,为0就是没有特权 -1永久
                        resPrivilegeUpdateMessage["level"] = input.readVarInt(false); //当前等级
                        resPrivilegeUpdateMessage["status"] = input.readVarInt(false); //激活奖励状态 0:不可领 1:可领 2:已领
                    }
                    this.sendNotif(cmd, resPrivilegeUpdateMessage);
                    break;
                case 187006 /* PrivilegeModelCMD.CMDResPrivilegeAcquireDailyMessage */:
                    var acquiredLength2 = input.readShort();
                    var resPrivilegeAcquireDailyMessage = new Array(acquiredLength2);
                    for (var acquiredi2 = 0; acquiredi2 < acquiredLength2; acquiredi2++) {
                        resPrivilegeAcquireDailyMessage[acquiredi2] = input.readVarInt(false); //每日已领取
                    }
                    this.sendNotif(cmd, resPrivilegeAcquireDailyMessage);
                    break;
                case 187012 /* PrivilegeModelCMD.CMDResPrivilegeBuffInfoMessage */:
                    var resPrivilegeBuffInfoMessage = input.readVarInt(false); //当前等级
                    this.sendNotif(cmd, resPrivilegeBuffInfoMessage);
                    break;
            }
        };
        return PrivilegeModel;
    }(ModelBase));
    net.PrivilegeModel = PrivilegeModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:313
     */
    var PrivilegeWeekModel = /** @class */ (function (_super) {
        __extends(PrivilegeWeekModel, _super);
        function PrivilegeWeekModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(313002 /* PrivilegeWeekModelCMD.CMDResPrivilegeWeekInfoMessage */);
            thisObj.reg(313005 /* PrivilegeWeekModelCMD.CMDResReceivePrivilegeWeekMessage */);
            return _this;
        }
        PrivilegeWeekModel.ins = function () {
            if (!this._ins)
                this._ins = new PrivilegeWeekModel();
            return this._ins;
        };
        /**
         *
         * 前端请求纪元密令（周卡）数据信息
         *
         * sendReqPrivilegeWeekInfoMessage  313001
         */
        PrivilegeWeekModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(313001 /* PrivilegeWeekModelCMD.CMDReqPrivilegeWeekInfoMessage */, output, s);
        };
        /**
         *
         * 前端请求激活/续费纪元密令（周卡）（付费点激活/续费在功能代码监听充值接口处理）
         * @param 激活档位（即cfg_weekcard中的id）
         *
         * sendReqActivatePrivilegeWeekMessage  313003
         */
        PrivilegeWeekModel.prototype.send3 = function (level, s) {
            var output = this.getO();
            output.writeVarInt(level, false);
            this.send(313003 /* PrivilegeWeekModelCMD.CMDReqActivatePrivilegeWeekMessage */, output, s);
        };
        /**
         *
         * 前端请求领取纪元密令（周卡）奖励
         *
         * sendReqReceivePrivilegeWeekMessage  313004
         */
        PrivilegeWeekModel.prototype.send4 = function (s) {
            var output = this.getO();
            this.send(313004 /* PrivilegeWeekModelCMD.CMDReqReceivePrivilegeWeekMessage */, output, s);
        };
        /**
         *
         * 前端请求纪元密令（周卡）首领传送
         * @param 传送ID
         *
         * sendReqChiefTeleportMessage  313006
         */
        PrivilegeWeekModel.prototype.send6 = function (deliverId, s) {
            var output = this.getO();
            output.writeVarInt(deliverId, false);
            this.send(313006 /* PrivilegeWeekModelCMD.CMDReqChiefTeleportMessage */, output, s);
        };
        PrivilegeWeekModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 313002 /* PrivilegeWeekModelCMD.CMDResPrivilegeWeekInfoMessage */:
                    var PrivilegeWeekInfoLength1 = input.readByte();
                    if (PrivilegeWeekInfoLength1 != 0) {
                        var resPrivilegeWeekInfoMessage = {}; //纪元密令（周卡）数据
                        resPrivilegeWeekInfoMessage["level"] = input.readVarInt(false); //当已激活的纪元密令（周卡）档位（即cfg_weekcard中的id）
                        resPrivilegeWeekInfoMessage["remainTime"] = input.readVarInt(false); //纪元密令（周卡）截止时间戳（单位:秒）
                        resPrivilegeWeekInfoMessage["receiveStatus"] = input.readVarInt(false); //纪元密令（周卡）当日奖励领取状态（0:未领取;1:已领取.）
                        resPrivilegeWeekInfoMessage["teleportCounts"] = input.readVarInt(false); //纪元密令（周卡）当日首领直接传可用次数
                    }
                    this.sendNotif(cmd, resPrivilegeWeekInfoMessage);
                    break;
                case 313005 /* PrivilegeWeekModelCMD.CMDResReceivePrivilegeWeekMessage */:
                    var resReceivePrivilegeWeekMessage = input.readVarInt(false); //纪元密令（周卡）当日奖励领取状态（0:未领取;1:已领取.）
                    this.sendNotif(cmd, resReceivePrivilegeWeekMessage);
                    break;
            }
        };
        return PrivilegeWeekModel;
    }(ModelBase));
    net.PrivilegeWeekModel = PrivilegeWeekModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:125
     */
    var PvpModel = /** @class */ (function (_super) {
        __extends(PvpModel, _super);
        function PvpModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(125002 /* PvpModelCMD.CMDResArenaInfoMessage */);
            thisObj.reg(125006 /* PvpModelCMD.CMDResArenaBattleLogMessage */);
            thisObj.reg(125008 /* PvpModelCMD.CMDResArenaRankingMessage */);
            thisObj.reg(125012 /* PvpModelCMD.CMDResArenaTeamInfoMessage */);
            thisObj.reg(125014 /* PvpModelCMD.CMDResArenaTeamInviteMessage */);
            thisObj.reg(125021 /* PvpModelCMD.CMDResArenaFieldMembersMessage */);
            thisObj.reg(125022 /* PvpModelCMD.CMDResArenaFieldOccupyMessage */);
            thisObj.reg(125023 /* PvpModelCMD.CMDResArenaFieldScrumMessage */);
            thisObj.reg(125025 /* PvpModelCMD.CMDResArenaFieldRankingMessage */);
            thisObj.reg(125026 /* PvpModelCMD.CMDResArenaFieldSettleMessage */);
            thisObj.reg(125027 /* PvpModelCMD.CMDResArenaFieldSelfMessage */);
            return _this;
        }
        PvpModel.ins = function () {
            if (!this._ins)
                this._ins = new PvpModel();
            return this._ins;
        };
        /**
         *
         * 查看信息
         *
         * sendReqArenaInfoMessage  125001
         */
        PvpModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(125001 /* PvpModelCMD.CMDReqArenaInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取每日奖励
         * @param 次数
         *
         * sendReqArenaAcquireDailyMessage  125003
         */
        PvpModel.prototype.send3 = function (wins, s) {
            var output = this.getO();
            output.writeVarInt(wins, false);
            this.send(125003 /* PvpModelCMD.CMDReqArenaAcquireDailyMessage */, output, s);
        };
        /**
         *
         * 请求领取赛季奖励
         * @param 次数
         *
         * sendReqArenaAcquireSeasonMessage  125004
         */
        PvpModel.prototype.send4 = function (wins, s) {
            var output = this.getO();
            output.writeVarInt(wins, false);
            this.send(125004 /* PvpModelCMD.CMDReqArenaAcquireSeasonMessage */, output, s);
        };
        /**
         *
         * 请求战斗记录
         *
         * sendReqArenaBattleLogMessage  125005
         */
        PvpModel.prototype.send5 = function (s) {
            var output = this.getO();
            this.send(125005 /* PvpModelCMD.CMDReqArenaBattleLogMessage */, output, s);
        };
        /**
         *
         * 查看排行信息
         * @param 请求查看的段位
         *
         * sendReqArenaRankingMessage  125007
         */
        PvpModel.prototype.send7 = function (rank, s) {
            var output = this.getO();
            output.writeVarInt(rank, false);
            this.send(125007 /* PvpModelCMD.CMDReqArenaRankingMessage */, output, s);
        };
        /**
         *
         * 查看当前信息
         *
         * sendReqArenaTeamInfoMessage  125011
         */
        PvpModel.prototype.send11 = function (s) {
            var output = this.getO();
            this.send(125011 /* PvpModelCMD.CMDReqArenaTeamInfoMessage */, output, s);
        };
        /**
         *
         * 邀请玩家
         * @param 玩家id
         *
         * sendReqArenaTeamInviteMessage  125013
         */
        PvpModel.prototype.send13 = function (rid, s) {
            var output = this.getO();
            output.writeLong(rid);
            this.send(125013 /* PvpModelCMD.CMDReqArenaTeamInviteMessage */, output, s);
        };
        /**
         *
         * 处理邀请
         * @param 对方玩家id
         * @param 0同意 1拒绝
         *
         * sendReqArenaTeamInviteHandleMessage  125015
         */
        PvpModel.prototype.send15 = function (rid, state, s) {
            var output = this.getO();
            output.writeLong(rid);
            output.writeVarInt(state, false);
            this.send(125015 /* PvpModelCMD.CMDReqArenaTeamInviteHandleMessage */, output, s);
        };
        /**
         *
         * 开始匹配
         *
         * sendReqArenaMatchMessage  125016
         */
        PvpModel.prototype.send16 = function (s) {
            var output = this.getO();
            this.send(125016 /* PvpModelCMD.CMDReqArenaMatchMessage */, output, s);
        };
        /**
         *
         * 取消匹配
         *
         * sendReqArenaMatchCancelMessage  125017
         */
        PvpModel.prototype.send17 = function (s) {
            var output = this.getO();
            this.send(125017 /* PvpModelCMD.CMDReqArenaMatchCancelMessage */, output, s);
        };
        /**
         *
         * 请求离开队伍
         *
         * sendReqArenaTeamLeaveMessage  125018
         */
        PvpModel.prototype.send18 = function (s) {
            var output = this.getO();
            this.send(125018 /* PvpModelCMD.CMDReqArenaTeamLeaveMessage */, output, s);
        };
        /**
         *
         * 请求战场排名
         *
         * sendReqArenaFieldRankingMessage  125024
         */
        PvpModel.prototype.send24 = function (s) {
            var output = this.getO();
            this.send(125024 /* PvpModelCMD.CMDReqArenaFieldRankingMessage */, output, s);
        };
        PvpModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 125002 /* PvpModelCMD.CMDResArenaInfoMessage */:
                    var resArenaInfoMessage = {};
                    resArenaInfoMessage["way"] = input.readVarInt(false); //0信息返回  1段位变化
                    resArenaInfoMessage["rank"] = input.readVarInt(false); //评级
                    resArenaInfoMessage["star"] = input.readVarInt(false); //星
                    resArenaInfoMessage["dailyWins"] = input.readVarInt(false); //今日胜利次数
                    var dailyAcquiredLength1 = input.readShort();
                    resArenaInfoMessage["dailyAcquired"] = new Array(dailyAcquiredLength1);
                    for (var dailyAcquiredi1 = 0; dailyAcquiredi1 < dailyAcquiredLength1; dailyAcquiredi1++) {
                        resArenaInfoMessage["dailyAcquired"][dailyAcquiredi1] = input.readVarInt(false); //日常奖励领取记录 记录已领取的次数
                    }
                    resArenaInfoMessage["seasonAttends"] = input.readVarInt(false); //赛季总场次
                    resArenaInfoMessage["seasonWins"] = input.readVarInt(false); //赛季胜利次数
                    var seasonAcquiredLength1 = input.readShort();
                    resArenaInfoMessage["seasonAcquired"] = new Array(seasonAcquiredLength1);
                    for (var seasonAcquiredi1 = 0; seasonAcquiredi1 < seasonAcquiredLength1; seasonAcquiredi1++) {
                        resArenaInfoMessage["seasonAcquired"][seasonAcquiredi1] = input.readVarInt(false); //赛季奖励领取记录 记录已领取的次数
                    }
                    this.sendNotif(cmd, resArenaInfoMessage);
                    break;
                case 125006 /* PvpModelCMD.CMDResArenaBattleLogMessage */:
                    var logsLength1 = input.readShort();
                    var resArenaBattleLogMessage = [];
                    for (var logsi1 = 0; logsi1 < logsLength1; logsi1++) {
                        if (input.readByte() != 0) {
                            var temp812 = resArenaBattleLogMessage[logsi1] = {}; //
                            temp812["time"] = input.readVarInt(false); //时间
                            temp812["result"] = input.readVarInt(false); //结果 1胜利 0失败
                            var membersLength1 = input.readShort();
                            temp812["members"] = [];
                            for (var membersi1 = 0; membersi1 < membersLength1; membersi1++) {
                                if (input.readByte() != 0) {
                                    var temp813 = temp812["members"][membersi1] = {}; //成员列表
                                    temp813["id"] = input.readLong(); //玩家id
                                    temp813["name"] = input.readString(); //玩家名字
                                    temp813["career"] = input.readVarInt(false); //玩家职业
                                    temp813["sex"] = input.readVarInt(false); //玩家性别
                                    temp813["rank"] = input.readVarInt(false); //玩家评级
                                    temp813["star"] = input.readVarInt(false); //星
                                    temp813["standings"] = input.readVarInt(false); //玩家战绩 （胜利/失败次数）
                                    temp813["side"] = input.readVarInt(false); //玩家属于哪一方 1/2
                                    temp813["escape"] = input.readVarInt(false); //1逃跑的
                                }
                                else {
                                    temp812["members"][membersi1] = null;
                                }
                            }
                        }
                        else {
                            resArenaBattleLogMessage[logsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resArenaBattleLogMessage);
                    break;
                case 125008 /* PvpModelCMD.CMDResArenaRankingMessage */:
                    var resArenaRankingMessage = {};
                    resArenaRankingMessage["rank"] = input.readVarInt(false); //
                    var rankingsLength1 = input.readShort();
                    resArenaRankingMessage["rankings"] = [];
                    for (var rankingsi1 = 0; rankingsi1 < rankingsLength1; rankingsi1++) {
                        if (input.readByte() != 0) {
                            var temp814 = resArenaRankingMessage["rankings"][rankingsi1] = {}; //排行信息
                            temp814["id"] = input.readLong(); //玩家id
                            temp814["name"] = input.readString(); //名字
                            temp814["career"] = input.readVarInt(false); //职业
                            temp814["sex"] = input.readVarInt(false); //性别
                            temp814["rank"] = input.readVarInt(false); //评级
                            temp814["star"] = input.readVarInt(false); //星
                            temp814["wins"] = input.readVarInt(false); //胜利次数
                        }
                        else {
                            resArenaRankingMessage["rankings"][rankingsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resArenaRankingMessage);
                    break;
                case 125012 /* PvpModelCMD.CMDResArenaTeamInfoMessage */:
                    var resArenaTeamInfoMessage = {};
                    var membersLength2 = input.readShort();
                    resArenaTeamInfoMessage["members"] = [];
                    for (var membersi2 = 0; membersi2 < membersLength2; membersi2++) {
                        if (input.readByte() != 0) {
                            var temp815 = resArenaTeamInfoMessage["members"][membersi2] = {}; //成员列表 第一个成员是队长
                            temp815["rid"] = input.readLong(); //玩家rid
                            temp815["playerName"] = input.readString(); //玩家名称
                            temp815["level"] = input.readVarInt(false); //玩家等级
                            temp815["carerr"] = input.readVarInt(false); //职业
                            temp815["sex"] = input.readVarInt(false); //性别
                        }
                        else {
                            resArenaTeamInfoMessage["members"][membersi2] = null;
                        }
                    }
                    resArenaTeamInfoMessage["matchTime"] = input.readVarInt(false); //开始匹配时间 0表示还未开始
                    this.sendNotif(cmd, resArenaTeamInfoMessage);
                    break;
                case 125014 /* PvpModelCMD.CMDResArenaTeamInviteMessage */:
                    var resArenaTeamInviteMessage = {};
                    var memberLength1 = input.readByte();
                    if (memberLength1 != 0) {
                        var temp816 = resArenaTeamInviteMessage["member"] = {}; //邀请者信息
                        temp816["rid"] = input.readLong(); //玩家rid
                        temp816["playerName"] = input.readString(); //玩家名称
                        temp816["level"] = input.readVarInt(false); //玩家等级
                        temp816["carerr"] = input.readVarInt(false); //职业
                        temp816["sex"] = input.readVarInt(false); //性别
                    }
                    resArenaTeamInviteMessage["expire"] = input.readVarInt(false); //过期时间
                    this.sendNotif(cmd, resArenaTeamInviteMessage);
                    break;
                case 125021 /* PvpModelCMD.CMDResArenaFieldMembersMessage */:
                    var membersLength3 = input.readShort();
                    var resArenaFieldMembersMessage = [];
                    for (var membersi3 = 0; membersi3 < membersLength3; membersi3++) {
                        if (input.readByte() != 0) {
                            var temp817 = resArenaFieldMembersMessage[membersi3] = {}; //成员列表
                            temp817["id"] = input.readLong(); //玩家id
                            temp817["name"] = input.readString(); //玩家名字
                            temp817["career"] = input.readVarInt(false); //玩家职业
                            temp817["sex"] = input.readVarInt(false); //玩家性别
                            temp817["rank"] = input.readVarInt(false); //玩家评级
                            temp817["star"] = input.readVarInt(false); //星
                            temp817["standings"] = input.readVarInt(false); //玩家战绩 （胜利/失败次数）
                            temp817["side"] = input.readVarInt(false); //玩家属于哪一方 1/2
                            temp817["escape"] = input.readVarInt(false); //1逃跑的
                        }
                        else {
                            resArenaFieldMembersMessage[membersi3] = null;
                        }
                    }
                    this.sendNotif(cmd, resArenaFieldMembersMessage);
                    break;
                case 125022 /* PvpModelCMD.CMDResArenaFieldOccupyMessage */:
                    var progressLength1 = input.readShort();
                    var resArenaFieldOccupyMessage = new Array(progressLength1);
                    for (var progressi1 = 0; progressi1 < progressLength1; progressi1++) {
                        resArenaFieldOccupyMessage[progressi1] = input.readVarInt(false); //占领进度 两个元素，分表表示1的进度，2的进度
                    }
                    this.sendNotif(cmd, resArenaFieldOccupyMessage);
                    break;
                case 125023 /* PvpModelCMD.CMDResArenaFieldScrumMessage */:
                    var resArenaFieldScrumMessage = {};
                    resArenaFieldScrumMessage["side"] = input.readVarInt(false); //哪一方
                    resArenaFieldScrumMessage["progress"] = input.readVarInt(false); //进度
                    this.sendNotif(cmd, resArenaFieldScrumMessage);
                    break;
                case 125025 /* PvpModelCMD.CMDResArenaFieldRankingMessage */:
                    var rankingsLength2 = input.readShort();
                    var resArenaFieldRankingMessage = [];
                    for (var rankingsi2 = 0; rankingsi2 < rankingsLength2; rankingsi2++) {
                        if (input.readByte() != 0) {
                            var temp818 = resArenaFieldRankingMessage[rankingsi2] = {}; //
                            temp818["id"] = input.readLong(); //
                            temp818["name"] = input.readString(); //
                            temp818["kill"] = input.readVarInt(false); //击杀数
                            temp818["assist"] = input.readVarInt(false); //助攻
                            temp818["death"] = input.readVarInt(false); //死亡
                        }
                        else {
                            resArenaFieldRankingMessage[rankingsi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resArenaFieldRankingMessage);
                    break;
                case 125026 /* PvpModelCMD.CMDResArenaFieldSettleMessage */:
                    var resArenaFieldSettleMessage = {};
                    resArenaFieldSettleMessage["winnerSide"] = input.readVarInt(false); //胜方
                    var membersLength4 = input.readShort();
                    resArenaFieldSettleMessage["members"] = [];
                    for (var membersi4 = 0; membersi4 < membersLength4; membersi4++) {
                        if (input.readByte() != 0) {
                            var temp819 = resArenaFieldSettleMessage["members"][membersi4] = {}; //
                            temp819["id"] = input.readLong(); //玩家id
                            temp819["name"] = input.readString(); //玩家名字
                            temp819["career"] = input.readVarInt(false); //玩家职业
                            temp819["sex"] = input.readVarInt(false); //玩家性别
                            temp819["rank"] = input.readVarInt(false); //玩家评级
                            temp819["star"] = input.readVarInt(false); //星
                            temp819["standings"] = input.readVarInt(false); //玩家战绩 （胜利/失败次数）
                            temp819["side"] = input.readVarInt(false); //玩家属于哪一方 1/2
                            temp819["escape"] = input.readVarInt(false); //1逃跑的
                        }
                        else {
                            resArenaFieldSettleMessage["members"][membersi4] = null;
                        }
                    }
                    var rankingsLength3 = input.readShort();
                    resArenaFieldSettleMessage["rankings"] = [];
                    for (var rankingsi3 = 0; rankingsi3 < rankingsLength3; rankingsi3++) {
                        if (input.readByte() != 0) {
                            var temp820 = resArenaFieldSettleMessage["rankings"][rankingsi3] = {}; //
                            temp820["id"] = input.readLong(); //
                            temp820["name"] = input.readString(); //
                            temp820["kill"] = input.readVarInt(false); //击杀数
                            temp820["assist"] = input.readVarInt(false); //助攻
                            temp820["death"] = input.readVarInt(false); //死亡
                        }
                        else {
                            resArenaFieldSettleMessage["rankings"][rankingsi3] = null;
                        }
                    }
                    this.sendNotif(cmd, resArenaFieldSettleMessage);
                    break;
                case 125027 /* PvpModelCMD.CMDResArenaFieldSelfMessage */:
                    var dataLength1 = input.readByte();
                    if (dataLength1 != 0) {
                        var resArenaFieldSelfMessage = {}; //
                        resArenaFieldSelfMessage["id"] = input.readLong(); //
                        resArenaFieldSelfMessage["name"] = input.readString(); //
                        resArenaFieldSelfMessage["kill"] = input.readVarInt(false); //击杀数
                        resArenaFieldSelfMessage["assist"] = input.readVarInt(false); //助攻
                        resArenaFieldSelfMessage["death"] = input.readVarInt(false); //死亡
                    }
                    this.sendNotif(cmd, resArenaFieldSelfMessage);
                    break;
            }
        };
        return PvpModel;
    }(ModelBase));
    net.PvpModel = PvpModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:173
     */
    var QueryModel = /** @class */ (function (_super) {
        __extends(QueryModel, _super);
        function QueryModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(173002 /* QueryModelCMD.CMDResQueryRoleIdMessage */);
            thisObj.reg(173021 /* QueryModelCMD.CMDResQueryRoleMessage */);
            return _this;
        }
        QueryModel.ins = function () {
            if (!this._ins)
                this._ins = new QueryModel();
            return this._ins;
        };
        /**
         *
         * 通过玩家名字查询玩家id
         * @param 玩家名字
         *
         * sendReqQueryRoleIdMessage  173001
         */
        QueryModel.prototype.send1 = function (name, s) {
            var output = this.getO();
            output.writeString(name);
            this.send(173001 /* QueryModelCMD.CMDReqQueryRoleIdMessage */, output, s);
        };
        /**
         *
         * 请求查看玩家
         * @param 玩家id
         * @param
         *
         * sendReqQueryRoleMessage  173011
         */
        QueryModel.prototype.send11 = function (roleId, source, s) {
            var output = this.getO();
            output.writeLong(roleId);
            output.writeVarInt(source, false);
            this.send(173011 /* QueryModelCMD.CMDReqQueryRoleMessage */, output, s);
        };
        QueryModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 173002 /* QueryModelCMD.CMDResQueryRoleIdMessage */:
                    var resQueryRoleIdMessage = {};
                    resQueryRoleIdMessage["name"] = input.readString(); //玩家名字
                    resQueryRoleIdMessage["rid"] = input.readLong(); //玩家rid
                    this.sendNotif(cmd, resQueryRoleIdMessage);
                    break;
                case 173021 /* QueryModelCMD.CMDResQueryRoleMessage */:
                    var queryInfoLength1 = input.readShort();
                    var resQueryRoleMessage = [];
                    for (var queryInfoi1 = 0; queryInfoi1 < queryInfoLength1; queryInfoi1++) {
                        if (input.readByte() != 0) {
                            var temp1273 = resQueryRoleMessage[queryInfoi1] = {}; //查询信息
                            temp1273["roleType"] = input.readVarInt(false); //角色类型
                            temp1273["source"] = input.readVarInt(false); //
                            temp1273["roleId"] = input.readLong(); //玩家id
                            temp1273["roleName"] = input.readString(); //玩家名字
                            temp1273["career"] = input.readVarInt(false); //职业
                            temp1273["sex"] = input.readVarInt(false); //性别
                            temp1273["hair"] = input.readVarInt(false); //发型
                            temp1273["level"] = input.readVarInt(false); //等级
                            temp1273["unionId"] = input.readLong(); //行会id
                            temp1273["unionName"] = input.readString(); //行会名字
                            temp1273["unionPosition"] = input.readVarInt(false); //行会职位
                            temp1273["title"] = input.readVarInt(false); //封号等级(军衔)
                            temp1273["official"] = input.readVarInt(false); //封号(新)
                            temp1273["wingType"] = input.readVarInt(false); //羽翼类型
                            temp1273["wingAwakeLevel"] = input.readVarInt(false); //羽翼觉醒等级
                            var equipsLength1 = input.readShort();
                            temp1273["equips"] = [];
                            for (var equipsi1 = 0; equipsi1 < equipsLength1; equipsi1++) {
                                if (input.readByte() != 0) {
                                    var temp1274 = temp1273["equips"][equipsi1] = {}; //装备列表
                                    var itemLength1 = input.readByte();
                                    if (itemLength1 != 0) {
                                        var temp1275 = temp1274["item"] = {}; //
                                        temp1275["uid"] = input.readLong(); //唯一id
                                        temp1275["itemId"] = input.readVarInt(false); //道具配置id
                                        temp1275["count"] = input.readVarInt(false); //数量
                                        temp1275["expire"] = input.readVarInt(false); //过期时间
                                        temp1275["uTimes"] = input.readVarInt(false); //已经使用的次数
                                        temp1275["time"] = input.readVarInt(false); //道具获得时间
                                        var paramsLength1 = input.readShort();
                                        temp1275["params"] = new Array(paramsLength1);
                                        for (var paramsi1 = 0; paramsi1 < paramsLength1; paramsi1++) {
                                            temp1275["params"][paramsi1] = input.readVarInt(false); //道具参数
                                        }
                                        var equipDataLength1 = input.readByte();
                                        if (equipDataLength1 != 0) {
                                            var temp1276 = temp1275["equipData"] = {}; //装备属性（null表示没有）
                                            temp1276["durable"] = input.readVarInt(false); //消耗耐久
                                            temp1276["starLevel"] = input.readVarInt(false); //升星等级
                                            temp1276["starLock"] = input.readVarInt(false); //被锁星级
                                            temp1276["starExp"] = input.readVarInt(false); //升星祝福值
                                            temp1276["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                            temp1276["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                            temp1276["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                            temp1276["spiritLevel"] = input.readVarInt(false); //注灵等级
                                            temp1276["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                            temp1276["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                            temp1276["sign"] = input.readString(); //签名
                                            var destinyAttrsLength1 = input.readShort();
                                            temp1276["destinyAttrs"] = [];
                                            for (var destinyAttrsi1 = 0; destinyAttrsi1 < destinyAttrsLength1; destinyAttrsi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp1277 = temp1276["destinyAttrs"][destinyAttrsi1] = {}; //命运属性
                                                    temp1277["career"] = input.readVarInt(false); //职业限定
                                                    temp1277["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp1277["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp1276["destinyAttrs"][destinyAttrsi1] = null;
                                                }
                                            }
                                            var superAttrsLength1 = input.readShort();
                                            temp1276["superAttrs"] = [];
                                            for (var superAttrsi1 = 0; superAttrsi1 < superAttrsLength1; superAttrsi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp1278 = temp1276["superAttrs"][superAttrsi1] = {}; //极品属性
                                                    temp1278["career"] = input.readVarInt(false); //职业限定
                                                    temp1278["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp1278["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp1276["superAttrs"][superAttrsi1] = null;
                                                }
                                            }
                                            var identifyAttrsLength1 = input.readShort();
                                            temp1276["identifyAttrs"] = [];
                                            for (var identifyAttrsi1 = 0; identifyAttrsi1 < identifyAttrsLength1; identifyAttrsi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp1279 = temp1276["identifyAttrs"][identifyAttrsi1] = {}; //鉴定属性
                                                    temp1279["career"] = input.readVarInt(false); //职业限定
                                                    temp1279["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp1279["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp1276["identifyAttrs"][identifyAttrsi1] = null;
                                                }
                                            }
                                            var xiLianAttrsLength1 = input.readShort();
                                            temp1276["xiLianAttrs"] = [];
                                            for (var xiLianAttrsi1 = 0; xiLianAttrsi1 < xiLianAttrsLength1; xiLianAttrsi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp1280 = temp1276["xiLianAttrs"][xiLianAttrsi1] = {}; //配饰洗练属性
                                                    temp1280["career"] = input.readVarInt(false); //职业限定
                                                    temp1280["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp1280["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp1276["xiLianAttrs"][xiLianAttrsi1] = null;
                                                }
                                            }
                                            temp1276["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                            temp1276["growLevel"] = input.readVarInt(false); //成长等级
                                            temp1276["growExp"] = input.readVarInt(false); //成长经验
                                            var bestAttrsLength1 = input.readShort();
                                            temp1276["bestAttrs"] = new Array(bestAttrsLength1);
                                            for (var bestAttrsi1 = 0; bestAttrsi1 < bestAttrsLength1; bestAttrsi1++) {
                                                temp1276["bestAttrs"][bestAttrsi1] = input.readVarInt(false); //极品属性（新）
                                            }
                                            var soulAttrsLength1 = input.readShort();
                                            temp1276["soulAttrs"] = new Array(soulAttrsLength1);
                                            for (var soulAttrsi1 = 0; soulAttrsi1 < soulAttrsLength1; soulAttrsi1++) {
                                                temp1276["soulAttrs"][soulAttrsi1] = input.readVarInt(false); //心魂属性
                                            }
                                            var godsAttrsLength1 = input.readShort();
                                            temp1276["godsAttrs"] = new Array(godsAttrsLength1);
                                            for (var godsAttrsi1 = 0; godsAttrsi1 < godsAttrsLength1; godsAttrsi1++) {
                                                temp1276["godsAttrs"][godsAttrsi1] = input.readVarInt(false); //额外神级属性
                                            }
                                            temp1276["qualification"] = input.readVarInt(false); //资质
                                            var specialDurableLength1 = input.readShort();
                                            temp1276["specialDurable"] = [];
                                            for (var specialDurablei1 = 0; specialDurablei1 < specialDurableLength1; specialDurablei1++) {
                                                if (input.readByte() != 0) {
                                                    var temp1281 = temp1276["specialDurable"][specialDurablei1] = {}; //特殊耐久消耗值
                                                    temp1281["type"] = input.readVarInt(false); //类型
                                                    temp1281["value"] = input.readVarInt(false); //已消耗值
                                                }
                                                else {
                                                    temp1276["specialDurable"][specialDurablei1] = null;
                                                }
                                            }
                                        }
                                        var immobilizationLength1 = input.readByte();
                                        if (immobilizationLength1 != 0) {
                                            var temp1282 = temp1275["immobilization"] = {}; //固化数据
                                            temp1282["action"] = input.readVarInt(false); //产生行为
                                            temp1282["expire"] = input.readVarInt(false); //过期时间 时间戳
                                        }
                                        var fromLength1 = input.readByte();
                                        if (fromLength1 != 0) {
                                            var temp1283 = temp1275["from"] = {}; //来源
                                            temp1283["action"] = input.readVarInt(false); //产生行为
                                            temp1283["firstRole"] = input.readLong(); //第一个玩家id
                                            temp1283["firstRoleName"] = input.readString(); //第一个玩家名字
                                            var paramsLength2 = input.readShort();
                                            temp1283["params"] = [];
                                            for (var paramsi2 = 0; paramsi2 < paramsLength2; paramsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp1284 = temp1283["params"][paramsi2] = {}; //
                                                    temp1284["key"] = input.readVarInt(false); //
                                                    temp1284["value"] = input.readString(); //
                                                }
                                                else {
                                                    temp1283["params"][paramsi2] = null;
                                                }
                                            }
                                        }
                                        temp1275["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                                        var spriteDataLength1 = input.readByte();
                                        if (spriteDataLength1 != 0) {
                                            var temp1285 = temp1275["spriteData"] = {}; //灵兽数据（null表示没有）
                                            temp1285["level"] = input.readVarInt(false); //灵兽等级
                                            temp1285["exp"] = input.readVarInt(false); //灵兽经验
                                            temp1285["skin"] = input.readVarInt(false); //灵兽皮肤
                                            var skillsLength1 = input.readShort();
                                            temp1285["skills"] = [];
                                            for (var skillsi1 = 0; skillsi1 < skillsLength1; skillsi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp1286 = temp1285["skills"][skillsi1] = {}; //灵兽出战技能
                                                    temp1286["id"] = input.readVarInt(false); //
                                                    temp1286["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp1285["skills"][skillsi1] = null;
                                                }
                                            }
                                            var ownerSkillsLength1 = input.readShort();
                                            temp1285["ownerSkills"] = [];
                                            for (var ownerSkillsi1 = 0; ownerSkillsi1 < ownerSkillsLength1; ownerSkillsi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp1287 = temp1285["ownerSkills"][ownerSkillsi1] = {}; //灵兽拥有的技能
                                                    temp1287["id"] = input.readVarInt(false); //
                                                    temp1287["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp1285["ownerSkills"][ownerSkillsi1] = null;
                                                }
                                            }
                                            var ownerSkinsLength1 = input.readShort();
                                            temp1285["ownerSkins"] = [];
                                            for (var ownerSkinsi1 = 0; ownerSkinsi1 < ownerSkinsLength1; ownerSkinsi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp1288 = temp1285["ownerSkins"][ownerSkinsi1] = {}; //灵兽拥有的皮肤
                                                    temp1288["id"] = input.readVarInt(false); //
                                                    temp1288["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp1285["ownerSkins"][ownerSkinsi1] = null;
                                                }
                                            }
                                            var absorbExpLength1 = input.readShort();
                                            temp1285["absorbExp"] = [];
                                            for (var absorbExpi1 = 0; absorbExpi1 < absorbExpLength1; absorbExpi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp1289 = temp1285["absorbExp"][absorbExpi1] = {}; //灵兽吸收经验值
                                                    temp1289["id"] = input.readVarInt(false); //
                                                    temp1289["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp1285["absorbExp"][absorbExpi1] = null;
                                                }
                                            }
                                        }
                                    }
                                    temp1274["index"] = input.readVarInt(false); //装备位置
                                }
                                else {
                                    temp1273["equips"][equipsi1] = null;
                                }
                            }
                            var worldsLength1 = input.readShort();
                            temp1273["worlds"] = [];
                            for (var worldsi1 = 0; worldsi1 < worldsLength1; worldsi1++) {
                                if (input.readByte() != 0) {
                                    var temp1290 = temp1273["worlds"][worldsi1] = {}; //佩文信息
                                    temp1290["type"] = input.readVarInt(false); //类型
                                    temp1290["level"] = input.readVarInt(false); //等级
                                    temp1290["bless"] = input.readVarInt(false); //祝福值
                                }
                                else {
                                    temp1273["worlds"][worldsi1] = null;
                                }
                            }
                            var intensifiesLength1 = input.readShort();
                            temp1273["intensifies"] = [];
                            for (var intensifiesi1 = 0; intensifiesi1 < intensifiesLength1; intensifiesi1++) {
                                if (input.readByte() != 0) {
                                    var temp1291 = temp1273["intensifies"][intensifiesi1] = {}; //强化信息
                                    temp1291["index"] = input.readVarInt(false); //装备部位
                                    temp1291["strengthLevel"] = input.readVarInt(false); //强化等级
                                    temp1291["strengthProgress"] = input.readVarInt(false); //强化进度条
                                }
                                else {
                                    temp1273["intensifies"][intensifiesi1] = null;
                                }
                            }
                            var mixLength1 = input.readShort();
                            temp1273["mix"] = [];
                            for (var mixi1 = 0; mixi1 < mixLength1; mixi1++) {
                                if (input.readByte() != 0) {
                                    var temp1292 = temp1273["mix"][mixi1] = {}; //融合信息
                                    temp1292["index"] = input.readVarInt(false); //部位
                                    var idLength1 = input.readShort();
                                    temp1292["id"] = new Array(idLength1);
                                    for (var idi1 = 0; idi1 < idLength1; idi1++) {
                                        temp1292["id"][idi1] = input.readVarInt(false); //道具id列表
                                    }
                                    var godsLength1 = input.readShort();
                                    temp1292["gods"] = [];
                                    for (var godsi1 = 0; godsi1 < godsLength1; godsi1++) {
                                        if (input.readByte() != 0) {
                                            var temp1293 = temp1292["gods"][godsi1] = {}; //神级属性列表
                                            temp1293["id"] = input.readVarInt(false); //道具id
                                            var godsLength2 = input.readShort();
                                            temp1293["gods"] = new Array(godsLength2);
                                            for (var godsi2 = 0; godsi2 < godsLength2; godsi2++) {
                                                temp1293["gods"][godsi2] = input.readVarInt(false); //神级属性列表
                                            }
                                        }
                                        else {
                                            temp1292["gods"][godsi1] = null;
                                        }
                                    }
                                }
                                else {
                                    temp1273["mix"][mixi1] = null;
                                }
                            }
                            var BoreBeansLength1 = input.readShort();
                            temp1273["BoreBeans"] = [];
                            for (var BoreBeansi1 = 0; BoreBeansi1 < BoreBeansLength1; BoreBeansi1++) {
                                if (input.readByte() != 0) {
                                    var temp1294 = temp1273["BoreBeans"][BoreBeansi1] = {}; //宝石打孔信息
                                    temp1294["state"] = input.readVarInt(false); //0:未开启 1:已开启
                                    temp1294["index"] = input.readVarInt(false); //孔位置
                                }
                                else {
                                    temp1273["BoreBeans"][BoreBeansi1] = null;
                                }
                            }
                            var gemsLength1 = input.readShort();
                            temp1273["gems"] = [];
                            for (var gemsi1 = 0; gemsi1 < gemsLength1; gemsi1++) {
                                if (input.readByte() != 0) {
                                    var temp1295 = temp1273["gems"][gemsi1] = {}; //宝石列表
                                    var itemLength2 = input.readByte();
                                    if (itemLength2 != 0) {
                                        var temp1296 = temp1295["item"] = {}; //
                                        temp1296["uid"] = input.readLong(); //唯一id
                                        temp1296["itemId"] = input.readVarInt(false); //道具配置id
                                        temp1296["count"] = input.readVarInt(false); //数量
                                        temp1296["expire"] = input.readVarInt(false); //过期时间
                                        temp1296["uTimes"] = input.readVarInt(false); //已经使用的次数
                                        temp1296["time"] = input.readVarInt(false); //道具获得时间
                                        var paramsLength3 = input.readShort();
                                        temp1296["params"] = new Array(paramsLength3);
                                        for (var paramsi3 = 0; paramsi3 < paramsLength3; paramsi3++) {
                                            temp1296["params"][paramsi3] = input.readVarInt(false); //道具参数
                                        }
                                        var equipDataLength2 = input.readByte();
                                        if (equipDataLength2 != 0) {
                                            var temp1297 = temp1296["equipData"] = {}; //装备属性（null表示没有）
                                            temp1297["durable"] = input.readVarInt(false); //消耗耐久
                                            temp1297["starLevel"] = input.readVarInt(false); //升星等级
                                            temp1297["starLock"] = input.readVarInt(false); //被锁星级
                                            temp1297["starExp"] = input.readVarInt(false); //升星祝福值
                                            temp1297["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                            temp1297["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                            temp1297["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                            temp1297["spiritLevel"] = input.readVarInt(false); //注灵等级
                                            temp1297["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                            temp1297["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                            temp1297["sign"] = input.readString(); //签名
                                            var destinyAttrsLength2 = input.readShort();
                                            temp1297["destinyAttrs"] = [];
                                            for (var destinyAttrsi2 = 0; destinyAttrsi2 < destinyAttrsLength2; destinyAttrsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp1298 = temp1297["destinyAttrs"][destinyAttrsi2] = {}; //命运属性
                                                    temp1298["career"] = input.readVarInt(false); //职业限定
                                                    temp1298["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp1298["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp1297["destinyAttrs"][destinyAttrsi2] = null;
                                                }
                                            }
                                            var superAttrsLength2 = input.readShort();
                                            temp1297["superAttrs"] = [];
                                            for (var superAttrsi2 = 0; superAttrsi2 < superAttrsLength2; superAttrsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp1299 = temp1297["superAttrs"][superAttrsi2] = {}; //极品属性
                                                    temp1299["career"] = input.readVarInt(false); //职业限定
                                                    temp1299["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp1299["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp1297["superAttrs"][superAttrsi2] = null;
                                                }
                                            }
                                            var identifyAttrsLength2 = input.readShort();
                                            temp1297["identifyAttrs"] = [];
                                            for (var identifyAttrsi2 = 0; identifyAttrsi2 < identifyAttrsLength2; identifyAttrsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp1300 = temp1297["identifyAttrs"][identifyAttrsi2] = {}; //鉴定属性
                                                    temp1300["career"] = input.readVarInt(false); //职业限定
                                                    temp1300["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp1300["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp1297["identifyAttrs"][identifyAttrsi2] = null;
                                                }
                                            }
                                            var xiLianAttrsLength2 = input.readShort();
                                            temp1297["xiLianAttrs"] = [];
                                            for (var xiLianAttrsi2 = 0; xiLianAttrsi2 < xiLianAttrsLength2; xiLianAttrsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp1301 = temp1297["xiLianAttrs"][xiLianAttrsi2] = {}; //配饰洗练属性
                                                    temp1301["career"] = input.readVarInt(false); //职业限定
                                                    temp1301["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp1301["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp1297["xiLianAttrs"][xiLianAttrsi2] = null;
                                                }
                                            }
                                            temp1297["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                            temp1297["growLevel"] = input.readVarInt(false); //成长等级
                                            temp1297["growExp"] = input.readVarInt(false); //成长经验
                                            var bestAttrsLength2 = input.readShort();
                                            temp1297["bestAttrs"] = new Array(bestAttrsLength2);
                                            for (var bestAttrsi2 = 0; bestAttrsi2 < bestAttrsLength2; bestAttrsi2++) {
                                                temp1297["bestAttrs"][bestAttrsi2] = input.readVarInt(false); //极品属性（新）
                                            }
                                            var soulAttrsLength2 = input.readShort();
                                            temp1297["soulAttrs"] = new Array(soulAttrsLength2);
                                            for (var soulAttrsi2 = 0; soulAttrsi2 < soulAttrsLength2; soulAttrsi2++) {
                                                temp1297["soulAttrs"][soulAttrsi2] = input.readVarInt(false); //心魂属性
                                            }
                                            var godsAttrsLength2 = input.readShort();
                                            temp1297["godsAttrs"] = new Array(godsAttrsLength2);
                                            for (var godsAttrsi2 = 0; godsAttrsi2 < godsAttrsLength2; godsAttrsi2++) {
                                                temp1297["godsAttrs"][godsAttrsi2] = input.readVarInt(false); //额外神级属性
                                            }
                                            temp1297["qualification"] = input.readVarInt(false); //资质
                                            var specialDurableLength2 = input.readShort();
                                            temp1297["specialDurable"] = [];
                                            for (var specialDurablei2 = 0; specialDurablei2 < specialDurableLength2; specialDurablei2++) {
                                                if (input.readByte() != 0) {
                                                    var temp1302 = temp1297["specialDurable"][specialDurablei2] = {}; //特殊耐久消耗值
                                                    temp1302["type"] = input.readVarInt(false); //类型
                                                    temp1302["value"] = input.readVarInt(false); //已消耗值
                                                }
                                                else {
                                                    temp1297["specialDurable"][specialDurablei2] = null;
                                                }
                                            }
                                        }
                                        var immobilizationLength2 = input.readByte();
                                        if (immobilizationLength2 != 0) {
                                            var temp1303 = temp1296["immobilization"] = {}; //固化数据
                                            temp1303["action"] = input.readVarInt(false); //产生行为
                                            temp1303["expire"] = input.readVarInt(false); //过期时间 时间戳
                                        }
                                        var fromLength2 = input.readByte();
                                        if (fromLength2 != 0) {
                                            var temp1304 = temp1296["from"] = {}; //来源
                                            temp1304["action"] = input.readVarInt(false); //产生行为
                                            temp1304["firstRole"] = input.readLong(); //第一个玩家id
                                            temp1304["firstRoleName"] = input.readString(); //第一个玩家名字
                                            var paramsLength4 = input.readShort();
                                            temp1304["params"] = [];
                                            for (var paramsi4 = 0; paramsi4 < paramsLength4; paramsi4++) {
                                                if (input.readByte() != 0) {
                                                    var temp1305 = temp1304["params"][paramsi4] = {}; //
                                                    temp1305["key"] = input.readVarInt(false); //
                                                    temp1305["value"] = input.readString(); //
                                                }
                                                else {
                                                    temp1304["params"][paramsi4] = null;
                                                }
                                            }
                                        }
                                        temp1296["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                                        var spriteDataLength2 = input.readByte();
                                        if (spriteDataLength2 != 0) {
                                            var temp1306 = temp1296["spriteData"] = {}; //灵兽数据（null表示没有）
                                            temp1306["level"] = input.readVarInt(false); //灵兽等级
                                            temp1306["exp"] = input.readVarInt(false); //灵兽经验
                                            temp1306["skin"] = input.readVarInt(false); //灵兽皮肤
                                            var skillsLength2 = input.readShort();
                                            temp1306["skills"] = [];
                                            for (var skillsi2 = 0; skillsi2 < skillsLength2; skillsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp1307 = temp1306["skills"][skillsi2] = {}; //灵兽出战技能
                                                    temp1307["id"] = input.readVarInt(false); //
                                                    temp1307["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp1306["skills"][skillsi2] = null;
                                                }
                                            }
                                            var ownerSkillsLength2 = input.readShort();
                                            temp1306["ownerSkills"] = [];
                                            for (var ownerSkillsi2 = 0; ownerSkillsi2 < ownerSkillsLength2; ownerSkillsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp1308 = temp1306["ownerSkills"][ownerSkillsi2] = {}; //灵兽拥有的技能
                                                    temp1308["id"] = input.readVarInt(false); //
                                                    temp1308["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp1306["ownerSkills"][ownerSkillsi2] = null;
                                                }
                                            }
                                            var ownerSkinsLength2 = input.readShort();
                                            temp1306["ownerSkins"] = [];
                                            for (var ownerSkinsi2 = 0; ownerSkinsi2 < ownerSkinsLength2; ownerSkinsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp1309 = temp1306["ownerSkins"][ownerSkinsi2] = {}; //灵兽拥有的皮肤
                                                    temp1309["id"] = input.readVarInt(false); //
                                                    temp1309["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp1306["ownerSkins"][ownerSkinsi2] = null;
                                                }
                                            }
                                            var absorbExpLength2 = input.readShort();
                                            temp1306["absorbExp"] = [];
                                            for (var absorbExpi2 = 0; absorbExpi2 < absorbExpLength2; absorbExpi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp1310 = temp1306["absorbExp"][absorbExpi2] = {}; //灵兽吸收经验值
                                                    temp1310["id"] = input.readVarInt(false); //
                                                    temp1310["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp1306["absorbExp"][absorbExpi2] = null;
                                                }
                                            }
                                        }
                                    }
                                    temp1295["index"] = input.readVarInt(false); //装备位置
                                }
                                else {
                                    temp1273["gems"][gemsi1] = null;
                                }
                            }
                            temp1273["dragonLevel"] = input.readVarInt(false); //神龙之心等级
                            var awakeBeansLength1 = input.readShort();
                            temp1273["awakeBeans"] = [];
                            for (var awakeBeansi1 = 0; awakeBeansi1 < awakeBeansLength1; awakeBeansi1++) {
                                if (input.readByte() != 0) {
                                    var temp1311 = temp1273["awakeBeans"][awakeBeansi1] = {}; //觉醒
                                    temp1311["index"] = input.readVarInt(false); //部位
                                    temp1311["level"] = input.readVarInt(false); //等级
                                }
                                else {
                                    temp1273["awakeBeans"][awakeBeansi1] = null;
                                }
                            }
                            var mountsLength1 = input.readShort();
                            temp1273["mounts"] = [];
                            for (var mountsi1 = 0; mountsi1 < mountsLength1; mountsi1++) {
                                if (input.readByte() != 0) {
                                    var temp1312 = temp1273["mounts"][mountsi1] = {}; //马匹
                                    temp1312["type"] = input.readVarInt(false); //类型
                                    temp1312["mount"] = input.readVarInt(false); //马匹id
                                    temp1312["level"] = input.readVarInt(false); //强化等级
                                    var itemIdLength1 = input.readShort();
                                    temp1312["itemId"] = new Array(itemIdLength1);
                                    for (var itemIdi1 = 0; itemIdi1 < itemIdLength1; itemIdi1++) {
                                        temp1312["itemId"][itemIdi1] = input.readVarInt(false); //当前已穿戴道具id
                                    }
                                }
                                else {
                                    temp1273["mounts"][mountsi1] = null;
                                }
                            }
                            var artificesLength1 = input.readShort();
                            temp1273["artifices"] = [];
                            for (var artificesi1 = 0; artificesi1 < artificesLength1; artificesi1++) {
                                if (input.readByte() != 0) {
                                    var temp1313 = temp1273["artifices"][artificesi1] = {}; //炼化信息
                                    temp1313["slot"] = input.readVarInt(false); //slot
                                    temp1313["level"] = input.readVarInt(false); //level
                                }
                                else {
                                    temp1273["artifices"][artificesi1] = null;
                                }
                            }
                            var infusesLength1 = input.readShort();
                            temp1273["infuses"] = [];
                            for (var infusesi1 = 0; infusesi1 < infusesLength1; infusesi1++) {
                                if (input.readByte() != 0) {
                                    var temp1314 = temp1273["infuses"][infusesi1] = {}; //注魂信息
                                    temp1314["slot"] = input.readVarInt(false); //slot
                                    temp1314["level"] = input.readVarInt(false); //level
                                }
                                else {
                                    temp1273["infuses"][infusesi1] = null;
                                }
                            }
                            var spiritsLength1 = input.readShort();
                            temp1273["spirits"] = [];
                            for (var spiritsi1 = 0; spiritsi1 < spiritsLength1; spiritsi1++) {
                                if (input.readByte() != 0) {
                                    var temp1315 = temp1273["spirits"][spiritsi1] = {}; //部位注灵信息
                                    temp1315["slot"] = input.readVarInt(false); //部位
                                    temp1315["item"] = input.readVarInt(false); //道具id
                                    temp1315["level"] = input.readVarInt(false); //等级
                                }
                                else {
                                    temp1273["spirits"][spiritsi1] = null;
                                }
                            }
                            var quenchingsLength1 = input.readShort();
                            temp1273["quenchings"] = [];
                            for (var quenchingsi1 = 0; quenchingsi1 < quenchingsLength1; quenchingsi1++) {
                                if (input.readByte() != 0) {
                                    var temp1316 = temp1273["quenchings"][quenchingsi1] = {}; //部位淬炼信息
                                    temp1316["slot"] = input.readVarInt(false); //部位
                                    temp1316["level"] = input.readVarInt(false); //等级
                                }
                                else {
                                    temp1273["quenchings"][quenchingsi1] = null;
                                }
                            }
                            var fourQuadrantLength1 = input.readShort();
                            temp1273["fourQuadrant"] = [];
                            for (var fourQuadranti1 = 0; fourQuadranti1 < fourQuadrantLength1; fourQuadranti1++) {
                                if (input.readByte() != 0) {
                                    var temp1317 = temp1273["fourQuadrant"][fourQuadranti1] = {}; //四象强化信息
                                    temp1317["slot"] = input.readVarInt(false); //部位
                                    temp1317["level"] = input.readVarInt(false); //等级
                                }
                                else {
                                    temp1273["fourQuadrant"][fourQuadranti1] = null;
                                }
                            }
                            var fiveElementsLength1 = input.readShort();
                            temp1273["fiveElements"] = [];
                            for (var fiveElementsi1 = 0; fiveElementsi1 < fiveElementsLength1; fiveElementsi1++) {
                                if (input.readByte() != 0) {
                                    var temp1318 = temp1273["fiveElements"][fiveElementsi1] = {}; //五相强化信息
                                    temp1318["index"] = input.readVarInt(false); //部位
                                    temp1318["level"] = input.readVarInt(false); //等级
                                }
                                else {
                                    temp1273["fiveElements"][fiveElementsi1] = null;
                                }
                            }
                            var soulsLength1 = input.readShort();
                            temp1273["souls"] = [];
                            for (var soulsi1 = 0; soulsi1 < soulsLength1; soulsi1++) {
                                if (input.readByte() != 0) {
                                    var temp1319 = temp1273["souls"][soulsi1] = {}; //龙魂
                                    var itemLength3 = input.readByte();
                                    if (itemLength3 != 0) {
                                        var temp1320 = temp1319["item"] = {}; //
                                        temp1320["uid"] = input.readLong(); //唯一id
                                        temp1320["itemId"] = input.readVarInt(false); //道具配置id
                                        temp1320["count"] = input.readVarInt(false); //数量
                                        temp1320["expire"] = input.readVarInt(false); //过期时间
                                        temp1320["uTimes"] = input.readVarInt(false); //已经使用的次数
                                        temp1320["time"] = input.readVarInt(false); //道具获得时间
                                        var paramsLength5 = input.readShort();
                                        temp1320["params"] = new Array(paramsLength5);
                                        for (var paramsi5 = 0; paramsi5 < paramsLength5; paramsi5++) {
                                            temp1320["params"][paramsi5] = input.readVarInt(false); //道具参数
                                        }
                                        var equipDataLength3 = input.readByte();
                                        if (equipDataLength3 != 0) {
                                            var temp1321 = temp1320["equipData"] = {}; //装备属性（null表示没有）
                                            temp1321["durable"] = input.readVarInt(false); //消耗耐久
                                            temp1321["starLevel"] = input.readVarInt(false); //升星等级
                                            temp1321["starLock"] = input.readVarInt(false); //被锁星级
                                            temp1321["starExp"] = input.readVarInt(false); //升星祝福值
                                            temp1321["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                            temp1321["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                            temp1321["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                            temp1321["spiritLevel"] = input.readVarInt(false); //注灵等级
                                            temp1321["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                            temp1321["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                            temp1321["sign"] = input.readString(); //签名
                                            var destinyAttrsLength3 = input.readShort();
                                            temp1321["destinyAttrs"] = [];
                                            for (var destinyAttrsi3 = 0; destinyAttrsi3 < destinyAttrsLength3; destinyAttrsi3++) {
                                                if (input.readByte() != 0) {
                                                    var temp1322 = temp1321["destinyAttrs"][destinyAttrsi3] = {}; //命运属性
                                                    temp1322["career"] = input.readVarInt(false); //职业限定
                                                    temp1322["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp1322["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp1321["destinyAttrs"][destinyAttrsi3] = null;
                                                }
                                            }
                                            var superAttrsLength3 = input.readShort();
                                            temp1321["superAttrs"] = [];
                                            for (var superAttrsi3 = 0; superAttrsi3 < superAttrsLength3; superAttrsi3++) {
                                                if (input.readByte() != 0) {
                                                    var temp1323 = temp1321["superAttrs"][superAttrsi3] = {}; //极品属性
                                                    temp1323["career"] = input.readVarInt(false); //职业限定
                                                    temp1323["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp1323["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp1321["superAttrs"][superAttrsi3] = null;
                                                }
                                            }
                                            var identifyAttrsLength3 = input.readShort();
                                            temp1321["identifyAttrs"] = [];
                                            for (var identifyAttrsi3 = 0; identifyAttrsi3 < identifyAttrsLength3; identifyAttrsi3++) {
                                                if (input.readByte() != 0) {
                                                    var temp1324 = temp1321["identifyAttrs"][identifyAttrsi3] = {}; //鉴定属性
                                                    temp1324["career"] = input.readVarInt(false); //职业限定
                                                    temp1324["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp1324["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp1321["identifyAttrs"][identifyAttrsi3] = null;
                                                }
                                            }
                                            var xiLianAttrsLength3 = input.readShort();
                                            temp1321["xiLianAttrs"] = [];
                                            for (var xiLianAttrsi3 = 0; xiLianAttrsi3 < xiLianAttrsLength3; xiLianAttrsi3++) {
                                                if (input.readByte() != 0) {
                                                    var temp1325 = temp1321["xiLianAttrs"][xiLianAttrsi3] = {}; //配饰洗练属性
                                                    temp1325["career"] = input.readVarInt(false); //职业限定
                                                    temp1325["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp1325["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp1321["xiLianAttrs"][xiLianAttrsi3] = null;
                                                }
                                            }
                                            temp1321["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                            temp1321["growLevel"] = input.readVarInt(false); //成长等级
                                            temp1321["growExp"] = input.readVarInt(false); //成长经验
                                            var bestAttrsLength3 = input.readShort();
                                            temp1321["bestAttrs"] = new Array(bestAttrsLength3);
                                            for (var bestAttrsi3 = 0; bestAttrsi3 < bestAttrsLength3; bestAttrsi3++) {
                                                temp1321["bestAttrs"][bestAttrsi3] = input.readVarInt(false); //极品属性（新）
                                            }
                                            var soulAttrsLength3 = input.readShort();
                                            temp1321["soulAttrs"] = new Array(soulAttrsLength3);
                                            for (var soulAttrsi3 = 0; soulAttrsi3 < soulAttrsLength3; soulAttrsi3++) {
                                                temp1321["soulAttrs"][soulAttrsi3] = input.readVarInt(false); //心魂属性
                                            }
                                            var godsAttrsLength3 = input.readShort();
                                            temp1321["godsAttrs"] = new Array(godsAttrsLength3);
                                            for (var godsAttrsi3 = 0; godsAttrsi3 < godsAttrsLength3; godsAttrsi3++) {
                                                temp1321["godsAttrs"][godsAttrsi3] = input.readVarInt(false); //额外神级属性
                                            }
                                            temp1321["qualification"] = input.readVarInt(false); //资质
                                            var specialDurableLength3 = input.readShort();
                                            temp1321["specialDurable"] = [];
                                            for (var specialDurablei3 = 0; specialDurablei3 < specialDurableLength3; specialDurablei3++) {
                                                if (input.readByte() != 0) {
                                                    var temp1326 = temp1321["specialDurable"][specialDurablei3] = {}; //特殊耐久消耗值
                                                    temp1326["type"] = input.readVarInt(false); //类型
                                                    temp1326["value"] = input.readVarInt(false); //已消耗值
                                                }
                                                else {
                                                    temp1321["specialDurable"][specialDurablei3] = null;
                                                }
                                            }
                                        }
                                        var immobilizationLength3 = input.readByte();
                                        if (immobilizationLength3 != 0) {
                                            var temp1327 = temp1320["immobilization"] = {}; //固化数据
                                            temp1327["action"] = input.readVarInt(false); //产生行为
                                            temp1327["expire"] = input.readVarInt(false); //过期时间 时间戳
                                        }
                                        var fromLength3 = input.readByte();
                                        if (fromLength3 != 0) {
                                            var temp1328 = temp1320["from"] = {}; //来源
                                            temp1328["action"] = input.readVarInt(false); //产生行为
                                            temp1328["firstRole"] = input.readLong(); //第一个玩家id
                                            temp1328["firstRoleName"] = input.readString(); //第一个玩家名字
                                            var paramsLength6 = input.readShort();
                                            temp1328["params"] = [];
                                            for (var paramsi6 = 0; paramsi6 < paramsLength6; paramsi6++) {
                                                if (input.readByte() != 0) {
                                                    var temp1329 = temp1328["params"][paramsi6] = {}; //
                                                    temp1329["key"] = input.readVarInt(false); //
                                                    temp1329["value"] = input.readString(); //
                                                }
                                                else {
                                                    temp1328["params"][paramsi6] = null;
                                                }
                                            }
                                        }
                                        temp1320["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                                        var spriteDataLength3 = input.readByte();
                                        if (spriteDataLength3 != 0) {
                                            var temp1330 = temp1320["spriteData"] = {}; //灵兽数据（null表示没有）
                                            temp1330["level"] = input.readVarInt(false); //灵兽等级
                                            temp1330["exp"] = input.readVarInt(false); //灵兽经验
                                            temp1330["skin"] = input.readVarInt(false); //灵兽皮肤
                                            var skillsLength3 = input.readShort();
                                            temp1330["skills"] = [];
                                            for (var skillsi3 = 0; skillsi3 < skillsLength3; skillsi3++) {
                                                if (input.readByte() != 0) {
                                                    var temp1331 = temp1330["skills"][skillsi3] = {}; //灵兽出战技能
                                                    temp1331["id"] = input.readVarInt(false); //
                                                    temp1331["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp1330["skills"][skillsi3] = null;
                                                }
                                            }
                                            var ownerSkillsLength3 = input.readShort();
                                            temp1330["ownerSkills"] = [];
                                            for (var ownerSkillsi3 = 0; ownerSkillsi3 < ownerSkillsLength3; ownerSkillsi3++) {
                                                if (input.readByte() != 0) {
                                                    var temp1332 = temp1330["ownerSkills"][ownerSkillsi3] = {}; //灵兽拥有的技能
                                                    temp1332["id"] = input.readVarInt(false); //
                                                    temp1332["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp1330["ownerSkills"][ownerSkillsi3] = null;
                                                }
                                            }
                                            var ownerSkinsLength3 = input.readShort();
                                            temp1330["ownerSkins"] = [];
                                            for (var ownerSkinsi3 = 0; ownerSkinsi3 < ownerSkinsLength3; ownerSkinsi3++) {
                                                if (input.readByte() != 0) {
                                                    var temp1333 = temp1330["ownerSkins"][ownerSkinsi3] = {}; //灵兽拥有的皮肤
                                                    temp1333["id"] = input.readVarInt(false); //
                                                    temp1333["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp1330["ownerSkins"][ownerSkinsi3] = null;
                                                }
                                            }
                                            var absorbExpLength3 = input.readShort();
                                            temp1330["absorbExp"] = [];
                                            for (var absorbExpi3 = 0; absorbExpi3 < absorbExpLength3; absorbExpi3++) {
                                                if (input.readByte() != 0) {
                                                    var temp1334 = temp1330["absorbExp"][absorbExpi3] = {}; //灵兽吸收经验值
                                                    temp1334["id"] = input.readVarInt(false); //
                                                    temp1334["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp1330["absorbExp"][absorbExpi3] = null;
                                                }
                                            }
                                        }
                                    }
                                    temp1319["index"] = input.readVarInt(false); //装备位置
                                }
                                else {
                                    temp1273["souls"][soulsi1] = null;
                                }
                            }
                            var ringLength1 = input.readShort();
                            temp1273["ring"] = [];
                            for (var ringi1 = 0; ringi1 < ringLength1; ringi1++) {
                                if (input.readByte() != 0) {
                                    var temp1335 = temp1273["ring"][ringi1] = {}; //特戒信息
                                    temp1335["index"] = input.readVarInt(false); //部位，s_ring_lock表id
                                    temp1335["type"] = input.readVarInt(false); //类型，-1未解锁0未定型
                                    temp1335["level"] = input.readVarInt(false); //等级
                                    temp1335["prog"] = input.readVarInt(false); //进度
                                }
                                else {
                                    temp1273["ring"][ringi1] = null;
                                }
                            }
                            var buffsLength1 = input.readShort();
                            temp1273["buffs"] = new Array(buffsLength1);
                            for (var buffsi1 = 0; buffsi1 < buffsLength1; buffsi1++) {
                                temp1273["buffs"][buffsi1] = input.readVarInt(false); //持有的可查看的buff
                            }
                            var inscriptionsLength1 = input.readShort();
                            temp1273["inscriptions"] = [];
                            for (var inscriptionsi1 = 0; inscriptionsi1 < inscriptionsLength1; inscriptionsi1++) {
                                if (input.readByte() != 0) {
                                    var temp1336 = temp1273["inscriptions"][inscriptionsi1] = {}; //铭刻
                                    temp1336["slot"] = input.readVarInt(false); //部位
                                    temp1336["level"] = input.readVarInt(false); //等级
                                    temp1336["sign"] = input.readString(); //签名
                                }
                                else {
                                    temp1273["inscriptions"][inscriptionsi1] = null;
                                }
                            }
                            var appearanceLength1 = input.readShort();
                            temp1273["appearance"] = [];
                            for (var appearancei1 = 0; appearancei1 < appearanceLength1; appearancei1++) {
                                if (input.readByte() != 0) {
                                    var temp1337 = temp1273["appearance"][appearancei1] = {}; //时装
                                    temp1337["type"] = input.readVarInt(false); //
                                    var idLength2 = input.readShort();
                                    temp1337["id"] = new Array(idLength2);
                                    for (var idi2 = 0; idi2 < idLength2; idi2++) {
                                        temp1337["id"][idi2] = input.readVarInt(false); //
                                    }
                                }
                                else {
                                    temp1273["appearance"][appearancei1] = null;
                                }
                            }
                            var spriteLength1 = input.readByte();
                            if (spriteLength1 != 0) {
                                var temp1338 = temp1273["sprite"] = {}; //灵兽
                                temp1338["type"] = input.readVarInt(false); //类型
                                temp1338["level"] = input.readVarInt(false); //等级
                                temp1338["awake"] = input.readVarInt(false); //觉醒
                                var enhanceLength1 = input.readShort();
                                temp1338["enhance"] = [];
                                for (var enhancei1 = 0; enhancei1 < enhanceLength1; enhancei1++) {
                                    if (input.readByte() != 0) {
                                        var temp1339 = temp1338["enhance"][enhancei1] = {}; //buff
                                        temp1339["id"] = input.readVarInt(false); //
                                        temp1339["value"] = input.readVarInt(false); //
                                    }
                                    else {
                                        temp1338["enhance"][enhancei1] = null;
                                    }
                                }
                                temp1338["skill"] = input.readVarInt(false); //技能
                            }
                            var wingsLength1 = input.readShort();
                            temp1273["wings"] = [];
                            for (var wingsi1 = 0; wingsi1 < wingsLength1; wingsi1++) {
                                if (input.readByte() != 0) {
                                    var temp1340 = temp1273["wings"][wingsi1] = {}; //
                                    temp1340["id"] = input.readVarInt(false); //
                                    temp1340["value"] = input.readVarInt(false); //
                                }
                                else {
                                    temp1273["wings"][wingsi1] = null;
                                }
                            }
                            var fusionsLength1 = input.readShort();
                            temp1273["fusions"] = [];
                            for (var fusionsi1 = 0; fusionsi1 < fusionsLength1; fusionsi1++) {
                                if (input.readByte() != 0) {
                                    var temp1341 = temp1273["fusions"][fusionsi1] = {}; //
                                    temp1341["id"] = input.readVarInt(false); //
                                    temp1341["value"] = input.readVarInt(false); //
                                }
                                else {
                                    temp1273["fusions"][fusionsi1] = null;
                                }
                            }
                            var wraithsLength1 = input.readShort();
                            temp1273["wraiths"] = [];
                            for (var wraithsi1 = 0; wraithsi1 < wraithsLength1; wraithsi1++) {
                                if (input.readByte() != 0) {
                                    var temp1342 = temp1273["wraiths"][wraithsi1] = {}; //戒灵
                                    temp1342["id"] = input.readVarInt(false); //
                                    temp1342["value"] = input.readVarInt(false); //
                                }
                                else {
                                    temp1273["wraiths"][wraithsi1] = null;
                                }
                            }
                            var accessoryLength1 = input.readShort();
                            temp1273["accessory"] = [];
                            for (var accessoryi1 = 0; accessoryi1 < accessoryLength1; accessoryi1++) {
                                if (input.readByte() != 0) {
                                    var temp1343 = temp1273["accessory"][accessoryi1] = {}; //配饰觉醒
                                    temp1343["id"] = input.readVarInt(false); //
                                    temp1343["value"] = input.readVarInt(false); //
                                }
                                else {
                                    temp1273["accessory"][accessoryi1] = null;
                                }
                            }
                            temp1273["trumpWear"] = input.readVarInt(false); //法宝穿戴
                            var trumpInfoLength1 = input.readShort();
                            temp1273["trumpInfo"] = [];
                            for (var trumpInfoi1 = 0; trumpInfoi1 < trumpInfoLength1; trumpInfoi1++) {
                                if (input.readByte() != 0) {
                                    var temp1344 = temp1273["trumpInfo"][trumpInfoi1] = {}; //法宝信息
                                    temp1344["id"] = input.readVarInt(false); //id
                                    temp1344["level"] = input.readVarInt(false); //等级
                                }
                                else {
                                    temp1273["trumpInfo"][trumpInfoi1] = null;
                                }
                            }
                            var trumpTalentLength1 = input.readShort();
                            temp1273["trumpTalent"] = [];
                            for (var trumpTalenti1 = 0; trumpTalenti1 < trumpTalentLength1; trumpTalenti1++) {
                                if (input.readByte() != 0) {
                                    var temp1345 = temp1273["trumpTalent"][trumpTalenti1] = {}; //法宝天赋
                                    temp1345["id"] = input.readVarInt(false); //id
                                    temp1345["level"] = input.readVarInt(false); //等级
                                }
                                else {
                                    temp1273["trumpTalent"][trumpTalenti1] = null;
                                }
                            }
                            temp1273["mount"] = input.readVarInt(false); //坐骑
                            var fusedLength1 = input.readShort();
                            temp1273["fused"] = [];
                            for (var fusedi1 = 0; fusedi1 < fusedLength1; fusedi1++) {
                                if (input.readByte() != 0) {
                                    var temp1346 = temp1273["fused"][fusedi1] = {}; //混装融合
                                    temp1346["pos"] = input.readVarInt(false); //部位Id
                                    var fusedItemIdsLength1 = input.readShort();
                                    temp1346["fusedItemIds"] = new Array(fusedItemIdsLength1);
                                    for (var fusedItemIdsi1 = 0; fusedItemIdsi1 < fusedItemIdsLength1; fusedItemIdsi1++) {
                                        temp1346["fusedItemIds"][fusedItemIdsi1] = input.readVarInt(false); //部位上已融合的魂装材料的配置ID
                                    }
                                }
                                else {
                                    temp1273["fused"][fusedi1] = null;
                                }
                            }
                            var blendsLength1 = input.readShort();
                            temp1273["blends"] = [];
                            for (var blendsi1 = 0; blendsi1 < blendsLength1; blendsi1++) {
                                if (input.readByte() != 0) {
                                    var temp1347 = temp1273["blends"][blendsi1] = {}; //融合列表
                                    temp1347["slot"] = input.readVarInt(false); //部位
                                    var blendsLength2 = input.readShort();
                                    temp1347["blends"] = new Array(blendsLength2);
                                    for (var blendsi2 = 0; blendsi2 < blendsLength2; blendsi2++) {
                                        temp1347["blends"][blendsi2] = input.readVarInt(false); //镶嵌
                                    }
                                }
                                else {
                                    temp1273["blends"][blendsi1] = null;
                                }
                            }
                            var runesLength1 = input.readShort();
                            temp1273["runes"] = [];
                            for (var runesi1 = 0; runesi1 < runesLength1; runesi1++) {
                                if (input.readByte() != 0) {
                                    var temp1348 = temp1273["runes"][runesi1] = {}; //符文
                                    temp1348["hole"] = input.readVarInt(false); //符文孔位id
                                    temp1348["inlay"] = input.readVarInt(false); //镶嵌道具id
                                    temp1348["locked"] = input.readVarInt(false); //是否被锁定 0否 1是
                                }
                                else {
                                    temp1273["runes"][runesi1] = null;
                                }
                            }
                            var godAttrRefinesLength1 = input.readShort();
                            temp1273["godAttrRefines"] = [];
                            for (var godAttrRefinesi1 = 0; godAttrRefinesi1 < godAttrRefinesLength1; godAttrRefinesi1++) {
                                if (input.readByte() != 0) {
                                    var temp1349 = temp1273["godAttrRefines"][godAttrRefinesi1] = {}; //神级属性精炼
                                    temp1349["index"] = input.readVarInt(false); //部位
                                    var levelInfoLength1 = input.readShort();
                                    temp1349["levelInfo"] = [];
                                    for (var levelInfoi1 = 0; levelInfoi1 < levelInfoLength1; levelInfoi1++) {
                                        if (input.readByte() != 0) {
                                            var temp1350 = temp1349["levelInfo"][levelInfoi1] = {}; //精炼等级信息
                                            temp1350["type"] = input.readVarInt(false); //类型
                                            temp1350["level"] = input.readVarInt(false); //精炼等级
                                        }
                                        else {
                                            temp1349["levelInfo"][levelInfoi1] = null;
                                        }
                                    }
                                }
                                else {
                                    temp1273["godAttrRefines"][godAttrRefinesi1] = null;
                                }
                            }
                            var godEquipFoundryLength1 = input.readShort();
                            temp1273["godEquipFoundry"] = [];
                            for (var godEquipFoundryi1 = 0; godEquipFoundryi1 < godEquipFoundryLength1; godEquipFoundryi1++) {
                                if (input.readByte() != 0) {
                                    var temp1351 = temp1273["godEquipFoundry"][godEquipFoundryi1] = {}; //仙装铸造
                                    temp1351["pos"] = input.readVarInt(false); //部位
                                    temp1351["level"] = input.readVarInt(false); //等级
                                    temp1351["quality"] = input.readVarInt(false); //仙元盘品质
                                }
                                else {
                                    temp1273["godEquipFoundry"][godEquipFoundryi1] = null;
                                }
                            }
                            var magicShieldLength1 = input.readShort();
                            temp1273["magicShield"] = new Array(magicShieldLength1);
                            for (var magicShieldi1 = 0; magicShieldi1 < magicShieldLength1; magicShieldi1++) {
                                temp1273["magicShield"][magicShieldi1] = input.readVarInt(false); //魔盾列表
                            }
                            temp1273["bead"] = input.readVarInt(false); //魔珠
                            temp1273["newTitle"] = input.readVarInt(false); //新军衔
                            var talentsLength1 = input.readShort();
                            temp1273["talents"] = [];
                            for (var talentsi1 = 0; talentsi1 < talentsLength1; talentsi1++) {
                                if (input.readByte() != 0) {
                                    var temp1352 = temp1273["talents"][talentsi1] = {}; //潜能信息
                                    temp1352["attrType"] = input.readVarInt(false); //属性类型
                                    temp1352["count"] = input.readVarInt(false); //属性数值
                                }
                                else {
                                    temp1273["talents"][talentsi1] = null;
                                }
                            }
                            var artifactLength1 = input.readShort();
                            temp1273["artifact"] = [];
                            for (var artifacti1 = 0; artifacti1 < artifactLength1; artifacti1++) {
                                if (input.readByte() != 0) {
                                    var temp1353 = temp1273["artifact"][artifacti1] = {}; //器灵
                                    temp1353["pos"] = input.readVarInt(false); //部位
                                    temp1353["level"] = input.readVarInt(false); //等级
                                }
                                else {
                                    temp1273["artifact"][artifacti1] = null;
                                }
                            }
                            temp1273["trumpPassWear"] = input.readVarInt(false); //法宝通行证穿戴
                            var mountMatrixLength1 = input.readShort();
                            temp1273["mountMatrix"] = [];
                            for (var mountMatrixi1 = 0; mountMatrixi1 < mountMatrixLength1; mountMatrixi1++) {
                                if (input.readByte() != 0) {
                                    var temp1354 = temp1273["mountMatrix"][mountMatrixi1] = {}; //坐骑阵位信息
                                    temp1354["pos"] = input.readVarInt(false); //部位
                                    temp1354["level"] = input.readVarInt(false); //等级
                                    temp1354["exp"] = input.readVarInt(false); //经验
                                }
                                else {
                                    temp1273["mountMatrix"][mountMatrixi1] = null;
                                }
                            }
                            var stonesLength1 = input.readShort();
                            temp1273["stones"] = [];
                            for (var stonesi1 = 0; stonesi1 < stonesLength1; stonesi1++) {
                                if (input.readByte() != 0) {
                                    var temp1355 = temp1273["stones"][stonesi1] = {}; //
                                    temp1355["type"] = input.readVarInt(false); //类型
                                    temp1355["progress"] = input.readVarInt(false); //升级进度
                                    temp1355["level"] = input.readVarInt(false); //等级
                                    temp1355["rein"] = input.readVarInt(false); //注灵
                                }
                                else {
                                    temp1273["stones"][stonesi1] = null;
                                }
                            }
                            var constellationLength1 = input.readShort();
                            temp1273["constellation"] = new Array(constellationLength1);
                            for (var constellationi1 = 0; constellationi1 < constellationLength1; constellationi1++) {
                                temp1273["constellation"][constellationi1] = input.readVarInt(false); //星宿
                            }
                            var spriteShLength1 = input.readByte();
                            if (spriteShLength1 != 0) {
                                var temp1356 = temp1273["spriteSh"] = {}; //灵兽背包出战灵兽
                                temp1356["uid"] = input.readLong(); //唯一id
                                temp1356["itemId"] = input.readVarInt(false); //道具配置id
                                temp1356["count"] = input.readVarInt(false); //数量
                                temp1356["expire"] = input.readVarInt(false); //过期时间
                                temp1356["uTimes"] = input.readVarInt(false); //已经使用的次数
                                temp1356["time"] = input.readVarInt(false); //道具获得时间
                                var paramsLength7 = input.readShort();
                                temp1356["params"] = new Array(paramsLength7);
                                for (var paramsi7 = 0; paramsi7 < paramsLength7; paramsi7++) {
                                    temp1356["params"][paramsi7] = input.readVarInt(false); //道具参数
                                }
                                var equipDataLength4 = input.readByte();
                                if (equipDataLength4 != 0) {
                                    var temp1357 = temp1356["equipData"] = {}; //装备属性（null表示没有）
                                    temp1357["durable"] = input.readVarInt(false); //消耗耐久
                                    temp1357["starLevel"] = input.readVarInt(false); //升星等级
                                    temp1357["starLock"] = input.readVarInt(false); //被锁星级
                                    temp1357["starExp"] = input.readVarInt(false); //升星祝福值
                                    temp1357["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                    temp1357["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                    temp1357["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                    temp1357["spiritLevel"] = input.readVarInt(false); //注灵等级
                                    temp1357["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                    temp1357["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                    temp1357["sign"] = input.readString(); //签名
                                    var destinyAttrsLength4 = input.readShort();
                                    temp1357["destinyAttrs"] = [];
                                    for (var destinyAttrsi4 = 0; destinyAttrsi4 < destinyAttrsLength4; destinyAttrsi4++) {
                                        if (input.readByte() != 0) {
                                            var temp1358 = temp1357["destinyAttrs"][destinyAttrsi4] = {}; //命运属性
                                            temp1358["career"] = input.readVarInt(false); //职业限定
                                            temp1358["attributeType"] = input.readVarInt(false); //属性类型
                                            temp1358["attributeValue"] = input.readLong(); //属性值
                                        }
                                        else {
                                            temp1357["destinyAttrs"][destinyAttrsi4] = null;
                                        }
                                    }
                                    var superAttrsLength4 = input.readShort();
                                    temp1357["superAttrs"] = [];
                                    for (var superAttrsi4 = 0; superAttrsi4 < superAttrsLength4; superAttrsi4++) {
                                        if (input.readByte() != 0) {
                                            var temp1359 = temp1357["superAttrs"][superAttrsi4] = {}; //极品属性
                                            temp1359["career"] = input.readVarInt(false); //职业限定
                                            temp1359["attributeType"] = input.readVarInt(false); //属性类型
                                            temp1359["attributeValue"] = input.readLong(); //属性值
                                        }
                                        else {
                                            temp1357["superAttrs"][superAttrsi4] = null;
                                        }
                                    }
                                    var identifyAttrsLength4 = input.readShort();
                                    temp1357["identifyAttrs"] = [];
                                    for (var identifyAttrsi4 = 0; identifyAttrsi4 < identifyAttrsLength4; identifyAttrsi4++) {
                                        if (input.readByte() != 0) {
                                            var temp1360 = temp1357["identifyAttrs"][identifyAttrsi4] = {}; //鉴定属性
                                            temp1360["career"] = input.readVarInt(false); //职业限定
                                            temp1360["attributeType"] = input.readVarInt(false); //属性类型
                                            temp1360["attributeValue"] = input.readLong(); //属性值
                                        }
                                        else {
                                            temp1357["identifyAttrs"][identifyAttrsi4] = null;
                                        }
                                    }
                                    var xiLianAttrsLength4 = input.readShort();
                                    temp1357["xiLianAttrs"] = [];
                                    for (var xiLianAttrsi4 = 0; xiLianAttrsi4 < xiLianAttrsLength4; xiLianAttrsi4++) {
                                        if (input.readByte() != 0) {
                                            var temp1361 = temp1357["xiLianAttrs"][xiLianAttrsi4] = {}; //配饰洗练属性
                                            temp1361["career"] = input.readVarInt(false); //职业限定
                                            temp1361["attributeType"] = input.readVarInt(false); //属性类型
                                            temp1361["attributeValue"] = input.readLong(); //属性值
                                        }
                                        else {
                                            temp1357["xiLianAttrs"][xiLianAttrsi4] = null;
                                        }
                                    }
                                    temp1357["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                    temp1357["growLevel"] = input.readVarInt(false); //成长等级
                                    temp1357["growExp"] = input.readVarInt(false); //成长经验
                                    var bestAttrsLength4 = input.readShort();
                                    temp1357["bestAttrs"] = new Array(bestAttrsLength4);
                                    for (var bestAttrsi4 = 0; bestAttrsi4 < bestAttrsLength4; bestAttrsi4++) {
                                        temp1357["bestAttrs"][bestAttrsi4] = input.readVarInt(false); //极品属性（新）
                                    }
                                    var soulAttrsLength4 = input.readShort();
                                    temp1357["soulAttrs"] = new Array(soulAttrsLength4);
                                    for (var soulAttrsi4 = 0; soulAttrsi4 < soulAttrsLength4; soulAttrsi4++) {
                                        temp1357["soulAttrs"][soulAttrsi4] = input.readVarInt(false); //心魂属性
                                    }
                                    var godsAttrsLength4 = input.readShort();
                                    temp1357["godsAttrs"] = new Array(godsAttrsLength4);
                                    for (var godsAttrsi4 = 0; godsAttrsi4 < godsAttrsLength4; godsAttrsi4++) {
                                        temp1357["godsAttrs"][godsAttrsi4] = input.readVarInt(false); //额外神级属性
                                    }
                                    temp1357["qualification"] = input.readVarInt(false); //资质
                                    var specialDurableLength4 = input.readShort();
                                    temp1357["specialDurable"] = [];
                                    for (var specialDurablei4 = 0; specialDurablei4 < specialDurableLength4; specialDurablei4++) {
                                        if (input.readByte() != 0) {
                                            var temp1362 = temp1357["specialDurable"][specialDurablei4] = {}; //特殊耐久消耗值
                                            temp1362["type"] = input.readVarInt(false); //类型
                                            temp1362["value"] = input.readVarInt(false); //已消耗值
                                        }
                                        else {
                                            temp1357["specialDurable"][specialDurablei4] = null;
                                        }
                                    }
                                }
                                var immobilizationLength4 = input.readByte();
                                if (immobilizationLength4 != 0) {
                                    var temp1363 = temp1356["immobilization"] = {}; //固化数据
                                    temp1363["action"] = input.readVarInt(false); //产生行为
                                    temp1363["expire"] = input.readVarInt(false); //过期时间 时间戳
                                }
                                var fromLength4 = input.readByte();
                                if (fromLength4 != 0) {
                                    var temp1364 = temp1356["from"] = {}; //来源
                                    temp1364["action"] = input.readVarInt(false); //产生行为
                                    temp1364["firstRole"] = input.readLong(); //第一个玩家id
                                    temp1364["firstRoleName"] = input.readString(); //第一个玩家名字
                                    var paramsLength8 = input.readShort();
                                    temp1364["params"] = [];
                                    for (var paramsi8 = 0; paramsi8 < paramsLength8; paramsi8++) {
                                        if (input.readByte() != 0) {
                                            var temp1365 = temp1364["params"][paramsi8] = {}; //
                                            temp1365["key"] = input.readVarInt(false); //
                                            temp1365["value"] = input.readString(); //
                                        }
                                        else {
                                            temp1364["params"][paramsi8] = null;
                                        }
                                    }
                                }
                                temp1356["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                                var spriteDataLength4 = input.readByte();
                                if (spriteDataLength4 != 0) {
                                    var temp1366 = temp1356["spriteData"] = {}; //灵兽数据（null表示没有）
                                    temp1366["level"] = input.readVarInt(false); //灵兽等级
                                    temp1366["exp"] = input.readVarInt(false); //灵兽经验
                                    temp1366["skin"] = input.readVarInt(false); //灵兽皮肤
                                    var skillsLength4 = input.readShort();
                                    temp1366["skills"] = [];
                                    for (var skillsi4 = 0; skillsi4 < skillsLength4; skillsi4++) {
                                        if (input.readByte() != 0) {
                                            var temp1367 = temp1366["skills"][skillsi4] = {}; //灵兽出战技能
                                            temp1367["id"] = input.readVarInt(false); //
                                            temp1367["value"] = input.readVarInt(false); //
                                        }
                                        else {
                                            temp1366["skills"][skillsi4] = null;
                                        }
                                    }
                                    var ownerSkillsLength4 = input.readShort();
                                    temp1366["ownerSkills"] = [];
                                    for (var ownerSkillsi4 = 0; ownerSkillsi4 < ownerSkillsLength4; ownerSkillsi4++) {
                                        if (input.readByte() != 0) {
                                            var temp1368 = temp1366["ownerSkills"][ownerSkillsi4] = {}; //灵兽拥有的技能
                                            temp1368["id"] = input.readVarInt(false); //
                                            temp1368["value"] = input.readVarInt(false); //
                                        }
                                        else {
                                            temp1366["ownerSkills"][ownerSkillsi4] = null;
                                        }
                                    }
                                    var ownerSkinsLength4 = input.readShort();
                                    temp1366["ownerSkins"] = [];
                                    for (var ownerSkinsi4 = 0; ownerSkinsi4 < ownerSkinsLength4; ownerSkinsi4++) {
                                        if (input.readByte() != 0) {
                                            var temp1369 = temp1366["ownerSkins"][ownerSkinsi4] = {}; //灵兽拥有的皮肤
                                            temp1369["id"] = input.readVarInt(false); //
                                            temp1369["value"] = input.readVarInt(false); //
                                        }
                                        else {
                                            temp1366["ownerSkins"][ownerSkinsi4] = null;
                                        }
                                    }
                                    var absorbExpLength4 = input.readShort();
                                    temp1366["absorbExp"] = [];
                                    for (var absorbExpi4 = 0; absorbExpi4 < absorbExpLength4; absorbExpi4++) {
                                        if (input.readByte() != 0) {
                                            var temp1370 = temp1366["absorbExp"][absorbExpi4] = {}; //灵兽吸收经验值
                                            temp1370["id"] = input.readVarInt(false); //
                                            temp1370["value"] = input.readVarInt(false); //
                                        }
                                        else {
                                            temp1366["absorbExp"][absorbExpi4] = null;
                                        }
                                    }
                                }
                            }
                            var grailsLength1 = input.readShort();
                            temp1273["grails"] = [];
                            for (var grailsi1 = 0; grailsi1 < grailsLength1; grailsi1++) {
                                if (input.readByte() != 0) {
                                    var temp1371 = temp1273["grails"][grailsi1] = {}; //神器信息
                                    temp1371["type"] = input.readVarInt(false); //类型
                                    temp1371["level"] = input.readVarInt(false); //等级
                                }
                                else {
                                    temp1273["grails"][grailsi1] = null;
                                }
                            }
                            var inlaidRuneStonesLength1 = input.readShort();
                            temp1273["inlaidRuneStones"] = [];
                            for (var inlaidRuneStonesi1 = 0; inlaidRuneStonesi1 < inlaidRuneStonesLength1; inlaidRuneStonesi1++) {
                                if (input.readByte() != 0) {
                                    var temp1372 = temp1273["inlaidRuneStones"][inlaidRuneStonesi1] = {}; //已镶嵌的符石列表
                                    temp1372["holeId"] = input.readVarInt(false); //符石孔位ID(cfg_rune_hole表中的id)
                                    temp1372["itemCfgId"] = input.readVarInt(false); //符石道具ID(cfg_rune_stone表中的item_id)
                                }
                                else {
                                    temp1273["inlaidRuneStones"][inlaidRuneStonesi1] = null;
                                }
                            }
                        }
                        else {
                            resQueryRoleMessage[queryInfoi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resQueryRoleMessage);
                    break;
            }
        };
        return QueryModel;
    }(ModelBase));
    net.QueryModel = QueryModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:205
     */
    var RampageModel = /** @class */ (function (_super) {
        __extends(RampageModel, _super);
        function RampageModel() {
            return _super.call(this) || this;
        }
        RampageModel.ins = function () {
            if (!this._ins)
                this._ins = new RampageModel();
            return this._ins;
        };
        /**
         *
         * 请求暴走之力
         *
         * sendReqRampageMessage  205001
         */
        RampageModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(205001 /* RampageModelCMD.CMDReqRampageMessage */, output, s);
        };
        RampageModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
            }
        };
        return RampageModel;
    }(ModelBase));
    net.RampageModel = RampageModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:26
     */
    var RankModel = /** @class */ (function (_super) {
        __extends(RankModel, _super);
        function RankModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(26002 /* RankModelCMD.CMDResLookRankMessage */);
            return _this;
        }
        RankModel.ins = function () {
            if (!this._ins)
                this._ins = new RankModel();
            return this._ins;
        };
        /**
         *
         * 请求查看排行榜
         * @param 类型
         *
         * sendReqLookRankMessage  26001
         */
        RankModel.prototype.send1 = function (type, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            this.send(26001 /* RankModelCMD.CMDReqLookRankMessage */, output, s);
        };
        RankModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 26002 /* RankModelCMD.CMDResLookRankMessage */:
                    var resLookRankMessage = {};
                    resLookRankMessage["type"] = input.readVarInt(false); //类型
                    var rankDataBeansLength1 = input.readShort();
                    resLookRankMessage["rankDataBeans"] = [];
                    for (var rankDataBeansi1 = 0; rankDataBeansi1 < rankDataBeansLength1; rankDataBeansi1++) {
                        if (input.readByte() != 0) {
                            var temp594 = resLookRankMessage["rankDataBeans"][rankDataBeansi1] = {}; //排行榜数据
                            temp594["rank"] = input.readVarInt(false); //排名
                            temp594["uid"] = input.readLong(); //角色id
                            temp594["name"] = input.readString(); //名字
                            temp594["career"] = input.readVarInt(false); //职业
                            temp594["sex"] = input.readVarInt(false); //性别
                            temp594["level"] = input.readVarInt(false); //等级
                            temp594["rein"] = input.readVarInt(false); //转生
                            temp594["title"] = input.readVarInt(false); //封号等级
                            temp594["unionName"] = input.readString(); //帮会名字
                        }
                        else {
                            resLookRankMessage["rankDataBeans"][rankDataBeansi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resLookRankMessage);
                    break;
            }
        };
        return RankModel;
    }(ModelBase));
    net.RankModel = RankModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:39
     */
    var RechargeModel = /** @class */ (function (_super) {
        __extends(RechargeModel, _super);
        function RechargeModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(39002 /* RechargeModelCMD.CMDResGetRechargeInfoMessage */);
            return _this;
        }
        RechargeModel.ins = function () {
            if (!this._ins)
                this._ins = new RechargeModel();
            return this._ins;
        };
        /**
         *
         * 获取玩家充值数据
         *
         * sendReqGetRechargeInfoMessage  39001
         */
        RechargeModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(39001 /* RechargeModelCMD.CMDReqGetRechargeInfoMessage */, output, s);
        };
        /**
         *
         * 重置兑换
         * @param 充值配置id
         *
         * sendReqRechargeExchangeMessage  39003
         */
        RechargeModel.prototype.send3 = function (uid, s) {
            var output = this.getO();
            output.writeVarInt(uid, false);
            this.send(39003 /* RechargeModelCMD.CMDReqRechargeExchangeMessage */, output, s);
        };
        RechargeModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 39002 /* RechargeModelCMD.CMDResGetRechargeInfoMessage */:
                    var resGetRechargeInfoMessage = {};
                    resGetRechargeInfoMessage["rechargedDaily"] = input.readLong(); //每日充值数（游戏币）
                    resGetRechargeInfoMessage["rechargedTotal"] = input.readLong(); //每日充值数（游戏币）
                    var rechargedLength1 = input.readShort();
                    resGetRechargeInfoMessage["recharged"] = [];
                    for (var rechargedi1 = 0; rechargedi1 < rechargedLength1; rechargedi1++) {
                        if (input.readByte() != 0) {
                            var temp1014 = resGetRechargeInfoMessage["recharged"][rechargedi1] = {}; //计费点充值详情 充值次数
                            temp1014["id"] = input.readVarInt(false); //
                            temp1014["value"] = input.readVarInt(false); //
                        }
                        else {
                            resGetRechargeInfoMessage["recharged"][rechargedi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resGetRechargeInfoMessage);
                    break;
            }
        };
        return RechargeModel;
    }(ModelBase));
    net.RechargeModel = RechargeModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:184
     */
    var RecycleModel = /** @class */ (function (_super) {
        __extends(RecycleModel, _super);
        function RecycleModel() {
            return _super.call(this) || this;
        }
        RecycleModel.ins = function () {
            if (!this._ins)
                this._ins = new RecycleModel();
            return this._ins;
        };
        /**
         *
         * 请求回收
         *
         * sendReqRecycleMessage  184001
         */
        RecycleModel.prototype.send1 = function (items, s) {
            var output = this.getO();
            if (items != null) {
                output.writeShort(items.length);
                for (var itemsi1 = 0; itemsi1 < items.length; itemsi1++) {
                    if (items[itemsi1] != null) {
                        output.writeByte(1);
                        output.writeLong(items[itemsi1].uid);
                        output.writeVarInt(items[itemsi1].count, false);
                    }
                    else {
                        output.writeByte(0);
                    }
                }
            }
            else {
                output.writeShort(0);
            }
            this.send(184001 /* RecycleModelCMD.CMDReqRecycleMessage */, output, s);
        };
        RecycleModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
            }
        };
        return RecycleModel;
    }(ModelBase));
    net.RecycleModel = RecycleModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:232
     */
    var ResonanceModel = /** @class */ (function (_super) {
        __extends(ResonanceModel, _super);
        function ResonanceModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(232002 /* ResonanceModelCMD.CMDResResonanceInfoMessage */);
            return _this;
        }
        ResonanceModel.ins = function () {
            if (!this._ins)
                this._ins = new ResonanceModel();
            return this._ins;
        };
        /**
         *
         * 请求羁绊信息
         * @param 唯一id
         * @param 类型
         *
         * sendReqResonanceInfoMessage  232001
         */
        ResonanceModel.prototype.send1 = function (uid, type, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(type, false);
            this.send(232001 /* ResonanceModelCMD.CMDReqResonanceInfoMessage */, output, s);
        };
        /**
         *
         * 请求激活羁绊
         * @param 唯一id
         * @param 类型
         *
         * sendReqResonanceActivateMessage  232003
         */
        ResonanceModel.prototype.send3 = function (uid, type, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(type, false);
            this.send(232003 /* ResonanceModelCMD.CMDReqResonanceActivateMessage */, output, s);
        };
        ResonanceModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 232002 /* ResonanceModelCMD.CMDResResonanceInfoMessage */:
                    var resResonanceInfoMessage = {};
                    resResonanceInfoMessage["uid"] = input.readLong(); //唯一id
                    var listLength1 = input.readShort();
                    resResonanceInfoMessage["list"] = [];
                    for (var listi1 = 0; listi1 < listLength1; listi1++) {
                        if (input.readByte() != 0) {
                            var temp847 = resResonanceInfoMessage["list"][listi1] = {}; //羁绊信息
                            temp847["type"] = input.readVarInt(false); //类型
                            var listLength2 = input.readShort();
                            temp847["list"] = new Array(listLength2);
                            for (var listi2 = 0; listi2 < listLength2; listi2++) {
                                temp847["list"][listi2] = input.readVarInt(false); //已激活羁绊
                            }
                        }
                        else {
                            resResonanceInfoMessage["list"][listi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resResonanceInfoMessage);
                    break;
            }
        };
        return ResonanceModel;
    }(ModelBase));
    net.ResonanceModel = ResonanceModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:216
     */
    var RingLevelUpModel = /** @class */ (function (_super) {
        __extends(RingLevelUpModel, _super);
        function RingLevelUpModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(216002 /* RingLevelUpModelCMD.CMDResRingInfoMessage */);
            return _this;
        }
        RingLevelUpModel.ins = function () {
            if (!this._ins)
                this._ins = new RingLevelUpModel();
            return this._ins;
        };
        /**
         *
         * 请求特戒升级面板
         * @param 玩家或者元神唯一id
         *
         * sendReqRingInfoMessage  216001
         */
        RingLevelUpModel.prototype.send1 = function (uId, s) {
            var output = this.getO();
            output.writeLong(uId);
            this.send(216001 /* RingLevelUpModelCMD.CMDReqRingInfoMessage */, output, s);
        };
        /**
         *
         * 请求特戒升级
         * @param 玩家或者元神唯一id
         * @param 部位
         *
         * sendReqRingSpecialLevelUpMessage  216003
         */
        RingLevelUpModel.prototype.send3 = function (uId, index, s) {
            var output = this.getO();
            output.writeLong(uId);
            output.writeVarInt(index, false);
            this.send(216003 /* RingLevelUpModelCMD.CMDReqRingSpecialLevelUpMessage */, output, s);
        };
        RingLevelUpModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 216002 /* RingLevelUpModelCMD.CMDResRingInfoMessage */:
                    var resRingInfoMessage = {};
                    resRingInfoMessage["uId"] = input.readLong(); //玩家或者元神唯一id
                    var beansLength1 = input.readShort();
                    resRingInfoMessage["beans"] = [];
                    for (var beansi1 = 0; beansi1 < beansLength1; beansi1++) {
                        if (input.readByte() != 0) {
                            var temp1052 = resRingInfoMessage["beans"][beansi1] = {}; //特戒信息
                            temp1052["type"] = input.readVarInt(false); //类型
                            temp1052["level"] = input.readVarInt(false); //等级
                        }
                        else {
                            resRingInfoMessage["beans"][beansi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resRingInfoMessage);
                    break;
            }
        };
        return RingLevelUpModel;
    }(ModelBase));
    net.RingLevelUpModel = RingLevelUpModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:8
     */
    var RoleModel = /** @class */ (function (_super) {
        __extends(RoleModel, _super);
        function RoleModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(8001 /* RoleModelCMD.CMDResPlayerAttributeChangeMessage */);
            thisObj.reg(8002 /* RoleModelCMD.CMDResPlayerBasicInfoMessage */);
            thisObj.reg(8004 /* RoleModelCMD.CMDResPlayerLevelChangeMessage */);
            thisObj.reg(8011 /* RoleModelCMD.CMDResRoleAutoStatusMessage */);
            thisObj.reg(8043 /* RoleModelCMD.CMDResRoleReinInfoMessage */);
            thisObj.reg(8047 /* RoleModelCMD.CMDResReinTaskInfoMessage */);
            thisObj.reg(8045 /* RoleModelCMD.CMDResRoleReinUpgradeMessage */);
            thisObj.reg(8052 /* RoleModelCMD.CMDResRoleReinTaskInfoMessage */);
            thisObj.reg(8054 /* RoleModelCMD.CMDResRoleReinTaskTipsMessage */);
            thisObj.reg(8063 /* RoleModelCMD.CMDResRolePickSettingMessage */);
            thisObj.reg(8072 /* RoleModelCMD.CMDResRoleSettingMessage */);
            thisObj.reg(8074 /* RoleModelCMD.CMDResRoleSettingUpdateMessage */);
            thisObj.reg(8082 /* RoleModelCMD.CMDResRoleGoodEvilValueMessage */);
            thisObj.reg(8084 /* RoleModelCMD.CMDResRoleAtkInfoMessage */);
            thisObj.reg(8092 /* RoleModelCMD.CMDResRoleCDKOpenStateMessage */);
            return _this;
        }
        RoleModel.ins = function () {
            if (!this._ins)
                this._ins = new RoleModel();
            return this._ins;
        };
        /**
         *
         * 请求玩家基本数据
         *
         * sendReqPlayerBasicInfoMessage  8042
         */
        RoleModel.prototype.send42 = function (s) {
            var output = this.getO();
            this.send(8042 /* RoleModelCMD.CMDReqPlayerBasicInfoMessage */, output, s);
        };
        /**
         *
         * 请求玩家境界数据
         *
         * sendReqRoleReinInfoMessage  8044
         */
        RoleModel.prototype.send44 = function (s) {
            var output = this.getO();
            this.send(8044 /* RoleModelCMD.CMDReqRoleReinInfoMessage */, output, s);
        };
        /**
         *
         * 请求境界任务信息
         *
         * sendReqReinTaskInfoMessage  8046
         */
        RoleModel.prototype.send46 = function (s) {
            var output = this.getO();
            this.send(8046 /* RoleModelCMD.CMDReqReinTaskInfoMessage */, output, s);
        };
        /**
         *
         * 请求角色转生
         * @param 主角还是元神 1主角 2元神
         *
         * sendReqUpLevelRoleReinMessage  8009
         */
        RoleModel.prototype.send9 = function (character, s) {
            var output = this.getO();
            output.writeVarInt(character, false);
            this.send(8009 /* RoleModelCMD.CMDReqUpLevelRoleReinMessage */, output, s);
        };
        /**
         *
         * 请求境界任务消息
         *
         * sendReqRoleReinTaskInfoMessage  8051
         */
        RoleModel.prototype.send51 = function (s) {
            var output = this.getO();
            this.send(8051 /* RoleModelCMD.CMDReqRoleReinTaskInfoMessage */, output, s);
        };
        /**
         *
         * 请求完成境界任务
         *
         * sendReqRoleReinTaskSubmitMessage  8053
         */
        RoleModel.prototype.send53 = function (s) {
            var output = this.getO();
            this.send(8053 /* RoleModelCMD.CMDReqRoleReinTaskSubmitMessage */, output, s);
        };
        /**
         *
         * 请求更新拾取设置
         *
         * sendReqRoleUpdatePickSettingMessage  8061
         */
        RoleModel.prototype.send61 = function (setting, s) {
            var output = this.getO();
            if (setting != null) {
                output.writeShort(setting.length);
                for (var settingi1 = 0; settingi1 < setting.length; settingi1++) {
                    if (setting[settingi1] != null) {
                        output.writeByte(1);
                        output.writeVarInt(setting[settingi1].type, false);
                        output.writeShort(setting[settingi1].exclude.length);
                        for (var excludei1 = 0; excludei1 < setting[settingi1].exclude.length; excludei1++) {
                            output.writeVarInt(setting[settingi1].exclude[excludei1], false);
                        }
                    }
                    else {
                        output.writeByte(0);
                    }
                }
            }
            else {
                output.writeShort(0);
            }
            this.send(8061 /* RoleModelCMD.CMDReqRoleUpdatePickSettingMessage */, output, s);
        };
        /**
         *
         * 请求角色拾取设置信息
         *
         * sendReqRolePickSettingMessage  8062
         */
        RoleModel.prototype.send62 = function (s) {
            var output = this.getO();
            this.send(8062 /* RoleModelCMD.CMDReqRolePickSettingMessage */, output, s);
        };
        /**
         *
         * 请求当前设置信息
         *
         * sendReqRoleSettingMessage  8071
         */
        RoleModel.prototype.send71 = function (s) {
            var output = this.getO();
            this.send(8071 /* RoleModelCMD.CMDReqRoleSettingMessage */, output, s);
        };
        /**
         *
         * 修改设置信息
         *
         * sendReqRoleSettingAlterMessage  8073
         */
        RoleModel.prototype.send73 = function (settings, plusSettings, s) {
            var output = this.getO();
            if (settings != null) {
                output.writeShort(settings.length);
                for (var settingsi1 = 0; settingsi1 < settings.length; settingsi1++) {
                    if (settings[settingsi1] != null) {
                        output.writeByte(1);
                        output.writeVarInt(settings[settingsi1].key, false);
                        output.writeVarInt(settings[settingsi1].value, false);
                    }
                    else {
                        output.writeByte(0);
                    }
                }
            }
            else {
                output.writeShort(0);
            }
            if (plusSettings != null) {
                output.writeShort(plusSettings.length);
                for (var plusSettingsi1 = 0; plusSettingsi1 < plusSettings.length; plusSettingsi1++) {
                    if (plusSettings[plusSettingsi1] != null) {
                        output.writeByte(1);
                        output.writeString(plusSettings[plusSettingsi1].key);
                        output.writeString(plusSettings[plusSettingsi1].value);
                    }
                    else {
                        output.writeByte(0);
                    }
                }
            }
            else {
                output.writeShort(0);
            }
            this.send(8073 /* RoleModelCMD.CMDReqRoleSettingAlterMessage */, output, s);
        };
        /**
         *
         * 请求玩家善恶值消息
         *
         * sendReqRoleGoodEvilValueMessage  8081
         */
        RoleModel.prototype.send81 = function (s) {
            var output = this.getO();
            this.send(8081 /* RoleModelCMD.CMDReqRoleGoodEvilValueMessage */, output, s);
        };
        /**
         *
         * 请求攻击信息
         *
         * sendReqRoleAtkInfoMessage  8083
         */
        RoleModel.prototype.send83 = function (s) {
            var output = this.getO();
            this.send(8083 /* RoleModelCMD.CMDReqRoleAtkInfoMessage */, output, s);
        };
        /**
         *
         * 获取礼包码开放状态
         *
         * sendReqRoleCDKOpenStateMessage  8091
         */
        RoleModel.prototype.send91 = function (s) {
            var output = this.getO();
            this.send(8091 /* RoleModelCMD.CMDReqRoleCDKOpenStateMessage */, output, s);
        };
        RoleModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 8001 /* RoleModelCMD.CMDResPlayerAttributeChangeMessage */:
                    var resPlayerAttributeChangeMessage = {};
                    resPlayerAttributeChangeMessage["uid"] = input.readLong(); //玩家id
                    resPlayerAttributeChangeMessage["power"] = input.readLong(); //战斗力
                    var attrLength1 = input.readByte();
                    if (attrLength1 != 0) {
                        var temp635 = resPlayerAttributeChangeMessage["attr"] = {}; //属性
                        var attributeTypeLength1 = input.readShort();
                        temp635["attributeType"] = new Array(attributeTypeLength1);
                        for (var attributeTypei1 = 0; attributeTypei1 < attributeTypeLength1; attributeTypei1++) {
                            temp635["attributeType"][attributeTypei1] = input.readVarInt(false); //属性类型
                        }
                        var attributeValueLength1 = input.readShort();
                        temp635["attributeValue"] = [];
                        for (var attributeValuei1 = 0; attributeValuei1 < attributeValueLength1; attributeValuei1++) {
                            temp635["attributeValue"][attributeValuei1] = input.readLong(); //属性值
                        }
                    }
                    resPlayerAttributeChangeMessage["show"] = input.readBoolean(); //是否飘字
                    this.sendNotif(cmd, resPlayerAttributeChangeMessage);
                    break;
                case 8002 /* RoleModelCMD.CMDResPlayerBasicInfoMessage */:
                    var resPlayerBasicInfoMessage = {};
                    resPlayerBasicInfoMessage["power"] = input.readLong(); //战斗力
                    var attrLength2 = input.readByte();
                    if (attrLength2 != 0) {
                        var temp636 = resPlayerBasicInfoMessage["attr"] = {}; //属性
                        var attributeTypeLength2 = input.readShort();
                        temp636["attributeType"] = new Array(attributeTypeLength2);
                        for (var attributeTypei2 = 0; attributeTypei2 < attributeTypeLength2; attributeTypei2++) {
                            temp636["attributeType"][attributeTypei2] = input.readVarInt(false); //属性类型
                        }
                        var attributeValueLength2 = input.readShort();
                        temp636["attributeValue"] = [];
                        for (var attributeValuei2 = 0; attributeValuei2 < attributeValueLength2; attributeValuei2++) {
                            temp636["attributeValue"][attributeValuei2] = input.readLong(); //属性值
                        }
                    }
                    resPlayerBasicInfoMessage["hp"] = input.readLong(); //当前血量
                    resPlayerBasicInfoMessage["mp"] = input.readVarInt(false); //当前蓝量
                    resPlayerBasicInfoMessage["innerPower"] = input.readVarInt(false); //当前内功
                    resPlayerBasicInfoMessage["name"] = input.readString(); //名称
                    resPlayerBasicInfoMessage["level"] = input.readVarInt(false); //等级
                    resPlayerBasicInfoMessage["reinLevel"] = input.readVarInt(false); //转生等级
                    resPlayerBasicInfoMessage["career"] = input.readVarInt(false); //职业
                    resPlayerBasicInfoMessage["sex"] = input.readVarInt(false); //性别
                    resPlayerBasicInfoMessage["exp"] = input.readLong(); //经验
                    resPlayerBasicInfoMessage["titleId"] = input.readVarInt(false); //佩戴的称号
                    resPlayerBasicInfoMessage["fashionId"] = input.readVarInt(false); //佩戴的时装
                    resPlayerBasicInfoMessage["fashionWingId"] = input.readVarInt(false); //佩戴的光冀
                    resPlayerBasicInfoMessage["fashionFootMark"] = input.readVarInt(false); //佩戴的足迹
                    resPlayerBasicInfoMessage["huanwu"] = input.readVarInt(false); //佩戴的幻武
                    resPlayerBasicInfoMessage["huiji"] = input.readVarInt(false); //佩戴的徽记
                    resPlayerBasicInfoMessage["createTime"] = input.readVarInt(false); //创角时间 (s)
                    resPlayerBasicInfoMessage["levelPower"] = input.readVarInt(false); //等级战力
                    this.sendNotif(cmd, resPlayerBasicInfoMessage);
                    break;
                case 8004 /* RoleModelCMD.CMDResPlayerLevelChangeMessage */:
                    var resPlayerLevelChangeMessage = {};
                    resPlayerLevelChangeMessage["uid"] = input.readLong(); //玩家id
                    resPlayerLevelChangeMessage["curExp"] = input.readLong(); //当前经验
                    resPlayerLevelChangeMessage["curLevel"] = input.readVarInt(false); //当前等级
                    resPlayerLevelChangeMessage["levelPower"] = input.readVarInt(false); //等级战力
                    this.sendNotif(cmd, resPlayerLevelChangeMessage);
                    break;
                case 8011 /* RoleModelCMD.CMDResRoleAutoStatusMessage */:
                    var resRoleAutoStatusMessage = input.readBoolean(); //是否在auto状态 true是，false不是,  默认false
                    this.sendNotif(cmd, resRoleAutoStatusMessage);
                    break;
                case 8043 /* RoleModelCMD.CMDResRoleReinInfoMessage */:
                    var resRoleReinInfoMessage = {};
                    resRoleReinInfoMessage["rein"] = input.readVarInt(false); //境界表id
                    resRoleReinInfoMessage["imageRein"] = input.readVarInt(false); //元神境界
                    this.sendNotif(cmd, resRoleReinInfoMessage);
                    break;
                case 8047 /* RoleModelCMD.CMDResReinTaskInfoMessage */:
                    var tasksLength1 = input.readShort();
                    var resReinTaskInfoMessage = [];
                    for (var tasksi1 = 0; tasksi1 < tasksLength1; tasksi1++) {
                        if (input.readByte() != 0) {
                            var temp637 = resReinTaskInfoMessage[tasksi1] = {}; //
                            temp637["taskId"] = input.readVarInt(false); //任务id
                            temp637["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp637["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength1 = input.readShort();
                            temp637["goalDataList"] = [];
                            for (var goalDataListi1 = 0; goalDataListi1 < goalDataListLength1; goalDataListi1++) {
                                if (input.readByte() != 0) {
                                    var temp638 = temp637["goalDataList"][goalDataListi1] = {}; //目标数据
                                    temp638["goalId"] = input.readVarInt(false); //目标id
                                    temp638["progress"] = input.readVarInt(false); //当前完成进度
                                    temp638["goalType"] = input.readVarInt(false); //目标类型
                                    temp638["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength1 = input.readShort();
                                    temp638["goalParams"] = new Array(goalParamsLength1);
                                    for (var goalParamsi1 = 0; goalParamsi1 < goalParamsLength1; goalParamsi1++) {
                                        temp638["goalParams"][goalParamsi1] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp637["goalDataList"][goalDataListi1] = null;
                                }
                            }
                        }
                        else {
                            resReinTaskInfoMessage[tasksi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resReinTaskInfoMessage);
                    break;
                case 8045 /* RoleModelCMD.CMDResRoleReinUpgradeMessage */:
                    var resRoleReinUpgradeMessage = {};
                    resRoleReinUpgradeMessage["character"] = input.readVarInt(false); //主角还是元神 1主角 2元神
                    resRoleReinUpgradeMessage["result"] = input.readVarInt(false); //1成功 0失败
                    this.sendNotif(cmd, resRoleReinUpgradeMessage);
                    break;
                case 8052 /* RoleModelCMD.CMDResRoleReinTaskInfoMessage */:
                    var taskDataLength1 = input.readByte();
                    if (taskDataLength1 != 0) {
                        var resRoleReinTaskInfoMessage = {}; //任务数据
                        resRoleReinTaskInfoMessage["taskId"] = input.readVarInt(false); //任务id
                        resRoleReinTaskInfoMessage["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                        resRoleReinTaskInfoMessage["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                        var goalDataListLength2 = input.readShort();
                        resRoleReinTaskInfoMessage["goalDataList"] = [];
                        for (var goalDataListi2 = 0; goalDataListi2 < goalDataListLength2; goalDataListi2++) {
                            if (input.readByte() != 0) {
                                var temp639 = resRoleReinTaskInfoMessage["goalDataList"][goalDataListi2] = {}; //目标数据
                                temp639["goalId"] = input.readVarInt(false); //目标id
                                temp639["progress"] = input.readVarInt(false); //当前完成进度
                                temp639["goalType"] = input.readVarInt(false); //目标类型
                                temp639["goalCount"] = input.readVarInt(false); //目标需求数量
                                var goalParamsLength2 = input.readShort();
                                temp639["goalParams"] = new Array(goalParamsLength2);
                                for (var goalParamsi2 = 0; goalParamsi2 < goalParamsLength2; goalParamsi2++) {
                                    temp639["goalParams"][goalParamsi2] = input.readVarInt(false); //目标参数
                                }
                            }
                            else {
                                resRoleReinTaskInfoMessage["goalDataList"][goalDataListi2] = null;
                            }
                        }
                    }
                    this.sendNotif(cmd, resRoleReinTaskInfoMessage);
                    break;
                case 8054 /* RoleModelCMD.CMDResRoleReinTaskTipsMessage */:
                    var resRoleReinTaskTipsMessage = {};
                    resRoleReinTaskTipsMessage["progress"] = input.readVarInt(false); //当前阶段
                    resRoleReinTaskTipsMessage["time"] = input.readVarInt(false); //下次时间
                    this.sendNotif(cmd, resRoleReinTaskTipsMessage);
                    break;
                case 8063 /* RoleModelCMD.CMDResRolePickSettingMessage */:
                    var settingLength1 = input.readShort();
                    var resRolePickSettingMessage = [];
                    for (var settingi1 = 0; settingi1 < settingLength1; settingi1++) {
                        if (input.readByte() != 0) {
                            var temp640 = resRolePickSettingMessage[settingi1] = {}; //设置信息
                            temp640["type"] = input.readVarInt(false); //类型
                            var excludeLength1 = input.readShort();
                            temp640["exclude"] = new Array(excludeLength1);
                            for (var excludei1 = 0; excludei1 < excludeLength1; excludei1++) {
                                temp640["exclude"][excludei1] = input.readVarInt(false); //排除的id  注意只有特定的类型才允许传该列表
                            }
                        }
                        else {
                            resRolePickSettingMessage[settingi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resRolePickSettingMessage);
                    break;
                case 8072 /* RoleModelCMD.CMDResRoleSettingMessage */:
                    var resRoleSettingMessage = {};
                    var settingsLength1 = input.readShort();
                    resRoleSettingMessage["settings"] = [];
                    for (var settingsi1 = 0; settingsi1 < settingsLength1; settingsi1++) {
                        if (input.readByte() != 0) {
                            var temp641 = resRoleSettingMessage["settings"][settingsi1] = {}; //int -- int 设置信息存储
                            temp641["key"] = input.readVarInt(false); //
                            temp641["value"] = input.readVarInt(false); //
                        }
                        else {
                            resRoleSettingMessage["settings"][settingsi1] = null;
                        }
                    }
                    var plusSettingsLength1 = input.readShort();
                    resRoleSettingMessage["plusSettings"] = [];
                    for (var plusSettingsi1 = 0; plusSettingsi1 < plusSettingsLength1; plusSettingsi1++) {
                        if (input.readByte() != 0) {
                            var temp642 = resRoleSettingMessage["plusSettings"][plusSettingsi1] = {}; // str -- str 设置信息存储
                            temp642["key"] = input.readString(); //
                            temp642["value"] = input.readString(); //
                        }
                        else {
                            resRoleSettingMessage["plusSettings"][plusSettingsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resRoleSettingMessage);
                    break;
                case 8074 /* RoleModelCMD.CMDResRoleSettingUpdateMessage */:
                    var resRoleSettingUpdateMessage = {};
                    var settingsLength2 = input.readShort();
                    resRoleSettingUpdateMessage["settings"] = [];
                    for (var settingsi2 = 0; settingsi2 < settingsLength2; settingsi2++) {
                        if (input.readByte() != 0) {
                            var temp643 = resRoleSettingUpdateMessage["settings"][settingsi2] = {}; //
                            temp643["key"] = input.readVarInt(false); //
                            temp643["value"] = input.readVarInt(false); //
                        }
                        else {
                            resRoleSettingUpdateMessage["settings"][settingsi2] = null;
                        }
                    }
                    var plusSettingsLength2 = input.readShort();
                    resRoleSettingUpdateMessage["plusSettings"] = [];
                    for (var plusSettingsi2 = 0; plusSettingsi2 < plusSettingsLength2; plusSettingsi2++) {
                        if (input.readByte() != 0) {
                            var temp644 = resRoleSettingUpdateMessage["plusSettings"][plusSettingsi2] = {}; //
                            temp644["key"] = input.readString(); //
                            temp644["value"] = input.readString(); //
                        }
                        else {
                            resRoleSettingUpdateMessage["plusSettings"][plusSettingsi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resRoleSettingUpdateMessage);
                    break;
                case 8082 /* RoleModelCMD.CMDResRoleGoodEvilValueMessage */:
                    var resRoleGoodEvilValueMessage = input.readVarInt(false); //善恶值
                    this.sendNotif(cmd, resRoleGoodEvilValueMessage);
                    break;
                case 8084 /* RoleModelCMD.CMDResRoleAtkInfoMessage */:
                    var resRoleAtkInfoMessage = input.readLong(); //历史最大攻击
                    this.sendNotif(cmd, resRoleAtkInfoMessage);
                    break;
                case 8092 /* RoleModelCMD.CMDResRoleCDKOpenStateMessage */:
                    var resRoleCDKOpenStateMessage = input.readBoolean(); //是否开放
                    this.sendNotif(cmd, resRoleCDKOpenStateMessage);
                    break;
            }
        };
        return RoleModel;
    }(ModelBase));
    net.RoleModel = RoleModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:9
     */
    var SkillModel = /** @class */ (function (_super) {
        __extends(SkillModel, _super);
        function SkillModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(9002 /* SkillModelCMD.CMDResSkillInfoMessage */);
            thisObj.reg(9004 /* SkillModelCMD.CMDResSkillChangeMessage */);
            thisObj.reg(9006 /* SkillModelCMD.CMDResSkillAwakeInfoMessage */);
            thisObj.reg(9008 /* SkillModelCMD.CMDResSkillAwakeChangeMessage */);
            thisObj.reg(9010 /* SkillModelCMD.CMDResSkillCDInfoMessage */);
            return _this;
        }
        SkillModel.ins = function () {
            if (!this._ins)
                this._ins = new SkillModel();
            return this._ins;
        };
        /**
         *
         * 请求角色技能数据
         * @param 0或者元神唯一id
         *
         * sendReqSkillInfoMessage  9001
         */
        SkillModel.prototype.send1 = function (uId, s) {
            var output = this.getO();
            output.writeLong(uId);
            this.send(9001 /* SkillModelCMD.CMDReqSkillInfoMessage */, output, s);
        };
        /**
         *
         * 请求升级或激活技能
         * @param 0或者元神唯一id
         * @param 技能id
         *
         * sendReqUpSkillMessage  9003
         */
        SkillModel.prototype.send3 = function (uId, skillId, s) {
            var output = this.getO();
            output.writeLong(uId);
            output.writeVarInt(skillId, false);
            this.send(9003 /* SkillModelCMD.CMDReqUpSkillMessage */, output, s);
        };
        /**
         *
         * 请求角色技能觉醒数据
         * @param 0或者元神唯一id
         *
         * sendReqSkillAwakeInfoMessage  9005
         */
        SkillModel.prototype.send5 = function (uId, s) {
            var output = this.getO();
            output.writeLong(uId);
            this.send(9005 /* SkillModelCMD.CMDReqSkillAwakeInfoMessage */, output, s);
        };
        /**
         *
         * 请求技能觉醒
         * @param 0或者元神唯一id
         * @param 技能id
         *
         * sendReqSkillAwakeMessage  9007
         */
        SkillModel.prototype.send7 = function (uId, skillId, s) {
            var output = this.getO();
            output.writeLong(uId);
            output.writeVarInt(skillId, false);
            this.send(9007 /* SkillModelCMD.CMDReqSkillAwakeMessage */, output, s);
        };
        /**
         *
         * 请求技能cd
         * @param 玩家或者元神唯一id
         *
         * sendReqSkillCDInfoMessage  9009
         */
        SkillModel.prototype.send9 = function (uId, s) {
            var output = this.getO();
            output.writeLong(uId);
            this.send(9009 /* SkillModelCMD.CMDReqSkillCDInfoMessage */, output, s);
        };
        SkillModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 9002 /* SkillModelCMD.CMDResSkillInfoMessage */:
                    var resSkillInfoMessage = {};
                    resSkillInfoMessage["uId"] = input.readLong(); //玩家或者元神唯一id
                    var skillInfoLength1 = input.readShort();
                    resSkillInfoMessage["skillInfo"] = [];
                    for (var skillInfoi1 = 0; skillInfoi1 < skillInfoLength1; skillInfoi1++) {
                        if (input.readByte() != 0) {
                            var temp595 = resSkillInfoMessage["skillInfo"][skillInfoi1] = {}; //技能信息
                            temp595["skillId"] = input.readVarInt(false); //技能id
                            temp595["level"] = input.readVarInt(false); //等级
                            temp595["practice"] = input.readVarInt(false); //当前熟练度
                            temp595["strong"] = input.readBoolean(); //是否强化过
                        }
                        else {
                            resSkillInfoMessage["skillInfo"][skillInfoi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resSkillInfoMessage);
                    break;
                case 9004 /* SkillModelCMD.CMDResSkillChangeMessage */:
                    var resSkillChangeMessage = {};
                    resSkillChangeMessage["uId"] = input.readLong(); //玩家或者元神唯一id
                    var skillBeanLength1 = input.readByte();
                    if (skillBeanLength1 != 0) {
                        var temp596 = resSkillChangeMessage["skillBean"] = {}; //改变的技能
                        temp596["skillId"] = input.readVarInt(false); //技能id
                        temp596["level"] = input.readVarInt(false); //等级
                        temp596["practice"] = input.readVarInt(false); //当前熟练度
                        temp596["strong"] = input.readBoolean(); //是否强化过
                    }
                    this.sendNotif(cmd, resSkillChangeMessage);
                    break;
                case 9006 /* SkillModelCMD.CMDResSkillAwakeInfoMessage */:
                    var resSkillAwakeInfoMessage = {};
                    resSkillAwakeInfoMessage["uId"] = input.readLong(); //玩家或者元神唯一id
                    var skillAwakeInfoLength1 = input.readShort();
                    resSkillAwakeInfoMessage["skillAwakeInfo"] = [];
                    for (var skillAwakeInfoi1 = 0; skillAwakeInfoi1 < skillAwakeInfoLength1; skillAwakeInfoi1++) {
                        if (input.readByte() != 0) {
                            var temp597 = resSkillAwakeInfoMessage["skillAwakeInfo"][skillAwakeInfoi1] = {}; //技能觉醒信息
                            temp597["skillId"] = input.readVarInt(false); //技能id
                            temp597["level"] = input.readVarInt(false); //觉醒等级(预判策划可能出现的升级系统)
                        }
                        else {
                            resSkillAwakeInfoMessage["skillAwakeInfo"][skillAwakeInfoi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resSkillAwakeInfoMessage);
                    break;
                case 9008 /* SkillModelCMD.CMDResSkillAwakeChangeMessage */:
                    var resSkillAwakeChangeMessage = {};
                    resSkillAwakeChangeMessage["uId"] = input.readLong(); //玩家或者元神唯一id
                    var beanLength1 = input.readByte();
                    if (beanLength1 != 0) {
                        var temp598 = resSkillAwakeChangeMessage["bean"] = {}; //改变的觉醒技能
                        temp598["skillId"] = input.readVarInt(false); //技能id
                        temp598["level"] = input.readVarInt(false); //觉醒等级(预判策划可能出现的升级系统)
                    }
                    this.sendNotif(cmd, resSkillAwakeChangeMessage);
                    break;
                case 9010 /* SkillModelCMD.CMDResSkillCDInfoMessage */:
                    var resSkillCDInfoMessage = {};
                    resSkillCDInfoMessage["uId"] = input.readLong(); //玩家或者元神唯一id
                    var infosLength1 = input.readShort();
                    resSkillCDInfoMessage["infos"] = [];
                    for (var infosi1 = 0; infosi1 < infosLength1; infosi1++) {
                        if (input.readByte() != 0) {
                            var temp599 = resSkillCDInfoMessage["infos"][infosi1] = {}; //cd信息列表 (只有在cd中的技能)
                            temp599["id"] = input.readVarInt(false); //技能id
                            temp599["expire"] = input.readLong(); //cd过期时间（时间戳，毫秒）
                        }
                        else {
                            resSkillCDInfoMessage["infos"][infosi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resSkillCDInfoMessage);
                    break;
            }
        };
        return SkillModel;
    }(ModelBase));
    net.SkillModel = SkillModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:363
     */
    var SkillStrengthenModel = /** @class */ (function (_super) {
        __extends(SkillStrengthenModel, _super);
        function SkillStrengthenModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(363002 /* SkillStrengthenModelCMD.CMDResSkillStrengthenMessage */);
            return _this;
        }
        SkillStrengthenModel.ins = function () {
            if (!this._ins)
                this._ins = new SkillStrengthenModel();
            return this._ins;
        };
        /**
         *
         * 请求角色技能强化数据
         *
         * sendReqSkillStrengthenInfoMessage  363001
         */
        SkillStrengthenModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(363001 /* SkillStrengthenModelCMD.CMDReqSkillStrengthenInfoMessage */, output, s);
        };
        /**
         *
         * 请求强化技能
         *
         * sendReqStrengthenSkillMessage  363003
         */
        SkillStrengthenModel.prototype.send3 = function (skills, s) {
            var output = this.getO();
            if (skills != null) {
                output.writeShort(skills.length);
                for (var skillsi1 = 0; skillsi1 < skills.length; skillsi1++) {
                    if (skills[skillsi1] != null) {
                        output.writeByte(1);
                        output.writeVarInt(skills[skillsi1].cfgId, false);
                        output.writeVarInt(skills[skillsi1].level, false);
                    }
                    else {
                        output.writeByte(0);
                    }
                }
            }
            else {
                output.writeShort(0);
            }
            this.send(363003 /* SkillStrengthenModelCMD.CMDReqStrengthenSkillMessage */, output, s);
        };
        SkillStrengthenModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 363002 /* SkillStrengthenModelCMD.CMDResSkillStrengthenMessage */:
                    var skillInfoLength1 = input.readShort();
                    var resSkillStrengthenMessage = [];
                    for (var skillInfoi1 = 0; skillInfoi1 < skillInfoLength1; skillInfoi1++) {
                        if (input.readByte() != 0) {
                            var temp642 = resSkillStrengthenMessage[skillInfoi1] = {}; //技能强化信息
                            temp642["cfgId"] = input.readVarInt(false); //配置表id
                            temp642["level"] = input.readVarInt(false); //加点数
                        }
                        else {
                            resSkillStrengthenMessage[skillInfoi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resSkillStrengthenMessage);
                    break;
            }
        };
        return SkillStrengthenModel;
    }(ModelBase));
    net.SkillStrengthenModel = SkillStrengthenModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:29
     */
    var SlotQuenchingModel = /** @class */ (function (_super) {
        __extends(SlotQuenchingModel, _super);
        function SlotQuenchingModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(29002 /* SlotQuenchingModelCMD.CMDResAdvanceSlotQuenchingInfoMessage */);
            thisObj.reg(29004 /* SlotQuenchingModelCMD.CMDResAdvanceSlotQuenchingUpgradeMessage */);
            thisObj.reg(29006 /* SlotQuenchingModelCMD.CMDResAdvanceFourQuadrantInfoMessage */);
            thisObj.reg(29008 /* SlotQuenchingModelCMD.CMDResAdvanceFourQuadrantUpgradeMessage */);
            return _this;
        }
        SlotQuenchingModel.ins = function () {
            if (!this._ins)
                this._ins = new SlotQuenchingModel();
            return this._ins;
        };
        /**
         *
         * 请求部位淬炼信息
         * @param
         *
         * sendReqAdvanceSlotQuenchingInfoMessage  29001
         */
        SlotQuenchingModel.prototype.send1 = function (uid, s) {
            var output = this.getO();
            output.writeLong(uid);
            this.send(29001 /* SlotQuenchingModelCMD.CMDReqAdvanceSlotQuenchingInfoMessage */, output, s);
        };
        /**
         *
         * 请求升级或激活技能
         * @param
         * @param
         *
         * sendReqAdvanceSlotQuenchingUpgradeMessage  29003
         */
        SlotQuenchingModel.prototype.send3 = function (uid, slot, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(slot, false);
            this.send(29003 /* SlotQuenchingModelCMD.CMDReqAdvanceSlotQuenchingUpgradeMessage */, output, s);
        };
        /**
         *
         * 请求四象阵法淬炼信息
         *
         * sendReqAdvanceFourQuadrantInfoMessage  29005
         */
        SlotQuenchingModel.prototype.send5 = function (s) {
            var output = this.getO();
            this.send(29005 /* SlotQuenchingModelCMD.CMDReqAdvanceFourQuadrantInfoMessage */, output, s);
        };
        /**
         *
         * 请求升级四象阵法
         * @param
         *
         * sendReqAdvanceFourQuadrantUpgradeMessage  29007
         */
        SlotQuenchingModel.prototype.send7 = function (slot, s) {
            var output = this.getO();
            output.writeVarInt(slot, false);
            this.send(29007 /* SlotQuenchingModelCMD.CMDReqAdvanceFourQuadrantUpgradeMessage */, output, s);
        };
        SlotQuenchingModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 29002 /* SlotQuenchingModelCMD.CMDResAdvanceSlotQuenchingInfoMessage */:
                    var resAdvanceSlotQuenchingInfoMessage = {};
                    resAdvanceSlotQuenchingInfoMessage["uid"] = input.readLong(); //
                    var quenchingsLength1 = input.readShort();
                    resAdvanceSlotQuenchingInfoMessage["quenchings"] = [];
                    for (var quenchingsi1 = 0; quenchingsi1 < quenchingsLength1; quenchingsi1++) {
                        if (input.readByte() != 0) {
                            var temp715 = resAdvanceSlotQuenchingInfoMessage["quenchings"][quenchingsi1] = {}; //淬炼信息
                            temp715["slot"] = input.readVarInt(false); //部位
                            temp715["level"] = input.readVarInt(false); //等级
                        }
                        else {
                            resAdvanceSlotQuenchingInfoMessage["quenchings"][quenchingsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resAdvanceSlotQuenchingInfoMessage);
                    break;
                case 29004 /* SlotQuenchingModelCMD.CMDResAdvanceSlotQuenchingUpgradeMessage */:
                    var resAdvanceSlotQuenchingUpgradeMessage = {};
                    resAdvanceSlotQuenchingUpgradeMessage["uid"] = input.readLong(); //
                    var quenchingLength1 = input.readByte();
                    if (quenchingLength1 != 0) {
                        var temp716 = resAdvanceSlotQuenchingUpgradeMessage["quenching"] = {}; //
                        temp716["slot"] = input.readVarInt(false); //部位
                        temp716["level"] = input.readVarInt(false); //等级
                    }
                    this.sendNotif(cmd, resAdvanceSlotQuenchingUpgradeMessage);
                    break;
                case 29006 /* SlotQuenchingModelCMD.CMDResAdvanceFourQuadrantInfoMessage */:
                    var quenchingsLength2 = input.readShort();
                    var resAdvanceFourQuadrantInfoMessage = [];
                    for (var quenchingsi2 = 0; quenchingsi2 < quenchingsLength2; quenchingsi2++) {
                        if (input.readByte() != 0) {
                            var temp717 = resAdvanceFourQuadrantInfoMessage[quenchingsi2] = {}; //淬炼信息
                            temp717["slot"] = input.readVarInt(false); //部位
                            temp717["level"] = input.readVarInt(false); //等级
                        }
                        else {
                            resAdvanceFourQuadrantInfoMessage[quenchingsi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resAdvanceFourQuadrantInfoMessage);
                    break;
                case 29008 /* SlotQuenchingModelCMD.CMDResAdvanceFourQuadrantUpgradeMessage */:
                    var quenchingLength2 = input.readByte();
                    if (quenchingLength2 != 0) {
                        var resAdvanceFourQuadrantUpgradeMessage = {}; //
                        resAdvanceFourQuadrantUpgradeMessage["slot"] = input.readVarInt(false); //部位
                        resAdvanceFourQuadrantUpgradeMessage["level"] = input.readVarInt(false); //等级
                    }
                    this.sendNotif(cmd, resAdvanceFourQuadrantUpgradeMessage);
                    break;
            }
        };
        return SlotQuenchingModel;
    }(ModelBase));
    net.SlotQuenchingModel = SlotQuenchingModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:34
     */
    var SlotSpiritModel = /** @class */ (function (_super) {
        __extends(SlotSpiritModel, _super);
        function SlotSpiritModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(34002 /* SlotSpiritModelCMD.CMDResAdvanceSlotSpiritInfoMessage */);
            thisObj.reg(34004 /* SlotSpiritModelCMD.CMDResAdvanceSlotSpiritUpgradeMessage */);
            return _this;
        }
        SlotSpiritModel.ins = function () {
            if (!this._ins)
                this._ins = new SlotSpiritModel();
            return this._ins;
        };
        /**
         *
         * 请求部位注灵信息
         * @param uid
         *
         * sendReqAdvanceSlotSpiritInfoMessage  34001
         */
        SlotSpiritModel.prototype.send1 = function (uid, s) {
            var output = this.getO();
            output.writeLong(uid);
            this.send(34001 /* SlotSpiritModelCMD.CMDReqAdvanceSlotSpiritInfoMessage */, output, s);
        };
        /**
         *
         * 请求镶嵌
         * @param uid
         * @param
         * @param
         *
         * sendReqAdvanceSlotSpiritUpgradeMessage  34003
         */
        SlotSpiritModel.prototype.send3 = function (uid, slot, item, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(slot, false);
            output.writeVarInt(item, false);
            this.send(34003 /* SlotSpiritModelCMD.CMDReqAdvanceSlotSpiritUpgradeMessage */, output, s);
        };
        SlotSpiritModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 34002 /* SlotSpiritModelCMD.CMDResAdvanceSlotSpiritInfoMessage */:
                    var resAdvanceSlotSpiritInfoMessage = {};
                    resAdvanceSlotSpiritInfoMessage["uid"] = input.readLong(); //uid
                    var spiritsLength1 = input.readShort();
                    resAdvanceSlotSpiritInfoMessage["spirits"] = [];
                    for (var spiritsi1 = 0; spiritsi1 < spiritsLength1; spiritsi1++) {
                        if (input.readByte() != 0) {
                            var temp1298 = resAdvanceSlotSpiritInfoMessage["spirits"][spiritsi1] = {}; //淬炼信息
                            temp1298["slot"] = input.readVarInt(false); //部位
                            temp1298["item"] = input.readVarInt(false); //道具id
                            temp1298["level"] = input.readVarInt(false); //等级
                        }
                        else {
                            resAdvanceSlotSpiritInfoMessage["spirits"][spiritsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resAdvanceSlotSpiritInfoMessage);
                    break;
                case 34004 /* SlotSpiritModelCMD.CMDResAdvanceSlotSpiritUpgradeMessage */:
                    var resAdvanceSlotSpiritUpgradeMessage = {};
                    resAdvanceSlotSpiritUpgradeMessage["uid"] = input.readLong(); //uid
                    var spiritLength1 = input.readByte();
                    if (spiritLength1 != 0) {
                        var temp1299 = resAdvanceSlotSpiritUpgradeMessage["spirit"] = {}; //
                        temp1299["slot"] = input.readVarInt(false); //部位
                        temp1299["item"] = input.readVarInt(false); //道具id
                        temp1299["level"] = input.readVarInt(false); //等级
                    }
                    this.sendNotif(cmd, resAdvanceSlotSpiritUpgradeMessage);
                    break;
            }
        };
        return SlotSpiritModel;
    }(ModelBase));
    net.SlotSpiritModel = SlotSpiritModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:100
     */
    var SocialModel = /** @class */ (function (_super) {
        __extends(SocialModel, _super);
        function SocialModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(100002 /* SocialModelCMD.CMDResSocialInfoMessage */);
            thisObj.reg(100005 /* SocialModelCMD.CMDResSocialChangeMessage */);
            thisObj.reg(100006 /* SocialModelCMD.CMDResFriendApplyListMessage */);
            thisObj.reg(100009 /* SocialModelCMD.CMDResSocialKillMessage */);
            return _this;
        }
        SocialModel.ins = function () {
            if (!this._ins)
                this._ins = new SocialModel();
            return this._ins;
        };
        /**
         *
         * 请求打开社交面板
         * @param 1好友，2黑名单
         *
         * sendReqSocialOpenPanelMessage  100001
         */
        SocialModel.prototype.send1 = function (type, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            this.send(100001 /* SocialModelCMD.CMDReqSocialOpenPanelMessage */, output, s);
        };
        /**
         *
         * 请求添加社交
         * @param 1好友，2黑名单
         * @param 参数，玩家ID或玩家名
         *
         * sendReqSocialAddMessage  100003
         */
        SocialModel.prototype.send3 = function (type, idOrName, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            output.writeString(idOrName);
            this.send(100003 /* SocialModelCMD.CMDReqSocialAddMessage */, output, s);
        };
        /**
         *
         * 请求删除社交
         * @param 1好友，2黑名单
         * @param 玩家id
         *
         * sendReqSocialDeleteMessage  100004
         */
        SocialModel.prototype.send4 = function (type, uid, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            output.writeLong(uid);
            this.send(100004 /* SocialModelCMD.CMDReqSocialDeleteMessage */, output, s);
        };
        /**
         *
         * 好友申请列表操作
         * @param 0同意 1拒绝
         *
         * sendReqFriendApplyOpMessage  100007
         */
        SocialModel.prototype.send7 = function (op, targetId, s) {
            var output = this.getO();
            output.writeVarInt(op, false);
            output.writeShort(targetId.length);
            for (var targetIdi1 = 0; targetIdi1 < targetId.length; targetIdi1++) {
                output.writeLong(targetId[targetIdi1]);
            }
            this.send(100007 /* SocialModelCMD.CMDReqFriendApplyOpMessage */, output, s);
        };
        /**
         *
         * 请求击杀被击杀列表
         *
         * sendReqSocialKillMessage  100008
         */
        SocialModel.prototype.send8 = function (s) {
            var output = this.getO();
            this.send(100008 /* SocialModelCMD.CMDReqSocialKillMessage */, output, s);
        };
        SocialModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 100002 /* SocialModelCMD.CMDResSocialInfoMessage */:
                    var resSocialInfoMessage = {};
                    resSocialInfoMessage["type"] = input.readVarInt(false); //1好友，2黑名单
                    var socialListLength1 = input.readShort();
                    resSocialInfoMessage["socialList"] = [];
                    for (var socialListi1 = 0; socialListi1 < socialListLength1; socialListi1++) {
                        if (input.readByte() != 0) {
                            var temp700 = resSocialInfoMessage["socialList"][socialListi1] = {}; //社交名单
                            temp700["uid"] = input.readLong(); //角色id
                            temp700["name"] = input.readString(); //角色名
                            temp700["career"] = input.readVarInt(false); //职业
                            temp700["level"] = input.readVarInt(false); //等级
                            temp700["unionName"] = input.readString(); //行会名
                            temp700["offline"] = input.readVarInt(false); //离线时间戳 0表示在线
                            temp700["team"] = input.readLong(); //当前队伍id 0没有队伍
                        }
                        else {
                            resSocialInfoMessage["socialList"][socialListi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resSocialInfoMessage);
                    break;
                case 100005 /* SocialModelCMD.CMDResSocialChangeMessage */:
                    var resSocialChangeMessage = {};
                    resSocialChangeMessage["type"] = input.readVarInt(false); //1好友，2黑名单
                    resSocialChangeMessage["addOrRemove"] = input.readVarInt(false); //1添加，2移除
                    var friendLength1 = input.readByte();
                    if (friendLength1 != 0) {
                        var temp701 = resSocialChangeMessage["friend"] = {}; //社交
                        temp701["uid"] = input.readLong(); //角色id
                        temp701["name"] = input.readString(); //角色名
                        temp701["career"] = input.readVarInt(false); //职业
                        temp701["level"] = input.readVarInt(false); //等级
                        temp701["unionName"] = input.readString(); //行会名
                        temp701["offline"] = input.readVarInt(false); //离线时间戳 0表示在线
                        temp701["team"] = input.readLong(); //当前队伍id 0没有队伍
                    }
                    this.sendNotif(cmd, resSocialChangeMessage);
                    break;
                case 100006 /* SocialModelCMD.CMDResFriendApplyListMessage */:
                    var socialListLength2 = input.readShort();
                    var resFriendApplyListMessage = [];
                    for (var socialListi2 = 0; socialListi2 < socialListLength2; socialListi2++) {
                        if (input.readByte() != 0) {
                            var temp702 = resFriendApplyListMessage[socialListi2] = {}; //申请名单
                            temp702["uid"] = input.readLong(); //角色id
                            temp702["name"] = input.readString(); //角色名
                        }
                        else {
                            resFriendApplyListMessage[socialListi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resFriendApplyListMessage);
                    break;
                case 100009 /* SocialModelCMD.CMDResSocialKillMessage */:
                    var recordsLength1 = input.readShort();
                    var resSocialKillMessage = [];
                    for (var recordsi1 = 0; recordsi1 < recordsLength1; recordsi1++) {
                        if (input.readByte() != 0) {
                            var temp703 = resSocialKillMessage[recordsi1] = {}; //列表
                            temp703["time"] = input.readVarInt(false); //时间戳(s)
                            temp703["mapCfgId"] = input.readVarInt(false); //地图配置id
                            temp703["name"] = input.readString(); //名字
                            temp703["type"] = input.readVarInt(false); //类型 0击杀 1被击杀
                        }
                        else {
                            resSocialKillMessage[recordsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resSocialKillMessage);
                    break;
            }
        };
        return SocialModel;
    }(ModelBase));
    net.SocialModel = SocialModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:218
     */
    var SoulEquipmentFuseModel = /** @class */ (function (_super) {
        __extends(SoulEquipmentFuseModel, _super);
        function SoulEquipmentFuseModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(218004 /* SoulEquipmentFuseModelCMD.CMDResSoulEquipmentInfoMessage */);
            return _this;
        }
        SoulEquipmentFuseModel.ins = function () {
            if (!this._ins)
                this._ins = new SoulEquipmentFuseModel();
            return this._ins;
        };
        /**
         *
         * 请求进行魂装融合
         * @param 魂装道具唯一ID
         * @param 待融合的普通装备道具唯一ID
         *
         * sendReqFuseSoulEquipMessage  218001
         */
        SoulEquipmentFuseModel.prototype.send1 = function (soulEquipID, equipID, s) {
            var output = this.getO();
            output.writeLong(soulEquipID);
            output.writeLong(equipID);
            this.send(218001 /* SoulEquipmentFuseModelCMD.CMDReqFuseSoulEquipMessage */, output, s);
        };
        /**
         *
         * 请求拆分已融合的魂装
         * @param 待分解的魂装部位
         * @param 待分解的魂装材料配置ID
         *
         * sendReqDecomposeSoulEquipMessage  218002
         */
        SoulEquipmentFuseModel.prototype.send2 = function (pos, itemCfgId, s) {
            var output = this.getO();
            output.writeVarInt(pos, false);
            output.writeVarInt(itemCfgId, false);
            this.send(218002 /* SoulEquipmentFuseModelCMD.CMDReqDecomposeSoulEquipMessage */, output, s);
        };
        /**
         *
         * 请求魂装数据
         *
         * sendReqSoulEquipmentInfoMessage  218003
         */
        SoulEquipmentFuseModel.prototype.send3 = function (s) {
            var output = this.getO();
            this.send(218003 /* SoulEquipmentFuseModelCMD.CMDReqSoulEquipmentInfoMessage */, output, s);
        };
        SoulEquipmentFuseModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 218004 /* SoulEquipmentFuseModelCMD.CMDResSoulEquipmentInfoMessage */:
                    var soulFusedDataLength1 = input.readShort();
                    var resSoulEquipmentInfoMessage = [];
                    for (var soulFusedDatai1 = 0; soulFusedDatai1 < soulFusedDataLength1; soulFusedDatai1++) {
                        if (input.readByte() != 0) {
                            var temp19 = resSoulEquipmentInfoMessage[soulFusedDatai1] = {}; //魂装融合数据
                            temp19["pos"] = input.readVarInt(false); //部位Id
                            var fusedItemIdsLength1 = input.readShort();
                            temp19["fusedItemIds"] = new Array(fusedItemIdsLength1);
                            for (var fusedItemIdsi1 = 0; fusedItemIdsi1 < fusedItemIdsLength1; fusedItemIdsi1++) {
                                temp19["fusedItemIds"][fusedItemIdsi1] = input.readVarInt(false); //部位上已融合的魂装材料的配置ID
                            }
                        }
                        else {
                            resSoulEquipmentInfoMessage[soulFusedDatai1] = null;
                        }
                    }
                    this.sendNotif(cmd, resSoulEquipmentInfoMessage);
                    break;
            }
        };
        return SoulEquipmentFuseModel;
    }(ModelBase));
    net.SoulEquipmentFuseModel = SoulEquipmentFuseModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:215
     */
    var SpriteModel = /** @class */ (function (_super) {
        __extends(SpriteModel, _super);
        function SpriteModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(215001 /* SpriteModelCMD.CMDResSpriteInfoMessage */);
            thisObj.reg(215002 /* SpriteModelCMD.CMDResSpriteDieMessage */);
            thisObj.reg(215003 /* SpriteModelCMD.CMDResSpriteReliveMessage */);
            thisObj.reg(215007 /* SpriteModelCMD.CMDResSpriteAddMessage */);
            thisObj.reg(215012 /* SpriteModelCMD.CMDResSpriteFoodChangeMessage */);
            thisObj.reg(215013 /* SpriteModelCMD.CMDResSpriteEnhanceInfoMessage */);
            thisObj.reg(215023 /* SpriteModelCMD.CMDResSpriteTalentInfoMessage */);
            thisObj.reg(215032 /* SpriteModelCMD.CMDResSpriteCircleInfoMessage */);
            return _this;
        }
        SpriteModel.ins = function () {
            if (!this._ins)
                this._ins = new SpriteModel();
            return this._ins;
        };
        /**
         *
         * 升级
         *
         * sendReqSpriteLevelUpMessage  215004
         */
        SpriteModel.prototype.send4 = function (items, s) {
            var output = this.getO();
            if (items != null) {
                output.writeShort(items.length);
                for (var itemsi1 = 0; itemsi1 < items.length; itemsi1++) {
                    if (items[itemsi1] != null) {
                        output.writeByte(1);
                        output.writeLong(items[itemsi1].uid);
                        output.writeVarInt(items[itemsi1].count, false);
                    }
                    else {
                        output.writeByte(0);
                    }
                }
            }
            else {
                output.writeShort(0);
            }
            this.send(215004 /* SpriteModelCMD.CMDReqSpriteLevelUpMessage */, output, s);
        };
        /**
         *
         * 进阶
         *
         * sendReqSpriteGradelUpMessage  215005
         */
        SpriteModel.prototype.send5 = function (s) {
            var output = this.getO();
            this.send(215005 /* SpriteModelCMD.CMDReqSpriteGradelUpMessage */, output, s);
        };
        /**
         *
         * 技能进阶
         *
         * sendReqSpriteSkillGradelUpMessage  215006
         */
        SpriteModel.prototype.send6 = function (s) {
            var output = this.getO();
            this.send(215006 /* SpriteModelCMD.CMDReqSpriteSkillGradelUpMessage */, output, s);
        };
        /**
         *
         * 请求灵兽信息
         *
         * sendReqSpriteInfoMessage  215008
         */
        SpriteModel.prototype.send8 = function (s) {
            var output = this.getO();
            this.send(215008 /* SpriteModelCMD.CMDReqSpriteInfoMessage */, output, s);
        };
        /**
         *
         * 选择一个灵兽
         * @param 出战ID
         *
         * sendReqChoseSpriteMessage  215009
         */
        SpriteModel.prototype.send9 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(215009 /* SpriteModelCMD.CMDReqChoseSpriteMessage */, output, s);
        };
        /**
         *
         * 激活buff
         * @param buff ID
         *
         * sendReqActiveSpriteBuffMessage  215010
         */
        SpriteModel.prototype.send10 = function (buffId, s) {
            var output = this.getO();
            output.writeVarInt(buffId, false);
            this.send(215010 /* SpriteModelCMD.CMDReqActiveSpriteBuffMessage */, output, s);
        };
        /**
         *
         * 投喂
         * @param 食物数量
         *
         * sendReqFoodSpriteMessage  215011
         */
        SpriteModel.prototype.send11 = function (count, s) {
            var output = this.getO();
            output.writeVarInt(count, false);
            this.send(215011 /* SpriteModelCMD.CMDReqFoodSpriteMessage */, output, s);
        };
        /**
         *
         * 新升级
         *
         * sendReqSpriteLevelUp2Message  215021
         */
        SpriteModel.prototype.send21 = function (s) {
            var output = this.getO();
            this.send(215021 /* SpriteModelCMD.CMDReqSpriteLevelUp2Message */, output, s);
        };
        /**
         *
         * 侠客天赋信息
         *
         * sendReqSpriteTalentInfoMessage  215022
         */
        SpriteModel.prototype.send22 = function (s) {
            var output = this.getO();
            this.send(215022 /* SpriteModelCMD.CMDReqSpriteTalentInfoMessage */, output, s);
        };
        /**
         *
         * 激活侠客天赋
         * @param 天赋组
         *
         * sendReqActivationSpriteTalentMessage  215024
         */
        SpriteModel.prototype.send24 = function (talentType, s) {
            var output = this.getO();
            output.writeVarInt(talentType, false);
            this.send(215024 /* SpriteModelCMD.CMDReqActivationSpriteTalentMessage */, output, s);
        };
        /**
         *
         * 灵兽升级(仙武版)
         *
         * sendReqSpriteLevelUp3Message  215025
         */
        SpriteModel.prototype.send25 = function (sprites, s) {
            var output = this.getO();
            if (sprites != null) {
                output.writeShort(sprites.length);
                for (var spritesi1 = 0; spritesi1 < sprites.length; spritesi1++) {
                    if (sprites[spritesi1] != null) {
                        output.writeByte(1);
                        output.writeLong(sprites[spritesi1].uid);
                        output.writeVarInt(sprites[spritesi1].count, false);
                    }
                    else {
                        output.writeByte(0);
                    }
                }
            }
            else {
                output.writeShort(0);
            }
            this.send(215025 /* SpriteModelCMD.CMDReqSpriteLevelUp3Message */, output, s);
        };
        /**
         *
         * 灵兽阵法等级信息
         *
         * sendReqSpriteCircleInfoMessage  215031
         */
        SpriteModel.prototype.send31 = function (s) {
            var output = this.getO();
            this.send(215031 /* SpriteModelCMD.CMDReqSpriteCircleInfoMessage */, output, s);
        };
        /**
         *
         * 请求阵法升级
         * @param 部位
         *
         * sendReqSpriteCircleUpgradeMessage  215033
         */
        SpriteModel.prototype.send33 = function (pos, s) {
            var output = this.getO();
            output.writeVarInt(pos, false);
            this.send(215033 /* SpriteModelCMD.CMDReqSpriteCircleUpgradeMessage */, output, s);
        };
        /**
         *
         * 解锁
         * @param 解锁部位
         *
         * sendReqSpriteCircleUnlockMessage  215034
         */
        SpriteModel.prototype.send34 = function (pos, s) {
            var output = this.getO();
            output.writeVarInt(pos, false);
            this.send(215034 /* SpriteModelCMD.CMDReqSpriteCircleUnlockMessage */, output, s);
        };
        SpriteModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 215001 /* SpriteModelCMD.CMDResSpriteInfoMessage */:
                    var resSpriteInfoMessage = {};
                    resSpriteInfoMessage["lid"] = input.readLong(); //唯一ID
                    resSpriteInfoMessage["cfgId"] = input.readVarInt(false); //出战ID
                    resSpriteInfoMessage["level"] = input.readVarInt(false); //等级
                    resSpriteInfoMessage["exp"] = input.readVarInt(false); //经验
                    resSpriteInfoMessage["grade"] = input.readVarInt(false); //阶
                    resSpriteInfoMessage["skillGrade"] = input.readVarInt(false); //主动技能的阶
                    resSpriteInfoMessage["hp"] = input.readLong(); //血量
                    resSpriteInfoMessage["guard"] = input.readLong(); //护盾
                    resSpriteInfoMessage["hpMax"] = input.readLong(); //血量最大值
                    resSpriteInfoMessage["guardMax"] = input.readLong(); //护盾最大值
                    resSpriteInfoMessage["food"] = input.readVarInt(false); //饱食度
                    this.sendNotif(cmd, resSpriteInfoMessage);
                    break;
                case 215002 /* SpriteModelCMD.CMDResSpriteDieMessage */:
                    var resSpriteDieMessage = input.readLong(); //复活时间戳
                    this.sendNotif(cmd, resSpriteDieMessage);
                    break;
                case 215003 /* SpriteModelCMD.CMDResSpriteReliveMessage */:
                    var resSpriteReliveMessage = {};
                    resSpriteReliveMessage["hp"] = input.readLong(); //血量
                    resSpriteReliveMessage["guard"] = input.readLong(); //护盾
                    this.sendNotif(cmd, resSpriteReliveMessage);
                    break;
                case 215007 /* SpriteModelCMD.CMDResSpriteAddMessage */:
                    var resSpriteAddMessage = input.readVarInt(false); //出战ID
                    this.sendNotif(cmd, resSpriteAddMessage);
                    break;
                case 215012 /* SpriteModelCMD.CMDResSpriteFoodChangeMessage */:
                    var resSpriteFoodChangeMessage = input.readVarInt(false); //饱食度
                    this.sendNotif(cmd, resSpriteFoodChangeMessage);
                    break;
                case 215013 /* SpriteModelCMD.CMDResSpriteEnhanceInfoMessage */:
                    var enhanceLength1 = input.readShort();
                    var resSpriteEnhanceInfoMessage = [];
                    for (var enhancei1 = 0; enhancei1 < enhanceLength1; enhancei1++) {
                        if (input.readByte() != 0) {
                            var temp581 = resSpriteEnhanceInfoMessage[enhancei1] = {}; //buff
                            temp581["id"] = input.readVarInt(false); //
                            temp581["value"] = input.readVarInt(false); //
                        }
                        else {
                            resSpriteEnhanceInfoMessage[enhancei1] = null;
                        }
                    }
                    this.sendNotif(cmd, resSpriteEnhanceInfoMessage);
                    break;
                case 215023 /* SpriteModelCMD.CMDResSpriteTalentInfoMessage */:
                    var talentsLength1 = input.readShort();
                    var resSpriteTalentInfoMessage = [];
                    for (var talentsi1 = 0; talentsi1 < talentsLength1; talentsi1++) {
                        if (input.readByte() != 0) {
                            var temp582 = resSpriteTalentInfoMessage[talentsi1] = {}; //已激活天赋
                            temp582["type"] = input.readVarInt(false); //类型
                            temp582["level"] = input.readVarInt(false); //等级
                        }
                        else {
                            resSpriteTalentInfoMessage[talentsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resSpriteTalentInfoMessage);
                    break;
                case 215032 /* SpriteModelCMD.CMDResSpriteCircleInfoMessage */:
                    var levelsLength1 = input.readShort();
                    var resSpriteCircleInfoMessage = [];
                    for (var levelsi1 = 0; levelsi1 < levelsLength1; levelsi1++) {
                        if (input.readByte() != 0) {
                            var temp583 = resSpriteCircleInfoMessage[levelsi1] = {}; //等级数据
                            temp583["pos"] = input.readVarInt(false); //部位
                            temp583["progress"] = input.readVarInt(false); //进度
                            temp583["level"] = input.readVarInt(false); //等级
                            temp583["unlocked"] = input.readBoolean(); //是否已解锁
                        }
                        else {
                            resSpriteCircleInfoMessage[levelsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resSpriteCircleInfoMessage);
                    break;
            }
        };
        return SpriteModel;
    }(ModelBase));
    net.SpriteModel = SpriteModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:42
     */
    var StallModel = /** @class */ (function (_super) {
        __extends(StallModel, _super);
        function StallModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(42101 /* StallModelCMD.CMDResStallInfoMessage */);
            thisObj.reg(42102 /* StallModelCMD.CMDResStallViewMessage */);
            thisObj.reg(42103 /* StallModelCMD.CMDResStallLeaveWordListMessage */);
            thisObj.reg(42104 /* StallModelCMD.CMDResStallBuyMessage */);
            thisObj.reg(42105 /* StallModelCMD.CMDResStallModelUpdateMessage */);
            thisObj.reg(42106 /* StallModelCMD.CMDResStallSoldMessage */);
            thisObj.reg(42107 /* StallModelCMD.CMDResStallLastDealMessage */);
            return _this;
        }
        StallModel.ins = function () {
            if (!this._ins)
                this._ins = new StallModel();
            return this._ins;
        };
        /**
         *
         * 请求摆摊信息
         * @param 请求的摊位唯一id 0表示请求自己的
         *
         * sendReqStallInfoMessage  42001
         */
        StallModel.prototype.send1 = function (stallId, s) {
            var output = this.getO();
            output.writeLong(stallId);
            this.send(42001 /* StallModelCMD.CMDReqStallInfoMessage */, output, s);
        };
        /**
         *
         * 请求开始摆摊
         * @param
         *
         * sendReqStallBeginMessage  42002
         */
        StallModel.prototype.send2 = function (stall, s) {
            var output = this.getO();
            if (stall != null) {
                output.writeByte(1);
                output.writeLong(stall.stallId);
                output.writeVarInt(stall.stall, false);
                output.writeLong(stall.rid);
                output.writeString(stall.rName);
                output.writeVarInt(stall.anonymity, false);
                output.writeVarInt(stall.type, false);
                output.writeVarInt(stall.model, false);
                output.writeString(stall.desc);
                output.writeVarInt(stall.order, false);
                if (stall.items != null) {
                    output.writeShort(stall.items.length);
                    for (var itemsi1 = 0; itemsi1 < stall.items.length; itemsi1++) {
                        if (stall.items[itemsi1] != null) {
                            output.writeByte(1);
                            if (stall.items[itemsi1].item != null) {
                                output.writeByte(1);
                                output.writeLong(stall.items[itemsi1].item.uid);
                                output.writeVarInt(stall.items[itemsi1].item.itemId, false);
                                output.writeVarInt(stall.items[itemsi1].item.count, false);
                                output.writeVarInt(stall.items[itemsi1].item.expire, false);
                                output.writeVarInt(stall.items[itemsi1].item.uTimes, false);
                                output.writeVarInt(stall.items[itemsi1].item.time, false);
                                output.writeShort(stall.items[itemsi1].item.params.length);
                                for (var paramsi1 = 0; paramsi1 < stall.items[itemsi1].item.params.length; paramsi1++) {
                                    output.writeVarInt(stall.items[itemsi1].item.params[paramsi1], false);
                                }
                                if (stall.items[itemsi1].item.equipData != null) {
                                    output.writeByte(1);
                                    output.writeVarInt(stall.items[itemsi1].item.equipData.durable, false);
                                    output.writeVarInt(stall.items[itemsi1].item.equipData.starLevel, false);
                                    output.writeVarInt(stall.items[itemsi1].item.equipData.starLock, false);
                                    output.writeVarInt(stall.items[itemsi1].item.equipData.starExp, false);
                                    output.writeVarInt(stall.items[itemsi1].item.equipData.quenchingLevel, false);
                                    output.writeVarInt(stall.items[itemsi1].item.equipData.awakeLevel, false);
                                    output.writeVarInt(stall.items[itemsi1].item.equipData.mix, false);
                                    output.writeVarInt(stall.items[itemsi1].item.equipData.spiritLevel, false);
                                    output.writeVarInt(stall.items[itemsi1].item.equipData.spiritValue, false);
                                    output.writeVarInt(stall.items[itemsi1].item.equipData.fusedSoulEquipId, false);
                                    output.writeString(stall.items[itemsi1].item.equipData.sign);
                                    if (stall.items[itemsi1].item.equipData.destinyAttrs != null) {
                                        output.writeShort(stall.items[itemsi1].item.equipData.destinyAttrs.length);
                                        for (var destinyAttrsi1 = 0; destinyAttrsi1 < stall.items[itemsi1].item.equipData.destinyAttrs.length; destinyAttrsi1++) {
                                            if (stall.items[itemsi1].item.equipData.destinyAttrs[destinyAttrsi1] != null) {
                                                output.writeByte(1);
                                                output.writeVarInt(stall.items[itemsi1].item.equipData.destinyAttrs[destinyAttrsi1].career, false);
                                                output.writeVarInt(stall.items[itemsi1].item.equipData.destinyAttrs[destinyAttrsi1].attributeType, false);
                                                output.writeLong(stall.items[itemsi1].item.equipData.destinyAttrs[destinyAttrsi1].attributeValue);
                                            }
                                            else {
                                                output.writeByte(0);
                                            }
                                        }
                                    }
                                    else {
                                        output.writeShort(0);
                                    }
                                    if (stall.items[itemsi1].item.equipData.superAttrs != null) {
                                        output.writeShort(stall.items[itemsi1].item.equipData.superAttrs.length);
                                        for (var superAttrsi1 = 0; superAttrsi1 < stall.items[itemsi1].item.equipData.superAttrs.length; superAttrsi1++) {
                                            if (stall.items[itemsi1].item.equipData.superAttrs[superAttrsi1] != null) {
                                                output.writeByte(1);
                                                output.writeVarInt(stall.items[itemsi1].item.equipData.superAttrs[superAttrsi1].career, false);
                                                output.writeVarInt(stall.items[itemsi1].item.equipData.superAttrs[superAttrsi1].attributeType, false);
                                                output.writeLong(stall.items[itemsi1].item.equipData.superAttrs[superAttrsi1].attributeValue);
                                            }
                                            else {
                                                output.writeByte(0);
                                            }
                                        }
                                    }
                                    else {
                                        output.writeShort(0);
                                    }
                                    if (stall.items[itemsi1].item.equipData.identifyAttrs != null) {
                                        output.writeShort(stall.items[itemsi1].item.equipData.identifyAttrs.length);
                                        for (var identifyAttrsi1 = 0; identifyAttrsi1 < stall.items[itemsi1].item.equipData.identifyAttrs.length; identifyAttrsi1++) {
                                            if (stall.items[itemsi1].item.equipData.identifyAttrs[identifyAttrsi1] != null) {
                                                output.writeByte(1);
                                                output.writeVarInt(stall.items[itemsi1].item.equipData.identifyAttrs[identifyAttrsi1].career, false);
                                                output.writeVarInt(stall.items[itemsi1].item.equipData.identifyAttrs[identifyAttrsi1].attributeType, false);
                                                output.writeLong(stall.items[itemsi1].item.equipData.identifyAttrs[identifyAttrsi1].attributeValue);
                                            }
                                            else {
                                                output.writeByte(0);
                                            }
                                        }
                                    }
                                    else {
                                        output.writeShort(0);
                                    }
                                    if (stall.items[itemsi1].item.equipData.xiLianAttrs != null) {
                                        output.writeShort(stall.items[itemsi1].item.equipData.xiLianAttrs.length);
                                        for (var xiLianAttrsi1 = 0; xiLianAttrsi1 < stall.items[itemsi1].item.equipData.xiLianAttrs.length; xiLianAttrsi1++) {
                                            if (stall.items[itemsi1].item.equipData.xiLianAttrs[xiLianAttrsi1] != null) {
                                                output.writeByte(1);
                                                output.writeVarInt(stall.items[itemsi1].item.equipData.xiLianAttrs[xiLianAttrsi1].career, false);
                                                output.writeVarInt(stall.items[itemsi1].item.equipData.xiLianAttrs[xiLianAttrsi1].attributeType, false);
                                                output.writeLong(stall.items[itemsi1].item.equipData.xiLianAttrs[xiLianAttrsi1].attributeValue);
                                            }
                                            else {
                                                output.writeByte(0);
                                            }
                                        }
                                    }
                                    else {
                                        output.writeShort(0);
                                    }
                                    output.writeVarInt(stall.items[itemsi1].item.equipData.signExpire, false);
                                    output.writeVarInt(stall.items[itemsi1].item.equipData.growLevel, false);
                                    output.writeVarInt(stall.items[itemsi1].item.equipData.growExp, false);
                                    output.writeShort(stall.items[itemsi1].item.equipData.bestAttrs.length);
                                    for (var bestAttrsi1 = 0; bestAttrsi1 < stall.items[itemsi1].item.equipData.bestAttrs.length; bestAttrsi1++) {
                                        output.writeVarInt(stall.items[itemsi1].item.equipData.bestAttrs[bestAttrsi1], false);
                                    }
                                    output.writeShort(stall.items[itemsi1].item.equipData.soulAttrs.length);
                                    for (var soulAttrsi1 = 0; soulAttrsi1 < stall.items[itemsi1].item.equipData.soulAttrs.length; soulAttrsi1++) {
                                        output.writeVarInt(stall.items[itemsi1].item.equipData.soulAttrs[soulAttrsi1], false);
                                    }
                                    output.writeShort(stall.items[itemsi1].item.equipData.godsAttrs.length);
                                    for (var godsAttrsi1 = 0; godsAttrsi1 < stall.items[itemsi1].item.equipData.godsAttrs.length; godsAttrsi1++) {
                                        output.writeVarInt(stall.items[itemsi1].item.equipData.godsAttrs[godsAttrsi1], false);
                                    }
                                    output.writeVarInt(stall.items[itemsi1].item.equipData.qualification, false);
                                    if (stall.items[itemsi1].item.equipData.specialDurable != null) {
                                        output.writeShort(stall.items[itemsi1].item.equipData.specialDurable.length);
                                        for (var specialDurablei1 = 0; specialDurablei1 < stall.items[itemsi1].item.equipData.specialDurable.length; specialDurablei1++) {
                                            if (stall.items[itemsi1].item.equipData.specialDurable[specialDurablei1] != null) {
                                                output.writeByte(1);
                                                output.writeVarInt(stall.items[itemsi1].item.equipData.specialDurable[specialDurablei1].type, false);
                                                output.writeVarInt(stall.items[itemsi1].item.equipData.specialDurable[specialDurablei1].value, false);
                                            }
                                            else {
                                                output.writeByte(0);
                                            }
                                        }
                                    }
                                    else {
                                        output.writeShort(0);
                                    }
                                }
                                else {
                                    output.writeByte(0);
                                }
                                if (stall.items[itemsi1].item.immobilization != null) {
                                    output.writeByte(1);
                                    output.writeVarInt(stall.items[itemsi1].item.immobilization.action, false);
                                    output.writeVarInt(stall.items[itemsi1].item.immobilization.expire, false);
                                }
                                else {
                                    output.writeByte(0);
                                }
                                if (stall.items[itemsi1].item.from != null) {
                                    output.writeByte(1);
                                    output.writeVarInt(stall.items[itemsi1].item.from.action, false);
                                    output.writeLong(stall.items[itemsi1].item.from.firstRole);
                                    output.writeString(stall.items[itemsi1].item.from.firstRoleName);
                                    if (stall.items[itemsi1].item.from.params != null) {
                                        output.writeShort(stall.items[itemsi1].item.from.params.length);
                                        for (var paramsi2 = 0; paramsi2 < stall.items[itemsi1].item.from.params.length; paramsi2++) {
                                            if (stall.items[itemsi1].item.from.params[paramsi2] != null) {
                                                output.writeByte(1);
                                                output.writeVarInt(stall.items[itemsi1].item.from.params[paramsi2].key, false);
                                                output.writeString(stall.items[itemsi1].item.from.params[paramsi2].value);
                                            }
                                            else {
                                                output.writeByte(0);
                                            }
                                        }
                                    }
                                    else {
                                        output.writeShort(0);
                                    }
                                }
                                else {
                                    output.writeByte(0);
                                }
                                output.writeVarInt(stall.items[itemsi1].item.saveCount, false);
                                if (stall.items[itemsi1].item.spriteData != null) {
                                    output.writeByte(1);
                                    output.writeVarInt(stall.items[itemsi1].item.spriteData.level, false);
                                    output.writeVarInt(stall.items[itemsi1].item.spriteData.exp, false);
                                    output.writeVarInt(stall.items[itemsi1].item.spriteData.skin, false);
                                    if (stall.items[itemsi1].item.spriteData.skills != null) {
                                        output.writeShort(stall.items[itemsi1].item.spriteData.skills.length);
                                        for (var skillsi1 = 0; skillsi1 < stall.items[itemsi1].item.spriteData.skills.length; skillsi1++) {
                                            if (stall.items[itemsi1].item.spriteData.skills[skillsi1] != null) {
                                                output.writeByte(1);
                                                output.writeVarInt(stall.items[itemsi1].item.spriteData.skills[skillsi1].id, false);
                                                output.writeVarInt(stall.items[itemsi1].item.spriteData.skills[skillsi1].value, false);
                                            }
                                            else {
                                                output.writeByte(0);
                                            }
                                        }
                                    }
                                    else {
                                        output.writeShort(0);
                                    }
                                    if (stall.items[itemsi1].item.spriteData.ownerSkills != null) {
                                        output.writeShort(stall.items[itemsi1].item.spriteData.ownerSkills.length);
                                        for (var ownerSkillsi1 = 0; ownerSkillsi1 < stall.items[itemsi1].item.spriteData.ownerSkills.length; ownerSkillsi1++) {
                                            if (stall.items[itemsi1].item.spriteData.ownerSkills[ownerSkillsi1] != null) {
                                                output.writeByte(1);
                                                output.writeVarInt(stall.items[itemsi1].item.spriteData.ownerSkills[ownerSkillsi1].id, false);
                                                output.writeVarInt(stall.items[itemsi1].item.spriteData.ownerSkills[ownerSkillsi1].value, false);
                                            }
                                            else {
                                                output.writeByte(0);
                                            }
                                        }
                                    }
                                    else {
                                        output.writeShort(0);
                                    }
                                    if (stall.items[itemsi1].item.spriteData.ownerSkins != null) {
                                        output.writeShort(stall.items[itemsi1].item.spriteData.ownerSkins.length);
                                        for (var ownerSkinsi1 = 0; ownerSkinsi1 < stall.items[itemsi1].item.spriteData.ownerSkins.length; ownerSkinsi1++) {
                                            if (stall.items[itemsi1].item.spriteData.ownerSkins[ownerSkinsi1] != null) {
                                                output.writeByte(1);
                                                output.writeVarInt(stall.items[itemsi1].item.spriteData.ownerSkins[ownerSkinsi1].id, false);
                                                output.writeVarInt(stall.items[itemsi1].item.spriteData.ownerSkins[ownerSkinsi1].value, false);
                                            }
                                            else {
                                                output.writeByte(0);
                                            }
                                        }
                                    }
                                    else {
                                        output.writeShort(0);
                                    }
                                    if (stall.items[itemsi1].item.spriteData.absorbExp != null) {
                                        output.writeShort(stall.items[itemsi1].item.spriteData.absorbExp.length);
                                        for (var absorbExpi1 = 0; absorbExpi1 < stall.items[itemsi1].item.spriteData.absorbExp.length; absorbExpi1++) {
                                            if (stall.items[itemsi1].item.spriteData.absorbExp[absorbExpi1] != null) {
                                                output.writeByte(1);
                                                output.writeVarInt(stall.items[itemsi1].item.spriteData.absorbExp[absorbExpi1].id, false);
                                                output.writeVarInt(stall.items[itemsi1].item.spriteData.absorbExp[absorbExpi1].value, false);
                                            }
                                            else {
                                                output.writeByte(0);
                                            }
                                        }
                                    }
                                    else {
                                        output.writeShort(0);
                                    }
                                }
                                else {
                                    output.writeByte(0);
                                }
                            }
                            else {
                                output.writeByte(0);
                            }
                            output.writeVarInt(stall.items[itemsi1].currency, false);
                            output.writeVarInt(stall.items[itemsi1].price, false);
                            output.writeVarInt(stall.items[itemsi1].status, false);
                            output.writeVarInt(stall.items[itemsi1].expire, false);
                        }
                        else {
                            output.writeByte(0);
                        }
                    }
                }
                else {
                    output.writeShort(0);
                }
            }
            else {
                output.writeByte(0);
            }
            this.send(42002 /* StallModelCMD.CMDReqStallBeginMessage */, output, s);
        };
        /**
         *
         * 请求收摊
         *
         * sendReqStallEndMessage  42003
         */
        StallModel.prototype.send3 = function (s) {
            var output = this.getO();
            this.send(42003 /* StallModelCMD.CMDReqStallEndMessage */, output, s);
        };
        /**
         *
         * 请求上架商品
         * @param
         *
         * sendReqStallAppendGoodsMessage  42004
         */
        StallModel.prototype.send4 = function (item, s) {
            var output = this.getO();
            if (item != null) {
                output.writeByte(1);
                if (item.item != null) {
                    output.writeByte(1);
                    output.writeLong(item.item.uid);
                    output.writeVarInt(item.item.itemId, false);
                    output.writeVarInt(item.item.count, false);
                    output.writeVarInt(item.item.expire, false);
                    output.writeVarInt(item.item.uTimes, false);
                    output.writeVarInt(item.item.time, false);
                    output.writeShort(item.item.params.length);
                    for (var paramsi3 = 0; paramsi3 < item.item.params.length; paramsi3++) {
                        output.writeVarInt(item.item.params[paramsi3], false);
                    }
                    if (item.item.equipData != null) {
                        output.writeByte(1);
                        output.writeVarInt(item.item.equipData.durable, false);
                        output.writeVarInt(item.item.equipData.starLevel, false);
                        output.writeVarInt(item.item.equipData.starLock, false);
                        output.writeVarInt(item.item.equipData.starExp, false);
                        output.writeVarInt(item.item.equipData.quenchingLevel, false);
                        output.writeVarInt(item.item.equipData.awakeLevel, false);
                        output.writeVarInt(item.item.equipData.mix, false);
                        output.writeVarInt(item.item.equipData.spiritLevel, false);
                        output.writeVarInt(item.item.equipData.spiritValue, false);
                        output.writeVarInt(item.item.equipData.fusedSoulEquipId, false);
                        output.writeString(item.item.equipData.sign);
                        if (item.item.equipData.destinyAttrs != null) {
                            output.writeShort(item.item.equipData.destinyAttrs.length);
                            for (var destinyAttrsi2 = 0; destinyAttrsi2 < item.item.equipData.destinyAttrs.length; destinyAttrsi2++) {
                                if (item.item.equipData.destinyAttrs[destinyAttrsi2] != null) {
                                    output.writeByte(1);
                                    output.writeVarInt(item.item.equipData.destinyAttrs[destinyAttrsi2].career, false);
                                    output.writeVarInt(item.item.equipData.destinyAttrs[destinyAttrsi2].attributeType, false);
                                    output.writeLong(item.item.equipData.destinyAttrs[destinyAttrsi2].attributeValue);
                                }
                                else {
                                    output.writeByte(0);
                                }
                            }
                        }
                        else {
                            output.writeShort(0);
                        }
                        if (item.item.equipData.superAttrs != null) {
                            output.writeShort(item.item.equipData.superAttrs.length);
                            for (var superAttrsi2 = 0; superAttrsi2 < item.item.equipData.superAttrs.length; superAttrsi2++) {
                                if (item.item.equipData.superAttrs[superAttrsi2] != null) {
                                    output.writeByte(1);
                                    output.writeVarInt(item.item.equipData.superAttrs[superAttrsi2].career, false);
                                    output.writeVarInt(item.item.equipData.superAttrs[superAttrsi2].attributeType, false);
                                    output.writeLong(item.item.equipData.superAttrs[superAttrsi2].attributeValue);
                                }
                                else {
                                    output.writeByte(0);
                                }
                            }
                        }
                        else {
                            output.writeShort(0);
                        }
                        if (item.item.equipData.identifyAttrs != null) {
                            output.writeShort(item.item.equipData.identifyAttrs.length);
                            for (var identifyAttrsi2 = 0; identifyAttrsi2 < item.item.equipData.identifyAttrs.length; identifyAttrsi2++) {
                                if (item.item.equipData.identifyAttrs[identifyAttrsi2] != null) {
                                    output.writeByte(1);
                                    output.writeVarInt(item.item.equipData.identifyAttrs[identifyAttrsi2].career, false);
                                    output.writeVarInt(item.item.equipData.identifyAttrs[identifyAttrsi2].attributeType, false);
                                    output.writeLong(item.item.equipData.identifyAttrs[identifyAttrsi2].attributeValue);
                                }
                                else {
                                    output.writeByte(0);
                                }
                            }
                        }
                        else {
                            output.writeShort(0);
                        }
                        if (item.item.equipData.xiLianAttrs != null) {
                            output.writeShort(item.item.equipData.xiLianAttrs.length);
                            for (var xiLianAttrsi2 = 0; xiLianAttrsi2 < item.item.equipData.xiLianAttrs.length; xiLianAttrsi2++) {
                                if (item.item.equipData.xiLianAttrs[xiLianAttrsi2] != null) {
                                    output.writeByte(1);
                                    output.writeVarInt(item.item.equipData.xiLianAttrs[xiLianAttrsi2].career, false);
                                    output.writeVarInt(item.item.equipData.xiLianAttrs[xiLianAttrsi2].attributeType, false);
                                    output.writeLong(item.item.equipData.xiLianAttrs[xiLianAttrsi2].attributeValue);
                                }
                                else {
                                    output.writeByte(0);
                                }
                            }
                        }
                        else {
                            output.writeShort(0);
                        }
                        output.writeVarInt(item.item.equipData.signExpire, false);
                        output.writeVarInt(item.item.equipData.growLevel, false);
                        output.writeVarInt(item.item.equipData.growExp, false);
                        output.writeShort(item.item.equipData.bestAttrs.length);
                        for (var bestAttrsi2 = 0; bestAttrsi2 < item.item.equipData.bestAttrs.length; bestAttrsi2++) {
                            output.writeVarInt(item.item.equipData.bestAttrs[bestAttrsi2], false);
                        }
                        output.writeShort(item.item.equipData.soulAttrs.length);
                        for (var soulAttrsi2 = 0; soulAttrsi2 < item.item.equipData.soulAttrs.length; soulAttrsi2++) {
                            output.writeVarInt(item.item.equipData.soulAttrs[soulAttrsi2], false);
                        }
                        output.writeShort(item.item.equipData.godsAttrs.length);
                        for (var godsAttrsi2 = 0; godsAttrsi2 < item.item.equipData.godsAttrs.length; godsAttrsi2++) {
                            output.writeVarInt(item.item.equipData.godsAttrs[godsAttrsi2], false);
                        }
                        output.writeVarInt(item.item.equipData.qualification, false);
                        if (item.item.equipData.specialDurable != null) {
                            output.writeShort(item.item.equipData.specialDurable.length);
                            for (var specialDurablei2 = 0; specialDurablei2 < item.item.equipData.specialDurable.length; specialDurablei2++) {
                                if (item.item.equipData.specialDurable[specialDurablei2] != null) {
                                    output.writeByte(1);
                                    output.writeVarInt(item.item.equipData.specialDurable[specialDurablei2].type, false);
                                    output.writeVarInt(item.item.equipData.specialDurable[specialDurablei2].value, false);
                                }
                                else {
                                    output.writeByte(0);
                                }
                            }
                        }
                        else {
                            output.writeShort(0);
                        }
                    }
                    else {
                        output.writeByte(0);
                    }
                    if (item.item.immobilization != null) {
                        output.writeByte(1);
                        output.writeVarInt(item.item.immobilization.action, false);
                        output.writeVarInt(item.item.immobilization.expire, false);
                    }
                    else {
                        output.writeByte(0);
                    }
                    if (item.item.from != null) {
                        output.writeByte(1);
                        output.writeVarInt(item.item.from.action, false);
                        output.writeLong(item.item.from.firstRole);
                        output.writeString(item.item.from.firstRoleName);
                        if (item.item.from.params != null) {
                            output.writeShort(item.item.from.params.length);
                            for (var paramsi4 = 0; paramsi4 < item.item.from.params.length; paramsi4++) {
                                if (item.item.from.params[paramsi4] != null) {
                                    output.writeByte(1);
                                    output.writeVarInt(item.item.from.params[paramsi4].key, false);
                                    output.writeString(item.item.from.params[paramsi4].value);
                                }
                                else {
                                    output.writeByte(0);
                                }
                            }
                        }
                        else {
                            output.writeShort(0);
                        }
                    }
                    else {
                        output.writeByte(0);
                    }
                    output.writeVarInt(item.item.saveCount, false);
                    if (item.item.spriteData != null) {
                        output.writeByte(1);
                        output.writeVarInt(item.item.spriteData.level, false);
                        output.writeVarInt(item.item.spriteData.exp, false);
                        output.writeVarInt(item.item.spriteData.skin, false);
                        if (item.item.spriteData.skills != null) {
                            output.writeShort(item.item.spriteData.skills.length);
                            for (var skillsi2 = 0; skillsi2 < item.item.spriteData.skills.length; skillsi2++) {
                                if (item.item.spriteData.skills[skillsi2] != null) {
                                    output.writeByte(1);
                                    output.writeVarInt(item.item.spriteData.skills[skillsi2].id, false);
                                    output.writeVarInt(item.item.spriteData.skills[skillsi2].value, false);
                                }
                                else {
                                    output.writeByte(0);
                                }
                            }
                        }
                        else {
                            output.writeShort(0);
                        }
                        if (item.item.spriteData.ownerSkills != null) {
                            output.writeShort(item.item.spriteData.ownerSkills.length);
                            for (var ownerSkillsi2 = 0; ownerSkillsi2 < item.item.spriteData.ownerSkills.length; ownerSkillsi2++) {
                                if (item.item.spriteData.ownerSkills[ownerSkillsi2] != null) {
                                    output.writeByte(1);
                                    output.writeVarInt(item.item.spriteData.ownerSkills[ownerSkillsi2].id, false);
                                    output.writeVarInt(item.item.spriteData.ownerSkills[ownerSkillsi2].value, false);
                                }
                                else {
                                    output.writeByte(0);
                                }
                            }
                        }
                        else {
                            output.writeShort(0);
                        }
                        if (item.item.spriteData.ownerSkins != null) {
                            output.writeShort(item.item.spriteData.ownerSkins.length);
                            for (var ownerSkinsi2 = 0; ownerSkinsi2 < item.item.spriteData.ownerSkins.length; ownerSkinsi2++) {
                                if (item.item.spriteData.ownerSkins[ownerSkinsi2] != null) {
                                    output.writeByte(1);
                                    output.writeVarInt(item.item.spriteData.ownerSkins[ownerSkinsi2].id, false);
                                    output.writeVarInt(item.item.spriteData.ownerSkins[ownerSkinsi2].value, false);
                                }
                                else {
                                    output.writeByte(0);
                                }
                            }
                        }
                        else {
                            output.writeShort(0);
                        }
                        if (item.item.spriteData.absorbExp != null) {
                            output.writeShort(item.item.spriteData.absorbExp.length);
                            for (var absorbExpi2 = 0; absorbExpi2 < item.item.spriteData.absorbExp.length; absorbExpi2++) {
                                if (item.item.spriteData.absorbExp[absorbExpi2] != null) {
                                    output.writeByte(1);
                                    output.writeVarInt(item.item.spriteData.absorbExp[absorbExpi2].id, false);
                                    output.writeVarInt(item.item.spriteData.absorbExp[absorbExpi2].value, false);
                                }
                                else {
                                    output.writeByte(0);
                                }
                            }
                        }
                        else {
                            output.writeShort(0);
                        }
                    }
                    else {
                        output.writeByte(0);
                    }
                }
                else {
                    output.writeByte(0);
                }
                output.writeVarInt(item.currency, false);
                output.writeVarInt(item.price, false);
                output.writeVarInt(item.status, false);
                output.writeVarInt(item.expire, false);
            }
            else {
                output.writeByte(0);
            }
            this.send(42004 /* StallModelCMD.CMDReqStallAppendGoodsMessage */, output, s);
        };
        /**
         *
         * 请求下架商品
         * @param
         *
         * sendReqStallRemoveGoodsMessage  42005
         */
        StallModel.prototype.send5 = function (uid, s) {
            var output = this.getO();
            output.writeLong(uid);
            this.send(42005 /* StallModelCMD.CMDReqStallRemoveGoodsMessage */, output, s);
        };
        /**
         *
         * 请求修改摊位类型
         * @param
         *
         * sendReqStallChangeTypeMessage  42006
         */
        StallModel.prototype.send6 = function (type, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            this.send(42006 /* StallModelCMD.CMDReqStallChangeTypeMessage */, output, s);
        };
        /**
         *
         * 请求修改摊位模型
         * @param
         *
         * sendReqStallChangeModelMessage  42007
         */
        StallModel.prototype.send7 = function (model, s) {
            var output = this.getO();
            output.writeVarInt(model, false);
            this.send(42007 /* StallModelCMD.CMDReqStallChangeModelMessage */, output, s);
        };
        /**
         *
         * 请求修改摊位描述
         * @param
         *
         * sendReqStallChangeDescMessage  42008
         */
        StallModel.prototype.send8 = function (desc, s) {
            var output = this.getO();
            output.writeString(desc);
            this.send(42008 /* StallModelCMD.CMDReqStallChangeDescMessage */, output, s);
        };
        /**
         *
         * 请求所有摊位信息
         *
         * sendReqStallViewMessage  42009
         */
        StallModel.prototype.send9 = function (s) {
            var output = this.getO();
            this.send(42009 /* StallModelCMD.CMDReqStallViewMessage */, output, s);
        };
        /**
         *
         * 请求购买
         * @param 摊位唯一id
         * @param 商品唯一id
         *
         * sendReqStallBuyMessage  42010
         */
        StallModel.prototype.send10 = function (stallId, uid, s) {
            var output = this.getO();
            output.writeLong(stallId);
            output.writeLong(uid);
            this.send(42010 /* StallModelCMD.CMDReqStallBuyMessage */, output, s);
        };
        /**
         *
         * 请求领取出售奖励
         * @param 商品唯一id
         *
         * sendReqStallFetchMessage  42011
         */
        StallModel.prototype.send11 = function (uid, s) {
            var output = this.getO();
            output.writeLong(uid);
            this.send(42011 /* StallModelCMD.CMDReqStallFetchMessage */, output, s);
        };
        /**
         *
         * 请求获取留言信息
         * @param
         *
         * sendReqStallLeaveWordListMessage  42012
         */
        StallModel.prototype.send12 = function (stallId, s) {
            var output = this.getO();
            output.writeLong(stallId);
            this.send(42012 /* StallModelCMD.CMDReqStallLeaveWordListMessage */, output, s);
        };
        /**
         *
         * 请求留言
         * @param
         * @param
         *
         * sendReqStallLeaveWordMessage  42013
         */
        StallModel.prototype.send13 = function (stallId, word, s) {
            var output = this.getO();
            output.writeLong(stallId);
            output.writeString(word);
            this.send(42013 /* StallModelCMD.CMDReqStallLeaveWordMessage */, output, s);
        };
        /**
         *
         *
         * @param 道具配置id
         *
         * sendReqStallLastDealMessage  42014
         */
        StallModel.prototype.send14 = function (itemCfgId, s) {
            var output = this.getO();
            output.writeVarInt(itemCfgId, false);
            this.send(42014 /* StallModelCMD.CMDReqStallLastDealMessage */, output, s);
        };
        StallModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 42101 /* StallModelCMD.CMDResStallInfoMessage */:
                    var resStallInfoMessage = {};
                    var stallLength1 = input.readByte();
                    if (stallLength1 != 0) {
                        var temp647 = resStallInfoMessage["stall"] = {}; //
                        temp647["stallId"] = input.readLong(); //摆摊唯一id
                        temp647["stall"] = input.readVarInt(false); //摊位配置id
                        temp647["rid"] = input.readLong(); //玩家id
                        temp647["rName"] = input.readString(); //玩家名字
                        temp647["anonymity"] = input.readVarInt(false); //是否匿名 0不是 否则是
                        temp647["type"] = input.readVarInt(false); //类型
                        temp647["model"] = input.readVarInt(false); //模型
                        temp647["desc"] = input.readString(); //描述
                        temp647["order"] = input.readVarInt(false); //月卡排序 大的在前
                        var itemsLength1 = input.readShort();
                        temp647["items"] = [];
                        for (var itemsi1 = 0; itemsi1 < itemsLength1; itemsi1++) {
                            if (input.readByte() != 0) {
                                var temp648 = temp647["items"][itemsi1] = {}; //道具列表
                                var itemLength1 = input.readByte();
                                if (itemLength1 != 0) {
                                    var temp649 = temp648["item"] = {}; //道具信息
                                    temp649["uid"] = input.readLong(); //唯一id
                                    temp649["itemId"] = input.readVarInt(false); //道具配置id
                                    temp649["count"] = input.readVarInt(false); //数量
                                    temp649["expire"] = input.readVarInt(false); //过期时间
                                    temp649["uTimes"] = input.readVarInt(false); //已经使用的次数
                                    temp649["time"] = input.readVarInt(false); //道具获得时间
                                    var paramsLength1 = input.readShort();
                                    temp649["params"] = new Array(paramsLength1);
                                    for (var paramsi1 = 0; paramsi1 < paramsLength1; paramsi1++) {
                                        temp649["params"][paramsi1] = input.readVarInt(false); //道具参数
                                    }
                                    var equipDataLength1 = input.readByte();
                                    if (equipDataLength1 != 0) {
                                        var temp650 = temp649["equipData"] = {}; //装备属性（null表示没有）
                                        temp650["durable"] = input.readVarInt(false); //消耗耐久
                                        temp650["starLevel"] = input.readVarInt(false); //升星等级
                                        temp650["starLock"] = input.readVarInt(false); //被锁星级
                                        temp650["starExp"] = input.readVarInt(false); //升星祝福值
                                        temp650["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                        temp650["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                        temp650["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                        temp650["spiritLevel"] = input.readVarInt(false); //注灵等级
                                        temp650["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                        temp650["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                        temp650["sign"] = input.readString(); //签名
                                        var destinyAttrsLength1 = input.readShort();
                                        temp650["destinyAttrs"] = [];
                                        for (var destinyAttrsi1 = 0; destinyAttrsi1 < destinyAttrsLength1; destinyAttrsi1++) {
                                            if (input.readByte() != 0) {
                                                var temp651 = temp650["destinyAttrs"][destinyAttrsi1] = {}; //命运属性
                                                temp651["career"] = input.readVarInt(false); //职业限定
                                                temp651["attributeType"] = input.readVarInt(false); //属性类型
                                                temp651["attributeValue"] = input.readLong(); //属性值
                                            }
                                            else {
                                                temp650["destinyAttrs"][destinyAttrsi1] = null;
                                            }
                                        }
                                        var superAttrsLength1 = input.readShort();
                                        temp650["superAttrs"] = [];
                                        for (var superAttrsi1 = 0; superAttrsi1 < superAttrsLength1; superAttrsi1++) {
                                            if (input.readByte() != 0) {
                                                var temp652 = temp650["superAttrs"][superAttrsi1] = {}; //极品属性
                                                temp652["career"] = input.readVarInt(false); //职业限定
                                                temp652["attributeType"] = input.readVarInt(false); //属性类型
                                                temp652["attributeValue"] = input.readLong(); //属性值
                                            }
                                            else {
                                                temp650["superAttrs"][superAttrsi1] = null;
                                            }
                                        }
                                        var identifyAttrsLength1 = input.readShort();
                                        temp650["identifyAttrs"] = [];
                                        for (var identifyAttrsi1 = 0; identifyAttrsi1 < identifyAttrsLength1; identifyAttrsi1++) {
                                            if (input.readByte() != 0) {
                                                var temp653 = temp650["identifyAttrs"][identifyAttrsi1] = {}; //鉴定属性
                                                temp653["career"] = input.readVarInt(false); //职业限定
                                                temp653["attributeType"] = input.readVarInt(false); //属性类型
                                                temp653["attributeValue"] = input.readLong(); //属性值
                                            }
                                            else {
                                                temp650["identifyAttrs"][identifyAttrsi1] = null;
                                            }
                                        }
                                        var xiLianAttrsLength1 = input.readShort();
                                        temp650["xiLianAttrs"] = [];
                                        for (var xiLianAttrsi1 = 0; xiLianAttrsi1 < xiLianAttrsLength1; xiLianAttrsi1++) {
                                            if (input.readByte() != 0) {
                                                var temp654 = temp650["xiLianAttrs"][xiLianAttrsi1] = {}; //配饰洗练属性
                                                temp654["career"] = input.readVarInt(false); //职业限定
                                                temp654["attributeType"] = input.readVarInt(false); //属性类型
                                                temp654["attributeValue"] = input.readLong(); //属性值
                                            }
                                            else {
                                                temp650["xiLianAttrs"][xiLianAttrsi1] = null;
                                            }
                                        }
                                        temp650["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                        temp650["growLevel"] = input.readVarInt(false); //成长等级
                                        temp650["growExp"] = input.readVarInt(false); //成长经验
                                        var bestAttrsLength1 = input.readShort();
                                        temp650["bestAttrs"] = new Array(bestAttrsLength1);
                                        for (var bestAttrsi1 = 0; bestAttrsi1 < bestAttrsLength1; bestAttrsi1++) {
                                            temp650["bestAttrs"][bestAttrsi1] = input.readVarInt(false); //极品属性（新）
                                        }
                                        var soulAttrsLength1 = input.readShort();
                                        temp650["soulAttrs"] = new Array(soulAttrsLength1);
                                        for (var soulAttrsi1 = 0; soulAttrsi1 < soulAttrsLength1; soulAttrsi1++) {
                                            temp650["soulAttrs"][soulAttrsi1] = input.readVarInt(false); //心魂属性
                                        }
                                        var godsAttrsLength1 = input.readShort();
                                        temp650["godsAttrs"] = new Array(godsAttrsLength1);
                                        for (var godsAttrsi1 = 0; godsAttrsi1 < godsAttrsLength1; godsAttrsi1++) {
                                            temp650["godsAttrs"][godsAttrsi1] = input.readVarInt(false); //额外神级属性
                                        }
                                        temp650["qualification"] = input.readVarInt(false); //资质
                                        var specialDurableLength1 = input.readShort();
                                        temp650["specialDurable"] = [];
                                        for (var specialDurablei1 = 0; specialDurablei1 < specialDurableLength1; specialDurablei1++) {
                                            if (input.readByte() != 0) {
                                                var temp655 = temp650["specialDurable"][specialDurablei1] = {}; //特殊耐久消耗值
                                                temp655["type"] = input.readVarInt(false); //类型
                                                temp655["value"] = input.readVarInt(false); //已消耗值
                                            }
                                            else {
                                                temp650["specialDurable"][specialDurablei1] = null;
                                            }
                                        }
                                    }
                                    var immobilizationLength1 = input.readByte();
                                    if (immobilizationLength1 != 0) {
                                        var temp656 = temp649["immobilization"] = {}; //固化数据
                                        temp656["action"] = input.readVarInt(false); //产生行为
                                        temp656["expire"] = input.readVarInt(false); //过期时间 时间戳
                                    }
                                    var fromLength1 = input.readByte();
                                    if (fromLength1 != 0) {
                                        var temp657 = temp649["from"] = {}; //来源
                                        temp657["action"] = input.readVarInt(false); //产生行为
                                        temp657["firstRole"] = input.readLong(); //第一个玩家id
                                        temp657["firstRoleName"] = input.readString(); //第一个玩家名字
                                        var paramsLength2 = input.readShort();
                                        temp657["params"] = [];
                                        for (var paramsi2 = 0; paramsi2 < paramsLength2; paramsi2++) {
                                            if (input.readByte() != 0) {
                                                var temp658 = temp657["params"][paramsi2] = {}; //
                                                temp658["key"] = input.readVarInt(false); //
                                                temp658["value"] = input.readString(); //
                                            }
                                            else {
                                                temp657["params"][paramsi2] = null;
                                            }
                                        }
                                    }
                                    temp649["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                                    var spriteDataLength1 = input.readByte();
                                    if (spriteDataLength1 != 0) {
                                        var temp659 = temp649["spriteData"] = {}; //灵兽数据（null表示没有）
                                        temp659["level"] = input.readVarInt(false); //灵兽等级
                                        temp659["exp"] = input.readVarInt(false); //灵兽经验
                                        temp659["skin"] = input.readVarInt(false); //灵兽皮肤
                                        var skillsLength1 = input.readShort();
                                        temp659["skills"] = [];
                                        for (var skillsi1 = 0; skillsi1 < skillsLength1; skillsi1++) {
                                            if (input.readByte() != 0) {
                                                var temp660 = temp659["skills"][skillsi1] = {}; //灵兽出战技能
                                                temp660["id"] = input.readVarInt(false); //
                                                temp660["value"] = input.readVarInt(false); //
                                            }
                                            else {
                                                temp659["skills"][skillsi1] = null;
                                            }
                                        }
                                        var ownerSkillsLength1 = input.readShort();
                                        temp659["ownerSkills"] = [];
                                        for (var ownerSkillsi1 = 0; ownerSkillsi1 < ownerSkillsLength1; ownerSkillsi1++) {
                                            if (input.readByte() != 0) {
                                                var temp661 = temp659["ownerSkills"][ownerSkillsi1] = {}; //灵兽拥有的技能
                                                temp661["id"] = input.readVarInt(false); //
                                                temp661["value"] = input.readVarInt(false); //
                                            }
                                            else {
                                                temp659["ownerSkills"][ownerSkillsi1] = null;
                                            }
                                        }
                                        var ownerSkinsLength1 = input.readShort();
                                        temp659["ownerSkins"] = [];
                                        for (var ownerSkinsi1 = 0; ownerSkinsi1 < ownerSkinsLength1; ownerSkinsi1++) {
                                            if (input.readByte() != 0) {
                                                var temp662 = temp659["ownerSkins"][ownerSkinsi1] = {}; //灵兽拥有的皮肤
                                                temp662["id"] = input.readVarInt(false); //
                                                temp662["value"] = input.readVarInt(false); //
                                            }
                                            else {
                                                temp659["ownerSkins"][ownerSkinsi1] = null;
                                            }
                                        }
                                        var absorbExpLength1 = input.readShort();
                                        temp659["absorbExp"] = [];
                                        for (var absorbExpi1 = 0; absorbExpi1 < absorbExpLength1; absorbExpi1++) {
                                            if (input.readByte() != 0) {
                                                var temp663 = temp659["absorbExp"][absorbExpi1] = {}; //灵兽吸收经验值
                                                temp663["id"] = input.readVarInt(false); //
                                                temp663["value"] = input.readVarInt(false); //
                                            }
                                            else {
                                                temp659["absorbExp"][absorbExpi1] = null;
                                            }
                                        }
                                    }
                                }
                                temp648["currency"] = input.readVarInt(false); //货币
                                temp648["price"] = input.readVarInt(false); //价格
                                temp648["status"] = input.readVarInt(false); //状态 0未售出 1已售出
                                temp648["expire"] = input.readVarInt(false); //下架时间（时间戳）
                            }
                            else {
                                temp647["items"][itemsi1] = null;
                            }
                        }
                    }
                    var modelsLength1 = input.readShort();
                    resStallInfoMessage["models"] = [];
                    for (var modelsi1 = 0; modelsi1 < modelsLength1; modelsi1++) {
                        if (input.readByte() != 0) {
                            var temp664 = resStallInfoMessage["models"][modelsi1] = {}; //
                            temp664["model"] = input.readVarInt(false); //配置id
                            temp664["status"] = input.readByte(); //是否已解锁（只负责需要解锁的部分） 0未解锁 1已解锁
                        }
                        else {
                            resStallInfoMessage["models"][modelsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resStallInfoMessage);
                    break;
                case 42102 /* StallModelCMD.CMDResStallViewMessage */:
                    var stallsLength1 = input.readShort();
                    var resStallViewMessage = [];
                    for (var stallsi1 = 0; stallsi1 < stallsLength1; stallsi1++) {
                        if (input.readByte() != 0) {
                            var temp665 = resStallViewMessage[stallsi1] = {}; //
                            temp665["stallId"] = input.readLong(); //摆摊唯一id
                            temp665["stall"] = input.readVarInt(false); //摊位配置id
                            temp665["rid"] = input.readLong(); //玩家id
                            temp665["rName"] = input.readString(); //玩家名字
                            temp665["anonymity"] = input.readVarInt(false); //是否匿名 0不是 否则是
                            temp665["type"] = input.readVarInt(false); //类型
                            temp665["model"] = input.readVarInt(false); //模型
                            temp665["desc"] = input.readString(); //描述
                            temp665["order"] = input.readVarInt(false); //月卡排序 大的在前
                            var itemsLength2 = input.readShort();
                            temp665["items"] = [];
                            for (var itemsi2 = 0; itemsi2 < itemsLength2; itemsi2++) {
                                if (input.readByte() != 0) {
                                    var temp666 = temp665["items"][itemsi2] = {}; //道具列表
                                    var itemLength2 = input.readByte();
                                    if (itemLength2 != 0) {
                                        var temp667 = temp666["item"] = {}; //道具信息
                                        temp667["uid"] = input.readLong(); //唯一id
                                        temp667["itemId"] = input.readVarInt(false); //道具配置id
                                        temp667["count"] = input.readVarInt(false); //数量
                                        temp667["expire"] = input.readVarInt(false); //过期时间
                                        temp667["uTimes"] = input.readVarInt(false); //已经使用的次数
                                        temp667["time"] = input.readVarInt(false); //道具获得时间
                                        var paramsLength3 = input.readShort();
                                        temp667["params"] = new Array(paramsLength3);
                                        for (var paramsi3 = 0; paramsi3 < paramsLength3; paramsi3++) {
                                            temp667["params"][paramsi3] = input.readVarInt(false); //道具参数
                                        }
                                        var equipDataLength2 = input.readByte();
                                        if (equipDataLength2 != 0) {
                                            var temp668 = temp667["equipData"] = {}; //装备属性（null表示没有）
                                            temp668["durable"] = input.readVarInt(false); //消耗耐久
                                            temp668["starLevel"] = input.readVarInt(false); //升星等级
                                            temp668["starLock"] = input.readVarInt(false); //被锁星级
                                            temp668["starExp"] = input.readVarInt(false); //升星祝福值
                                            temp668["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                            temp668["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                            temp668["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                            temp668["spiritLevel"] = input.readVarInt(false); //注灵等级
                                            temp668["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                            temp668["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                            temp668["sign"] = input.readString(); //签名
                                            var destinyAttrsLength2 = input.readShort();
                                            temp668["destinyAttrs"] = [];
                                            for (var destinyAttrsi2 = 0; destinyAttrsi2 < destinyAttrsLength2; destinyAttrsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp669 = temp668["destinyAttrs"][destinyAttrsi2] = {}; //命运属性
                                                    temp669["career"] = input.readVarInt(false); //职业限定
                                                    temp669["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp669["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp668["destinyAttrs"][destinyAttrsi2] = null;
                                                }
                                            }
                                            var superAttrsLength2 = input.readShort();
                                            temp668["superAttrs"] = [];
                                            for (var superAttrsi2 = 0; superAttrsi2 < superAttrsLength2; superAttrsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp670 = temp668["superAttrs"][superAttrsi2] = {}; //极品属性
                                                    temp670["career"] = input.readVarInt(false); //职业限定
                                                    temp670["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp670["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp668["superAttrs"][superAttrsi2] = null;
                                                }
                                            }
                                            var identifyAttrsLength2 = input.readShort();
                                            temp668["identifyAttrs"] = [];
                                            for (var identifyAttrsi2 = 0; identifyAttrsi2 < identifyAttrsLength2; identifyAttrsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp671 = temp668["identifyAttrs"][identifyAttrsi2] = {}; //鉴定属性
                                                    temp671["career"] = input.readVarInt(false); //职业限定
                                                    temp671["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp671["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp668["identifyAttrs"][identifyAttrsi2] = null;
                                                }
                                            }
                                            var xiLianAttrsLength2 = input.readShort();
                                            temp668["xiLianAttrs"] = [];
                                            for (var xiLianAttrsi2 = 0; xiLianAttrsi2 < xiLianAttrsLength2; xiLianAttrsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp672 = temp668["xiLianAttrs"][xiLianAttrsi2] = {}; //配饰洗练属性
                                                    temp672["career"] = input.readVarInt(false); //职业限定
                                                    temp672["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp672["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp668["xiLianAttrs"][xiLianAttrsi2] = null;
                                                }
                                            }
                                            temp668["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                            temp668["growLevel"] = input.readVarInt(false); //成长等级
                                            temp668["growExp"] = input.readVarInt(false); //成长经验
                                            var bestAttrsLength2 = input.readShort();
                                            temp668["bestAttrs"] = new Array(bestAttrsLength2);
                                            for (var bestAttrsi2 = 0; bestAttrsi2 < bestAttrsLength2; bestAttrsi2++) {
                                                temp668["bestAttrs"][bestAttrsi2] = input.readVarInt(false); //极品属性（新）
                                            }
                                            var soulAttrsLength2 = input.readShort();
                                            temp668["soulAttrs"] = new Array(soulAttrsLength2);
                                            for (var soulAttrsi2 = 0; soulAttrsi2 < soulAttrsLength2; soulAttrsi2++) {
                                                temp668["soulAttrs"][soulAttrsi2] = input.readVarInt(false); //心魂属性
                                            }
                                            var godsAttrsLength2 = input.readShort();
                                            temp668["godsAttrs"] = new Array(godsAttrsLength2);
                                            for (var godsAttrsi2 = 0; godsAttrsi2 < godsAttrsLength2; godsAttrsi2++) {
                                                temp668["godsAttrs"][godsAttrsi2] = input.readVarInt(false); //额外神级属性
                                            }
                                            temp668["qualification"] = input.readVarInt(false); //资质
                                            var specialDurableLength2 = input.readShort();
                                            temp668["specialDurable"] = [];
                                            for (var specialDurablei2 = 0; specialDurablei2 < specialDurableLength2; specialDurablei2++) {
                                                if (input.readByte() != 0) {
                                                    var temp673 = temp668["specialDurable"][specialDurablei2] = {}; //特殊耐久消耗值
                                                    temp673["type"] = input.readVarInt(false); //类型
                                                    temp673["value"] = input.readVarInt(false); //已消耗值
                                                }
                                                else {
                                                    temp668["specialDurable"][specialDurablei2] = null;
                                                }
                                            }
                                        }
                                        var immobilizationLength2 = input.readByte();
                                        if (immobilizationLength2 != 0) {
                                            var temp674 = temp667["immobilization"] = {}; //固化数据
                                            temp674["action"] = input.readVarInt(false); //产生行为
                                            temp674["expire"] = input.readVarInt(false); //过期时间 时间戳
                                        }
                                        var fromLength2 = input.readByte();
                                        if (fromLength2 != 0) {
                                            var temp675 = temp667["from"] = {}; //来源
                                            temp675["action"] = input.readVarInt(false); //产生行为
                                            temp675["firstRole"] = input.readLong(); //第一个玩家id
                                            temp675["firstRoleName"] = input.readString(); //第一个玩家名字
                                            var paramsLength4 = input.readShort();
                                            temp675["params"] = [];
                                            for (var paramsi4 = 0; paramsi4 < paramsLength4; paramsi4++) {
                                                if (input.readByte() != 0) {
                                                    var temp676 = temp675["params"][paramsi4] = {}; //
                                                    temp676["key"] = input.readVarInt(false); //
                                                    temp676["value"] = input.readString(); //
                                                }
                                                else {
                                                    temp675["params"][paramsi4] = null;
                                                }
                                            }
                                        }
                                        temp667["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                                        var spriteDataLength2 = input.readByte();
                                        if (spriteDataLength2 != 0) {
                                            var temp677 = temp667["spriteData"] = {}; //灵兽数据（null表示没有）
                                            temp677["level"] = input.readVarInt(false); //灵兽等级
                                            temp677["exp"] = input.readVarInt(false); //灵兽经验
                                            temp677["skin"] = input.readVarInt(false); //灵兽皮肤
                                            var skillsLength2 = input.readShort();
                                            temp677["skills"] = [];
                                            for (var skillsi2 = 0; skillsi2 < skillsLength2; skillsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp678 = temp677["skills"][skillsi2] = {}; //灵兽出战技能
                                                    temp678["id"] = input.readVarInt(false); //
                                                    temp678["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp677["skills"][skillsi2] = null;
                                                }
                                            }
                                            var ownerSkillsLength2 = input.readShort();
                                            temp677["ownerSkills"] = [];
                                            for (var ownerSkillsi2 = 0; ownerSkillsi2 < ownerSkillsLength2; ownerSkillsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp679 = temp677["ownerSkills"][ownerSkillsi2] = {}; //灵兽拥有的技能
                                                    temp679["id"] = input.readVarInt(false); //
                                                    temp679["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp677["ownerSkills"][ownerSkillsi2] = null;
                                                }
                                            }
                                            var ownerSkinsLength2 = input.readShort();
                                            temp677["ownerSkins"] = [];
                                            for (var ownerSkinsi2 = 0; ownerSkinsi2 < ownerSkinsLength2; ownerSkinsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp680 = temp677["ownerSkins"][ownerSkinsi2] = {}; //灵兽拥有的皮肤
                                                    temp680["id"] = input.readVarInt(false); //
                                                    temp680["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp677["ownerSkins"][ownerSkinsi2] = null;
                                                }
                                            }
                                            var absorbExpLength2 = input.readShort();
                                            temp677["absorbExp"] = [];
                                            for (var absorbExpi2 = 0; absorbExpi2 < absorbExpLength2; absorbExpi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp681 = temp677["absorbExp"][absorbExpi2] = {}; //灵兽吸收经验值
                                                    temp681["id"] = input.readVarInt(false); //
                                                    temp681["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp677["absorbExp"][absorbExpi2] = null;
                                                }
                                            }
                                        }
                                    }
                                    temp666["currency"] = input.readVarInt(false); //货币
                                    temp666["price"] = input.readVarInt(false); //价格
                                    temp666["status"] = input.readVarInt(false); //状态 0未售出 1已售出
                                    temp666["expire"] = input.readVarInt(false); //下架时间（时间戳）
                                }
                                else {
                                    temp665["items"][itemsi2] = null;
                                }
                            }
                        }
                        else {
                            resStallViewMessage[stallsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resStallViewMessage);
                    break;
                case 42103 /* StallModelCMD.CMDResStallLeaveWordListMessage */:
                    var resStallLeaveWordListMessage = {};
                    resStallLeaveWordListMessage["stallId"] = input.readLong(); //摊位id
                    var messagesLength1 = input.readShort();
                    resStallLeaveWordListMessage["messages"] = [];
                    for (var messagesi1 = 0; messagesi1 < messagesLength1; messagesi1++) {
                        if (input.readByte() != 0) {
                            var temp682 = resStallLeaveWordListMessage["messages"][messagesi1] = {}; //
                            temp682["time"] = input.readVarInt(false); //时间
                            temp682["rid"] = input.readLong(); //玩家uid
                            temp682["name"] = input.readString(); //玩家名字
                            temp682["content"] = input.readString(); //留言内容
                        }
                        else {
                            resStallLeaveWordListMessage["messages"][messagesi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resStallLeaveWordListMessage);
                    break;
                case 42104 /* StallModelCMD.CMDResStallBuyMessage */:
                    var resStallBuyMessage = {};
                    resStallBuyMessage["stallId"] = input.readLong(); //
                    resStallBuyMessage["uid"] = input.readLong(); //
                    this.sendNotif(cmd, resStallBuyMessage);
                    break;
                case 42105 /* StallModelCMD.CMDResStallModelUpdateMessage */:
                    var modelsLength2 = input.readShort();
                    var resStallModelUpdateMessage = [];
                    for (var modelsi2 = 0; modelsi2 < modelsLength2; modelsi2++) {
                        if (input.readByte() != 0) {
                            var temp683 = resStallModelUpdateMessage[modelsi2] = {}; //
                            temp683["model"] = input.readVarInt(false); //配置id
                            temp683["status"] = input.readByte(); //是否已解锁（只负责需要解锁的部分） 0未解锁 1已解锁
                        }
                        else {
                            resStallModelUpdateMessage[modelsi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resStallModelUpdateMessage);
                    break;
                case 42106 /* StallModelCMD.CMDResStallSoldMessage */:
                    var resStallSoldMessage = {};
                    resStallSoldMessage["stallId"] = input.readLong(); //
                    resStallSoldMessage["uid"] = input.readLong(); //
                    this.sendNotif(cmd, resStallSoldMessage);
                    break;
                case 42107 /* StallModelCMD.CMDResStallLastDealMessage */:
                    var resStallLastDealMessage = {};
                    resStallLastDealMessage["itemCfgId"] = input.readVarInt(false); //道具配置id
                    var dealsLength1 = input.readShort();
                    resStallLastDealMessage["deals"] = [];
                    for (var dealsi1 = 0; dealsi1 < dealsLength1; dealsi1++) {
                        if (input.readByte() != 0) {
                            var temp684 = resStallLastDealMessage["deals"][dealsi1] = {}; //成交货币信息
                            temp684["itemId"] = input.readVarInt(false); //config id
                            temp684["itemCount"] = input.readVarInt(false); //item count
                        }
                        else {
                            resStallLastDealMessage["deals"][dealsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resStallLastDealMessage);
                    break;
            }
        };
        return StallModel;
    }(ModelBase));
    net.StallModel = StallModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:16
     */
    var StoreModel = /** @class */ (function (_super) {
        __extends(StoreModel, _super);
        function StoreModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(16002 /* StoreModelCMD.CMDResStoreSoldStatusMessage */);
            thisObj.reg(16004 /* StoreModelCMD.CMDResBuyStoreGoodsMessage */);
            thisObj.reg(16006 /* StoreModelCMD.CMDResSellItemsMessage */);
            thisObj.reg(16007 /* StoreModelCMD.CMDResLimitedTimeGiftsInfoMessage */);
            thisObj.reg(16010 /* StoreModelCMD.CMDResBuyLimitedTimeGiftsMessage */);
            thisObj.reg(16011 /* StoreModelCMD.CMDResAdventureGiftsInfoMessage */);
            thisObj.reg(16022 /* StoreModelCMD.CMDResStoreCodeExchangeInfoMessage */);
            thisObj.reg(16032 /* StoreModelCMD.CMDResPrivilegeGiftsInfoMessage */);
            return _this;
        }
        StoreModel.ins = function () {
            if (!this._ins)
                this._ins = new StoreModel();
            return this._ins;
        };
        /**
         *
         * 请求当前商店购买状态
         *
         * sendReqStoreSoldStatusMessage  16001
         */
        StoreModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(16001 /* StoreModelCMD.CMDReqStoreSoldStatusMessage */, output, s);
        };
        /**
         *
         * 请求购买
         * @param 请求购买的商品id
         * @param 请求购买的数量
         *
         * sendReqBuyStoreGoodsMessage  16003
         */
        StoreModel.prototype.send3 = function (goodsID, count, s) {
            var output = this.getO();
            output.writeVarInt(goodsID, false);
            output.writeVarInt(count, false);
            this.send(16003 /* StoreModelCMD.CMDReqBuyStoreGoodsMessage */, output, s);
        };
        /**
         *
         * 出售道具
         * @param 出售类型
         *
         * sendReqSellItemsMessage  16005
         */
        StoreModel.prototype.send5 = function (type, items, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            if (items != null) {
                output.writeShort(items.length);
                for (var itemsi1 = 0; itemsi1 < items.length; itemsi1++) {
                    if (items[itemsi1] != null) {
                        output.writeByte(1);
                        output.writeLong(items[itemsi1].uid);
                        output.writeVarInt(items[itemsi1].count, false);
                    }
                    else {
                        output.writeByte(0);
                    }
                }
            }
            else {
                output.writeShort(0);
            }
            this.send(16005 /* StoreModelCMD.CMDReqSellItemsMessage */, output, s);
        };
        /**
         *
         * 请求购买
         * @param 请求购买的商品id
         *
         * sendReqBuyLimitedTimeGiftsMessage  16008
         */
        StoreModel.prototype.send8 = function (goodsId, s) {
            var output = this.getO();
            output.writeVarInt(goodsId, false);
            this.send(16008 /* StoreModelCMD.CMDReqBuyLimitedTimeGiftsMessage */, output, s);
        };
        /**
         *
         * 限时礼包信息
         *
         * sendReqLimitedTimeGiftsInfoMessage  16009
         */
        StoreModel.prototype.send9 = function (s) {
            var output = this.getO();
            this.send(16009 /* StoreModelCMD.CMDReqLimitedTimeGiftsInfoMessage */, output, s);
        };
        /**
         *
         * 请求购买
         * @param cfgId
         * @param 位置
         *
         * sendReqBuyAdventureGiftsMessage  16012
         */
        StoreModel.prototype.send12 = function (cfgId, index, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            output.writeVarInt(index, false);
            this.send(16012 /* StoreModelCMD.CMDReqBuyAdventureGiftsMessage */, output, s);
        };
        /**
         *
         * 奇遇礼包信息
         *
         * sendReqAdventureGiftsInfoMessage  16013
         */
        StoreModel.prototype.send13 = function (s) {
            var output = this.getO();
            this.send(16013 /* StoreModelCMD.CMDReqAdventureGiftsInfoMessage */, output, s);
        };
        /**
         *
         *
         * @param 兑换码
         *
         * sendReqStoreCodeExchangeMessage  16021
         */
        StoreModel.prototype.send21 = function (code, s) {
            var output = this.getO();
            output.writeString(code);
            this.send(16021 /* StoreModelCMD.CMDReqStoreCodeExchangeMessage */, output, s);
        };
        /**
         *
         * 特权礼包信息
         *
         * sendReqPrivilegeGiftsInfoMessage  16031
         */
        StoreModel.prototype.send31 = function (s) {
            var output = this.getO();
            this.send(16031 /* StoreModelCMD.CMDReqPrivilegeGiftsInfoMessage */, output, s);
        };
        /**
         *
         * 请求购买特权礼包
         * @param cfgId
         *
         * sendReqBuyPrivilegeGiftsMessage  16033
         */
        StoreModel.prototype.send33 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(16033 /* StoreModelCMD.CMDReqBuyPrivilegeGiftsMessage */, output, s);
        };
        StoreModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 16002 /* StoreModelCMD.CMDResStoreSoldStatusMessage */:
                    var statusLength1 = input.readShort();
                    var resStoreSoldStatusMessage = [];
                    for (var statusi1 = 0; statusi1 < statusLength1; statusi1++) {
                        if (input.readByte() != 0) {
                            var temp849 = resStoreSoldStatusMessage[statusi1] = {}; //出售状态列表
                            temp849["goodsID"] = input.readVarInt(false); //商品id
                            temp849["pSoldCount"] = input.readVarInt(false); //个人出售数量
                            temp849["gSoldCount"] = input.readVarInt(false); //全服出售数量
                        }
                        else {
                            resStoreSoldStatusMessage[statusi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resStoreSoldStatusMessage);
                    break;
                case 16004 /* StoreModelCMD.CMDResBuyStoreGoodsMessage */:
                    var statusLength2 = input.readShort();
                    var resBuyStoreGoodsMessage = [];
                    for (var statusi2 = 0; statusi2 < statusLength2; statusi2++) {
                        if (input.readByte() != 0) {
                            var temp850 = resBuyStoreGoodsMessage[statusi2] = {}; //出售状态列表
                            temp850["goodsID"] = input.readVarInt(false); //商品id
                            temp850["pSoldCount"] = input.readVarInt(false); //个人出售数量
                            temp850["gSoldCount"] = input.readVarInt(false); //全服出售数量
                        }
                        else {
                            resBuyStoreGoodsMessage[statusi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resBuyStoreGoodsMessage);
                    break;
                case 16006 /* StoreModelCMD.CMDResSellItemsMessage */:
                    this.sendNotif(cmd);
                    break;
                case 16007 /* StoreModelCMD.CMDResLimitedTimeGiftsInfoMessage */:
                    var giftsLength1 = input.readByte();
                    if (giftsLength1 != 0) {
                        var resLimitedTimeGiftsInfoMessage = {}; //当前进行的限时礼包
                        resLimitedTimeGiftsInfoMessage["giftId"] = input.readVarInt(false); //id
                        resLimitedTimeGiftsInfoMessage["endTime"] = input.readVarInt(false); //结束时间
                        var buyIndexLength1 = input.readShort();
                        resLimitedTimeGiftsInfoMessage["buyIndex"] = new Array(buyIndexLength1);
                        for (var buyIndexi1 = 0; buyIndexi1 < buyIndexLength1; buyIndexi1++) {
                            resLimitedTimeGiftsInfoMessage["buyIndex"][buyIndexi1] = input.readVarInt(false); //已购买礼包
                        }
                    }
                    this.sendNotif(cmd, resLimitedTimeGiftsInfoMessage);
                    break;
                case 16010 /* StoreModelCMD.CMDResBuyLimitedTimeGiftsMessage */:
                    var resBuyLimitedTimeGiftsMessage = {};
                    resBuyLimitedTimeGiftsMessage["isSuccess"] = input.readBoolean(); //购买成功
                    var giftsLength2 = input.readByte();
                    if (giftsLength2 != 0) {
                        var temp851 = resBuyLimitedTimeGiftsMessage["gifts"] = {}; //下一个开启的限时礼包
                        temp851["giftId"] = input.readVarInt(false); //id
                        temp851["endTime"] = input.readVarInt(false); //结束时间
                        var buyIndexLength2 = input.readShort();
                        temp851["buyIndex"] = new Array(buyIndexLength2);
                        for (var buyIndexi2 = 0; buyIndexi2 < buyIndexLength2; buyIndexi2++) {
                            temp851["buyIndex"][buyIndexi2] = input.readVarInt(false); //已购买礼包
                        }
                    }
                    this.sendNotif(cmd, resBuyLimitedTimeGiftsMessage);
                    break;
                case 16011 /* StoreModelCMD.CMDResAdventureGiftsInfoMessage */:
                    var giftsLength3 = input.readShort();
                    var resAdventureGiftsInfoMessage = [];
                    for (var giftsi3 = 0; giftsi3 < giftsLength3; giftsi3++) {
                        if (input.readByte() != 0) {
                            var temp852 = resAdventureGiftsInfoMessage[giftsi3] = {}; //当前进行的限时礼包
                            temp852["giftId"] = input.readVarInt(false); //id
                            temp852["endTime"] = input.readVarInt(false); //结束时间
                            var buyIndexLength3 = input.readShort();
                            temp852["buyIndex"] = new Array(buyIndexLength3);
                            for (var buyIndexi3 = 0; buyIndexi3 < buyIndexLength3; buyIndexi3++) {
                                temp852["buyIndex"][buyIndexi3] = input.readVarInt(false); //已购买礼包
                            }
                        }
                        else {
                            resAdventureGiftsInfoMessage[giftsi3] = null;
                        }
                    }
                    this.sendNotif(cmd, resAdventureGiftsInfoMessage);
                    break;
                case 16022 /* StoreModelCMD.CMDResStoreCodeExchangeInfoMessage */:
                    var exchangedLength = input.readShort();
                    var resStoreCodeExchangeInfoMessage = new Array(exchangedLength);
                    for (var exchangedi1 = 0; exchangedi1 < exchangedLength; exchangedi1++) {
                        resStoreCodeExchangeInfoMessage[exchangedi1] = input.readString(); //已经领取的礼包码列表
                    }
                    this.sendNotif(cmd, resStoreCodeExchangeInfoMessage);
                    break;
                case 16032 /* StoreModelCMD.CMDResPrivilegeGiftsInfoMessage */:
                    var itemsLength1 = input.readShort();
                    var resPrivilegeGiftsInfoMessage = new Array(itemsLength1);
                    for (var itemsi1 = 0; itemsi1 < itemsLength1; itemsi1++) {
                        resPrivilegeGiftsInfoMessage[itemsi1] = input.readVarInt(false); //出售的道具列表
                    }
                    this.sendNotif(cmd, resPrivilegeGiftsInfoMessage);
                    break;
            }
        };
        return StoreModel;
    }(ModelBase));
    net.StoreModel = StoreModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:194
     */
    var SummonModel = /** @class */ (function (_super) {
        __extends(SummonModel, _super);
        function SummonModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(194011 /* SummonModelCMD.CMDResSummonTipMessage */);
            return _this;
        }
        SummonModel.ins = function () {
            if (!this._ins)
                this._ins = new SummonModel();
            return this._ins;
        };
        /**
         *
         * 响应召集
         * @param
         *
         * sendReqSummonAnswerMessage  194001
         */
        SummonModel.prototype.send1 = function (summonId, s) {
            var output = this.getO();
            output.writeLong(summonId);
            this.send(194001 /* SummonModelCMD.CMDReqSummonAnswerMessage */, output, s);
        };
        SummonModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 194011 /* SummonModelCMD.CMDResSummonTipMessage */:
                    var resSummonTipMessage = {};
                    var summonerLength1 = input.readByte();
                    if (summonerLength1 != 0) {
                        var temp843 = resSummonTipMessage["summoner"] = {}; //召唤者信息
                        temp843["uid"] = input.readLong(); //玩家id
                        temp843["name"] = input.readString(); //玩家名字
                        temp843["union"] = input.readString(); //行会名字
                    }
                    resSummonTipMessage["summonId"] = input.readLong(); //唯一id 用来响应传送
                    resSummonTipMessage["type"] = input.readVarInt(false); //召唤类型 1队伍 2行会
                    resSummonTipMessage["map"] = input.readVarInt(false); //地图id
                    resSummonTipMessage["expire"] = input.readVarInt(false); //过期时间 时间戳
                    this.sendNotif(cmd, resSummonTipMessage);
                    break;
            }
        };
        return SummonModel;
    }(ModelBase));
    net.SummonModel = SummonModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:199
     */
    var TalentModel = /** @class */ (function (_super) {
        __extends(TalentModel, _super);
        function TalentModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(199002 /* TalentModelCMD.CMDResRoleTalentMessage */);
            thisObj.reg(199005 /* TalentModelCMD.CMDResTitleMessage */);
            return _this;
        }
        TalentModel.ins = function () {
            if (!this._ins)
                this._ins = new TalentModel();
            return this._ins;
        };
        /**
         *
         * 请求角色潜能信息
         * @param 玩家或者元神唯一id
         *
         * sendReqRoleTalentMessage  199001
         */
        TalentModel.prototype.send1 = function (uId, s) {
            var output = this.getO();
            output.writeLong(uId);
            this.send(199001 /* TalentModelCMD.CMDReqRoleTalentMessage */, output, s);
        };
        /**
         *
         * 请求重置潜能信息
         * @param 玩家或者元神唯一id
         *
         * sendReqResetTalentMessage  199003
         */
        TalentModel.prototype.send3 = function (uId, s) {
            var output = this.getO();
            output.writeLong(uId);
            this.send(199003 /* TalentModelCMD.CMDReqResetTalentMessage */, output, s);
        };
        /**
         *
         * 请求封号信息
         *
         * sendReqTitleMessage  199004
         */
        TalentModel.prototype.send4 = function (s) {
            var output = this.getO();
            this.send(199004 /* TalentModelCMD.CMDReqTitleMessage */, output, s);
        };
        /**
         *
         * 请求升级封号
         * @param 封号id
         * @param 类型 1:玩家 2:元神
         *
         * sendReqLevelUpTitleMessage  199006
         */
        TalentModel.prototype.send6 = function (level, type, s) {
            var output = this.getO();
            output.writeVarInt(level, false);
            output.writeVarInt(type, false);
            this.send(199006 /* TalentModelCMD.CMDReqLevelUpTitleMessage */, output, s);
        };
        /**
         *
         * 请求提升角色潜能封号
         * @param 玩家或者元神唯一id
         *
         * sendReqLevelUpTalentMessage  199007
         */
        TalentModel.prototype.send7 = function (uId, s) {
            var output = this.getO();
            output.writeLong(uId);
            this.send(199007 /* TalentModelCMD.CMDReqLevelUpTalentMessage */, output, s);
        };
        TalentModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 199002 /* TalentModelCMD.CMDResRoleTalentMessage */:
                    var resRoleTalentMessage = {};
                    resRoleTalentMessage["uId"] = input.readLong(); //玩家或者元神唯一id
                    var beanListLength1 = input.readShort();
                    resRoleTalentMessage["beanList"] = [];
                    for (var beanListi1 = 0; beanListi1 < beanListLength1; beanListi1++) {
                        if (input.readByte() != 0) {
                            var temp842 = resRoleTalentMessage["beanList"][beanListi1] = {}; //属性信息
                            temp842["attrType"] = input.readVarInt(false); //属性类型
                            temp842["count"] = input.readVarInt(false); //属性数值
                        }
                        else {
                            resRoleTalentMessage["beanList"][beanListi1] = null;
                        }
                    }
                    resRoleTalentMessage["count"] = input.readVarInt(false); //今日已重置次数
                    this.sendNotif(cmd, resRoleTalentMessage);
                    break;
                case 199005 /* TalentModelCMD.CMDResTitleMessage */:
                    var resTitleMessage = {};
                    resTitleMessage["level"] = input.readVarInt(false); //封号id
                    resTitleMessage["imageLevel"] = input.readVarInt(false); //元神封号id
                    resTitleMessage["downLevel"] = input.readVarInt(false); //下降等级
                    this.sendNotif(cmd, resTitleMessage);
                    break;
            }
        };
        return TalentModel;
    }(ModelBase));
    net.TalentModel = TalentModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:102
     */
    var TaskModel = /** @class */ (function (_super) {
        __extends(TaskModel, _super);
        function TaskModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(102001 /* TaskModelCMD.CMDResTaskProcessMessage */);
            thisObj.reg(102003 /* TaskModelCMD.CMDResAllTaskListMessage */);
            thisObj.reg(102111 /* TaskModelCMD.CMDResBranchTaskInfoMessage */);
            thisObj.reg(102022 /* TaskModelCMD.CMDResUnionTaskNavbarInfoMessage */);
            thisObj.reg(102025 /* TaskModelCMD.CMDResChapterTaskNavbarInfoMessage */);
            thisObj.reg(102123 /* TaskModelCMD.CMDResDailyTaskInfoMessage */);
            thisObj.reg(102136 /* TaskModelCMD.CMDResWeeklyTaskTreasureInfoMessage */);
            thisObj.reg(102202 /* TaskModelCMD.CMDResTaskStateMessage */);
            thisObj.reg(102302 /* TaskModelCMD.CMDResOfferTaskInfoMessage */);
            return _this;
        }
        TaskModel.ins = function () {
            if (!this._ins)
                this._ins = new TaskModel();
            return this._ins;
        };
        /**
         *
         * 请求主线任务信息 o
         *
         * sendReqAllTaskListMessage  102019
         */
        TaskModel.prototype.send19 = function (s) {
            var output = this.getO();
            this.send(102019 /* TaskModelCMD.CMDReqAllTaskListMessage */, output, s);
        };
        /**
         *
         * 请求接受任务(目前逻辑不用了)
         * @param 任务id
         *
         * sendReqAcceptTaskMessage  102008
         */
        TaskModel.prototype.send8 = function (taskId, s) {
            var output = this.getO();
            output.writeVarInt(taskId, false);
            this.send(102008 /* TaskModelCMD.CMDReqAcceptTaskMessage */, output, s);
        };
        /**
         *
         * 请求提交任务消息
         * @param 任务id
         * @param 参数值
         *
         * sendReqSubmitTaskMessage  102002
         */
        TaskModel.prototype.send2 = function (taskId, value, s) {
            var output = this.getO();
            output.writeVarInt(taskId, false);
            output.writeVarInt(value, false);
            this.send(102002 /* TaskModelCMD.CMDReqSubmitTaskMessage */, output, s);
        };
        /**
         *
         * 请求支线任务数据
         *
         * sendReqBranchTaskInfoMessage  102101
         */
        TaskModel.prototype.send101 = function (s) {
            var output = this.getO();
            this.send(102101 /* TaskModelCMD.CMDReqBranchTaskInfoMessage */, output, s);
        };
        /**
         *
         * 请求提交支线任务
         * @param 组id
         *
         * sendReqBranchTaskSubmitMessage  102102
         */
        TaskModel.prototype.send102 = function (group, s) {
            var output = this.getO();
            output.writeVarInt(group, false);
            this.send(102102 /* TaskModelCMD.CMDReqBranchTaskSubmitMessage */, output, s);
        };
        /**
         *
         * 行会任务-前端请求行会任务数据
         *
         * sendReqUnionTaskNavbarInfoMessage  102020
         */
        TaskModel.prototype.send20 = function (s) {
            var output = this.getO();
            this.send(102020 /* TaskModelCMD.CMDReqUnionTaskNavbarInfoMessage */, output, s);
        };
        /**
         *
         * 行会任务-前端请求提交行会任务
         * @param 组id
         *
         * sendReqUnionTaskNavbarSubmitMessage  102021
         */
        TaskModel.prototype.send21 = function (group, s) {
            var output = this.getO();
            output.writeVarInt(group, false);
            this.send(102021 /* TaskModelCMD.CMDReqUnionTaskNavbarSubmitMessage */, output, s);
        };
        /**
         *
         * 山海篇章_前端请求山海篇章任务导航栏数据
         *
         * sendReqChapterTaskNavbarInfoMessage  102023
         */
        TaskModel.prototype.send23 = function (s) {
            var output = this.getO();
            this.send(102023 /* TaskModelCMD.CMDReqChapterTaskNavbarInfoMessage */, output, s);
        };
        /**
         *
         * 山海篇章_前端请求提交山海篇章任务导航栏任务
         * @param 组id
         *
         * sendReqChapterTaskNavbarSubmitMessage  102024
         */
        TaskModel.prototype.send24 = function (group, s) {
            var output = this.getO();
            output.writeVarInt(group, false);
            this.send(102024 /* TaskModelCMD.CMDReqChapterTaskNavbarSubmitMessage */, output, s);
        };
        /**
         *
         * 请求支线任务数据
         *
         * sendReqDailyTaskInfoMessage  102121
         */
        TaskModel.prototype.send121 = function (s) {
            var output = this.getO();
            this.send(102121 /* TaskModelCMD.CMDReqDailyTaskInfoMessage */, output, s);
        };
        /**
         *
         * 请求提交支线任务
         * @param 组id
         *
         * sendReqDailyTaskSubmitMessage  102122
         */
        TaskModel.prototype.send122 = function (group, s) {
            var output = this.getO();
            output.writeVarInt(group, false);
            this.send(102122 /* TaskModelCMD.CMDReqDailyTaskSubmitMessage */, output, s);
        };
        /**
         *
         * 请求周常任务信息
         *
         * sendReqWeeklyTaskInfoMessage  102131
         */
        TaskModel.prototype.send131 = function (s) {
            var output = this.getO();
            this.send(102131 /* TaskModelCMD.CMDReqWeeklyTaskInfoMessage */, output, s);
        };
        /**
         *
         * 请求周常任务提交
         *
         * sendReqWeeklyTaskSubmitMessage  102132
         */
        TaskModel.prototype.send132 = function (s) {
            var output = this.getO();
            this.send(102132 /* TaskModelCMD.CMDReqWeeklyTaskSubmitMessage */, output, s);
        };
        /**
         *
         * 返回信息
         * @param
         *
         * sendResWeeklyTaskInfoMessage  102133
         */
        TaskModel.prototype.send133 = function (task, s) {
            var output = this.getO();
            if (task != null) {
                output.writeByte(1);
                output.writeVarInt(task.taskId, false);
                output.writeVarInt(task.state, false);
                output.writeVarInt(task.available, false);
                if (task.goalDataList != null) {
                    output.writeShort(task.goalDataList.length);
                    for (var goalDataListi1 = 0; goalDataListi1 < task.goalDataList.length; goalDataListi1++) {
                        if (task.goalDataList[goalDataListi1] != null) {
                            output.writeByte(1);
                            output.writeVarInt(task.goalDataList[goalDataListi1].goalId, false);
                            output.writeVarInt(task.goalDataList[goalDataListi1].progress, false);
                            output.writeVarInt(task.goalDataList[goalDataListi1].goalType, false);
                            output.writeVarInt(task.goalDataList[goalDataListi1].goalCount, false);
                            output.writeShort(task.goalDataList[goalDataListi1].goalParams.length);
                            for (var goalParamsi1 = 0; goalParamsi1 < task.goalDataList[goalDataListi1].goalParams.length; goalParamsi1++) {
                                output.writeVarInt(task.goalDataList[goalDataListi1].goalParams[goalParamsi1], false);
                            }
                        }
                        else {
                            output.writeByte(0);
                        }
                    }
                }
                else {
                    output.writeShort(0);
                }
            }
            else {
                output.writeByte(0);
            }
            this.send(102133 /* TaskModelCMD.CMDResWeeklyTaskInfoMessage */, output, s);
        };
        /**
         *
         * 请求寻宝信息
         *
         * sendReqWeeklyTaskTreasureInfoMessage  102134
         */
        TaskModel.prototype.send134 = function (s) {
            var output = this.getO();
            this.send(102134 /* TaskModelCMD.CMDReqWeeklyTaskTreasureInfoMessage */, output, s);
        };
        /**
         *
         * 请求寻宝刷新
         *
         * sendReqWeeklyTaskTreasureRefreshMessage  102135
         */
        TaskModel.prototype.send135 = function (s) {
            var output = this.getO();
            this.send(102135 /* TaskModelCMD.CMDReqWeeklyTaskTreasureRefreshMessage */, output, s);
        };
        /**
         *
         * 请求寻宝
         *
         * sendReqWeeklyTaskTreasureDigMessage  102137
         */
        TaskModel.prototype.send137 = function (s) {
            var output = this.getO();
            this.send(102137 /* TaskModelCMD.CMDReqWeeklyTaskTreasureDigMessage */, output, s);
        };
        /**
         *
         * 请求任务状态
         *
         * sendReqTaskStateMessage  102201
         */
        TaskModel.prototype.send201 = function (s) {
            var output = this.getO();
            this.send(102201 /* TaskModelCMD.CMDReqTaskStateMessage */, output, s);
        };
        /**
         *
         * 请求任务快速完成
         * @param 任务id
         *
         * sendReqTaskQuickFinishMessage  102203
         */
        TaskModel.prototype.send203 = function (taskId, s) {
            var output = this.getO();
            output.writeVarInt(taskId, false);
            this.send(102203 /* TaskModelCMD.CMDReqTaskQuickFinishMessage */, output, s);
        };
        /**
         *
         * 请求悬赏任务信息
         *
         * sendReqOfferTaskInfoMessage  102301
         */
        TaskModel.prototype.send301 = function (s) {
            var output = this.getO();
            this.send(102301 /* TaskModelCMD.CMDReqOfferTaskInfoMessage */, output, s);
        };
        /**
         *
         * 请求刷新任务
         *
         * sendReqOfferTaskRefreshMessage  102303
         */
        TaskModel.prototype.send303 = function (s) {
            var output = this.getO();
            this.send(102303 /* TaskModelCMD.CMDReqOfferTaskRefreshMessage */, output, s);
        };
        /**
         *
         * 请求接取任务
         * @param id
         *
         * sendReqOfferTaskTakeMessage  102304
         */
        TaskModel.prototype.send304 = function (task, s) {
            var output = this.getO();
            output.writeVarInt(task, false);
            this.send(102304 /* TaskModelCMD.CMDReqOfferTaskTakeMessage */, output, s);
        };
        /**
         *
         * 请求提交任务
         *
         * sendReqOfferTaskSubmitMessage  102305
         */
        TaskModel.prototype.send305 = function (s) {
            var output = this.getO();
            this.send(102305 /* TaskModelCMD.CMDReqOfferTaskSubmitMessage */, output, s);
        };
        /**
         *
         * 请求抽奖
         *
         * sendReqOfferTaskDrawMessage  102306
         */
        TaskModel.prototype.send306 = function (s) {
            var output = this.getO();
            this.send(102306 /* TaskModelCMD.CMDReqOfferTaskDrawMessage */, output, s);
        };
        TaskModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 102001 /* TaskModelCMD.CMDResTaskProcessMessage */:
                    var taskDataLength1 = input.readByte();
                    if (taskDataLength1 != 0) {
                        var resTaskProcessMessage = {}; //任务数据
                        resTaskProcessMessage["taskId"] = input.readVarInt(false); //任务id
                        resTaskProcessMessage["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                        resTaskProcessMessage["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                        var goalDataListLength1 = input.readShort();
                        resTaskProcessMessage["goalDataList"] = [];
                        for (var goalDataListi1 = 0; goalDataListi1 < goalDataListLength1; goalDataListi1++) {
                            if (input.readByte() != 0) {
                                var temp942 = resTaskProcessMessage["goalDataList"][goalDataListi1] = {}; //目标数据
                                temp942["goalId"] = input.readVarInt(false); //目标id
                                temp942["progress"] = input.readVarInt(false); //当前完成进度
                                temp942["goalType"] = input.readVarInt(false); //目标类型
                                temp942["goalCount"] = input.readVarInt(false); //目标需求数量
                                var goalParamsLength1 = input.readShort();
                                temp942["goalParams"] = new Array(goalParamsLength1);
                                for (var goalParamsi1 = 0; goalParamsi1 < goalParamsLength1; goalParamsi1++) {
                                    temp942["goalParams"][goalParamsi1] = input.readVarInt(false); //目标参数
                                }
                            }
                            else {
                                resTaskProcessMessage["goalDataList"][goalDataListi1] = null;
                            }
                        }
                    }
                    this.sendNotif(cmd, resTaskProcessMessage);
                    break;
                case 102003 /* TaskModelCMD.CMDResAllTaskListMessage */:
                    var resAllTaskListMessage = {};
                    var mainTaskDataLength1 = input.readByte();
                    if (mainTaskDataLength1 != 0) {
                        var temp943 = resAllTaskListMessage["mainTaskData"] = {}; //主线任务
                        temp943["taskId"] = input.readVarInt(false); //任务id
                        temp943["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                        temp943["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                        var goalDataListLength2 = input.readShort();
                        temp943["goalDataList"] = [];
                        for (var goalDataListi2 = 0; goalDataListi2 < goalDataListLength2; goalDataListi2++) {
                            if (input.readByte() != 0) {
                                var temp944 = temp943["goalDataList"][goalDataListi2] = {}; //目标数据
                                temp944["goalId"] = input.readVarInt(false); //目标id
                                temp944["progress"] = input.readVarInt(false); //当前完成进度
                                temp944["goalType"] = input.readVarInt(false); //目标类型
                                temp944["goalCount"] = input.readVarInt(false); //目标需求数量
                                var goalParamsLength2 = input.readShort();
                                temp944["goalParams"] = new Array(goalParamsLength2);
                                for (var goalParamsi2 = 0; goalParamsi2 < goalParamsLength2; goalParamsi2++) {
                                    temp944["goalParams"][goalParamsi2] = input.readVarInt(false); //目标参数
                                }
                            }
                            else {
                                temp943["goalDataList"][goalDataListi2] = null;
                            }
                        }
                    }
                    var otherTaskDataListLength1 = input.readShort();
                    resAllTaskListMessage["otherTaskDataList"] = [];
                    for (var otherTaskDataListi1 = 0; otherTaskDataListi1 < otherTaskDataListLength1; otherTaskDataListi1++) {
                        if (input.readByte() != 0) {
                            var temp945 = resAllTaskListMessage["otherTaskDataList"][otherTaskDataListi1] = {}; //非主线任务列表
                            temp945["taskType"] = input.readVarInt(false); //任务类型 2除魔 3随机boss 4回收任务 5悬赏任务 6神威任务
                            var taskDataBeanLength1 = input.readByte();
                            if (taskDataBeanLength1 != 0) {
                                var temp946 = temp945["taskDataBean"] = {}; //任务数据
                                temp946["taskId"] = input.readVarInt(false); //任务id
                                temp946["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                                temp946["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                                var goalDataListLength3 = input.readShort();
                                temp946["goalDataList"] = [];
                                for (var goalDataListi3 = 0; goalDataListi3 < goalDataListLength3; goalDataListi3++) {
                                    if (input.readByte() != 0) {
                                        var temp947 = temp946["goalDataList"][goalDataListi3] = {}; //目标数据
                                        temp947["goalId"] = input.readVarInt(false); //目标id
                                        temp947["progress"] = input.readVarInt(false); //当前完成进度
                                        temp947["goalType"] = input.readVarInt(false); //目标类型
                                        temp947["goalCount"] = input.readVarInt(false); //目标需求数量
                                        var goalParamsLength3 = input.readShort();
                                        temp947["goalParams"] = new Array(goalParamsLength3);
                                        for (var goalParamsi3 = 0; goalParamsi3 < goalParamsLength3; goalParamsi3++) {
                                            temp947["goalParams"][goalParamsi3] = input.readVarInt(false); //目标参数
                                        }
                                    }
                                    else {
                                        temp946["goalDataList"][goalDataListi3] = null;
                                    }
                                }
                            }
                        }
                        else {
                            resAllTaskListMessage["otherTaskDataList"][otherTaskDataListi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resAllTaskListMessage);
                    break;
                case 102111 /* TaskModelCMD.CMDResBranchTaskInfoMessage */:
                    var tasksLength1 = input.readShort();
                    var resBranchTaskInfoMessage = [];
                    for (var tasksi1 = 0; tasksi1 < tasksLength1; tasksi1++) {
                        if (input.readByte() != 0) {
                            var temp948 = resBranchTaskInfoMessage[tasksi1] = {}; //
                            temp948["taskId"] = input.readVarInt(false); //任务id
                            temp948["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp948["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength4 = input.readShort();
                            temp948["goalDataList"] = [];
                            for (var goalDataListi4 = 0; goalDataListi4 < goalDataListLength4; goalDataListi4++) {
                                if (input.readByte() != 0) {
                                    var temp949 = temp948["goalDataList"][goalDataListi4] = {}; //目标数据
                                    temp949["goalId"] = input.readVarInt(false); //目标id
                                    temp949["progress"] = input.readVarInt(false); //当前完成进度
                                    temp949["goalType"] = input.readVarInt(false); //目标类型
                                    temp949["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength4 = input.readShort();
                                    temp949["goalParams"] = new Array(goalParamsLength4);
                                    for (var goalParamsi4 = 0; goalParamsi4 < goalParamsLength4; goalParamsi4++) {
                                        temp949["goalParams"][goalParamsi4] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp948["goalDataList"][goalDataListi4] = null;
                                }
                            }
                        }
                        else {
                            resBranchTaskInfoMessage[tasksi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resBranchTaskInfoMessage);
                    break;
                case 102022 /* TaskModelCMD.CMDResUnionTaskNavbarInfoMessage */:
                    var unionTasksLength1 = input.readShort();
                    var resUnionTaskNavbarInfoMessage = [];
                    for (var unionTasksi1 = 0; unionTasksi1 < unionTasksLength1; unionTasksi1++) {
                        if (input.readByte() != 0) {
                            var temp950 = resUnionTaskNavbarInfoMessage[unionTasksi1] = {}; //导航栏行会任务信息列表
                            temp950["taskId"] = input.readVarInt(false); //任务id
                            temp950["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp950["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength5 = input.readShort();
                            temp950["goalDataList"] = [];
                            for (var goalDataListi5 = 0; goalDataListi5 < goalDataListLength5; goalDataListi5++) {
                                if (input.readByte() != 0) {
                                    var temp951 = temp950["goalDataList"][goalDataListi5] = {}; //目标数据
                                    temp951["goalId"] = input.readVarInt(false); //目标id
                                    temp951["progress"] = input.readVarInt(false); //当前完成进度
                                    temp951["goalType"] = input.readVarInt(false); //目标类型
                                    temp951["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength5 = input.readShort();
                                    temp951["goalParams"] = new Array(goalParamsLength5);
                                    for (var goalParamsi5 = 0; goalParamsi5 < goalParamsLength5; goalParamsi5++) {
                                        temp951["goalParams"][goalParamsi5] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp950["goalDataList"][goalDataListi5] = null;
                                }
                            }
                        }
                        else {
                            resUnionTaskNavbarInfoMessage[unionTasksi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resUnionTaskNavbarInfoMessage);
                    break;
                case 102025 /* TaskModelCMD.CMDResChapterTaskNavbarInfoMessage */:
                    var chapterTasksLength1 = input.readShort();
                    var resChapterTaskNavbarInfoMessage = [];
                    for (var chapterTasksi1 = 0; chapterTasksi1 < chapterTasksLength1; chapterTasksi1++) {
                        if (input.readByte() != 0) {
                            var temp952 = resChapterTaskNavbarInfoMessage[chapterTasksi1] = {}; //导航栏山海篇章任务信息列表
                            temp952["taskId"] = input.readVarInt(false); //任务id
                            temp952["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp952["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength6 = input.readShort();
                            temp952["goalDataList"] = [];
                            for (var goalDataListi6 = 0; goalDataListi6 < goalDataListLength6; goalDataListi6++) {
                                if (input.readByte() != 0) {
                                    var temp953 = temp952["goalDataList"][goalDataListi6] = {}; //目标数据
                                    temp953["goalId"] = input.readVarInt(false); //目标id
                                    temp953["progress"] = input.readVarInt(false); //当前完成进度
                                    temp953["goalType"] = input.readVarInt(false); //目标类型
                                    temp953["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength6 = input.readShort();
                                    temp953["goalParams"] = new Array(goalParamsLength6);
                                    for (var goalParamsi6 = 0; goalParamsi6 < goalParamsLength6; goalParamsi6++) {
                                        temp953["goalParams"][goalParamsi6] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp952["goalDataList"][goalDataListi6] = null;
                                }
                            }
                        }
                        else {
                            resChapterTaskNavbarInfoMessage[chapterTasksi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resChapterTaskNavbarInfoMessage);
                    break;
                case 102123 /* TaskModelCMD.CMDResDailyTaskInfoMessage */:
                    var tasksLength2 = input.readShort();
                    var resDailyTaskInfoMessage = [];
                    for (var tasksi2 = 0; tasksi2 < tasksLength2; tasksi2++) {
                        if (input.readByte() != 0) {
                            var temp954 = resDailyTaskInfoMessage[tasksi2] = {}; //
                            temp954["taskId"] = input.readVarInt(false); //任务id
                            temp954["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp954["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength7 = input.readShort();
                            temp954["goalDataList"] = [];
                            for (var goalDataListi7 = 0; goalDataListi7 < goalDataListLength7; goalDataListi7++) {
                                if (input.readByte() != 0) {
                                    var temp955 = temp954["goalDataList"][goalDataListi7] = {}; //目标数据
                                    temp955["goalId"] = input.readVarInt(false); //目标id
                                    temp955["progress"] = input.readVarInt(false); //当前完成进度
                                    temp955["goalType"] = input.readVarInt(false); //目标类型
                                    temp955["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength7 = input.readShort();
                                    temp955["goalParams"] = new Array(goalParamsLength7);
                                    for (var goalParamsi7 = 0; goalParamsi7 < goalParamsLength7; goalParamsi7++) {
                                        temp955["goalParams"][goalParamsi7] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp954["goalDataList"][goalDataListi7] = null;
                                }
                            }
                        }
                        else {
                            resDailyTaskInfoMessage[tasksi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resDailyTaskInfoMessage);
                    break;
                case 102136 /* TaskModelCMD.CMDResWeeklyTaskTreasureInfoMessage */:
                    var resWeeklyTaskTreasureInfoMessage = {};
                    resWeeklyTaskTreasureInfoMessage["map"] = input.readVarInt(false); //
                    resWeeklyTaskTreasureInfoMessage["x"] = input.readVarInt(false); //
                    resWeeklyTaskTreasureInfoMessage["y"] = input.readVarInt(false); //
                    this.sendNotif(cmd, resWeeklyTaskTreasureInfoMessage);
                    break;
                case 102202 /* TaskModelCMD.CMDResTaskStateMessage */:
                    var stateLength1 = input.readShort();
                    var resTaskStateMessage = [];
                    for (var statei1 = 0; statei1 < stateLength1; statei1++) {
                        if (input.readByte() != 0) {
                            var temp956 = resTaskStateMessage[statei1] = {}; //
                            temp956["id"] = input.readVarInt(false); //
                            temp956["state"] = input.readByte(); //1未接取 2已接取 3已完成 4已提交
                        }
                        else {
                            resTaskStateMessage[statei1] = null;
                        }
                    }
                    this.sendNotif(cmd, resTaskStateMessage);
                    break;
                case 102302 /* TaskModelCMD.CMDResOfferTaskInfoMessage */:
                    var resOfferTaskInfoMessage = {};
                    var choicesLength1 = input.readShort();
                    resOfferTaskInfoMessage["choices"] = [];
                    for (var choicesi1 = 0; choicesi1 < choicesLength1; choicesi1++) {
                        if (input.readByte() != 0) {
                            var temp957 = resOfferTaskInfoMessage["choices"][choicesi1] = {}; //当前可选任务 id-状态（1表示已完成）
                            temp957["id"] = input.readVarInt(false); //
                            temp957["value"] = input.readVarInt(false); //
                        }
                        else {
                            resOfferTaskInfoMessage["choices"][choicesi1] = null;
                        }
                    }
                    var taskLength1 = input.readByte();
                    if (taskLength1 != 0) {
                        var temp958 = resOfferTaskInfoMessage["task"] = {}; //
                        temp958["taskId"] = input.readVarInt(false); //任务id
                        temp958["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                        temp958["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                        var goalDataListLength8 = input.readShort();
                        temp958["goalDataList"] = [];
                        for (var goalDataListi8 = 0; goalDataListi8 < goalDataListLength8; goalDataListi8++) {
                            if (input.readByte() != 0) {
                                var temp959 = temp958["goalDataList"][goalDataListi8] = {}; //目标数据
                                temp959["goalId"] = input.readVarInt(false); //目标id
                                temp959["progress"] = input.readVarInt(false); //当前完成进度
                                temp959["goalType"] = input.readVarInt(false); //目标类型
                                temp959["goalCount"] = input.readVarInt(false); //目标需求数量
                                var goalParamsLength8 = input.readShort();
                                temp959["goalParams"] = new Array(goalParamsLength8);
                                for (var goalParamsi8 = 0; goalParamsi8 < goalParamsLength8; goalParamsi8++) {
                                    temp959["goalParams"][goalParamsi8] = input.readVarInt(false); //目标参数
                                }
                            }
                            else {
                                temp958["goalDataList"][goalDataListi8] = null;
                            }
                        }
                    }
                    this.sendNotif(cmd, resOfferTaskInfoMessage);
                    break;
            }
        };
        return TaskModel;
    }(ModelBase));
    net.TaskModel = TaskModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:174
     */
    var TeleportModel = /** @class */ (function (_super) {
        __extends(TeleportModel, _super);
        function TeleportModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(174004 /* TeleportModelCMD.CMDResTeleportRingCDMessage */);
            thisObj.reg(174007 /* TeleportModelCMD.CMDResTeleportRapidInfoMessage */);
            return _this;
        }
        TeleportModel.ins = function () {
            if (!this._ins)
                this._ins = new TeleportModel();
            return this._ins;
        };
        /**
         *
         * 请求传送（通过deliver配置）
         * @param deliver配置id
         *
         * sendReqTeleportMessage  174001
         */
        TeleportModel.prototype.send1 = function (teleportID, s) {
            var output = this.getO();
            output.writeVarInt(teleportID, false);
            this.send(174001 /* TeleportModelCMD.CMDReqTeleportMessage */, output, s);
        };
        /**
         *
         * 传送戒指传送
         * @param
         * @param
         *
         * sendReqTeleportRingMessage  174002
         */
        TeleportModel.prototype.send2 = function (x, y, s) {
            var output = this.getO();
            output.writeVarInt(x, false);
            output.writeVarInt(y, false);
            this.send(174002 /* TeleportModelCMD.CMDReqTeleportRingMessage */, output, s);
        };
        /**
         *
         * 获取传送戒指cd
         *
         * sendReqTeleportRingCDMessage  174003
         */
        TeleportModel.prototype.send3 = function (s) {
            var output = this.getO();
            this.send(174003 /* TeleportModelCMD.CMDReqTeleportRingCDMessage */, output, s);
        };
        /**
         *
         * 缩地成寸？
         * @param 目标地图
         *
         * sendReqTeleportRapidMessage  174005
         */
        TeleportModel.prototype.send5 = function (map, s) {
            var output = this.getO();
            output.writeVarInt(map, false);
            this.send(174005 /* TeleportModelCMD.CMDReqTeleportRapidMessage */, output, s);
        };
        /**
         *
         * 请求缩地成寸信息
         *
         * sendReqTeleportRapidInfoMessage  174006
         */
        TeleportModel.prototype.send6 = function (s) {
            var output = this.getO();
            this.send(174006 /* TeleportModelCMD.CMDReqTeleportRapidInfoMessage */, output, s);
        };
        /**
         *
         * 请求传送目的地
         * @param 目标地图
         * @param 坐标x
         * @param 坐标y
         *
         * sendReqTeleportObserverMessage  174008
         */
        TeleportModel.prototype.send8 = function (map, x, y, s) {
            var output = this.getO();
            output.writeVarInt(map, false);
            output.writeVarInt(x, false);
            output.writeVarInt(y, false);
            this.send(174008 /* TeleportModelCMD.CMDReqTeleportObserverMessage */, output, s);
        };
        TeleportModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 174004 /* TeleportModelCMD.CMDResTeleportRingCDMessage */:
                    var resTeleportRingCDMessage = input.readVarInt(false); //下次可用时间（时间戳）
                    this.sendNotif(cmd, resTeleportRingCDMessage);
                    break;
                case 174007 /* TeleportModelCMD.CMDResTeleportRapidInfoMessage */:
                    var resTeleportRapidInfoMessage = input.readVarInt(false); //上次传送时间（时间戳） 当前剩余次数以及恢复cd都通过这个来算 leftTimes = (now - time) / cd; remains = leftTimes >= max ? 0 : (now - time) % cd
                    this.sendNotif(cmd, resTeleportRapidInfoMessage);
                    break;
            }
        };
        return TeleportModel;
    }(ModelBase));
    net.TeleportModel = TeleportModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:177
     */
    var ThreeWorldModel = /** @class */ (function (_super) {
        __extends(ThreeWorldModel, _super);
        function ThreeWorldModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(177002 /* ThreeWorldModelCMD.CMDResThreeWorldInfoMessage */);
            return _this;
        }
        ThreeWorldModel.ins = function () {
            if (!this._ins)
                this._ins = new ThreeWorldModel();
            return this._ins;
        };
        /**
         *
         * 请求三界佩文信息
         * @param 唯一id
         *
         * sendReqThreeWorldInfoMessage  177001
         */
        ThreeWorldModel.prototype.send1 = function (uid, s) {
            var output = this.getO();
            output.writeLong(uid);
            this.send(177001 /* ThreeWorldModelCMD.CMDReqThreeWorldInfoMessage */, output, s);
        };
        /**
         *
         * 请求获取三界佩文祝福值
         * @param 唯一id
         * @param 类型
         *
         * sendReqLevelUpThreeWorldMessage  177003
         */
        ThreeWorldModel.prototype.send3 = function (uid, type, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(type, false);
            this.send(177003 /* ThreeWorldModelCMD.CMDReqLevelUpThreeWorldMessage */, output, s);
        };
        /**
         *
         * 请求一键升级
         * @param 唯一id
         * @param 类型
         * @param 消耗数量
         *
         * sendReqThreeWorldOneKeyUpMessage  177004
         */
        ThreeWorldModel.prototype.send4 = function (uid, type, cost, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(type, false);
            output.writeVarInt(cost, false);
            this.send(177004 /* ThreeWorldModelCMD.CMDReqThreeWorldOneKeyUpMessage */, output, s);
        };
        ThreeWorldModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 177002 /* ThreeWorldModelCMD.CMDResThreeWorldInfoMessage */:
                    var resThreeWorldInfoMessage = {};
                    resThreeWorldInfoMessage["uid"] = input.readLong(); //唯一id
                    var beanLength1 = input.readShort();
                    resThreeWorldInfoMessage["bean"] = [];
                    for (var beani1 = 0; beani1 < beanLength1; beani1++) {
                        if (input.readByte() != 0) {
                            var temp1303 = resThreeWorldInfoMessage["bean"][beani1] = {}; //佩文信息
                            temp1303["type"] = input.readVarInt(false); //类型
                            temp1303["level"] = input.readVarInt(false); //等级
                            temp1303["bless"] = input.readVarInt(false); //祝福值
                        }
                        else {
                            resThreeWorldInfoMessage["bean"][beani1] = null;
                        }
                    }
                    this.sendNotif(cmd, resThreeWorldInfoMessage);
                    break;
            }
        };
        return ThreeWorldModel;
    }(ModelBase));
    net.ThreeWorldModel = ThreeWorldModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:7
     */
    var TipModel = /** @class */ (function (_super) {
        __extends(TipModel, _super);
        function TipModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(7001 /* TipModelCMD.CMDResInfoMessage */);
            thisObj.reg(7002 /* TipModelCMD.CMDResWarnMessage */);
            thisObj.reg(7003 /* TipModelCMD.CMDResErrorMessage */);
            thisObj.reg(7004 /* TipModelCMD.CMDResAlertMessage */);
            thisObj.reg(7005 /* TipModelCMD.CMDResDialogMessage */);
            thisObj.reg(7006 /* TipModelCMD.CMDResPostMessage */);
            thisObj.reg(7007 /* TipModelCMD.CMDResBubbleMessage */);
            return _this;
        }
        TipModel.ins = function () {
            if (!this._ins)
                this._ins = new TipModel();
            return this._ins;
        };
        TipModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 7001 /* TipModelCMD.CMDResInfoMessage */:
                    var resInfoMessage = input.readString(); //信息
                    this.sendNotif(cmd, resInfoMessage);
                    break;
                case 7002 /* TipModelCMD.CMDResWarnMessage */:
                    var resWarnMessage = input.readString(); //信息
                    this.sendNotif(cmd, resWarnMessage);
                    break;
                case 7003 /* TipModelCMD.CMDResErrorMessage */:
                    var resErrorMessage = input.readString(); //信息
                    this.sendNotif(cmd, resErrorMessage);
                    break;
                case 7004 /* TipModelCMD.CMDResAlertMessage */:
                    var resAlertMessage = input.readString(); //信息
                    this.sendNotif(cmd, resAlertMessage);
                    break;
                case 7005 /* TipModelCMD.CMDResDialogMessage */:
                    var resDialogMessage = input.readVarInt(false); //超链
                    this.sendNotif(cmd, resDialogMessage);
                    break;
                case 7006 /* TipModelCMD.CMDResPostMessage */:
                    var resPostMessage = input.readVarInt(false); //大字报id
                    this.sendNotif(cmd, resPostMessage);
                    break;
                case 7007 /* TipModelCMD.CMDResBubbleMessage */:
                    var resBubbleMessage = {};
                    resBubbleMessage["type"] = input.readVarInt(false); //类型：1获得排行第一称号，2移除排行第一称号
                    var paramsLength = input.readShort();
                    resBubbleMessage["params"] = new Array(paramsLength);
                    for (var paramsi1 = 0; paramsi1 < paramsLength; paramsi1++) {
                        resBubbleMessage["params"][paramsi1] = input.readString(); //参数
                    }
                    this.sendNotif(cmd, resBubbleMessage);
                    break;
            }
        };
        return TipModel;
    }(ModelBase));
    net.TipModel = TipModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:309
     */
    var TitleModel = /** @class */ (function (_super) {
        __extends(TitleModel, _super);
        function TitleModel() {
            return _super.call(this) || this;
        }
        TitleModel.ins = function () {
            if (!this._ins)
                this._ins = new TitleModel();
            return this._ins;
        };
        TitleModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
            }
        };
        return TitleModel;
    }(ModelBase));
    net.TitleModel = TitleModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:189
     */
    var TowerModel = /** @class */ (function (_super) {
        __extends(TowerModel, _super);
        function TowerModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(189002 /* TowerModelCMD.CMDResTowerMessage */);
            thisObj.reg(189004 /* TowerModelCMD.CMDResTowerRankMessage */);
            return _this;
        }
        TowerModel.ins = function () {
            if (!this._ins)
                this._ins = new TowerModel();
            return this._ins;
        };
        /**
         *
         * 请求玩家开天塔信息
         *
         * sendReqTowerMessage  189001
         */
        TowerModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(189001 /* TowerModelCMD.CMDReqTowerMessage */, output, s);
        };
        /**
         *
         * 请求玩家开天塔排行榜信息
         *
         * sendReqTowerRankMessage  189003
         */
        TowerModel.prototype.send3 = function (s) {
            var output = this.getO();
            this.send(189003 /* TowerModelCMD.CMDReqTowerRankMessage */, output, s);
        };
        TowerModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 189002 /* TowerModelCMD.CMDResTowerMessage */:
                    var resTowerMessage = {};
                    resTowerMessage["stage"] = input.readVarInt(false); //目前通关最高层数
                    resTowerMessage["count"] = input.readVarInt(false); //今日剩余次数
                    var historyLength1 = input.readShort();
                    resTowerMessage["history"] = new Array(historyLength1);
                    for (var historyi1 = 0; historyi1 < historyLength1; historyi1++) {
                        resTowerMessage["history"][historyi1] = input.readVarInt(false); //已通关层数
                    }
                    this.sendNotif(cmd, resTowerMessage);
                    break;
                case 189004 /* TowerModelCMD.CMDResTowerRankMessage */:
                    var beansLength1 = input.readShort();
                    var resTowerRankMessage = [];
                    for (var beansi1 = 0; beansi1 < beansLength1; beansi1++) {
                        if (input.readByte() != 0) {
                            var temp745 = resTowerRankMessage[beansi1] = {}; //排行榜信息
                            temp745["rank"] = input.readVarInt(false); //名次
                            temp745["rid"] = input.readLong(); //玩家id
                            temp745["career"] = input.readVarInt(false); //玩家职业
                            temp745["name"] = input.readString(); //玩家名字
                            temp745["stage"] = input.readVarInt(false); //最高层数
                        }
                        else {
                            resTowerRankMessage[beansi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resTowerRankMessage);
                    break;
            }
        };
        return TowerModel;
    }(ModelBase));
    net.TowerModel = TowerModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:104
     */
    var TradeModel = /** @class */ (function (_super) {
        __extends(TradeModel, _super);
        function TradeModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(104011 /* TradeModelCMD.CMDResTradeApplyMessage */);
            thisObj.reg(104012 /* TradeModelCMD.CMDResTradeTradingMessage */);
            thisObj.reg(104013 /* TradeModelCMD.CMDResTradeCancelMessage */);
            thisObj.reg(104014 /* TradeModelCMD.CMDResTradeFinishMessage */);
            return _this;
        }
        TradeModel.ins = function () {
            if (!this._ins)
                this._ins = new TradeModel();
            return this._ins;
        };
        /**
         *
         * 请求交易
         * @param 请求交易对象
         *
         * sendReqTradeTradingMessage  104001
         */
        TradeModel.prototype.send1 = function (oppId, s) {
            var output = this.getO();
            output.writeLong(oppId);
            this.send(104001 /* TradeModelCMD.CMDReqTradeTradingMessage */, output, s);
        };
        /**
         *
         * 同意进行交易
         * @param 同意的玩家id
         *
         * sendReqTradeAcceptMessage  104002
         */
        TradeModel.prototype.send2 = function (roleId, s) {
            var output = this.getO();
            output.writeLong(roleId);
            this.send(104002 /* TradeModelCMD.CMDReqTradeAcceptMessage */, output, s);
        };
        /**
         *
         * 请求取消交易
         *
         * sendReqTradeCancelMessage  104003
         */
        TradeModel.prototype.send3 = function (s) {
            var output = this.getO();
            this.send(104003 /* TradeModelCMD.CMDReqTradeCancelMessage */, output, s);
        };
        /**
         *
         * 请求锁定交易
         *
         * sendReqTradeLockMessage  104004
         */
        TradeModel.prototype.send4 = function (s) {
            var output = this.getO();
            this.send(104004 /* TradeModelCMD.CMDReqTradeLockMessage */, output, s);
        };
        /**
         *
         * 请求取消锁定
         *
         * sendReqTradeUnLockMessage  104005
         */
        TradeModel.prototype.send5 = function (s) {
            var output = this.getO();
            this.send(104005 /* TradeModelCMD.CMDReqTradeUnLockMessage */, output, s);
        };
        /**
         *
         * 请求完成交易
         *
         * sendReqTradeDealMessage  104006
         */
        TradeModel.prototype.send6 = function (s) {
            var output = this.getO();
            this.send(104006 /* TradeModelCMD.CMDReqTradeDealMessage */, output, s);
        };
        /**
         *
         * 请求添加交易物品
         * @param 背包类型
         * @param 位置
         * @param 数量
         * @param 放到交易的格子id
         *
         * sendReqTradeAppendMessage  104007
         */
        TradeModel.prototype.send7 = function (where, index, count, grid, s) {
            var output = this.getO();
            output.writeVarInt(where, false);
            output.writeVarInt(index, false);
            output.writeVarInt(count, false);
            output.writeVarInt(grid, false);
            this.send(104007 /* TradeModelCMD.CMDReqTradeAppendMessage */, output, s);
        };
        /**
         *
         * 请求移除交易物品
         * @param 格子
         *
         * sendReqTradeRemoveMessage  104008
         */
        TradeModel.prototype.send8 = function (grid, s) {
            var output = this.getO();
            output.writeVarInt(grid, false);
            this.send(104008 /* TradeModelCMD.CMDReqTradeRemoveMessage */, output, s);
        };
        TradeModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 104011 /* TradeModelCMD.CMDResTradeApplyMessage */:
                    var resTradeApplyMessage = {};
                    var roleLength1 = input.readByte();
                    if (roleLength1 != 0) {
                        var temp62 = resTradeApplyMessage["role"] = {}; //玩家信息
                        temp62["uid"] = input.readLong(); //玩家id
                        temp62["name"] = input.readString(); //玩家名字
                        temp62["union"] = input.readString(); //行会名字
                    }
                    resTradeApplyMessage["expire"] = input.readVarInt(false); //过期时间
                    this.sendNotif(cmd, resTradeApplyMessage);
                    break;
                case 104012 /* TradeModelCMD.CMDResTradeTradingMessage */:
                    var tradeLength1 = input.readShort();
                    var resTradeTradingMessage = [];
                    for (var tradei1 = 0; tradei1 < tradeLength1; tradei1++) {
                        if (input.readByte() != 0) {
                            var temp63 = resTradeTradingMessage[tradei1] = {}; //
                            var roleLength2 = input.readByte();
                            if (roleLength2 != 0) {
                                var temp64 = temp63["role"] = {}; //玩家信息
                                temp64["uid"] = input.readLong(); //玩家id
                                temp64["name"] = input.readString(); //玩家名字
                                temp64["union"] = input.readString(); //行会名字
                            }
                            temp63["state"] = input.readVarInt(false); //当前状态 0没有 1已锁定 2已点击交易
                            var itemsLength1 = input.readShort();
                            temp63["items"] = [];
                            for (var itemsi1 = 0; itemsi1 < itemsLength1; itemsi1++) {
                                if (input.readByte() != 0) {
                                    var temp65 = temp63["items"][itemsi1] = {}; //物品列表
                                    temp65["index"] = input.readVarInt(false); //
                                    var itemLength1 = input.readByte();
                                    if (itemLength1 != 0) {
                                        var temp66 = temp65["item"] = {}; //
                                        temp66["uid"] = input.readLong(); //唯一id
                                        temp66["itemId"] = input.readVarInt(false); //道具配置id
                                        temp66["count"] = input.readVarInt(false); //数量
                                        temp66["expire"] = input.readVarInt(false); //过期时间
                                        temp66["uTimes"] = input.readVarInt(false); //已经使用的次数
                                        temp66["time"] = input.readVarInt(false); //道具获得时间
                                        var paramsLength1 = input.readShort();
                                        temp66["params"] = new Array(paramsLength1);
                                        for (var paramsi1 = 0; paramsi1 < paramsLength1; paramsi1++) {
                                            temp66["params"][paramsi1] = input.readVarInt(false); //道具参数
                                        }
                                        var equipDataLength1 = input.readByte();
                                        if (equipDataLength1 != 0) {
                                            var temp67 = temp66["equipData"] = {}; //装备属性（null表示没有）
                                            temp67["durable"] = input.readVarInt(false); //消耗耐久
                                            temp67["starLevel"] = input.readVarInt(false); //升星等级
                                            temp67["starLock"] = input.readVarInt(false); //被锁星级
                                            temp67["starExp"] = input.readVarInt(false); //升星祝福值
                                            temp67["quenchingLevel"] = input.readVarInt(false); //淬炼等级
                                            temp67["awakeLevel"] = input.readVarInt(false); //觉醒等级
                                            temp67["mix"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                            temp67["spiritLevel"] = input.readVarInt(false); //注灵等级
                                            temp67["spiritValue"] = input.readVarInt(false); //注灵祝福值
                                            temp67["fusedSoulEquipId"] = input.readVarInt(false); //融合的道具id 0表示没有融合
                                            temp67["sign"] = input.readString(); //签名
                                            var destinyAttrsLength1 = input.readShort();
                                            temp67["destinyAttrs"] = [];
                                            for (var destinyAttrsi1 = 0; destinyAttrsi1 < destinyAttrsLength1; destinyAttrsi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp68 = temp67["destinyAttrs"][destinyAttrsi1] = {}; //命运属性
                                                    temp68["career"] = input.readVarInt(false); //职业限定
                                                    temp68["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp68["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp67["destinyAttrs"][destinyAttrsi1] = null;
                                                }
                                            }
                                            var superAttrsLength1 = input.readShort();
                                            temp67["superAttrs"] = [];
                                            for (var superAttrsi1 = 0; superAttrsi1 < superAttrsLength1; superAttrsi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp69 = temp67["superAttrs"][superAttrsi1] = {}; //极品属性
                                                    temp69["career"] = input.readVarInt(false); //职业限定
                                                    temp69["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp69["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp67["superAttrs"][superAttrsi1] = null;
                                                }
                                            }
                                            var identifyAttrsLength1 = input.readShort();
                                            temp67["identifyAttrs"] = [];
                                            for (var identifyAttrsi1 = 0; identifyAttrsi1 < identifyAttrsLength1; identifyAttrsi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp70 = temp67["identifyAttrs"][identifyAttrsi1] = {}; //鉴定属性
                                                    temp70["career"] = input.readVarInt(false); //职业限定
                                                    temp70["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp70["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp67["identifyAttrs"][identifyAttrsi1] = null;
                                                }
                                            }
                                            var xiLianAttrsLength1 = input.readShort();
                                            temp67["xiLianAttrs"] = [];
                                            for (var xiLianAttrsi1 = 0; xiLianAttrsi1 < xiLianAttrsLength1; xiLianAttrsi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp71 = temp67["xiLianAttrs"][xiLianAttrsi1] = {}; //配饰洗练属性
                                                    temp71["career"] = input.readVarInt(false); //职业限定
                                                    temp71["attributeType"] = input.readVarInt(false); //属性类型
                                                    temp71["attributeValue"] = input.readLong(); //属性值
                                                }
                                                else {
                                                    temp67["xiLianAttrs"][xiLianAttrsi1] = null;
                                                }
                                            }
                                            temp67["signExpire"] = input.readVarInt(false); //签名过期时间 时间戳
                                            temp67["growLevel"] = input.readVarInt(false); //成长等级
                                            temp67["growExp"] = input.readVarInt(false); //成长经验
                                            var bestAttrsLength1 = input.readShort();
                                            temp67["bestAttrs"] = new Array(bestAttrsLength1);
                                            for (var bestAttrsi1 = 0; bestAttrsi1 < bestAttrsLength1; bestAttrsi1++) {
                                                temp67["bestAttrs"][bestAttrsi1] = input.readVarInt(false); //极品属性（新）
                                            }
                                            var soulAttrsLength1 = input.readShort();
                                            temp67["soulAttrs"] = new Array(soulAttrsLength1);
                                            for (var soulAttrsi1 = 0; soulAttrsi1 < soulAttrsLength1; soulAttrsi1++) {
                                                temp67["soulAttrs"][soulAttrsi1] = input.readVarInt(false); //心魂属性
                                            }
                                            var godsAttrsLength1 = input.readShort();
                                            temp67["godsAttrs"] = new Array(godsAttrsLength1);
                                            for (var godsAttrsi1 = 0; godsAttrsi1 < godsAttrsLength1; godsAttrsi1++) {
                                                temp67["godsAttrs"][godsAttrsi1] = input.readVarInt(false); //额外神级属性
                                            }
                                            temp67["qualification"] = input.readVarInt(false); //资质
                                            var specialDurableLength1 = input.readShort();
                                            temp67["specialDurable"] = [];
                                            for (var specialDurablei1 = 0; specialDurablei1 < specialDurableLength1; specialDurablei1++) {
                                                if (input.readByte() != 0) {
                                                    var temp72 = temp67["specialDurable"][specialDurablei1] = {}; //特殊耐久消耗值
                                                    temp72["type"] = input.readVarInt(false); //类型
                                                    temp72["value"] = input.readVarInt(false); //已消耗值
                                                }
                                                else {
                                                    temp67["specialDurable"][specialDurablei1] = null;
                                                }
                                            }
                                        }
                                        var immobilizationLength1 = input.readByte();
                                        if (immobilizationLength1 != 0) {
                                            var temp73 = temp66["immobilization"] = {}; //固化数据
                                            temp73["action"] = input.readVarInt(false); //产生行为
                                            temp73["expire"] = input.readVarInt(false); //过期时间 时间戳
                                        }
                                        var fromLength1 = input.readByte();
                                        if (fromLength1 != 0) {
                                            var temp74 = temp66["from"] = {}; //来源
                                            temp74["action"] = input.readVarInt(false); //产生行为
                                            temp74["firstRole"] = input.readLong(); //第一个玩家id
                                            temp74["firstRoleName"] = input.readString(); //第一个玩家名字
                                            var paramsLength2 = input.readShort();
                                            temp74["params"] = [];
                                            for (var paramsi2 = 0; paramsi2 < paramsLength2; paramsi2++) {
                                                if (input.readByte() != 0) {
                                                    var temp75 = temp74["params"][paramsi2] = {}; //
                                                    temp75["key"] = input.readVarInt(false); //
                                                    temp75["value"] = input.readString(); //
                                                }
                                                else {
                                                    temp74["params"][paramsi2] = null;
                                                }
                                            }
                                        }
                                        temp66["saveCount"] = input.readVarInt(false); //(月光宝盒)存储数量
                                        var spriteDataLength1 = input.readByte();
                                        if (spriteDataLength1 != 0) {
                                            var temp76 = temp66["spriteData"] = {}; //灵兽数据（null表示没有）
                                            temp76["level"] = input.readVarInt(false); //灵兽等级
                                            temp76["exp"] = input.readVarInt(false); //灵兽经验
                                            temp76["skin"] = input.readVarInt(false); //灵兽皮肤
                                            var skillsLength1 = input.readShort();
                                            temp76["skills"] = [];
                                            for (var skillsi1 = 0; skillsi1 < skillsLength1; skillsi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp77 = temp76["skills"][skillsi1] = {}; //灵兽出战技能
                                                    temp77["id"] = input.readVarInt(false); //
                                                    temp77["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp76["skills"][skillsi1] = null;
                                                }
                                            }
                                            var ownerSkillsLength1 = input.readShort();
                                            temp76["ownerSkills"] = [];
                                            for (var ownerSkillsi1 = 0; ownerSkillsi1 < ownerSkillsLength1; ownerSkillsi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp78 = temp76["ownerSkills"][ownerSkillsi1] = {}; //灵兽拥有的技能
                                                    temp78["id"] = input.readVarInt(false); //
                                                    temp78["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp76["ownerSkills"][ownerSkillsi1] = null;
                                                }
                                            }
                                            var ownerSkinsLength1 = input.readShort();
                                            temp76["ownerSkins"] = [];
                                            for (var ownerSkinsi1 = 0; ownerSkinsi1 < ownerSkinsLength1; ownerSkinsi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp79 = temp76["ownerSkins"][ownerSkinsi1] = {}; //灵兽拥有的皮肤
                                                    temp79["id"] = input.readVarInt(false); //
                                                    temp79["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp76["ownerSkins"][ownerSkinsi1] = null;
                                                }
                                            }
                                            var absorbExpLength1 = input.readShort();
                                            temp76["absorbExp"] = [];
                                            for (var absorbExpi1 = 0; absorbExpi1 < absorbExpLength1; absorbExpi1++) {
                                                if (input.readByte() != 0) {
                                                    var temp80 = temp76["absorbExp"][absorbExpi1] = {}; //灵兽吸收经验值
                                                    temp80["id"] = input.readVarInt(false); //
                                                    temp80["value"] = input.readVarInt(false); //
                                                }
                                                else {
                                                    temp76["absorbExp"][absorbExpi1] = null;
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    temp63["items"][itemsi1] = null;
                                }
                            }
                        }
                        else {
                            resTradeTradingMessage[tradei1] = null;
                        }
                    }
                    this.sendNotif(cmd, resTradeTradingMessage);
                    break;
                case 104013 /* TradeModelCMD.CMDResTradeCancelMessage */:
                    this.sendNotif(cmd);
                    break;
                case 104014 /* TradeModelCMD.CMDResTradeFinishMessage */:
                    var resTradeFinishMessage = input.readBoolean(); //是否成功
                    this.sendNotif(cmd, resTradeFinishMessage);
                    break;
            }
        };
        return TradeModel;
    }(ModelBase));
    net.TradeModel = TradeModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:227
     */
    var TreasureHuntModel = /** @class */ (function (_super) {
        __extends(TreasureHuntModel, _super);
        function TreasureHuntModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(227002 /* TreasureHuntModelCMD.CMDResTreasureHuntInfoMessage */);
            return _this;
        }
        TreasureHuntModel.ins = function () {
            if (!this._ins)
                this._ins = new TreasureHuntModel();
            return this._ins;
        };
        /**
         *
         *
         *
         * sendReqTreasureHuntInfoMessage  227001
         */
        TreasureHuntModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(227001 /* TreasureHuntModelCMD.CMDReqTreasureHuntInfoMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqTreasureHuntAcquireMessage  227003
         */
        TreasureHuntModel.prototype.send3 = function (s) {
            var output = this.getO();
            this.send(227003 /* TreasureHuntModelCMD.CMDReqTreasureHuntAcquireMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqTreasureHuntHeadMessage  227004
         */
        TreasureHuntModel.prototype.send4 = function (s) {
            var output = this.getO();
            this.send(227004 /* TreasureHuntModelCMD.CMDReqTreasureHuntHeadMessage */, output, s);
        };
        TreasureHuntModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 227002 /* TreasureHuntModelCMD.CMDResTreasureHuntInfoMessage */:
                    var resTreasureHuntInfoMessage = {};
                    resTreasureHuntInfoMessage["map"] = input.readVarInt(false); //
                    resTreasureHuntInfoMessage["x"] = input.readVarInt(false); //
                    resTreasureHuntInfoMessage["y"] = input.readVarInt(false); //
                    this.sendNotif(cmd, resTreasureHuntInfoMessage);
                    break;
            }
        };
        return TreasureHuntModel;
    }(ModelBase));
    net.TreasureHuntModel = TreasureHuntModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:168
     */
    var TrumpModel = /** @class */ (function (_super) {
        __extends(TrumpModel, _super);
        function TrumpModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(168002 /* TrumpModelCMD.CMDResAdvanceTrumpInfoMessage */);
            thisObj.reg(168006 /* TrumpModelCMD.CMDResAdvanceTrumpWareMessage */);
            return _this;
        }
        TrumpModel.ins = function () {
            if (!this._ins)
                this._ins = new TrumpModel();
            return this._ins;
        };
        /**
         *
         * 请求法宝信息
         *
         * sendReqAdvanceTrumpInfoMessage  168001
         */
        TrumpModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(168001 /* TrumpModelCMD.CMDReqAdvanceTrumpInfoMessage */, output, s);
        };
        /**
         *
         * 升级法宝
         * @param 法宝id
         *
         * sendReqAdvanceTrumpUpgradeMessage  168003
         */
        TrumpModel.prototype.send3 = function (trumpId, s) {
            var output = this.getO();
            output.writeVarInt(trumpId, false);
            this.send(168003 /* TrumpModelCMD.CMDReqAdvanceTrumpUpgradeMessage */, output, s);
        };
        /**
         *
         * 升级天赋
         * @param 天赋id
         *
         * sendReqAdvanceTrumpTalentUpgradeMessage  168004
         */
        TrumpModel.prototype.send4 = function (talnetId, s) {
            var output = this.getO();
            output.writeVarInt(talnetId, false);
            this.send(168004 /* TrumpModelCMD.CMDReqAdvanceTrumpTalentUpgradeMessage */, output, s);
        };
        /**
         *
         *
         * @param 请求穿戴的法宝id 0表示脱下
         *
         * sendReqAdvanceTrumpWareMessage  168005
         */
        TrumpModel.prototype.send5 = function (ware, s) {
            var output = this.getO();
            output.writeVarInt(ware, false);
            this.send(168005 /* TrumpModelCMD.CMDReqAdvanceTrumpWareMessage */, output, s);
        };
        TrumpModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 168002 /* TrumpModelCMD.CMDResAdvanceTrumpInfoMessage */:
                    var resAdvanceTrumpInfoMessage = {};
                    var trumpLength1 = input.readShort();
                    resAdvanceTrumpInfoMessage["trump"] = [];
                    for (var trumpi1 = 0; trumpi1 < trumpLength1; trumpi1++) {
                        if (input.readByte() != 0) {
                            var temp809 = resAdvanceTrumpInfoMessage["trump"][trumpi1] = {}; //法宝信息
                            temp809["id"] = input.readVarInt(false); //id
                            temp809["level"] = input.readVarInt(false); //等级
                        }
                        else {
                            resAdvanceTrumpInfoMessage["trump"][trumpi1] = null;
                        }
                    }
                    var talentLength1 = input.readShort();
                    resAdvanceTrumpInfoMessage["talent"] = [];
                    for (var talenti1 = 0; talenti1 < talentLength1; talenti1++) {
                        if (input.readByte() != 0) {
                            var temp810 = resAdvanceTrumpInfoMessage["talent"][talenti1] = {}; //天赋信息
                            temp810["id"] = input.readVarInt(false); //id
                            temp810["level"] = input.readVarInt(false); //等级
                        }
                        else {
                            resAdvanceTrumpInfoMessage["talent"][talenti1] = null;
                        }
                    }
                    resAdvanceTrumpInfoMessage["ware"] = input.readVarInt(false); //穿戴
                    this.sendNotif(cmd, resAdvanceTrumpInfoMessage);
                    break;
                case 168006 /* TrumpModelCMD.CMDResAdvanceTrumpWareMessage */:
                    var resAdvanceTrumpWareMessage = input.readVarInt(false); //穿戴
                    this.sendNotif(cmd, resAdvanceTrumpWareMessage);
                    break;
            }
        };
        return TrumpModel;
    }(ModelBase));
    net.TrumpModel = TrumpModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:349
     */
    var TrumpPassModel = /** @class */ (function (_super) {
        __extends(TrumpPassModel, _super);
        function TrumpPassModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(349002 /* TrumpPassModelCMD.CMDResTrumpPassInfoMessage */);
            thisObj.reg(349005 /* TrumpPassModelCMD.CMDResTrumpPassLevelChangeMessage */);
            thisObj.reg(349007 /* TrumpPassModelCMD.CMDResTrumpPassWareMessage */);
            thisObj.reg(349009 /* TrumpPassModelCMD.CMDResTrumpPassUnlockMessage */);
            return _this;
        }
        TrumpPassModel.ins = function () {
            if (!this._ins)
                this._ins = new TrumpPassModel();
            return this._ins;
        };
        /**
         *
         * 请求法宝通行证信息
         * @param 玩家或者元神唯一id
         *
         * sendReqTrumpPassInfoMessage  349001
         */
        TrumpPassModel.prototype.send1 = function (uId, s) {
            var output = this.getO();
            output.writeLong(uId);
            this.send(349001 /* TrumpPassModelCMD.CMDReqTrumpPassInfoMessage */, output, s);
        };
        /**
         *
         * 请求进阶法宝通行证
         * @param 玩家或者元神唯一id
         * @param 法宝通行证类型
         *
         * sendReqTrumpPassUpgradeMessage  349003
         */
        TrumpPassModel.prototype.send3 = function (uId, type, s) {
            var output = this.getO();
            output.writeLong(uId);
            output.writeVarInt(type, false);
            this.send(349003 /* TrumpPassModelCMD.CMDReqTrumpPassUpgradeMessage */, output, s);
        };
        /**
         *
         * 请求购买法宝通行证等级
         * @param 玩家或者元神唯一id
         * @param 法宝通行证类型
         * @param 购买的目标等级
         *
         * sendReqTrumpPassBuyLevelMessage  349004
         */
        TrumpPassModel.prototype.send4 = function (uId, type, targetLevel, s) {
            var output = this.getO();
            output.writeLong(uId);
            output.writeVarInt(type, false);
            output.writeVarInt(targetLevel, false);
            this.send(349004 /* TrumpPassModelCMD.CMDReqTrumpPassBuyLevelMessage */, output, s);
        };
        /**
         *
         *
         * @param 玩家或者元神唯一id
         * @param 请求穿戴的法宝类型 0表示脱下
         *
         * sendReqTrumpPassWareMessage  349006
         */
        TrumpPassModel.prototype.send6 = function (uId, ware, s) {
            var output = this.getO();
            output.writeLong(uId);
            output.writeVarInt(ware, false);
            this.send(349006 /* TrumpPassModelCMD.CMDReqTrumpPassWareMessage */, output, s);
        };
        /**
         *
         * 请求解锁秘法版通行证
         * @param 玩家或者元神唯一id
         * @param 法宝通行证类型
         *
         * sendReqTrumpPassUnlockMessage  349008
         */
        TrumpPassModel.prototype.send8 = function (uId, type, s) {
            var output = this.getO();
            output.writeLong(uId);
            output.writeVarInt(type, false);
            this.send(349008 /* TrumpPassModelCMD.CMDReqTrumpPassUnlockMessage */, output, s);
        };
        TrumpPassModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 349002 /* TrumpPassModelCMD.CMDResTrumpPassInfoMessage */:
                    var resTrumpPassInfoMessage = {};
                    resTrumpPassInfoMessage["uId"] = input.readLong(); //玩家或者元神唯一id
                    var trumpLength1 = input.readShort();
                    resTrumpPassInfoMessage["trump"] = [];
                    for (var trumpi1 = 0; trumpi1 < trumpLength1; trumpi1++) {
                        if (input.readByte() != 0) {
                            var temp15 = resTrumpPassInfoMessage["trump"][trumpi1] = {}; //法宝信息
                            temp15["type"] = input.readVarInt(false); //通行证类型
                            temp15["exp"] = input.readVarInt(false); //经验
                            temp15["level"] = input.readVarInt(false); //通行证等级
                            temp15["unlock"] = input.readBoolean(); //是否解锁
                        }
                        else {
                            resTrumpPassInfoMessage["trump"][trumpi1] = null;
                        }
                    }
                    var talentLength1 = input.readShort();
                    resTrumpPassInfoMessage["talent"] = [];
                    for (var talenti1 = 0; talenti1 < talentLength1; talenti1++) {
                        if (input.readByte() != 0) {
                            var temp16 = resTrumpPassInfoMessage["talent"][talenti1] = {}; //天赋信息
                            temp16["id"] = input.readVarInt(false); //天赋id
                            temp16["talentLevel"] = input.readVarInt(false); //天赋等级
                        }
                        else {
                            resTrumpPassInfoMessage["talent"][talenti1] = null;
                        }
                    }
                    resTrumpPassInfoMessage["ware"] = input.readVarInt(false); //当前穿戴的类型
                    this.sendNotif(cmd, resTrumpPassInfoMessage);
                    break;
                case 349005 /* TrumpPassModelCMD.CMDResTrumpPassLevelChangeMessage */:
                    var resTrumpPassLevelChangeMessage = {};
                    resTrumpPassLevelChangeMessage["uId"] = input.readLong(); //玩家或者元神唯一id
                    var levelChangeLength1 = input.readByte();
                    if (levelChangeLength1 != 0) {
                        var temp17 = resTrumpPassLevelChangeMessage["levelChange"] = {}; //等级信息
                        temp17["type"] = input.readVarInt(false); //通行证类型
                        temp17["exp"] = input.readVarInt(false); //经验
                        temp17["level"] = input.readVarInt(false); //通行证等级
                        temp17["unlock"] = input.readBoolean(); //是否解锁
                    }
                    var talentChangeLength1 = input.readShort();
                    resTrumpPassLevelChangeMessage["talentChange"] = [];
                    for (var talentChangei1 = 0; talentChangei1 < talentChangeLength1; talentChangei1++) {
                        if (input.readByte() != 0) {
                            var temp18 = resTrumpPassLevelChangeMessage["talentChange"][talentChangei1] = {}; //天赋信息
                            temp18["id"] = input.readVarInt(false); //天赋id
                            temp18["talentLevel"] = input.readVarInt(false); //天赋等级
                        }
                        else {
                            resTrumpPassLevelChangeMessage["talentChange"][talentChangei1] = null;
                        }
                    }
                    this.sendNotif(cmd, resTrumpPassLevelChangeMessage);
                    break;
                case 349007 /* TrumpPassModelCMD.CMDResTrumpPassWareMessage */:
                    var resTrumpPassWareMessage = {};
                    resTrumpPassWareMessage["uId"] = input.readLong(); //玩家或者元神唯一id
                    resTrumpPassWareMessage["ware"] = input.readVarInt(false); //穿戴类型
                    this.sendNotif(cmd, resTrumpPassWareMessage);
                    break;
                case 349009 /* TrumpPassModelCMD.CMDResTrumpPassUnlockMessage */:
                    var resTrumpPassUnlockMessage = {};
                    resTrumpPassUnlockMessage["uId"] = input.readLong(); //玩家或者元神唯一id
                    resTrumpPassUnlockMessage["type"] = input.readVarInt(false); //解锁的类型
                    this.sendNotif(cmd, resTrumpPassUnlockMessage);
                    break;
            }
        };
        return TrumpPassModel;
    }(ModelBase));
    net.TrumpPassModel = TrumpPassModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:23
     */
    var UnionModel = /** @class */ (function (_super) {
        __extends(UnionModel, _super);
        function UnionModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(23003 /* UnionModelCMD.CMDResSendAllUnionInfoMessage */);
            thisObj.reg(23005 /* UnionModelCMD.CMDResSendPlayerUnionInfoMessage */);
            thisObj.reg(23013 /* UnionModelCMD.CMDResSendCreateUnionSuccessMessage */);
            thisObj.reg(23060 /* UnionModelCMD.CMDResDissolveUnionMessage */);
            thisObj.reg(23024 /* UnionModelCMD.CMDResSendUnionSetUpMessage */);
            thisObj.reg(23016 /* UnionModelCMD.CMDResSendChangeAnnounceMessage */);
            thisObj.reg(23057 /* UnionModelCMD.CMDResInviteForEnterUnionMessage */);
            thisObj.reg(23012 /* UnionModelCMD.CMDResSendApplyListInfoMessage */);
            thisObj.reg(23002 /* UnionModelCMD.CMDResApplyForUnionStateChangeMessage */);
            thisObj.reg(23017 /* UnionModelCMD.CMDResSendChangePositionMessage */);
            thisObj.reg(23015 /* UnionModelCMD.CMDResSendQuitUnionSuccessMessage */);
            thisObj.reg(23072 /* UnionModelCMD.CMDResUnionEventsMessage */);
            thisObj.reg(23073 /* UnionModelCMD.CMDResUnionBossRankingChangeMessage */);
            thisObj.reg(23074 /* UnionModelCMD.CMDResUnionEventUpdateMessage */);
            thisObj.reg(23201 /* UnionModelCMD.CMDResUnionFundChangedMessage */);
            thisObj.reg(23202 /* UnionModelCMD.CMDResUnionLevelChangedMessage */);
            thisObj.reg(23203 /* UnionModelCMD.CMDResUnionIntensifyInfoMessage */);
            thisObj.reg(23204 /* UnionModelCMD.CMDResUnionDonateMessage */);
            thisObj.reg(23302 /* UnionModelCMD.CMDResRedPackPanelInfoMessage */);
            thisObj.reg(23304 /* UnionModelCMD.CMDResRedPackShowMessage */);
            thisObj.reg(23306 /* UnionModelCMD.CMDResRedPackGetMessage */);
            thisObj.reg(23307 /* UnionModelCMD.CMDResUnionMemberAddMessage */);
            thisObj.reg(23308 /* UnionModelCMD.CMDResUnionMemberRemoveMessage */);
            thisObj.reg(23411 /* UnionModelCMD.CMDResUnionAllyMessage */);
            thisObj.reg(23412 /* UnionModelCMD.CMDResUnionAlignMessage */);
            thisObj.reg(23423 /* UnionModelCMD.CMDResUnionImpeachMessage */);
            thisObj.reg(23502 /* UnionModelCMD.CMDResUnionWelfareInfoMessage */);
            thisObj.reg(23504 /* UnionModelCMD.CMDResGetUnionWelfareMessage */);
            thisObj.reg(23602 /* UnionModelCMD.CMDResUnionRankingInfoMessage */);
            thisObj.reg(23604 /* UnionModelCMD.CMDResUnionAllyInformMessage */);
            thisObj.reg(23612 /* UnionModelCMD.CMDResUnionTechnologyInfoMessage */);
            return _this;
        }
        UnionModel.ins = function () {
            if (!this._ins)
                this._ins = new UnionModel();
            return this._ins;
        };
        /**
         *
         * 请求获取所有帮会信息
         *
         * sendReqGetAllUnionInfoMessage  23008
         */
        UnionModel.prototype.send8 = function (s) {
            var output = this.getO();
            this.send(23008 /* UnionModelCMD.CMDReqGetAllUnionInfoMessage */, output, s);
        };
        /**
         *
         * 请求获取玩家帮会信息
         *
         * sendReqGetPlayerUnionInfoMessage  23010
         */
        UnionModel.prototype.send10 = function (s) {
            var output = this.getO();
            this.send(23010 /* UnionModelCMD.CMDReqGetPlayerUnionInfoMessage */, output, s);
        };
        /**
         *
         * 申请创建帮会
         * @param 帮会名
         * @param 创建方式 0普通创建 1通过国王NPC创建
         * @param 等级限制
         * @param 是否自动同意申请 0否 1是
         *
         * sendReqCreateUnionMessage  23004
         */
        UnionModel.prototype.send4 = function (name, way, joinLevelCondition, autoJoin, s) {
            var output = this.getO();
            output.writeString(name);
            output.writeVarInt(way, false);
            output.writeVarInt(joinLevelCondition, false);
            output.writeVarInt(autoJoin, false);
            this.send(23004 /* UnionModelCMD.CMDReqCreateUnionMessage */, output, s);
        };
        /**
         *
         * 申请解散帮会
         *
         * sendReqDissolveUnionMessage  23059
         */
        UnionModel.prototype.send59 = function (s) {
            var output = this.getO();
            this.send(23059 /* UnionModelCMD.CMDReqDissolveUnionMessage */, output, s);
        };
        /**
         *
         * 请求修改行会设置
         * @param 等级限制
         * @param 是否自动同意申请 0否 1是
         *
         * sendReqChangeUnionSettingsMessage  23023
         */
        UnionModel.prototype.send23 = function (joinLevelCondition, autoJoin, s) {
            var output = this.getO();
            output.writeVarInt(joinLevelCondition, false);
            output.writeVarInt(autoJoin, false);
            this.send(23023 /* UnionModelCMD.CMDReqChangeUnionSettingsMessage */, output, s);
        };
        /**
         *
         * 请求修改行会公告
         * @param 新帮会公告
         *
         * sendReqChangeAnnouncementMessage  23006
         */
        UnionModel.prototype.send6 = function (announcement, s) {
            var output = this.getO();
            output.writeString(announcement);
            this.send(23006 /* UnionModelCMD.CMDReqChangeAnnouncementMessage */, output, s);
        };
        /**
         *
         * 请求内推玩家加入帮会
         * @param 被邀请者 role id
         *
         * sendReqInviteForEnterUnionMessage  23056
         */
        UnionModel.prototype.send56 = function (roleId, s) {
            var output = this.getO();
            output.writeLong(roleId);
            this.send(23056 /* UnionModelCMD.CMDReqInviteForEnterUnionMessage */, output, s);
        };
        /**
         *
         * 同意内推加入帮会
         * @param 帮会id
         *
         * sendReqAgreeUnionInviteMessage  23058
         */
        UnionModel.prototype.send58 = function (unionId, s) {
            var output = this.getO();
            output.writeLong(unionId);
            this.send(23058 /* UnionModelCMD.CMDReqAgreeUnionInviteMessage */, output, s);
        };
        /**
         *
         * 申请加入帮会
         * @param 申请的帮会id
         *
         * sendReqApplyForEnterUnionMessage  23001
         */
        UnionModel.prototype.send1 = function (unionId, s) {
            var output = this.getO();
            output.writeLong(unionId);
            this.send(23001 /* UnionModelCMD.CMDReqApplyForEnterUnionMessage */, output, s);
        };
        /**
         *
         * 一键申请入帮
         *
         * sendReqOneKeyApplyForUnionMessage  23051
         */
        UnionModel.prototype.send51 = function (s) {
            var output = this.getO();
            this.send(23051 /* UnionModelCMD.CMDReqOneKeyApplyForUnionMessage */, output, s);
        };
        /**
         *
         * 请求获取申请入会列表信息
         *
         * sendReqGetApplyListInfoMessage  23011
         */
        UnionModel.prototype.send11 = function (s) {
            var output = this.getO();
            this.send(23011 /* UnionModelCMD.CMDReqGetApplyListInfoMessage */, output, s);
        };
        /**
         *
         * 请求处理申请列表信息
         * @param 处理方式 1拒绝2同意
         *
         * sendReqCheckApplyListMessage  23018
         */
        UnionModel.prototype.send18 = function (list, checkState, s) {
            var output = this.getO();
            output.writeShort(list.length);
            for (var listi1 = 0; listi1 < list.length; listi1++) {
                output.writeLong(list[listi1]);
            }
            output.writeVarInt(checkState, false);
            this.send(23018 /* UnionModelCMD.CMDReqCheckApplyListMessage */, output, s);
        };
        /**
         *
         * 请求调整职位
         * @param 选择的玩家ID
         * @param 要调整的职位
         *
         * sendReqChangePositionMessage  23009
         */
        UnionModel.prototype.send9 = function (memberId, position, s) {
            var output = this.getO();
            output.writeLong(memberId);
            output.writeVarInt(position, false);
            this.send(23009 /* UnionModelCMD.CMDReqChangePositionMessage */, output, s);
        };
        /**
         *
         * 请求踢出玩家
         * @param 选择的玩家ID
         *
         * sendReqKickOutMemberMessage  23007
         */
        UnionModel.prototype.send7 = function (memberId, s) {
            var output = this.getO();
            output.writeLong(memberId);
            this.send(23007 /* UnionModelCMD.CMDReqKickOutMemberMessage */, output, s);
        };
        /**
         *
         * 请求退出帮会信息
         *
         * sendReqQuitUnionMessage  23014
         */
        UnionModel.prototype.send14 = function (s) {
            var output = this.getO();
            this.send(23014 /* UnionModelCMD.CMDReqQuitUnionMessage */, output, s);
        };
        /**
         *
         * 请求行会事件
         *
         * sendReqUnionEventsMessage  23101
         */
        UnionModel.prototype.send101 = function (s) {
            var output = this.getO();
            this.send(23101 /* UnionModelCMD.CMDReqUnionEventsMessage */, output, s);
        };
        /**
         *
         * 请求行会捐献
         * @param 选择捐献配置下标
         *
         * sendReqUnionDonateMessage  23103
         */
        UnionModel.prototype.send103 = function (index, s) {
            var output = this.getO();
            output.writeVarInt(index, false);
            this.send(23103 /* UnionModelCMD.CMDReqUnionDonateMessage */, output, s);
        };
        /**
         *
         * 请求行会升级
         *
         * sendReqUnionUpgradeMessage  23102
         */
        UnionModel.prototype.send102 = function (s) {
            var output = this.getO();
            this.send(23102 /* UnionModelCMD.CMDReqUnionUpgradeMessage */, output, s);
        };
        /**
         *
         * 请求行会属性强化
         *
         * sendReqUnionIntensifyMessage  23104
         */
        UnionModel.prototype.send104 = function (s) {
            var output = this.getO();
            this.send(23104 /* UnionModelCMD.CMDReqUnionIntensifyMessage */, output, s);
        };
        /**
         *
         * 请求行会扩建
         *
         * sendReqUnionExpendMessage  23105
         */
        UnionModel.prototype.send105 = function (s) {
            var output = this.getO();
            this.send(23105 /* UnionModelCMD.CMDReqUnionExpendMessage */, output, s);
        };
        /**
         *
         * 请求红包面板
         *
         * sendReqRedPackPanelInfoMessage  23301
         */
        UnionModel.prototype.send301 = function (s) {
            var output = this.getO();
            this.send(23301 /* UnionModelCMD.CMDReqRedPackPanelInfoMessage */, output, s);
        };
        /**
         *
         * 请求发红包
         * @param 总元宝
         * @param 红包数
         *
         * sendReqRedPackSendMessage  23303
         */
        UnionModel.prototype.send303 = function (money, count, s) {
            var output = this.getO();
            output.writeVarInt(money, false);
            output.writeVarInt(count, false);
            this.send(23303 /* UnionModelCMD.CMDReqRedPackSendMessage */, output, s);
        };
        /**
         *
         * 请求抢红包
         * @param 红包id
         *
         * sendReqRedPackGetMessage  23305
         */
        UnionModel.prototype.send305 = function (lid, s) {
            var output = this.getO();
            output.writeLong(lid);
            this.send(23305 /* UnionModelCMD.CMDReqRedPackGetMessage */, output, s);
        };
        /**
         *
         * 请求结盟/宣战信息
         *
         * sendReqUnionAllyMessage  23401
         */
        UnionModel.prototype.send401 = function (s) {
            var output = this.getO();
            this.send(23401 /* UnionModelCMD.CMDReqUnionAllyMessage */, output, s);
        };
        /**
         *
         * 结盟
         * @param 行会id
         *
         * sendReqUnionAlignMessage  23402
         */
        UnionModel.prototype.send402 = function (unionId, s) {
            var output = this.getO();
            output.writeLong(unionId);
            this.send(23402 /* UnionModelCMD.CMDReqUnionAlignMessage */, output, s);
        };
        /**
         *
         * 同意结盟
         * @param 行会id
         * @param 0同意 1拒绝
         *
         * sendReqUnionAlignAcceptMessage  23403
         */
        UnionModel.prototype.send403 = function (unionId, choose, s) {
            var output = this.getO();
            output.writeLong(unionId);
            output.writeVarInt(choose, false);
            this.send(23403 /* UnionModelCMD.CMDReqUnionAlignAcceptMessage */, output, s);
        };
        /**
         *
         * 解除结盟
         * @param 行会id
         *
         * sendReqUnionAlignBreakMessage  23404
         */
        UnionModel.prototype.send404 = function (unionId, s) {
            var output = this.getO();
            output.writeLong(unionId);
            this.send(23404 /* UnionModelCMD.CMDReqUnionAlignBreakMessage */, output, s);
        };
        /**
         *
         * 宣战
         * @param 行会id
         *
         * sendReqUnionEnemyMessage  23405
         */
        UnionModel.prototype.send405 = function (unionId, s) {
            var output = this.getO();
            output.writeLong(unionId);
            this.send(23405 /* UnionModelCMD.CMDReqUnionEnemyMessage */, output, s);
        };
        /**
         *
         * 发起弹劾
         *
         * sendReqUnionImpeachMessage  23421
         */
        UnionModel.prototype.send421 = function (s) {
            var output = this.getO();
            this.send(23421 /* UnionModelCMD.CMDReqUnionImpeachMessage */, output, s);
        };
        /**
         *
         * 弹劾投票
         * @param 投票 1赞成 2反对
         *
         * sendReqUnionImpeachVoteMessage  23422
         */
        UnionModel.prototype.send422 = function (vote, s) {
            var output = this.getO();
            output.writeVarInt(vote, false);
            this.send(23422 /* UnionModelCMD.CMDReqUnionImpeachVoteMessage */, output, s);
        };
        /**
         *
         * 请求行会福利面板
         *
         * sendReqUnionWelfareInfoMessage  23501
         */
        UnionModel.prototype.send501 = function (s) {
            var output = this.getO();
            this.send(23501 /* UnionModelCMD.CMDReqUnionWelfareInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取行会福利
         * @param 行会福利id
         *
         * sendReqGetUnionWelfareMessage  23503
         */
        UnionModel.prototype.send503 = function (lid, s) {
            var output = this.getO();
            output.writeLong(lid);
            this.send(23503 /* UnionModelCMD.CMDReqGetUnionWelfareMessage */, output, s);
        };
        /**
         *
         * 请求行会排行
         *
         * sendReqUnionRankingInfoMessage  23601
         */
        UnionModel.prototype.send601 = function (s) {
            var output = this.getO();
            this.send(23601 /* UnionModelCMD.CMDReqUnionRankingInfoMessage */, output, s);
        };
        /**
         *
         * 请求跨服结盟
         * @param 想和谁结盟
         *
         * sendReqUnionAllyMakeMessage  23603
         */
        UnionModel.prototype.send603 = function (whom, s) {
            var output = this.getO();
            output.writeLong(whom);
            this.send(23603 /* UnionModelCMD.CMDReqUnionAllyMakeMessage */, output, s);
        };
        /**
         *
         *
         * @param
         *
         * sendReqUnionAllyAcceptMessage  23605
         */
        UnionModel.prototype.send605 = function (ally, s) {
            var output = this.getO();
            output.writeLong(ally);
            this.send(23605 /* UnionModelCMD.CMDReqUnionAllyAcceptMessage */, output, s);
        };
        /**
         *
         * 退出跨服结盟
         *
         * sendReqUnionAllyQuitMessage  23606
         */
        UnionModel.prototype.send606 = function (s) {
            var output = this.getO();
            this.send(23606 /* UnionModelCMD.CMDReqUnionAllyQuitMessage */, output, s);
        };
        /**
         *
         * 请求行会科技信息
         *
         * sendReqUnionTechnologyInfoMessage  23611
         */
        UnionModel.prototype.send611 = function (s) {
            var output = this.getO();
            this.send(23611 /* UnionModelCMD.CMDReqUnionTechnologyInfoMessage */, output, s);
        };
        /**
         *
         * 请求升级行会科技
         * @param 类型id
         *
         * sendReqUpLevelUnionTechnologyMessage  23613
         */
        UnionModel.prototype.send613 = function (typeId, s) {
            var output = this.getO();
            output.writeVarInt(typeId, false);
            this.send(23613 /* UnionModelCMD.CMDReqUpLevelUnionTechnologyMessage */, output, s);
        };
        UnionModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 23003 /* UnionModelCMD.CMDResSendAllUnionInfoMessage */:
                    var unionInfoLength1 = input.readShort();
                    var resSendAllUnionInfoMessage = [];
                    for (var unionInfoi1 = 0; unionInfoi1 < unionInfoLength1; unionInfoi1++) {
                        if (input.readByte() != 0) {
                            var temp606 = resSendAllUnionInfoMessage[unionInfoi1] = {}; //帮会列表信息
                            temp606["unionId"] = input.readLong(); //帮会id
                            temp606["unionName"] = input.readString(); //帮会名
                            temp606["leaderName"] = input.readString(); //帮会会长名
                            temp606["announcement"] = input.readString(); //帮会公告
                            temp606["unionLevel"] = input.readVarInt(false); //帮会等级
                            temp606["unionNum"] = input.readVarInt(false); //帮会人数
                            temp606["applyState"] = input.readVarInt(false); //帮会申请状态 1可申请 2已申请
                            temp606["createTime"] = input.readLong(); //帮会创建时间
                            temp606["nbValue"] = input.readVarInt(false); //帮会战力
                            temp606["unionFund"] = input.readVarInt(false); //帮会资金
                            temp606["joinLevelCondition"] = input.readVarInt(false); //申请等级限制
                            temp606["autoJoin"] = input.readVarInt(false); //是否自动加入
                            temp606["leaderOnline"] = input.readVarInt(false); //会长是否在线 1在线
                            temp606["bossRanking"] = input.readVarInt(false); //行会boss排名
                            temp606["force"] = input.readVarInt(false); //势力
                            temp606["expend"] = input.readVarInt(false); //扩建等级
                        }
                        else {
                            resSendAllUnionInfoMessage[unionInfoi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resSendAllUnionInfoMessage);
                    break;
                case 23005 /* UnionModelCMD.CMDResSendPlayerUnionInfoMessage */:
                    var resSendPlayerUnionInfoMessage = {};
                    var unionInfoLength2 = input.readByte();
                    if (unionInfoLength2 != 0) {
                        var temp607 = resSendPlayerUnionInfoMessage["unionInfo"] = {}; //帮会信息
                        temp607["unionId"] = input.readLong(); //帮会id
                        temp607["unionName"] = input.readString(); //帮会名
                        temp607["leaderName"] = input.readString(); //帮会会长名
                        temp607["announcement"] = input.readString(); //帮会公告
                        temp607["unionLevel"] = input.readVarInt(false); //帮会等级
                        temp607["unionNum"] = input.readVarInt(false); //帮会人数
                        temp607["applyState"] = input.readVarInt(false); //帮会申请状态 1可申请 2已申请
                        temp607["createTime"] = input.readLong(); //帮会创建时间
                        temp607["nbValue"] = input.readVarInt(false); //帮会战力
                        temp607["unionFund"] = input.readVarInt(false); //帮会资金
                        temp607["joinLevelCondition"] = input.readVarInt(false); //申请等级限制
                        temp607["autoJoin"] = input.readVarInt(false); //是否自动加入
                        temp607["leaderOnline"] = input.readVarInt(false); //会长是否在线 1在线
                        temp607["bossRanking"] = input.readVarInt(false); //行会boss排名
                        temp607["force"] = input.readVarInt(false); //势力
                        temp607["expend"] = input.readVarInt(false); //扩建等级
                    }
                    var memberInfoLength1 = input.readShort();
                    resSendPlayerUnionInfoMessage["memberInfo"] = [];
                    for (var memberInfoi1 = 0; memberInfoi1 < memberInfoLength1; memberInfoi1++) {
                        if (input.readByte() != 0) {
                            var temp608 = resSendPlayerUnionInfoMessage["memberInfo"][memberInfoi1] = {}; //帮会成员信息
                            temp608["id"] = input.readLong(); //玩家id
                            temp608["memberName"] = input.readString(); //成员名称
                            temp608["position"] = input.readVarInt(false); //成员职位 3会长 2副会长 0成员
                            temp608["career"] = input.readVarInt(false); //成员职业
                            temp608["memberLevel"] = input.readVarInt(false); //成员等级
                            temp608["offlineTime"] = input.readVarInt(false); //成员离线时间
                            temp608["fightPower"] = input.readVarInt(false); //战力
                            temp608["contributionHistory"] = input.readLong(); //历史贡献
                            temp608["sex"] = input.readVarInt(false); //性别
                            temp608["cloth"] = input.readVarInt(false); //衣服
                            temp608["weapon"] = input.readVarInt(false); //武器
                            temp608["wing"] = input.readVarInt(false); //翅膀
                            temp608["fashionTitle"] = input.readVarInt(false); //称号
                            temp608["fashionCloth"] = input.readVarInt(false); //衣服
                            temp608["fashionWing"] = input.readVarInt(false); //翅膀
                            temp608["fashionWeapon"] = input.readVarInt(false); //武器
                            temp608["vipLevel"] = input.readVarInt(false); //vip等级
                            temp608["isMonthCard"] = input.readBoolean(); //是否有月卡
                            temp608["treasure"] = input.readVarInt(false); //穿戴的寶物id
                            temp608["szSuitId"] = input.readVarInt(false); //激活的神装套装id
                            temp608["team"] = input.readLong(); //当前队伍id 0没有队伍
                        }
                        else {
                            resSendPlayerUnionInfoMessage["memberInfo"][memberInfoi1] = null;
                        }
                    }
                    resSendPlayerUnionInfoMessage["impeachTime"] = input.readVarInt(false); //上次弹劾时间
                    resSendPlayerUnionInfoMessage["donated"] = input.readVarInt(false); //今日捐献数量
                    this.sendNotif(cmd, resSendPlayerUnionInfoMessage);
                    break;
                case 23013 /* UnionModelCMD.CMDResSendCreateUnionSuccessMessage */:
                    this.sendNotif(cmd);
                    break;
                case 23060 /* UnionModelCMD.CMDResDissolveUnionMessage */:
                    this.sendNotif(cmd);
                    break;
                case 23024 /* UnionModelCMD.CMDResSendUnionSetUpMessage */:
                    var resSendUnionSetUpMessage = {};
                    resSendUnionSetUpMessage["joinLevelCondition"] = input.readVarInt(false); //等级限制
                    resSendUnionSetUpMessage["autoJoin"] = input.readVarInt(false); //是否自动同意申请 0否 1是
                    this.sendNotif(cmd, resSendUnionSetUpMessage);
                    break;
                case 23016 /* UnionModelCMD.CMDResSendChangeAnnounceMessage */:
                    var resSendChangeAnnounceMessage = input.readString(); //调整后的公告
                    this.sendNotif(cmd, resSendChangeAnnounceMessage);
                    break;
                case 23057 /* UnionModelCMD.CMDResInviteForEnterUnionMessage */:
                    var resInviteForEnterUnionMessage = {};
                    resInviteForEnterUnionMessage["unionId"] = input.readLong(); //帮会id
                    resInviteForEnterUnionMessage["unionName"] = input.readString(); //帮会名
                    resInviteForEnterUnionMessage["inviterName"] = input.readString(); //邀请者name
                    this.sendNotif(cmd, resInviteForEnterUnionMessage);
                    break;
                case 23012 /* UnionModelCMD.CMDResSendApplyListInfoMessage */:
                    var applyInfoLength1 = input.readShort();
                    var resSendApplyListInfoMessage = [];
                    for (var applyInfoi1 = 0; applyInfoi1 < applyInfoLength1; applyInfoi1++) {
                        if (input.readByte() != 0) {
                            var temp609 = resSendApplyListInfoMessage[applyInfoi1] = {}; //申请列表信息
                            temp609["id"] = input.readLong(); //玩家id
                            temp609["memberName"] = input.readString(); //申请玩家角色
                            temp609["career"] = input.readVarInt(false); //申请玩家职业
                            temp609["memberLevel"] = input.readVarInt(false); //申请玩家等级
                            temp609["fightValue"] = input.readLong(); //申请者战斗力
                            temp609["sex"] = input.readVarInt(false); //玩家性别
                            temp609["vipLevel"] = input.readVarInt(false); //申请玩家vip等级
                            temp609["monthCard"] = input.readVarInt(false); //是否有月卡 0无 1有
                            temp609["force"] = input.readVarInt(false); //势力
                        }
                        else {
                            resSendApplyListInfoMessage[applyInfoi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resSendApplyListInfoMessage);
                    break;
                case 23002 /* UnionModelCMD.CMDResApplyForUnionStateChangeMessage */:
                    var resApplyForUnionStateChangeMessage = {};
                    resApplyForUnionStateChangeMessage["state"] = input.readVarInt(false); //帮会申请状态
                    resApplyForUnionStateChangeMessage["unionId"] = input.readLong(); //帮会id
                    this.sendNotif(cmd, resApplyForUnionStateChangeMessage);
                    break;
                case 23017 /* UnionModelCMD.CMDResSendChangePositionMessage */:
                    var changesLength1 = input.readShort();
                    var resSendChangePositionMessage = [];
                    for (var changesi1 = 0; changesi1 < changesLength1; changesi1++) {
                        if (input.readByte() != 0) {
                            var temp610 = resSendChangePositionMessage[changesi1] = {}; //职位变化的玩家列表
                            temp610["id"] = input.readLong(); //玩家id
                            temp610["memberName"] = input.readString(); //成员名称
                            temp610["position"] = input.readVarInt(false); //成员职位 3会长 2副会长 0成员
                            temp610["career"] = input.readVarInt(false); //成员职业
                            temp610["memberLevel"] = input.readVarInt(false); //成员等级
                            temp610["offlineTime"] = input.readVarInt(false); //成员离线时间
                            temp610["fightPower"] = input.readVarInt(false); //战力
                            temp610["contributionHistory"] = input.readLong(); //历史贡献
                            temp610["sex"] = input.readVarInt(false); //性别
                            temp610["cloth"] = input.readVarInt(false); //衣服
                            temp610["weapon"] = input.readVarInt(false); //武器
                            temp610["wing"] = input.readVarInt(false); //翅膀
                            temp610["fashionTitle"] = input.readVarInt(false); //称号
                            temp610["fashionCloth"] = input.readVarInt(false); //衣服
                            temp610["fashionWing"] = input.readVarInt(false); //翅膀
                            temp610["fashionWeapon"] = input.readVarInt(false); //武器
                            temp610["vipLevel"] = input.readVarInt(false); //vip等级
                            temp610["isMonthCard"] = input.readBoolean(); //是否有月卡
                            temp610["treasure"] = input.readVarInt(false); //穿戴的寶物id
                            temp610["szSuitId"] = input.readVarInt(false); //激活的神装套装id
                            temp610["team"] = input.readLong(); //当前队伍id 0没有队伍
                        }
                        else {
                            resSendChangePositionMessage[changesi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resSendChangePositionMessage);
                    break;
                case 23015 /* UnionModelCMD.CMDResSendQuitUnionSuccessMessage */:
                    this.sendNotif(cmd);
                    break;
                case 23072 /* UnionModelCMD.CMDResUnionEventsMessage */:
                    var unionEventBeanLength1 = input.readShort();
                    var resUnionEventsMessage = [];
                    for (var unionEventBeani1 = 0; unionEventBeani1 < unionEventBeanLength1; unionEventBeani1++) {
                        if (input.readByte() != 0) {
                            var temp611 = resUnionEventsMessage[unionEventBeani1] = {}; //帮会事件记录
                            temp611["time"] = input.readVarInt(false); //事件
                            temp611["id"] = input.readVarInt(false); //记录id
                            var paramsLength = input.readShort();
                            temp611["params"] = new Array(paramsLength);
                            for (var paramsi1 = 0; paramsi1 < paramsLength; paramsi1++) {
                                temp611["params"][paramsi1] = input.readString(); //参数列表
                            }
                        }
                        else {
                            resUnionEventsMessage[unionEventBeani1] = null;
                        }
                    }
                    this.sendNotif(cmd, resUnionEventsMessage);
                    break;
                case 23073 /* UnionModelCMD.CMDResUnionBossRankingChangeMessage */:
                    var resUnionBossRankingChangeMessage = input.readVarInt(false); //boss排名
                    this.sendNotif(cmd, resUnionBossRankingChangeMessage);
                    break;
                case 23074 /* UnionModelCMD.CMDResUnionEventUpdateMessage */:
                    var eventLength1 = input.readByte();
                    if (eventLength1 != 0) {
                        var resUnionEventUpdateMessage = {}; //行会事件
                        resUnionEventUpdateMessage["time"] = input.readVarInt(false); //事件
                        resUnionEventUpdateMessage["id"] = input.readVarInt(false); //记录id
                        var paramsLength = input.readShort();
                        resUnionEventUpdateMessage["params"] = new Array(paramsLength);
                        for (var paramsi2 = 0; paramsi2 < paramsLength; paramsi2++) {
                            resUnionEventUpdateMessage["params"][paramsi2] = input.readString(); //参数列表
                        }
                    }
                    this.sendNotif(cmd, resUnionEventUpdateMessage);
                    break;
                case 23201 /* UnionModelCMD.CMDResUnionFundChangedMessage */:
                    var resUnionFundChangedMessage = input.readVarInt(false); //当前行会资金
                    this.sendNotif(cmd, resUnionFundChangedMessage);
                    break;
                case 23202 /* UnionModelCMD.CMDResUnionLevelChangedMessage */:
                    var resUnionLevelChangedMessage = input.readVarInt(false); //当前行会等级
                    this.sendNotif(cmd, resUnionLevelChangedMessage);
                    break;
                case 23203 /* UnionModelCMD.CMDResUnionIntensifyInfoMessage */:
                    var resUnionIntensifyInfoMessage = {};
                    resUnionIntensifyInfoMessage["intensifyExpire"] = input.readVarInt(false); //强化过期时间（时间戳）
                    resUnionIntensifyInfoMessage["intensifyAvailable"] = input.readVarInt(false); //下次可强化时间(时间戳)
                    this.sendNotif(cmd, resUnionIntensifyInfoMessage);
                    break;
                case 23204 /* UnionModelCMD.CMDResUnionDonateMessage */:
                    var resUnionDonateMessage = input.readVarInt(false); //今日捐献数量
                    this.sendNotif(cmd, resUnionDonateMessage);
                    break;
                case 23302 /* UnionModelCMD.CMDResRedPackPanelInfoMessage */:
                    var resRedPackPanelInfoMessage = {};
                    var redPackInfoBeansLength1 = input.readShort();
                    resRedPackPanelInfoMessage["redPackInfoBeans"] = [];
                    for (var redPackInfoBeansi1 = 0; redPackInfoBeansi1 < redPackInfoBeansLength1; redPackInfoBeansi1++) {
                        if (input.readByte() != 0) {
                            var temp612 = resRedPackPanelInfoMessage["redPackInfoBeans"][redPackInfoBeansi1] = {}; //红包列表
                            temp612["lid"] = input.readLong(); //红包唯一id
                            temp612["name"] = input.readString(); //发送者名字
                            temp612["sendTime"] = input.readVarInt(false); //发放时间
                            temp612["itemId"] = input.readVarInt(false); //红包的itemId
                            temp612["count"] = input.readVarInt(false); //抢到的数量
                            temp612["got"] = input.readBoolean(); //是否已抢过
                        }
                        else {
                            resRedPackPanelInfoMessage["redPackInfoBeans"][redPackInfoBeansi1] = null;
                        }
                    }
                    var redPackRecordBeansLength1 = input.readShort();
                    resRedPackPanelInfoMessage["redPackRecordBeans"] = [];
                    for (var redPackRecordBeansi1 = 0; redPackRecordBeansi1 < redPackRecordBeansLength1; redPackRecordBeansi1++) {
                        if (input.readByte() != 0) {
                            var temp613 = resRedPackPanelInfoMessage["redPackRecordBeans"][redPackRecordBeansi1] = {}; //红包记录列表
                            temp613["type"] = input.readVarInt(false); //数据类型 1发放2抢到3已被抢完
                            var paramsLength = input.readShort();
                            temp613["params"] = new Array(paramsLength);
                            for (var paramsi3 = 0; paramsi3 < paramsLength; paramsi3++) {
                                temp613["params"][paramsi3] = input.readString(); //参数列表
                            }
                        }
                        else {
                            resRedPackPanelInfoMessage["redPackRecordBeans"][redPackRecordBeansi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resRedPackPanelInfoMessage);
                    break;
                case 23304 /* UnionModelCMD.CMDResRedPackShowMessage */:
                    var resRedPackShowMessage = {};
                    resRedPackShowMessage["lid"] = input.readLong(); //红包唯一id
                    resRedPackShowMessage["name"] = input.readString(); //发送者名字
                    var redPackInfoBeansLength2 = input.readShort();
                    resRedPackShowMessage["redPackInfoBeans"] = [];
                    for (var redPackInfoBeansi2 = 0; redPackInfoBeansi2 < redPackInfoBeansLength2; redPackInfoBeansi2++) {
                        if (input.readByte() != 0) {
                            var temp614 = resRedPackShowMessage["redPackInfoBeans"][redPackInfoBeansi2] = {}; //刷新红包列表
                            temp614["lid"] = input.readLong(); //红包唯一id
                            temp614["name"] = input.readString(); //发送者名字
                            temp614["sendTime"] = input.readVarInt(false); //发放时间
                            temp614["itemId"] = input.readVarInt(false); //红包的itemId
                            temp614["count"] = input.readVarInt(false); //抢到的数量
                            temp614["got"] = input.readBoolean(); //是否已抢过
                        }
                        else {
                            resRedPackShowMessage["redPackInfoBeans"][redPackInfoBeansi2] = null;
                        }
                    }
                    var redPackRecordBeansLength2 = input.readShort();
                    resRedPackShowMessage["redPackRecordBeans"] = [];
                    for (var redPackRecordBeansi2 = 0; redPackRecordBeansi2 < redPackRecordBeansLength2; redPackRecordBeansi2++) {
                        if (input.readByte() != 0) {
                            var temp615 = resRedPackShowMessage["redPackRecordBeans"][redPackRecordBeansi2] = {}; //刷新红包记录列表
                            temp615["type"] = input.readVarInt(false); //数据类型 1发放2抢到3已被抢完
                            var paramsLength = input.readShort();
                            temp615["params"] = new Array(paramsLength);
                            for (var paramsi4 = 0; paramsi4 < paramsLength; paramsi4++) {
                                temp615["params"][paramsi4] = input.readString(); //参数列表
                            }
                        }
                        else {
                            resRedPackShowMessage["redPackRecordBeans"][redPackRecordBeansi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resRedPackShowMessage);
                    break;
                case 23306 /* UnionModelCMD.CMDResRedPackGetMessage */:
                    var resRedPackGetMessage = {};
                    var redPackInfoBeanLength1 = input.readByte();
                    if (redPackInfoBeanLength1 != 0) {
                        var temp616 = resRedPackGetMessage["redPackInfoBean"] = {}; //抢红包信息
                        temp616["lid"] = input.readLong(); //红包唯一id
                        temp616["name"] = input.readString(); //发送者名字
                        temp616["sendTime"] = input.readVarInt(false); //发放时间
                        temp616["itemId"] = input.readVarInt(false); //红包的itemId
                        temp616["count"] = input.readVarInt(false); //抢到的数量
                        temp616["got"] = input.readBoolean(); //是否已抢过
                    }
                    var redPackInfoBeansLength3 = input.readShort();
                    resRedPackGetMessage["redPackInfoBeans"] = [];
                    for (var redPackInfoBeansi3 = 0; redPackInfoBeansi3 < redPackInfoBeansLength3; redPackInfoBeansi3++) {
                        if (input.readByte() != 0) {
                            var temp617 = resRedPackGetMessage["redPackInfoBeans"][redPackInfoBeansi3] = {}; //刷新红包列表
                            temp617["lid"] = input.readLong(); //红包唯一id
                            temp617["name"] = input.readString(); //发送者名字
                            temp617["sendTime"] = input.readVarInt(false); //发放时间
                            temp617["itemId"] = input.readVarInt(false); //红包的itemId
                            temp617["count"] = input.readVarInt(false); //抢到的数量
                            temp617["got"] = input.readBoolean(); //是否已抢过
                        }
                        else {
                            resRedPackGetMessage["redPackInfoBeans"][redPackInfoBeansi3] = null;
                        }
                    }
                    var redPackRecordBeansLength3 = input.readShort();
                    resRedPackGetMessage["redPackRecordBeans"] = [];
                    for (var redPackRecordBeansi3 = 0; redPackRecordBeansi3 < redPackRecordBeansLength3; redPackRecordBeansi3++) {
                        if (input.readByte() != 0) {
                            var temp618 = resRedPackGetMessage["redPackRecordBeans"][redPackRecordBeansi3] = {}; //刷新红包记录列表
                            temp618["type"] = input.readVarInt(false); //数据类型 1发放2抢到3已被抢完
                            var paramsLength = input.readShort();
                            temp618["params"] = new Array(paramsLength);
                            for (var paramsi5 = 0; paramsi5 < paramsLength; paramsi5++) {
                                temp618["params"][paramsi5] = input.readString(); //参数列表
                            }
                        }
                        else {
                            resRedPackGetMessage["redPackRecordBeans"][redPackRecordBeansi3] = null;
                        }
                    }
                    this.sendNotif(cmd, resRedPackGetMessage);
                    break;
                case 23307 /* UnionModelCMD.CMDResUnionMemberAddMessage */:
                    var memberInfoLength2 = input.readByte();
                    if (memberInfoLength2 != 0) {
                        var resUnionMemberAddMessage = {}; //帮会成员信息
                        resUnionMemberAddMessage["id"] = input.readLong(); //玩家id
                        resUnionMemberAddMessage["memberName"] = input.readString(); //成员名称
                        resUnionMemberAddMessage["position"] = input.readVarInt(false); //成员职位 3会长 2副会长 0成员
                        resUnionMemberAddMessage["career"] = input.readVarInt(false); //成员职业
                        resUnionMemberAddMessage["memberLevel"] = input.readVarInt(false); //成员等级
                        resUnionMemberAddMessage["offlineTime"] = input.readVarInt(false); //成员离线时间
                        resUnionMemberAddMessage["fightPower"] = input.readVarInt(false); //战力
                        resUnionMemberAddMessage["contributionHistory"] = input.readLong(); //历史贡献
                        resUnionMemberAddMessage["sex"] = input.readVarInt(false); //性别
                        resUnionMemberAddMessage["cloth"] = input.readVarInt(false); //衣服
                        resUnionMemberAddMessage["weapon"] = input.readVarInt(false); //武器
                        resUnionMemberAddMessage["wing"] = input.readVarInt(false); //翅膀
                        resUnionMemberAddMessage["fashionTitle"] = input.readVarInt(false); //称号
                        resUnionMemberAddMessage["fashionCloth"] = input.readVarInt(false); //衣服
                        resUnionMemberAddMessage["fashionWing"] = input.readVarInt(false); //翅膀
                        resUnionMemberAddMessage["fashionWeapon"] = input.readVarInt(false); //武器
                        resUnionMemberAddMessage["vipLevel"] = input.readVarInt(false); //vip等级
                        resUnionMemberAddMessage["isMonthCard"] = input.readBoolean(); //是否有月卡
                        resUnionMemberAddMessage["treasure"] = input.readVarInt(false); //穿戴的寶物id
                        resUnionMemberAddMessage["szSuitId"] = input.readVarInt(false); //激活的神装套装id
                        resUnionMemberAddMessage["team"] = input.readLong(); //当前队伍id 0没有队伍
                    }
                    this.sendNotif(cmd, resUnionMemberAddMessage);
                    break;
                case 23308 /* UnionModelCMD.CMDResUnionMemberRemoveMessage */:
                    var resUnionMemberRemoveMessage = input.readLong(); //成员唯一id
                    this.sendNotif(cmd, resUnionMemberRemoveMessage);
                    break;
                case 23411 /* UnionModelCMD.CMDResUnionAllyMessage */:
                    var resUnionAllyMessage = {};
                    var allianceLength1 = input.readShort();
                    resUnionAllyMessage["alliance"] = [];
                    for (var alliancei1 = 0; alliancei1 < allianceLength1; alliancei1++) {
                        if (input.readByte() != 0) {
                            var temp619 = resUnionAllyMessage["alliance"][alliancei1] = {}; //盟友
                            temp619["unionId"] = input.readLong(); //行会id
                            temp619["initiator"] = input.readLong(); //行会id
                            temp619["time"] = input.readVarInt(false); //结盟时间
                        }
                        else {
                            resUnionAllyMessage["alliance"][alliancei1] = null;
                        }
                    }
                    var allianceApplyLength1 = input.readShort();
                    resUnionAllyMessage["allianceApply"] = [];
                    for (var allianceApplyi1 = 0; allianceApplyi1 < allianceApplyLength1; allianceApplyi1++) {
                        if (input.readByte() != 0) {
                            var temp620 = resUnionAllyMessage["allianceApply"][allianceApplyi1] = {}; //请求结盟
                            temp620["unionId"] = input.readLong(); //行会id
                            temp620["initiator"] = input.readLong(); //行会id
                            temp620["time"] = input.readVarInt(false); //宣战时间 时间戳
                            temp620["expire"] = input.readVarInt(false); //宣战过期时间
                        }
                        else {
                            resUnionAllyMessage["allianceApply"][allianceApplyi1] = null;
                        }
                    }
                    var enemyLength1 = input.readShort();
                    resUnionAllyMessage["enemy"] = [];
                    for (var enemyi1 = 0; enemyi1 < enemyLength1; enemyi1++) {
                        if (input.readByte() != 0) {
                            var temp621 = resUnionAllyMessage["enemy"][enemyi1] = {}; //宣战
                            temp621["unionId"] = input.readLong(); //行会id
                            temp621["initiator"] = input.readLong(); //行会id
                            temp621["time"] = input.readVarInt(false); //宣战时间 时间戳
                            temp621["expire"] = input.readVarInt(false); //宣战过期时间
                        }
                        else {
                            resUnionAllyMessage["enemy"][enemyi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resUnionAllyMessage);
                    break;
                case 23412 /* UnionModelCMD.CMDResUnionAlignMessage */:
                    var resUnionAlignMessage = {};
                    var appliesLength1 = input.readShort();
                    resUnionAlignMessage["applies"] = [];
                    for (var appliesi1 = 0; appliesi1 < appliesLength1; appliesi1++) {
                        if (input.readByte() != 0) {
                            var temp622 = resUnionAlignMessage["applies"][appliesi1] = {}; //请求列表 接受到的
                            temp622["name"] = input.readString(); //行会名字
                            temp622["unionId"] = input.readLong(); //行会id
                            temp622["expire"] = input.readVarInt(false); //过期时间
                        }
                        else {
                            resUnionAlignMessage["applies"][appliesi1] = null;
                        }
                    }
                    var appliedLength1 = input.readShort();
                    resUnionAlignMessage["applied"] = [];
                    for (var appliedi1 = 0; appliedi1 < appliedLength1; appliedi1++) {
                        if (input.readByte() != 0) {
                            var temp623 = resUnionAlignMessage["applied"][appliedi1] = {}; //申请列表 发起的
                            temp623["name"] = input.readString(); //行会名字
                            temp623["unionId"] = input.readLong(); //行会id
                            temp623["expire"] = input.readVarInt(false); //过期时间
                        }
                        else {
                            resUnionAlignMessage["applied"][appliedi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resUnionAlignMessage);
                    break;
                case 23423 /* UnionModelCMD.CMDResUnionImpeachMessage */:
                    var resUnionImpeachMessage = {};
                    var initiatorLength1 = input.readByte();
                    if (initiatorLength1 != 0) {
                        var temp624 = resUnionImpeachMessage["initiator"] = {}; //发起人
                        temp624["uid"] = input.readLong(); //玩家id
                        temp624["name"] = input.readString(); //玩家名字
                        temp624["union"] = input.readString(); //行会名字
                    }
                    resUnionImpeachMessage["expire"] = input.readVarInt(false); //结束时间
                    var statusLength1 = input.readShort();
                    resUnionImpeachMessage["status"] = new Array(statusLength1);
                    for (var statusi1 = 0; statusi1 < statusLength1; statusi1++) {
                        resUnionImpeachMessage["status"][statusi1] = input.readVarInt(false); //投票状态 [赞同，反对]
                    }
                    resUnionImpeachMessage["vote"] = input.readVarInt(false); //我的投票 0未投票 1赞同 2反对
                    resUnionImpeachMessage["impeachTime"] = input.readVarInt(false); //弹劾时间
                    this.sendNotif(cmd, resUnionImpeachMessage);
                    break;
                case 23502 /* UnionModelCMD.CMDResUnionWelfareInfoMessage */:
                    var resUnionWelfareInfoMessage = {};
                    resUnionWelfareInfoMessage["dailyType"] = input.readVarInt(false); //活动类型
                    resUnionWelfareInfoMessage["rank"] = input.readVarInt(false); //排名
                    resUnionWelfareInfoMessage["total"] = input.readVarInt(false); //分红总数
                    resUnionWelfareInfoMessage["fund"] = input.readVarInt(false); //沙城基金
                    resUnionWelfareInfoMessage["attend"] = input.readVarInt(false); //参与人数
                    resUnionWelfareInfoMessage["join"] = input.readVarInt(false); //是否参与过
                    resUnionWelfareInfoMessage["endTime"] = input.readVarInt(false); //结束时间戳(s)
                    resUnionWelfareInfoMessage["totalFund"] = input.readVarInt(false); //沙城总基金
                    var unionWelfareBeansLength1 = input.readShort();
                    resUnionWelfareInfoMessage["unionWelfareBeans"] = [];
                    for (var unionWelfareBeansi1 = 0; unionWelfareBeansi1 < unionWelfareBeansLength1; unionWelfareBeansi1++) {
                        if (input.readByte() != 0) {
                            var temp625 = resUnionWelfareInfoMessage["unionWelfareBeans"][unionWelfareBeansi1] = {}; //行会福利列表
                            temp625["lid"] = input.readLong(); //唯一id
                            temp625["itemId"] = input.readVarInt(false); //itemId
                            temp625["count"] = input.readVarInt(false); //数量
                            temp625["got"] = input.readBoolean(); //是否已抢过
                            temp625["ownerId"] = input.readLong(); //抢过的归属者id
                            temp625["name"] = input.readString(); //抢过的归属者名字
                            temp625["big"] = input.readBoolean(); //抢过的是否大奖
                        }
                        else {
                            resUnionWelfareInfoMessage["unionWelfareBeans"][unionWelfareBeansi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resUnionWelfareInfoMessage);
                    break;
                case 23504 /* UnionModelCMD.CMDResGetUnionWelfareMessage */:
                    var resGetUnionWelfareMessage = {};
                    resGetUnionWelfareMessage["success"] = input.readBoolean(); //是否领取成功
                    var unionWelfareBeanLength1 = input.readByte();
                    if (unionWelfareBeanLength1 != 0) {
                        var temp626 = resGetUnionWelfareMessage["unionWelfareBean"] = {}; //行会福利信息
                        temp626["lid"] = input.readLong(); //唯一id
                        temp626["itemId"] = input.readVarInt(false); //itemId
                        temp626["count"] = input.readVarInt(false); //数量
                        temp626["got"] = input.readBoolean(); //是否已抢过
                        temp626["ownerId"] = input.readLong(); //抢过的归属者id
                        temp626["name"] = input.readString(); //抢过的归属者名字
                        temp626["big"] = input.readBoolean(); //抢过的是否大奖
                    }
                    this.sendNotif(cmd, resGetUnionWelfareMessage);
                    break;
                case 23602 /* UnionModelCMD.CMDResUnionRankingInfoMessage */:
                    var resUnionRankingInfoMessage = {};
                    var rankingsLength1 = input.readShort();
                    resUnionRankingInfoMessage["rankings"] = [];
                    for (var rankingsi1 = 0; rankingsi1 < rankingsLength1; rankingsi1++) {
                        if (input.readByte() != 0) {
                            var temp627 = resUnionRankingInfoMessage["rankings"][rankingsi1] = {}; //
                            temp627["uid"] = input.readLong(); //行会id
                            temp627["name"] = input.readString(); //行会名字
                            temp627["ranking"] = input.readVarInt(false); //排名
                            temp627["ally"] = input.readLong(); //联盟标记 拥有相同联盟标记的行会是同盟关系
                            var membersLength1 = input.readShort();
                            temp627["members"] = [];
                            for (var membersi1 = 0; membersi1 < membersLength1; membersi1++) {
                                if (input.readByte() != 0) {
                                    var temp628 = temp627["members"][membersi1] = {}; //成员
                                    temp628["position"] = input.readVarInt(false); //
                                    var dataLength1 = input.readByte();
                                    if (dataLength1 != 0) {
                                        var temp629 = temp628["data"] = {}; //
                                        temp629["rank"] = input.readVarInt(false); //排名
                                        temp629["uid"] = input.readLong(); //角色id
                                        temp629["name"] = input.readString(); //名字
                                        temp629["career"] = input.readVarInt(false); //职业
                                        temp629["sex"] = input.readVarInt(false); //性别
                                        temp629["level"] = input.readVarInt(false); //等级
                                        temp629["rein"] = input.readVarInt(false); //转生
                                        temp629["title"] = input.readVarInt(false); //封号等级
                                        temp629["unionName"] = input.readString(); //帮会名字
                                    }
                                }
                                else {
                                    temp627["members"][membersi1] = null;
                                }
                            }
                        }
                        else {
                            resUnionRankingInfoMessage["rankings"][rankingsi1] = null;
                        }
                    }
                    var siegeLength1 = input.readShort();
                    resUnionRankingInfoMessage["siege"] = [];
                    for (var siegei1 = 0; siegei1 < siegeLength1; siegei1++) {
                        if (input.readByte() != 0) {
                            var temp630 = resUnionRankingInfoMessage["siege"][siegei1] = {}; //
                            temp630["uid"] = input.readLong(); //行会id
                            temp630["name"] = input.readString(); //行会名字
                            temp630["siege"] = input.readVarInt(false); //攻城战组 1战神2勇士
                        }
                        else {
                            resUnionRankingInfoMessage["siege"][siegei1] = null;
                        }
                    }
                    this.sendNotif(cmd, resUnionRankingInfoMessage);
                    break;
                case 23604 /* UnionModelCMD.CMDResUnionAllyInformMessage */:
                    var resUnionAllyInformMessage = {};
                    resUnionAllyInformMessage["unionId"] = input.readLong(); //
                    resUnionAllyInformMessage["unionName"] = input.readString(); //
                    resUnionAllyInformMessage["ally"] = input.readLong(); //
                    this.sendNotif(cmd, resUnionAllyInformMessage);
                    break;
                case 23612 /* UnionModelCMD.CMDResUnionTechnologyInfoMessage */:
                    var infoLength1 = input.readShort();
                    var resUnionTechnologyInfoMessage = [];
                    for (var infoi1 = 0; infoi1 < infoLength1; infoi1++) {
                        if (input.readByte() != 0) {
                            var temp631 = resUnionTechnologyInfoMessage[infoi1] = {}; //
                            temp631["id"] = input.readVarInt(false); //
                            temp631["value"] = input.readVarInt(false); //
                        }
                        else {
                            resUnionTechnologyInfoMessage[infoi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resUnionTechnologyInfoMessage);
                    break;
            }
        };
        return UnionModel;
    }(ModelBase));
    net.UnionModel = UnionModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:303
     */
    var UnionTaskModel = /** @class */ (function (_super) {
        __extends(UnionTaskModel, _super);
        function UnionTaskModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(303002 /* UnionTaskModelCMD.CMDResUnionTaskInfoMessage */);
            return _this;
        }
        UnionTaskModel.ins = function () {
            if (!this._ins)
                this._ins = new UnionTaskModel();
            return this._ins;
        };
        /**
         *
         * 行会任务-前端请求行会任务功能面板数据
         *
         * sendReqUnionTaskInfoMessage  303001
         */
        UnionTaskModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(303001 /* UnionTaskModelCMD.CMDReqUnionTaskInfoMessage */, output, s);
        };
        /**
         *
         * 行会任务-前端请求领取全行会任务奖励
         * @param 请求领取的全行会任务奖励的编号
         *
         * sendReqUnionTaskRewardMessage  303003
         */
        UnionTaskModel.prototype.send3 = function (rewardNo, s) {
            var output = this.getO();
            output.writeVarInt(rewardNo, false);
            this.send(303003 /* UnionTaskModelCMD.CMDReqUnionTaskRewardMessage */, output, s);
        };
        UnionTaskModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 303002 /* UnionTaskModelCMD.CMDResUnionTaskInfoMessage */:
                    var resUnionTaskInfoMessage = {};
                    var unionTaskRewardsLength1 = input.readShort();
                    resUnionTaskInfoMessage["unionTaskRewards"] = new Array(unionTaskRewardsLength1);
                    for (var unionTaskRewardsi1 = 0; unionTaskRewardsi1 < unionTaskRewardsLength1; unionTaskRewardsi1++) {
                        resUnionTaskInfoMessage["unionTaskRewards"][unionTaskRewardsi1] = input.readVarInt(false); //角色本周已领取全行会任务奖励的奖励编号(从1开始计数)
                    }
                    resUnionTaskInfoMessage["assistCount"] = input.readVarInt(false); //角色今日已完成行会任务(即协助击杀Boss)次数
                    resUnionTaskInfoMessage["assistTotalCount"] = input.readVarInt(false); //全会成员本周累计完成行会任务次数
                    var unionTaskRanksLength1 = input.readShort();
                    resUnionTaskInfoMessage["unionTaskRanks"] = [];
                    for (var unionTaskRanksi1 = 0; unionTaskRanksi1 < unionTaskRanksLength1; unionTaskRanksi1++) {
                        if (input.readByte() != 0) {
                            var temp632 = resUnionTaskInfoMessage["unionTaskRanks"][unionTaskRanksi1] = {}; //全会成员本周完成行会任务排行榜
                            temp632["rank"] = input.readVarInt(false); //名次
                            temp632["counts"] = input.readVarInt(false); //完成次数
                            temp632["roleId"] = input.readLong(); //角色id
                            temp632["roleName"] = input.readString(); //角色名称
                        }
                        else {
                            resUnionTaskInfoMessage["unionTaskRanks"][unionTaskRanksi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resUnionTaskInfoMessage);
                    break;
            }
        };
        return UnionTaskModel;
    }(ModelBase));
    net.UnionTaskModel = UnionTaskModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:1
     */
    var UserModel = /** @class */ (function (_super) {
        __extends(UserModel, _super);
        function UserModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(1010 /* UserModelCMD.CMDResHeartMessage */);
            thisObj.reg(1002 /* UserModelCMD.CMDResLoginFailedMessage */);
            thisObj.reg(1007 /* UserModelCMD.CMDResLoginMessage */);
            thisObj.reg(1018 /* UserModelCMD.CMDResCreateRoleSuccessMessage */);
            thisObj.reg(1005 /* UserModelCMD.CMDResRandomNameMessage */);
            thisObj.reg(1006 /* UserModelCMD.CMDResEnterGameMessage */);
            thisObj.reg(1011 /* UserModelCMD.CMDResVersionErrorMessage */);
            thisObj.reg(1036 /* UserModelCMD.CMDResDeleteRoleMessage */);
            thisObj.reg(1042 /* UserModelCMD.CMDResServerEnvirMessage */);
            thisObj.reg(1043 /* UserModelCMD.CMDResReConnectionResultMessage */);
            thisObj.reg(1044 /* UserModelCMD.CMDResForcedOfflineMessage */);
            thisObj.reg(1103 /* UserModelCMD.CMDResRoleDisplaySettingInfoMessage */);
            return _this;
        }
        UserModel.ins = function () {
            if (!this._ins)
                this._ins = new UserModel();
            return this._ins;
        };
        /**
         *
         * 心跳请求
         *
         * sendReqHeartMessage  1009
         */
        UserModel.prototype.send9 = function (s) {
            var output = this.getO();
            this.send(1009 /* UserModelCMD.CMDReqHeartMessage */, output, s);
        };
        /**
         *
         * 请求登录
         * @param userId
         * @param 服务器id
         * @param 平台 1Android 2IOS
         * @param 渠道
         * @param 版本号
         * @param 登录验证
         * @param 客户端完整版本号
         *
         * sendReqLoginMessage  1001
         */
        UserModel.prototype.send1 = function (uid, sid, platform, channel, version, token, fullVersion, s) {
            var output = this.getO();
            output.writeString(uid);
            output.writeVarInt(sid, false);
            output.writeVarInt(platform, false);
            output.writeString(channel);
            output.writeVarInt(version, false);
            output.writeString(token);
            output.writeString(fullVersion);
            this.send(1001 /* UserModelCMD.CMDReqLoginMessage */, output, s);
        };
        /**
         *
         * 请求创建角色
         * @param 角色名字
         * @param 性别
         * @param 职业
         * @param 发型
         * @param 激活码
         *
         * sendReqCreateRoleMessage  1003
         */
        UserModel.prototype.send3 = function (roleName, sex, career, hair, activation, s) {
            var output = this.getO();
            output.writeString(roleName);
            output.writeVarInt(sex, false);
            output.writeVarInt(career, false);
            output.writeVarInt(hair, false);
            output.writeString(activation);
            this.send(1003 /* UserModelCMD.CMDReqCreateRoleMessage */, output, s);
        };
        /**
         *
         * 随机名字
         * @param 性别
         *
         * sendReqRandomNameMessage  1004
         */
        UserModel.prototype.send4 = function (sex, s) {
            var output = this.getO();
            output.writeVarInt(sex, false);
            this.send(1004 /* UserModelCMD.CMDReqRandomNameMessage */, output, s);
        };
        /**
         *
         * 客户端请求进入游戏
         * @param 角色id
         * @param token
         *
         * sendReqEnterGameMessage  1008
         */
        UserModel.prototype.send8 = function (rid, token, s) {
            var output = this.getO();
            output.writeLong(rid);
            output.writeString(token);
            this.send(1008 /* UserModelCMD.CMDReqEnterGameMessage */, output, s);
        };
        /**
         *
         * 请求返回角色列表界面
         *
         * sendReqQuitGameMessage  1034
         */
        UserModel.prototype.send34 = function (s) {
            var output = this.getO();
            this.send(1034 /* UserModelCMD.CMDReqQuitGameMessage */, output, s);
        };
        /**
         *
         * 请求删除角色
         * @param 角色id
         *
         * sendReqDeleteRoleMessage  1035
         */
        UserModel.prototype.send35 = function (rid, s) {
            var output = this.getO();
            output.writeLong(rid);
            this.send(1035 /* UserModelCMD.CMDReqDeleteRoleMessage */, output, s);
        };
        /**
         *
         * 请求服务器环境参数
         *
         * sendReqServerEnvirMessage  1041
         */
        UserModel.prototype.send41 = function (s) {
            var output = this.getO();
            this.send(1041 /* UserModelCMD.CMDReqServerEnvirMessage */, output, s);
        };
        /**
         *
         *
         *
         * sendReqRoleDisplaySettingInfoMessage  1102
         */
        UserModel.prototype.send102 = function (s) {
            var output = this.getO();
            this.send(1102 /* UserModelCMD.CMDReqRoleDisplaySettingInfoMessage */, output, s);
        };
        /**
         *
         *
         * @param 展示设置
         *
         * sendReqRoleDisplaySettingAlterMessage  1104
         */
        UserModel.prototype.send104 = function (display, s) {
            var output = this.getO();
            if (display != null) {
                output.writeByte(1);
                output.writeVarInt(display.wing, false);
                output.writeVarInt(display.anonymous, false);
            }
            else {
                output.writeByte(0);
            }
            this.send(1104 /* UserModelCMD.CMDReqRoleDisplaySettingAlterMessage */, output, s);
        };
        UserModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 1010 /* UserModelCMD.CMDResHeartMessage */:
                    var resHeartMessage = input.readLong(); //服务器时间 毫秒
                    this.sendNotif(cmd, resHeartMessage);
                    break;
                case 1002 /* UserModelCMD.CMDResLoginFailedMessage */:
                    var resLoginFailedMessage = {};
                    resLoginFailedMessage["code"] = input.readVarInt(false); //0
                    resLoginFailedMessage["msg"] = input.readString(); //msg
                    this.sendNotif(cmd, resLoginFailedMessage);
                    break;
                case 1007 /* UserModelCMD.CMDResLoginMessage */:
                    var resLoginMessage = {};
                    resLoginMessage["username"] = input.readString(); //用户名
                    resLoginMessage["identity"] = input.readString(); //身份证
                    resLoginMessage["uid"] = input.readLong(); //玩家id
                    resLoginMessage["lastSel"] = input.readLong(); //上次选择登录的角色rid
                    var roleListLength1 = input.readShort();
                    resLoginMessage["roleList"] = [];
                    for (var roleListi1 = 0; roleListi1 < roleListLength1; roleListi1++) {
                        if (input.readByte() != 0) {
                            var temp992 = resLoginMessage["roleList"][roleListi1] = {}; //当前玩家列表
                            temp992["rid"] = input.readLong(); //角色id
                            temp992["name"] = input.readString(); //角色名字
                            temp992["sex"] = input.readVarInt(false); //性别
                            temp992["career"] = input.readVarInt(false); //职业
                            temp992["level"] = input.readVarInt(false); //等级
                            temp992["rein"] = input.readVarInt(false); //转生等级
                            temp992["hair"] = input.readVarInt(false); //发型
                        }
                        else {
                            resLoginMessage["roleList"][roleListi1] = null;
                        }
                    }
                    resLoginMessage["remaining"] = input.readVarInt(false); //剩余游玩时间(s) -1表示没有限制
                    resLoginMessage["needActivation"] = input.readVarInt(false); //是否需要激活码 0不需要 其他需要
                    resLoginMessage["observer"] = input.readBoolean(); //是否是主播号（观察者）
                    this.sendNotif(cmd, resLoginMessage);
                    break;
                case 1018 /* UserModelCMD.CMDResCreateRoleSuccessMessage */:
                    var roleInfoLength1 = input.readByte();
                    if (roleInfoLength1 != 0) {
                        var resCreateRoleSuccessMessage = {}; //
                        resCreateRoleSuccessMessage["rid"] = input.readLong(); //角色id
                        resCreateRoleSuccessMessage["name"] = input.readString(); //角色名字
                        resCreateRoleSuccessMessage["sex"] = input.readVarInt(false); //性别
                        resCreateRoleSuccessMessage["career"] = input.readVarInt(false); //职业
                        resCreateRoleSuccessMessage["level"] = input.readVarInt(false); //等级
                        resCreateRoleSuccessMessage["rein"] = input.readVarInt(false); //转生等级
                        resCreateRoleSuccessMessage["hair"] = input.readVarInt(false); //发型
                    }
                    this.sendNotif(cmd, resCreateRoleSuccessMessage);
                    break;
                case 1005 /* UserModelCMD.CMDResRandomNameMessage */:
                    var resRandomNameMessage = input.readString(); //角色名字
                    this.sendNotif(cmd, resRandomNameMessage);
                    break;
                case 1006 /* UserModelCMD.CMDResEnterGameMessage */:
                    var resEnterGameMessage = {};
                    resEnterGameMessage["rid"] = input.readLong(); //角色id
                    resEnterGameMessage["serverTime"] = input.readLong(); //服务器时间
                    resEnterGameMessage["token"] = input.readString(); //token
                    this.sendNotif(cmd, resEnterGameMessage);
                    break;
                case 1011 /* UserModelCMD.CMDResVersionErrorMessage */:
                    var resVersionErrorMessage = input.readVarInt(false); //版本
                    this.sendNotif(cmd, resVersionErrorMessage);
                    break;
                case 1036 /* UserModelCMD.CMDResDeleteRoleMessage */:
                    var resDeleteRoleMessage = input.readLong(); //删除角色id
                    this.sendNotif(cmd, resDeleteRoleMessage);
                    break;
                case 1042 /* UserModelCMD.CMDResServerEnvirMessage */:
                    var resServerEnvirMessage = {};
                    resServerEnvirMessage["serverStartTime"] = input.readVarInt(false); //服务器开服时间 当天0点时间戳
                    resServerEnvirMessage["serverMergeTime"] = input.readVarInt(false); //服务器合服时间 当天0点时间戳 0表示尚未合服
                    resServerEnvirMessage["serverMergeTimes"] = input.readVarInt(false); //服务器合服次数
                    this.sendNotif(cmd, resServerEnvirMessage);
                    break;
                case 1043 /* UserModelCMD.CMDResReConnectionResultMessage */:
                    var resReConnectionResultMessage = input.readBoolean(); //是否成功
                    this.sendNotif(cmd, resReConnectionResultMessage);
                    break;
                case 1044 /* UserModelCMD.CMDResForcedOfflineMessage */:
                    this.sendNotif(cmd);
                    break;
                case 1103 /* UserModelCMD.CMDResRoleDisplaySettingInfoMessage */:
                    var displayLength1 = input.readByte();
                    if (displayLength1 != 0) {
                        var resRoleDisplaySettingInfoMessage = {}; //展示设置
                        resRoleDisplaySettingInfoMessage["wing"] = input.readVarInt(false); //
                        resRoleDisplaySettingInfoMessage["anonymous"] = input.readVarInt(false); //神秘人 0不是 1是
                    }
                    this.sendNotif(cmd, resRoleDisplaySettingInfoMessage);
                    break;
            }
        };
        return UserModel;
    }(ModelBase));
    net.UserModel = UserModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:5
     */
    var UsingModel = /** @class */ (function (_super) {
        __extends(UsingModel, _super);
        function UsingModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(5012 /* UsingModelCMD.CMDResUsingBlessingItemMessage */);
            thisObj.reg(5021 /* UsingModelCMD.CMDResItemUseInfoMessage */);
            return _this;
        }
        UsingModel.ins = function () {
            if (!this._ins)
                this._ins = new UsingModel();
            return this._ins;
        };
        /**
         *
         * 请求使用道具
         * @param 0或者元神唯一id
         * @param 道具唯一id
         * @param 使用数量
         *
         * sendReqUsingItemMessage  5001
         */
        UsingModel.prototype.send1 = function (uId, itemId, count, params, s) {
            var output = this.getO();
            output.writeLong(uId);
            output.writeLong(itemId);
            output.writeVarInt(count, false);
            output.writeShort(params.length);
            for (var paramsi1 = 0; paramsi1 < params.length; paramsi1++) {
                output.writeString(params[paramsi1]);
            }
            this.send(5001 /* UsingModelCMD.CMDReqUsingItemMessage */, output, s);
        };
        /**
         *
         * 请求使用
         * @param 使用的道具唯一id
         *
         * sendReqUsingBlessingItemMessage  5011
         */
        UsingModel.prototype.send11 = function (uid, s) {
            var output = this.getO();
            output.writeLong(uid);
            this.send(5011 /* UsingModelCMD.CMDReqUsingBlessingItemMessage */, output, s);
        };
        /**
         *
         * 结束
         *
         * sendReqUsingBlessingItemFinishMessage  5013
         */
        UsingModel.prototype.send13 = function (s) {
            var output = this.getO();
            this.send(5013 /* UsingModelCMD.CMDReqUsingBlessingItemFinishMessage */, output, s);
        };
        /**
         *
         * 请求道具使用次数信息
         *
         * sendReqItemUseInfoMessage  5002
         */
        UsingModel.prototype.send2 = function (s) {
            var output = this.getO();
            this.send(5002 /* UsingModelCMD.CMDReqItemUseInfoMessage */, output, s);
        };
        UsingModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 5012 /* UsingModelCMD.CMDResUsingBlessingItemMessage */:
                    var resUsingBlessingItemMessage = input.readVarInt(false); //抽中的
                    this.sendNotif(cmd, resUsingBlessingItemMessage);
                    break;
                case 5021 /* UsingModelCMD.CMDResItemUseInfoMessage */:
                    var resItemUseInfoMessage = {};
                    var itemUseBeansLength1 = input.readShort();
                    resItemUseInfoMessage["itemUseBeans"] = [];
                    for (var itemUseBeansi1 = 0; itemUseBeansi1 < itemUseBeansLength1; itemUseBeansi1++) {
                        if (input.readByte() != 0) {
                            var temp805 = resItemUseInfoMessage["itemUseBeans"][itemUseBeansi1] = {}; //道具使用次数列表
                            temp805["itemId"] = input.readVarInt(false); //道具id
                            temp805["count"] = input.readVarInt(false); //使用次数
                        }
                        else {
                            resItemUseInfoMessage["itemUseBeans"][itemUseBeansi1] = null;
                        }
                    }
                    resItemUseInfoMessage["type"] = input.readVarInt(false); //0请求1使用返回
                    this.sendNotif(cmd, resItemUseInfoMessage);
                    break;
            }
        };
        return UsingModel;
    }(ModelBase));
    net.UsingModel = UsingModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:28
     */
    var VipModel = /** @class */ (function (_super) {
        __extends(VipModel, _super);
        function VipModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(28002 /* VipModelCMD.CMDResVipInfoMessage */);
            thisObj.reg(28005 /* VipModelCMD.CMDResVipRewardAcquireMessage */);
            return _this;
        }
        VipModel.ins = function () {
            if (!this._ins)
                this._ins = new VipModel();
            return this._ins;
        };
        /**
         *
         *
         *
         * sendReqVipInfoMessage  28001
         */
        VipModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(28001 /* VipModelCMD.CMDReqVipInfoMessage */, output, s);
        };
        /**
         *
         *
         * @param
         *
         * sendReqVipGoalSubmitMessage  28003
         */
        VipModel.prototype.send3 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(28003 /* VipModelCMD.CMDReqVipGoalSubmitMessage */, output, s);
        };
        /**
         *
         *
         * @param
         *
         * sendReqVipRewardAcquireMessage  28004
         */
        VipModel.prototype.send4 = function (level, s) {
            var output = this.getO();
            output.writeVarInt(level, false);
            this.send(28004 /* VipModelCMD.CMDReqVipRewardAcquireMessage */, output, s);
        };
        VipModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 28002 /* VipModelCMD.CMDResVipInfoMessage */:
                    var resVipInfoMessage = {};
                    resVipInfoMessage["vipLevel"] = input.readVarInt(false); //
                    resVipInfoMessage["hints"] = input.readVarInt(false); //0-正常显示 1-完成目标才能接取
                    var vipListLength1 = input.readShort();
                    resVipInfoMessage["vipList"] = [];
                    for (var vipListi1 = 0; vipListi1 < vipListLength1; vipListi1++) {
                        if (input.readByte() != 0) {
                            var temp930 = resVipInfoMessage["vipList"][vipListi1] = {}; //
                            temp930["level"] = input.readVarInt(false); //
                            temp930["state"] = input.readVarInt(false); //领取状态
                        }
                        else {
                            resVipInfoMessage["vipList"][vipListi1] = null;
                        }
                    }
                    var goalsLength1 = input.readShort();
                    resVipInfoMessage["goals"] = [];
                    for (var goalsi1 = 0; goalsi1 < goalsLength1; goalsi1++) {
                        if (input.readByte() != 0) {
                            var temp931 = resVipInfoMessage["goals"][goalsi1] = {}; //
                            temp931["taskId"] = input.readVarInt(false); //任务id
                            temp931["state"] = input.readVarInt(false); //状态 1 未接 2 已接 3 已完成 4 已提交
                            temp931["available"] = input.readVarInt(false); //可用时间 时间戳，当前时间如果小于该时间，说明任务还在准备中，无法完成
                            var goalDataListLength1 = input.readShort();
                            temp931["goalDataList"] = [];
                            for (var goalDataListi1 = 0; goalDataListi1 < goalDataListLength1; goalDataListi1++) {
                                if (input.readByte() != 0) {
                                    var temp932 = temp931["goalDataList"][goalDataListi1] = {}; //目标数据
                                    temp932["goalId"] = input.readVarInt(false); //目标id
                                    temp932["progress"] = input.readVarInt(false); //当前完成进度
                                    temp932["goalType"] = input.readVarInt(false); //目标类型
                                    temp932["goalCount"] = input.readVarInt(false); //目标需求数量
                                    var goalParamsLength1 = input.readShort();
                                    temp932["goalParams"] = new Array(goalParamsLength1);
                                    for (var goalParamsi1 = 0; goalParamsi1 < goalParamsLength1; goalParamsi1++) {
                                        temp932["goalParams"][goalParamsi1] = input.readVarInt(false); //目标参数
                                    }
                                }
                                else {
                                    temp931["goalDataList"][goalDataListi1] = null;
                                }
                            }
                        }
                        else {
                            resVipInfoMessage["goals"][goalsi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resVipInfoMessage);
                    break;
                case 28005 /* VipModelCMD.CMDResVipRewardAcquireMessage */:
                    var resVipRewardAcquireMessage = {};
                    resVipRewardAcquireMessage["isSuccess"] = input.readVarInt(false); //是否成功 1-成功 0-失败
                    resVipRewardAcquireMessage["vipLevel"] = input.readVarInt(false); //VIP等级
                    this.sendNotif(cmd, resVipRewardAcquireMessage);
                    break;
            }
        };
        return VipModel;
    }(ModelBase));
    net.VipModel = VipModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:212
     */
    var WeekShopModel = /** @class */ (function (_super) {
        __extends(WeekShopModel, _super);
        function WeekShopModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(212002 /* WeekShopModelCMD.CMDResWeekShopInfoMessage */);
            thisObj.reg(212006 /* WeekShopModelCMD.CMDResLuckyShopInfoMessage */);
            return _this;
        }
        WeekShopModel.ins = function () {
            if (!this._ins)
                this._ins = new WeekShopModel();
            return this._ins;
        };
        /**
         *
         * 请求幸运商店信息
         *
         * sendReqWeekShopInfoMessage  212001
         */
        WeekShopModel.prototype.send1 = function (s) {
            var output = this.getO();
            this.send(212001 /* WeekShopModelCMD.CMDReqWeekShopInfoMessage */, output, s);
        };
        /**
         *
         * 请求刷新幸运商店
         *
         * sendReqWeekShopRefreshMessage  212003
         */
        WeekShopModel.prototype.send3 = function (s) {
            var output = this.getO();
            this.send(212003 /* WeekShopModelCMD.CMDReqWeekShopRefreshMessage */, output, s);
        };
        /**
         *
         * 请求幸运商店购买
         * @param 格位
         *
         * sendReqWeekShopBuyMessage  212004
         */
        WeekShopModel.prototype.send4 = function (index, s) {
            var output = this.getO();
            output.writeVarInt(index, false);
            this.send(212004 /* WeekShopModelCMD.CMDReqWeekShopBuyMessage */, output, s);
        };
        /**
         *
         * 请求幸运商店信息
         *
         * sendReqLuckyShopInfoMessage  212005
         */
        WeekShopModel.prototype.send5 = function (s) {
            var output = this.getO();
            this.send(212005 /* WeekShopModelCMD.CMDReqLuckyShopInfoMessage */, output, s);
        };
        /**
         *
         * 请求刷新幸运商店
         *
         * sendReqLuckyShopRefreshMessage  212007
         */
        WeekShopModel.prototype.send7 = function (s) {
            var output = this.getO();
            this.send(212007 /* WeekShopModelCMD.CMDReqLuckyShopRefreshMessage */, output, s);
        };
        /**
         *
         * 请求幸运商店购买
         * @param 格位
         *
         * sendReqLuckyShopBuyMessage  212008
         */
        WeekShopModel.prototype.send8 = function (index, s) {
            var output = this.getO();
            output.writeVarInt(index, false);
            this.send(212008 /* WeekShopModelCMD.CMDReqLuckyShopBuyMessage */, output, s);
        };
        WeekShopModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 212002 /* WeekShopModelCMD.CMDResWeekShopInfoMessage */:
                    var resWeekShopInfoMessage = {};
                    resWeekShopInfoMessage["count"] = input.readVarInt(false); //已购买次数
                    resWeekShopInfoMessage["max"] = input.readVarInt(false); //总购买次数
                    resWeekShopInfoMessage["refresh"] = input.readVarInt(false); //已刷新次数
                    resWeekShopInfoMessage["refreshTime"] = input.readVarInt(false); //下一次免费刷新时间
                    resWeekShopInfoMessage["costId"] = input.readVarInt(false); //刷新道具id
                    resWeekShopInfoMessage["costPrice"] = input.readVarInt(false); //刷新道具数量
                    var waresLength1 = input.readShort();
                    resWeekShopInfoMessage["wares"] = [];
                    for (var waresi1 = 0; waresi1 < waresLength1; waresi1++) {
                        if (input.readByte() != 0) {
                            var temp1034 = resWeekShopInfoMessage["wares"][waresi1] = {}; //商品信息
                            temp1034["cfgId"] = input.readVarInt(false); //
                            temp1034["discount"] = input.readVarInt(false); //折扣
                            temp1034["sale"] = input.readVarInt(false); //是否已卖出 0:未买 1:已买
                            temp1034["useCount"] = input.readVarInt(false); //已买次数
                        }
                        else {
                            resWeekShopInfoMessage["wares"][waresi1] = null;
                        }
                    }
                    this.sendNotif(cmd, resWeekShopInfoMessage);
                    break;
                case 212006 /* WeekShopModelCMD.CMDResLuckyShopInfoMessage */:
                    var resLuckyShopInfoMessage = {};
                    resLuckyShopInfoMessage["count"] = input.readVarInt(false); //已购买次数
                    resLuckyShopInfoMessage["max"] = input.readVarInt(false); //总购买次数
                    resLuckyShopInfoMessage["refresh"] = input.readVarInt(false); //已刷新次数
                    resLuckyShopInfoMessage["refreshTime"] = input.readVarInt(false); //下一次免费刷新时间
                    resLuckyShopInfoMessage["costId"] = input.readVarInt(false); //刷新道具id
                    resLuckyShopInfoMessage["costPrice"] = input.readVarInt(false); //刷新道具数量
                    var waresLength2 = input.readShort();
                    resLuckyShopInfoMessage["wares"] = [];
                    for (var waresi2 = 0; waresi2 < waresLength2; waresi2++) {
                        if (input.readByte() != 0) {
                            var temp1035 = resLuckyShopInfoMessage["wares"][waresi2] = {}; //商品信息
                            temp1035["cfgId"] = input.readVarInt(false); //
                            temp1035["discount"] = input.readVarInt(false); //折扣
                            temp1035["sale"] = input.readVarInt(false); //是否已卖出 0:未买 1:已买
                            temp1035["useCount"] = input.readVarInt(false); //已买次数
                        }
                        else {
                            resLuckyShopInfoMessage["wares"][waresi2] = null;
                        }
                    }
                    this.sendNotif(cmd, resLuckyShopInfoMessage);
                    break;
            }
        };
        return WeekShopModel;
    }(ModelBase));
    net.WeekShopModel = WeekShopModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:27
     */
    var WelfareModel = /** @class */ (function (_super) {
        __extends(WelfareModel, _super);
        function WelfareModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(27001 /* WelfareModelCMD.CMDResSignRewardInfoMessage */);
            thisObj.reg(27006 /* WelfareModelCMD.CMDResLoginPushOnlineRewardMessage */);
            thisObj.reg(27012 /* WelfareModelCMD.CMDResTreasureGrowInfoMessage */);
            thisObj.reg(27015 /* WelfareModelCMD.CMDResGetOfflineRewardMessage */);
            return _this;
        }
        WelfareModel.ins = function () {
            if (!this._ins)
                this._ins = new WelfareModel();
            return this._ins;
        };
        /**
         *
         * 请求签到领奖
         * @param 签到奖励id
         * @param 类型 1第一次领取 2再次领取
         *
         * sendReqGetSignRewardMessage  27002
         */
        WelfareModel.prototype.send2 = function (rewardId, type, s) {
            var output = this.getO();
            output.writeVarInt(rewardId, false);
            output.writeVarInt(type, false);
            this.send(27002 /* WelfareModelCMD.CMDReqGetSignRewardMessage */, output, s);
        };
        /**
         *
         * 请求领取累计签到天数奖励
         * @param 编号
         *
         * sendReqDrawSummaryDayRewardMessage  27005
         */
        WelfareModel.prototype.send5 = function (index, s) {
            var output = this.getO();
            output.writeVarInt(index, false);
            this.send(27005 /* WelfareModelCMD.CMDReqDrawSummaryDayRewardMessage */, output, s);
        };
        /**
         *
         * 领取在线奖励
         * @param 配表中id
         *
         * sendReqReceiveOnlineRewardMessage  27007
         */
        WelfareModel.prototype.send7 = function (RewardId, s) {
            var output = this.getO();
            output.writeVarInt(RewardId, false);
            this.send(27007 /* WelfareModelCMD.CMDReqReceiveOnlineRewardMessage */, output, s);
        };
        /**
         *
         * 请求签到领奖信息
         *
         * sendReqSignRewardInfoMessage  27009
         */
        WelfareModel.prototype.send9 = function (s) {
            var output = this.getO();
            this.send(27009 /* WelfareModelCMD.CMDReqSignRewardInfoMessage */, output, s);
        };
        /**
         *
         * 请求当日在线时长以及已领取的奖励
         *
         * sendReqLoginPushOnlineRewardMessage  27010
         */
        WelfareModel.prototype.send10 = function (s) {
            var output = this.getO();
            this.send(27010 /* WelfareModelCMD.CMDReqLoginPushOnlineRewardMessage */, output, s);
        };
        /**
         *
         * 请求传世宝典成长信息
         *
         * sendReqTreasureGrowInfoMessage  27011
         */
        WelfareModel.prototype.send11 = function (s) {
            var output = this.getO();
            this.send(27011 /* WelfareModelCMD.CMDReqTreasureGrowInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取传世宝典成长奖励
         * @param 配表中id
         *
         * sendReqGetTreasureGrowRewardMessage  27013
         */
        WelfareModel.prototype.send13 = function (cfgId, s) {
            var output = this.getO();
            output.writeVarInt(cfgId, false);
            this.send(27013 /* WelfareModelCMD.CMDReqGetTreasureGrowRewardMessage */, output, s);
        };
        /**
         *
         * 请求离线奖励面板信息
         *
         * sendReqOfflinePanelInfoMessage  27014
         */
        WelfareModel.prototype.send14 = function (s) {
            var output = this.getO();
            this.send(27014 /* WelfareModelCMD.CMDReqOfflinePanelInfoMessage */, output, s);
        };
        /**
         *
         * 请求领取离线奖励
         *
         * sendReqGetOfflineRewardMessage  27016
         */
        WelfareModel.prototype.send16 = function (s) {
            var output = this.getO();
            this.send(27016 /* WelfareModelCMD.CMDReqGetOfflineRewardMessage */, output, s);
        };
        WelfareModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 27001 /* WelfareModelCMD.CMDResSignRewardInfoMessage */:
                    var resSignRewardInfoMessage = {};
                    var signBeanListLength1 = input.readShort();
                    resSignRewardInfoMessage["signBeanList"] = [];
                    for (var signBeanListi1 = 0; signBeanListi1 < signBeanListLength1; signBeanListi1++) {
                        if (input.readByte() != 0) {
                            var temp806 = resSignRewardInfoMessage["signBeanList"][signBeanListi1] = {}; //签到列表
                            temp806["rewardId"] = input.readVarInt(false); //签到奖励id
                            temp806["state"] = input.readVarInt(false); //领取状态 0不可领取 1可领取 2可再次领取 3已全部领取
                        }
                        else {
                            resSignRewardInfoMessage["signBeanList"][signBeanListi1] = null;
                        }
                    }
                    var drawDaysListLength1 = input.readShort();
                    resSignRewardInfoMessage["drawDaysList"] = new Array(drawDaysListLength1);
                    for (var drawDaysListi1 = 0; drawDaysListi1 < drawDaysListLength1; drawDaysListi1++) {
                        resSignRewardInfoMessage["drawDaysList"][drawDaysListi1] = input.readVarInt(false); //累计天数奖励已领取列表
                    }
                    resSignRewardInfoMessage["signDaysForever"] = input.readVarInt(false); //永久签到天数
                    this.sendNotif(cmd, resSignRewardInfoMessage);
                    break;
                case 27006 /* WelfareModelCMD.CMDResLoginPushOnlineRewardMessage */:
                    var resLoginPushOnlineRewardMessage = {};
                    var receivedRewardsLength1 = input.readShort();
                    resLoginPushOnlineRewardMessage["receivedRewards"] = new Array(receivedRewardsLength1);
                    for (var receivedRewardsi1 = 0; receivedRewardsi1 < receivedRewardsLength1; receivedRewardsi1++) {
                        resLoginPushOnlineRewardMessage["receivedRewards"][receivedRewardsi1] = input.readVarInt(false); //已经领取的奖励列表{配置表id}
                    }
                    resLoginPushOnlineRewardMessage["onlineSeconds"] = input.readVarInt(false); //在线时间
                    this.sendNotif(cmd, resLoginPushOnlineRewardMessage);
                    break;
                case 27012 /* WelfareModelCMD.CMDResTreasureGrowInfoMessage */:
                    var resTreasureGrowInfoMessage = {};
                    var infoListLength1 = input.readShort();
                    resTreasureGrowInfoMessage["infoList"] = [];
                    for (var infoListi1 = 0; infoListi1 < infoListLength1; infoListi1++) {
                        if (input.readByte() != 0) {
                            var temp807 = resTreasureGrowInfoMessage["infoList"][infoListi1] = {}; //信息列表
                            temp807["rewardId"] = input.readVarInt(false); //签到奖励id
                            temp807["state"] = input.readVarInt(false); //领取状态 0不可领取 1可领取 2可再次领取 3已全部领取
                        }
                        else {
                            resTreasureGrowInfoMessage["infoList"][infoListi1] = null;
                        }
                    }
                    resTreasureGrowInfoMessage["sign"] = input.readVarInt(false); //领取奖励时返回 1 其他 0
                    this.sendNotif(cmd, resTreasureGrowInfoMessage);
                    break;
                case 27015 /* WelfareModelCMD.CMDResGetOfflineRewardMessage */:
                    var resGetOfflineRewardMessage = {};
                    var rewardLength1 = input.readShort();
                    resGetOfflineRewardMessage["reward"] = [];
                    for (var rewardi1 = 0; rewardi1 < rewardLength1; rewardi1++) {
                        if (input.readByte() != 0) {
                            var temp808 = resGetOfflineRewardMessage["reward"][rewardi1] = {}; //奖励列表
                            temp808["itemId"] = input.readVarInt(false); //config id
                            temp808["itemCount"] = input.readVarInt(false); //item count
                        }
                        else {
                            resGetOfflineRewardMessage["reward"][rewardi1] = null;
                        }
                    }
                    resGetOfflineRewardMessage["offlineTime"] = input.readVarInt(false); //累计离线时间（秒）
                    this.sendNotif(cmd, resGetOfflineRewardMessage);
                    break;
            }
        };
        return WelfareModel;
    }(ModelBase));
    net.WelfareModel = WelfareModel;
})(net || (net = {}));
var net;
(function (net) {
    /**
     * Do not modify!!!
     * groupid:221
     */
    var WingModel = /** @class */ (function (_super) {
        __extends(WingModel, _super);
        function WingModel() {
            var _this = _super.call(this) || this;
            var thisObj = _this;
            thisObj.reg(221002 /* WingModelCMD.CMDResWingInfoMessage */);
            thisObj.reg(221004 /* WingModelCMD.CMDResWingLevelUpMessage */);
            return _this;
        }
        WingModel.ins = function () {
            if (!this._ins)
                this._ins = new WingModel();
            return this._ins;
        };
        /**
         *
         * 请求羽翼信息
         * @param 唯一id
         *
         * sendReqWingInfoMessage  221001
         */
        WingModel.prototype.send1 = function (uid, s) {
            var output = this.getO();
            output.writeLong(uid);
            this.send(221001 /* WingModelCMD.CMDReqWingInfoMessage */, output, s);
        };
        /**
         *
         * 请求升级羽翼
         * @param 羽翼类型
         * @param 唯一id
         *
         * sendReqWingLevelUpMessage  221003
         */
        WingModel.prototype.send3 = function (type, uid, s) {
            var output = this.getO();
            output.writeVarInt(type, false);
            output.writeLong(uid);
            this.send(221003 /* WingModelCMD.CMDReqWingLevelUpMessage */, output, s);
        };
        /**
         *
         * 请求羽翼进阶信息
         * @param 唯一id
         * @param 羽翼类型
         *
         * sendReqWingAwakeLevelUpMessage  221005
         */
        WingModel.prototype.send5 = function (uid, type, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(type, false);
            this.send(221005 /* WingModelCMD.CMDReqWingAwakeLevelUpMessage */, output, s);
        };
        /**
         *
         * 请求羽翼穿戴信息
         * @param 唯一id
         * @param 羽翼类型
         * @param 穿戴觉醒等级
         *
         * sendReqWingWearMessage  221006
         */
        WingModel.prototype.send6 = function (uid, type, wear, s) {
            var output = this.getO();
            output.writeLong(uid);
            output.writeVarInt(type, false);
            output.writeVarInt(wear, false);
            this.send(221006 /* WingModelCMD.CMDReqWingWearMessage */, output, s);
        };
        /**
         *
         * 请求卸下羽翼信息
         * @param 唯一id
         *
         * sendReqTakeOffWingWearMessage  221007
         */
        WingModel.prototype.send7 = function (uid, s) {
            var output = this.getO();
            output.writeLong(uid);
            this.send(221007 /* WingModelCMD.CMDReqTakeOffWingWearMessage */, output, s);
        };
        WingModel.prototype.dealBufferMessage = function (cmd, bytes) {
            _super.prototype.dealBufferMessage.call(this, cmd, bytes);
            var input = this.input;
            switch (cmd) {
                case 221002 /* WingModelCMD.CMDResWingInfoMessage */:
                    var resWingInfoMessage = {};
                    var wingListLength1 = input.readShort();
                    resWingInfoMessage["wingList"] = [];
                    for (var wingListi1 = 0; wingListi1 < wingListLength1; wingListi1++) {
                        if (input.readByte() != 0) {
                            var temp21 = resWingInfoMessage["wingList"][wingListi1] = {}; //羽翼信息
                            temp21["level"] = input.readVarInt(false); //等级
                            temp21["rate"] = input.readVarInt(false); //进度
                            temp21["type"] = input.readVarInt(false); //类型
                            temp21["awakeLevel"] = input.readVarInt(false); //觉醒等级
                            temp21["wear"] = input.readVarInt(false); //穿戴觉醒等级
                        }
                        else {
                            resWingInfoMessage["wingList"][wingListi1] = null;
                        }
                    }
                    resWingInfoMessage["uid"] = input.readLong(); //唯一id
                    this.sendNotif(cmd, resWingInfoMessage);
                    break;
                case 221004 /* WingModelCMD.CMDResWingLevelUpMessage */:
                    var resWingLevelUpMessage = {};
                    resWingLevelUpMessage["uid"] = input.readLong(); //唯一id
                    var wingBeanLength1 = input.readByte();
                    if (wingBeanLength1 != 0) {
                        var temp22 = resWingLevelUpMessage["wingBean"] = {}; //羽翼信息
                        temp22["level"] = input.readVarInt(false); //等级
                        temp22["rate"] = input.readVarInt(false); //进度
                        temp22["type"] = input.readVarInt(false); //类型
                        temp22["awakeLevel"] = input.readVarInt(false); //觉醒等级
                        temp22["wear"] = input.readVarInt(false); //穿戴觉醒等级
                    }
                    resWingLevelUpMessage["hit"] = input.readVarInt(false); //暴击
                    resWingLevelUpMessage["type"] = input.readVarInt(false); //1:升星 2:觉醒
                    this.sendNotif(cmd, resWingLevelUpMessage);
                    break;
            }
        };
        return WingModel;
    }(ModelBase));
    net.WingModel = WingModel;
})(net || (net = {}));
var Control = /** @class */ (function () {
    function Control() {
    }
    return Control;
}());
